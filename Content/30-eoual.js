ASPx.IS(function(ASPx, dx, DevExpress){
(function() {
var CheckingScriptObjectCommand = ASPx.CreateClass(null, {
 constructor: function(scriptName, markerObjectName) {
  this.scriptName = scriptName;
  this.markerObjectName = markerObjectName;
  this.isExisted = false;
 },
 Run: function() {
  var markerObj = this.GetMarkerObject();
  this.isExisted = !!markerObj;
  if(this.isExisted)
   markerObj.DXPatched = true;
 },
 GetErrorMessage: function() {
  return this.GetErrorMessageCore(true);
 },
 GetErrorMessageCore: function(isScriptRequired){
  var markerObj = this.GetMarkerObject();
  if(this.isExisted && markerObj && markerObj.DXPatched || !isScriptRequired && !markerObj)
   return null;
  if(isScriptRequired && !this.GetMarkerObject()){
   if(this.isExisted)
    return this.scriptName + " script was attached but has been overridden.";
   else
    return this.scriptName + " script was not attached.";
  }
  if(!this.isExisted)
   return this.scriptName + " script was attached after DevExpress scripts.";
  return this.scriptName + " script was attached multiple times and mixed up with DevExpress scripts.";
 },
 GetMarkerObject: function() {
  return ASPx.GetGlobalObject(this.markerObjectName);
 }
});
var PatchScriptCommand = ASPx.CreateClass(CheckingScriptObjectCommand, {
 constructor: function(scriptName, markerObjectName, patchMethod, required) {
  this.constructor.prototype.constructor.call(this, scriptName, markerObjectName);
  this.required = required;
  this.patchMethod = patchMethod;
 },
 Run: function() {
  CheckingScriptObjectCommand.prototype.Run.call(this);
  if(this.isExisted)
   this.patchMethod();
 },
 GetErrorMessage: function() {
  return this.GetErrorMessageCore(this.required);
 }
});
var ExternalScriptProcessor = ASPx.CreateClass(null, {
 constructor: function() {
  this.commands = {};
 },
 Process: function(scriptName, markerObjectName, patchMethod, required) {
  var newCommand = this.CreateCommand(scriptName, markerObjectName, patchMethod, !!required);
  var oldCommand = this.commands[markerObjectName];
  if(oldCommand) {
   if(!oldCommand.patchMethod && !newCommand.patchMethod)
    newCommand = null;
   else if(newCommand.patchMethod && (!oldCommand.patchMethod || oldCommand.required))
    newCommand.required = true;
   else if(oldCommand.patchMethod && !newCommand.patchMethod) {
    oldCommand.required = true;
    newCommand = null;
   }
  }
  if(newCommand) {
   this.commands[markerObjectName] = newCommand;
   newCommand.Run();
  }
 },
 CreateCommand: function(scriptName, markerObjectName, patchMethod, required) {
  if(patchMethod)
   return new PatchScriptCommand(scriptName, markerObjectName, patchMethod, required);
  return new CheckingScriptObjectCommand(scriptName, markerObjectName);
 },
 ShowErrorMessages: function() {
  var messages = this.GetErrorMessages();
  var console = window.console;
  if(!messages.length || !console || !ASPx.IsFunction(console.error))
   return;
  for(var i = 0; i < messages.length; i++) {
   console.error(messages[i]);
  }
  ASPx.ShowKBErrorMessage("Please check the correctness of script registration on the page. For details, see ", "T272309");
 },
 GetErrorMessages: function() {
  var messages = [];
  for (var key in this.commands) {
   if (this.commands.hasOwnProperty(key)) {
    var message = this.commands[key].GetErrorMessage();
    if (message)
     messages.push(message);
   }
  }
  return messages;
 }
});
ExternalScriptProcessor.Instance = null;
ExternalScriptProcessor.getInstance = function() {
 if(!ExternalScriptProcessor.Instance)
  ExternalScriptProcessor.Instance = new ExternalScriptProcessor();
 return ExternalScriptProcessor.Instance;
};
ASPx.ExternalScriptProcessor = ExternalScriptProcessor;
})();
(function module(ASPx) {
ASPx.modules.Controls = module;
var ASPxClientBeginCallbackEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(command){
  this.constructor.prototype.constructor.call(this);
  this.command = command;
 }
});
var ASPxClientGlobalBeginCallbackEventArgs = ASPx.CreateClass(ASPxClientBeginCallbackEventArgs, {
 constructor: function(control, command){
  this.constructor.prototype.constructor.call(this, command);
  this.control = control;
 }
});
var ASPxClientEndCallbackEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(command){
  this.constructor.prototype.constructor.call(this);
  this.command = command;
 }
});
var ASPxClientGlobalEndCallbackEventArgs = ASPx.CreateClass(ASPxClientEndCallbackEventArgs, {
 constructor: function(control){
  this.constructor.prototype.constructor.call(this);
  this.control = control;
 }
});
var ASPxClientCustomDataCallbackEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(result) {
  this.constructor.prototype.constructor.call(this);
  this.result = result;
 }
});
var ASPxClientCallbackErrorEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function (message, callbackId) {
  this.constructor.prototype.constructor.call(this);
  this.message = message;
  this.handled = false;
  this.callbackId = callbackId;
 }
});
var ASPxClientGlobalCallbackErrorEventArgs = ASPx.CreateClass(ASPxClientCallbackErrorEventArgs, {
 constructor: function (control, message, callbackId) {
  this.constructor.prototype.constructor.call(this, message, callbackId);
  this.control = control;
 }
});
var ASPxClientValidationCompletedEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function (container, validationGroup, invisibleControlsValidated, isValid, firstInvalidControl, firstVisibleInvalidControl) {
  this.constructor.prototype.constructor.call(this);
  this.container = container;
  this.validationGroup = validationGroup;
  this.invisibleControlsValidated = invisibleControlsValidated;
  this.isValid = isValid;
  this.firstInvalidControl = firstInvalidControl;
  this.firstVisibleInvalidControl = firstVisibleInvalidControl;
 }
});
var ASPxClientControlsInitializedEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(isCallback) {
  this.isCallback = isCallback;
 }
});
var ASPxClientControlBeforePronounceEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(messageParts, control){
  this.constructor.prototype.constructor.call(this);
  this.messageParts = messageParts;
  this.control = control;
 }
});
var ASPxClientControlUnloadEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(control){
  this.constructor.prototype.constructor.call(this);
  this.control = control;
 }
});
var ASPxClientEndFocusEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(item) {
  this.constructor.prototype.constructor.call(this);
  this.item = item;
 }
});
var ASPxClientItemFocusedEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(item) {
  this.constructor.prototype.constructor.call(this);
  this.item = item;
 }
});
var BeforeInitCallbackEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(callbackOwnerID){
  this.constructor.prototype.constructor.call(this);
  this.callbackOwnerID = callbackOwnerID;
 }
});
var ASPxClientBrowserWindowResizedInternalEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(eventInfo) {
  this.constructor.prototype.constructor.call(this);
  this.htmlEvent = eventInfo.htmlEvent;
  this.windowClientWidth = eventInfo.wndWidth;
  this.windowClientHeigth = eventInfo.wndHeight;
  this.previousWindowClientWidth = eventInfo.prevWndWidth;
  this.previousWindowClientHeight = eventInfo.prevWndHeight;
  this.virtualKeyboardShownOnAndroid = eventInfo.virtualKeyboardShownOnAndroid;
 }
});
ASPx.createControl = function(type, name, windowName, properties, events, setupMethod, data){
 var globalName = windowName && windowName.length > 0 ? windowName : name;
 var dxo = new type(name);
 var haveWrapper = ASPx.Platform === "NETCORE" && dxo.createWrapper && !DevExpress.AspNetCore.Internal.BackwardCompatibility.useLegacyClientAPI;
 if(haveWrapper) {
  window[globalName] = dxo.createWrapper();
  dxo.aspNetCoreWrapperInstance = window[globalName];
 }
 else
  dxo.InitGlobalVariable(globalName);
 if(properties)
  dxo.SetProperties(properties);
 if(events)
  dxo.SetEvents(events);
 if(setupMethod)
  setupMethod.call(dxo);
 if(data)
  dxo.SetData(data);
 dxo.AfterCreate();
};
var ASPxClientControlBase = ASPx.CreateClass(null, {
 constructor: function(name){
  this.name = name;
  this.uniqueID = name;
  this.globalName = name;
  this.stateObject = null;
  this.needEncodeState = true;
  this.encodeHtml = true;
  this.enabled = true;
  this.clientEnabled = true;
  this.savedClientEnabled = true;
  this.clientVisible = true;
  this.accessibilityCompliant = false;
  this.parseJSPropertiesOnCallbackError = false;
  this.autoPostBack = false;
  this.allowMultipleCallbacks = true;
  this.callBack = null;
  this.enableCallbackAnimation = false;
  this.enableSlideCallbackAnimation = false;
  this.slideAnimationDirection = null;
  this.beginCallbackAnimationProcessing = false;
  this.endCallbackAnimationProcessing = false;
  this.savedCallbackResult = null;
  this.savedCallbacks = null;
  this.isCallbackAnimationPrevented = false;
  this.lpDelay = 300;
  this.lpTimer = -1;
  this.requestCount = 0;
  this.enableSwipeGestures = false;
  this.disableSwipeGestures = false;
  this.supportGestures = false;
  this.repeatedGestureValue = 0;
  this.repeatedGestureCount = 0;
  this.isInitialized = false;
  this.initialFocused = false;
  this.leadingAfterInitCall = ASPxClientControl.LeadingAfterInitCallConsts.None;
  this.serverEvents = [];
  this.loadingPanelElement = null;
  this.loadingDivElement = null;
  this.hasPhantomLoadingElements = false;
  this.mainElement = null;
  this.touchUIMouseScroller = null;
  this.hiddenFields = {};
  this.scPrefix = "dx";
  this.callbackHandlersQueue = new ASPx.ControlCallbackHandlersQueue(this);
  this.callbackCommand = {};
  this.currentCallbackID = -1;
  this.InitializeIntersectionObserversManager();
  this.Init = new ASPxClientEvent();
  this.BeginCallback = new ASPxClientEvent();
  this.EndCallback = new ASPxClientEvent();
  this.EndCallbackAnimationStart = new ASPxClientEvent();
  this.CallbackError = new ASPxClientEvent();
  this.CustomDataCallback = new ASPxClientEvent();
  this.BeforePronounce = new ASPxClientEvent();
  this.Unload = new ASPxClientEvent();
  aspxGetControlCollection().Add(this);
 },
 Initialize: function() {
  if(this.callBack != null)
   this.InitializeCallBackData();
  if (this.useCallbackQueue())
   this.callbackQueueHelper = new ASPx.ControlCallbackQueueHelper(this);
  ASPx.AccessibilityUtils.createAccessibleBackgrounds(this);
  if(this.accessibilityCompliant)
   ASPx.AccessibilityPronouncer.EnsureInitialize();
 },
 FinalizeInitialization: function() { },
 InlineInitialize: function() {
  this.savedClientEnabled = this.clientEnabled;
 },
 InitializeGestures: function() {
  if(this.isSwipeGesturesEnabled() && this.supportGestures) {
   ASPx.GesturesHelper.AddSwipeGestureHandler(this.name,
    function() { return this.GetCallbackAnimationElement(); }.aspxBind(this),
    function(evt) { return this.CanHandleGestureCore(evt); }.aspxBind(this),
    function(value) { return this.AllowStartGesture(value); }.aspxBind(this),
    function(value) { return this.StartGesture(); }.aspxBind(this),
    function(value) { return this.AllowExecuteGesture(value); }.aspxBind(this),
    function(value) { this.ExecuteGesture(value); }.aspxBind(this),
    function(value) { this.CancelGesture(value); }.aspxBind(this),
    this.GetDefaultanimationEngineType(),
    this.rtl
   );
   if(ASPx.Browser.MSTouchUI)
    this.touchUIMouseScroller = ASPx.MouseScroller.Create(
     function() { return this.GetCallbackAnimationElement(); }.aspxBind(this),
     function() { return null; },
     function() { return this.GetCallbackAnimationElement(); }.aspxBind(this),
     function(element) { return this.NeedPreventTouchUIMouseScrolling(element); }.aspxBind(this),
     true
    );
  }
 },
 isSwipeGesturesEnabled: function() {
  return !this.disableSwipeGestures && (this.enableSwipeGestures || ASPx.Browser.TouchUI);
 },
 isSlideCallbackAnimationEnabled: function() {
  return this.enableSlideCallbackAnimation || this.isSwipeGesturesEnabled();
 },
 InitGlobalVariable: function(varName){
  if(!window) return;
  this.globalName = varName;
  window[varName] = this;
 },
 SetElementDisplay: function(element, value, checkCurrentStyle, makeInline) {
  ASPx.SetElementDisplay(element, value, checkCurrentStyle, makeInline);
 },
 SetProperties: function(properties, obj){
  if(!obj) obj = this;
  var isAspNetCoreWrapperInstanceExist = !!obj.aspNetCoreWrapperInstance;
  for(var name in properties){
   if(!properties.hasOwnProperty(name)) continue;
   obj[name] = properties[name];
   if(isAspNetCoreWrapperInstanceExist && name.indexOf("cp") === 0)
    obj.aspNetCoreWrapperInstance[name] = properties[name];
  }
 },
 SetEvents: function(events, obj){
  if(!obj) obj = this;
  for(var name in events){
   if(events.hasOwnProperty(name) && obj[name] && obj[name].AddHandler)
    obj[name].AddHandler(events[name]);
  }
 },
 SetData: function(data){
 },
 useCallbackQueue: function(){
  return false;
 },
 NeedPreventTouchUIMouseScrolling: function(element) {
  return false;
 },
 InitailizeFocus: function() {
  if(this.initialFocused && this.IsVisible())
   this.Focus();
 },
 AfterCreate: function() {
  this.AddDefaultStateControllerItems();
  this.InlineInitialize();
  this.InitializeGestures();
 },
 AfterInitialize: function() {
  this.initializeAriaDescriptor();
  this.InitailizeFocus();
  this.isInitialized = true;
  this.RaiseInit();
  if(this.savedCallbacks) {
   for(var i = 0; i < this.savedCallbacks.length; i++)
    this.CreateCallbackInternal(this.savedCallbacks[i].arg, this.savedCallbacks[i].command,
     false, this.savedCallbacks[i].callbackInfo);
   this.savedCallbacks = null;
  }
 },
 InitializeCallBackData: function() {
 },
 AtlasPreInitialize: function() {
 },
 AtlasInitialize: function() {
 },
 IsDOMDisposed: function() {
  return !ASPx.IsExistsElement(this.GetMainElement());
 },
 initializeAriaDescriptor: function() {
  if(this.ariaDescription) {
   var descriptionObject = ASPx.Json.Eval(this.ariaDescription);
   if(descriptionObject) {
    this.ariaDescriptor = new AriaDescriptor(this, descriptionObject);
    this.applyAccessibilityAttributes(this.ariaDescriptor);
   }
  }
 },
 applyAccessibilityAttributes: function() { },
 setAriaDescription: function(selector, argsList) {
  if(this.ariaDescriptor)
   this.ariaDescriptor.setDescription(selector, argsList || [[]]);
 },
 allowRestoreFocusOnCallbacks: function(){
  return this.accessibilityCompliant;
 },
 HtmlEncode: function(text) {
  return this.encodeHtml ? ASPx.Str.EncodeHtml(text) : text;
 },
 IsServerEventAssigned: function(eventName){
  return ASPx.Data.ArrayIndexOf(this.serverEvents, eventName) >= 0;
 },
 OnPost: function(args){
  this.SerializeStateHiddenField();
 },
 SerializeStateHiddenField: function() {
  this.UpdateStateObject();
  if(this.stateObject != null)
   this.UpdateStateHiddenField();
 },
 OnPostFinalization: function(args){
 },
 UpdateStateObject: function(){
 },
 UpdateStateObjectWithObject: function(obj){
  if(!obj) return;
  if(!this.stateObject)
   this.stateObject = { };
  for(var key in obj)
   if(obj.hasOwnProperty(key))
    this.stateObject[key] = obj[key];
 },
 UpdateStateHiddenField: function() {
  var stateHiddenField = this.GetStateHiddenField();
  if(stateHiddenField) {
   var stateObjectStr = ASPx.Json.ToJson(this.stateObject, !this.needEncodeState);
   stateHiddenField.value = this.needEncodeState ? ASPx.Str.EncodeHtml(stateObjectStr) : stateObjectStr;
  }
 },
 GetStateHiddenField: function() {
  return this.GetHiddenField(this.GetStateHiddenFieldName(), this.GetStateHiddenFieldID(),
   this.GetStateHiddenFieldParent(), this.GetStateHiddenFieldOrigin());
 },
 GetStateHiddenFieldName: function() {
  return this.uniqueID;
 },
 GetStateHiddenFieldID: function() {
  return this.name + "_State";
 },
 GetStateHiddenFieldOrigin: function() {
  return this.GetMainElement();
 },
 GetStateHiddenFieldParent: function() {
  var element = this.GetStateHiddenFieldOrigin();
  return element ? element.parentNode : null;
 },
 GetHiddenField: function(name, id, parent, beforeElement) {
  var hiddenField = this.hiddenFields[id];
  if(!hiddenField || !ASPx.IsValidElement(hiddenField)) {
   if(parent) {
    var existingHiddenField = ASPx.GetElementById(this.GetStateHiddenFieldID());
    this.hiddenFields[id] = hiddenField = existingHiddenField || ASPx.CreateHiddenField(name, id);
    if(existingHiddenField)
     return existingHiddenField;
    if(beforeElement)
     parent.insertBefore(hiddenField, beforeElement);
    else
     parent.appendChild(hiddenField);
   }
  }
  return hiddenField;
 },
 GetChildElement: function(idPostfix){
  var mainElement = this.GetMainElement();
  if(idPostfix.charAt && idPostfix.charAt(0) !== "_")
   idPostfix = "_" + idPostfix;
  return mainElement ? ASPx.CacheHelper.GetCachedChildById(this, mainElement, this.name + idPostfix) : null;
 },
 getChildControl: function(idPostfix) {
  var result = null;
  var childControlId = this.getChildControlUniqueID(idPostfix);
  ASPx.GetControlCollection().ProcessControlsInContainer(this.GetMainElement(), function(control) {
   if(control.uniqueID == childControlId)
    result = control;
  });
  return result;
 },
 getChildControlUniqueID: function(idPostfix) {
  idPostfix = idPostfix.split("_").join("$");
  if(idPostfix.charAt && idPostfix.charAt(0) !== "$")
   idPostfix = "$" + idPostfix;
  return this.uniqueID + idPostfix;
 },
 getInnerControl: function(idPostfix) {
  var name = this.name + idPostfix;
  var result = window[name];
  return result && Ident.IsASPxClientControl(result)
   ? result
   : null;
 },
 GetParentForm: function(){
  return ASPx.GetParentByTagName(this.GetMainElement(), "FORM");
 },
 GetMainElement: function(){
  if(!ASPx.IsExistsElement(this.mainElement))
   this.mainElement = ASPx.GetElementById(this.GetMainElementId());
  return this.mainElement;
 },
 GetMainElementId: function() {
  return this.name;
 },
 IsLoadingContainerVisible: function(){
  return this.IsVisible();
 },
 GetLoadingPanelElement: function(){
  return ASPx.GetElementById(this.name + "_LP");
 },
 GetClonedLoadingPanel: function(){
  return document.getElementById(this.GetLoadingPanelElement().id + "V");
 },
 CloneLoadingPanel: function(element, parent) {
  var clone = element.cloneNode(true);
  clone.id = element.id + "V";
  parent.appendChild(clone);
  return clone;
 },
 CreateLoadingPanelWithoutBordersInsideContainer: function(container) {
  var loadingPanel = this.CreateLoadingPanelInsideContainer(container, false, true, true);
  var contentStyle = ASPx.GetCurrentStyle(container);
  if(!loadingPanel || !contentStyle)
   return;
  var elements = [ ];
  var table = (loadingPanel.tagName == "TABLE") ? loadingPanel : ASPx.GetNodeByTagName(loadingPanel, "TABLE", 0);
  if(table != null)
   elements.push(table);
  else
   elements.push(loadingPanel);
  var cells = ASPx.GetNodesByTagName(loadingPanel, "TD");
  if(!cells) cells = [ ];
  for(var i = 0; i < cells.length; i++)
   elements.push(cells[i]);
  for(var i = 0; i < elements.length; i++) {
   var el = elements[i];
   el.style.backgroundColor = contentStyle.backgroundColor;
   ASPx.RemoveBordersAndShadows(el);
  }
 },
 CreateLoadingPanelInsideContainer: function(parentElement, hideContent, collapseHeight, collapseWidth) {
  if(this.ShouldHideExistingLoadingElements())
   this.HideLoadingPanel();
  if(parentElement == null)
   return null;
  if(!this.IsLoadingContainerVisible()) {
   this.hasPhantomLoadingElements = true;
   return null;
  }
  var element = this.GetLoadingPanelElement();
  if(element != null){
   var width = collapseWidth ? 0 : ASPx.GetClearClientWidth(parentElement);
   var height = collapseHeight ? 0 : ASPx.GetClearClientHeight(parentElement);
   if(hideContent){
    for(var i = parentElement.childNodes.length - 1; i > -1; i--){
     if(parentElement.childNodes[i].style)
      parentElement.childNodes[i].style.display = "none";
     else if(parentElement.childNodes[i].nodeType == 3)
      parentElement.removeChild(parentElement.childNodes[i]);
    }
   }
   else
    parentElement.innerHTML = "";
   var table = document.createElement("TABLE");
   parentElement.appendChild(table);
   table.border = 0;
   table.cellPadding = 0;
   table.cellSpacing = 0;
   ASPx.SetStyles(table, {
    width: (width > 0) ? width : "100%",
    height: (height > 0) ? height : "100%"
   });
   var tbody = document.createElement("TBODY");
   table.appendChild(tbody);
   var tr = document.createElement("TR");
   tbody.appendChild(tr);
   var td = document.createElement("TD");
   tr.appendChild(td);
   td.align = "center";
   td.vAlign = "middle";
   element = this.CloneLoadingPanel(element, td);
   ASPx.SetElementDisplay(element, true);
   this.loadingPanelElement = element;
   return element;
  } else
   parentElement.innerHTML = "&nbsp;";
  return null;
 },
 CreateLoadingPanelWithAbsolutePosition: function(parentElement, offsetElement) {
  if(this.ShouldHideExistingLoadingElements())
   this.HideLoadingPanel();
  if(parentElement == null)
   return null;
  if(!this.IsLoadingContainerVisible()) {
   this.hasPhantomLoadingElements = true;
   return null;
  }
  if(!offsetElement)
   offsetElement = parentElement;
  var element = this.GetLoadingPanelElement();
  if(element != null) {
   element = this.CloneLoadingPanel(element, parentElement);
   ASPx.SetStyles(element, {
    position: "absolute"
   });
   ASPx.SetElementDisplay(element, true);
   ASPx.Evt.AttachEventToElement(element, ASPx.Evt.GetMouseWheelEventName(), ASPx.Evt.PreventEvent);
   this.SetLoadingPanelLocation(offsetElement, element);
   this.loadingPanelElement = element;
   return element;
  }
  return null;
 },
 CreateLoadingPanelInline: function(parentElement, centerInParent){
  if(this.ShouldHideExistingLoadingElements())
   this.HideLoadingPanel();
  if(parentElement == null)
   return null;
  if(!this.IsLoadingContainerVisible()) {
   this.hasPhantomLoadingElements = true;
   return null;
  }
  var element = this.GetLoadingPanelElement();
  if(element != null) {
   element = this.CloneLoadingPanel(element, parentElement);
   if(centerInParent){
    ASPx.SetElementDisplay(element, true);
    parentElement.style.textAlign = "center";
   }
   else
    ASPx.SetElementDisplay(element, true);
   this.loadingPanelElement = element;
   return element;
  }
  return null;
 },
 ShowLoadingPanel: function() {
 },
 ShowLoadingElements: function() {
  if(this.InCallback() || this.lpTimer > -1) return;
  this.ShowLoadingDiv();
  if(this.IsCallbackAnimationEnabled())
   this.StartBeginCallbackAnimation();
  else
   this.ShowLoadingElementsInternal();
 },
 ShowLoadingElementsInternal: function() {
  if(this.lpDelay > 0 && !this.IsCallbackAnimationEnabled())
   this.lpTimer = window.setTimeout(function() {
    this.ShowLoadingPanelOnTimer();
   }.aspxBind(this), this.lpDelay);
  else {
   this.RestoreLoadingDivOpacity();
   this.ShowLoadingPanel();
  }
 },
 GetLoadingPanelOffsetElement: function (baseElement) {
  if(this.IsCallbackAnimationEnabled()) {
   var element = this.GetLoadingPanelCallbackAnimationOffsetElement();
   if(element) {
    var container = typeof(ASPx.AnimationHelper) != "undefined" ? ASPx.AnimationHelper.findSlideAnimationContainer(element) : null;
    if(container)
     return container.parentNode.parentNode;
    else
     return element;
   }
  }
  return baseElement;
 },
 GetLoadingPanelCallbackAnimationOffsetElement: function () {
  return this.GetCallbackAnimationElement();
 },
 IsCallbackAnimationEnabled: function () {
  return (this.enableCallbackAnimation || this.isSlideCallbackAnimationEnabled()) && !this.isCallbackAnimationPrevented;
 },
 GetDefaultanimationEngineType: function() {
  return ASPx.AnimationEngineType.DEFAULT;
 },
 StartBeginCallbackAnimation: function () {
  this.beginCallbackAnimationProcessing = true;
  this.isCallbackFinished = false;
  var element = this.GetCallbackAnimationElement();
  if (element && this.isSlideCallbackAnimationEnabled() && this.slideAnimationDirection)
   ASPx.AnimationHelper.slideOut(element, this.slideAnimationDirection, this.FinishBeginCallbackAnimation.aspxBind(this), this.GetDefaultanimationEngineType(), this.rtl);
  else if(element && this.enableCallbackAnimation)
   ASPx.AnimationHelper.fadeOut(element, this.FinishBeginCallbackAnimation.aspxBind(this), null, ASPx.AnimationEngineType.JS);
  else
   this.FinishBeginCallbackAnimation();
 },
 CancelBeginCallbackAnimation: function() {
  if(this.beginCallbackAnimationProcessing) {
   this.beginCallbackAnimationProcessing = false;
   var element = this.GetCallbackAnimationElement();
   ASPx.AnimationHelper.cancelAnimation(element);
  }
 },
 FinishBeginCallbackAnimation: function () {
  this.beginCallbackAnimationProcessing = false;
  if(!this.isCallbackFinished)
   this.ShowLoadingElementsInternal();
  else {
   this.DoCallback(this.savedCallbackResult);
   this.savedCallbackResult = null;
  }
 },
 CheckBeginCallbackAnimationInProgress: function(callbackResult) {
  if(this.beginCallbackAnimationProcessing) {
   this.savedCallbackResult = callbackResult;
   this.isCallbackFinished = true;
   return true;
  }
  return false;
 },
 StartEndCallbackAnimation: function () {
  this.HideLoadingPanel();
  this.SetInitialLoadingDivOpacity();
  this.RaiseEndCallbackAnimationStart();
  this.endCallbackAnimationProcessing = true;
  var element = this.GetCallbackAnimationElement();
  if(element && this.isSlideCallbackAnimationEnabled() && this.slideAnimationDirection)
   ASPx.AnimationHelper.slideIn(element, this.slideAnimationDirection, this.FinishEndCallbackAnimation.aspxBind(this), this.GetDefaultanimationEngineType(), this.rtl);
  else if(element && this.enableCallbackAnimation)
   ASPx.AnimationHelper.fadeIn(element, this.FinishEndCallbackAnimation.aspxBind(this), null, ASPx.AnimationEngineType.JS);
  else
   this.FinishEndCallbackAnimation();
  this.slideAnimationDirection = null;
 },
 FinishEndCallbackAnimation: function () {
  this.DoEndCallback();
  this.endCallbackAnimationProcessing = false;
  this.CheckRepeatGesture();
 },
 CheckEndCallbackAnimationNeeded: function() {
  if(!this.endCallbackAnimationProcessing && this.requestCount == 1) {
   this.StartEndCallbackAnimation();
   return true;
  }
  return false;
 },
 PreventCallbackAnimation: function() {
  this.isCallbackAnimationPrevented = true;
 },
 GetCallbackAnimationElement: function() {
  return null;
 },
 AssignSlideAnimationDirectionByPagerArgument: function(arg, currentPageIndex) {
  this.slideAnimationDirection = null;
  if(this.isSlideCallbackAnimationEnabled() && typeof(ASPx.AnimationHelper) != "undefined") {
   if(arg == PagerCommands.Next || arg == PagerCommands.Last)
    this.slideAnimationDirection = ASPx.AnimationHelper.SLIDE_LEFT_DIRECTION;
   else if(arg == PagerCommands.First || arg == PagerCommands.Prev)
    this.slideAnimationDirection = ASPx.AnimationHelper.SLIDE_RIGHT_DIRECTION;
   else if(!isNaN(currentPageIndex) && arg.indexOf(PagerCommands.PageNumber) == 0) {
    var newPageIndex = parseInt(arg.substring(2));
    if (!isNaN(newPageIndex)) {
     var leftDir = this.rtl ? ASPx.AnimationHelper.SLIDE_LEFT_DIRECTION : ASPx.AnimationHelper.SLIDE_RIGHT_DIRECTION;
     var rightDir = this.rtl ? ASPx.AnimationHelper.SLIDE_RIGHT_DIRECTION : ASPx.AnimationHelper.SLIDE_LEFT_DIRECTION;
     this.slideAnimationDirection = newPageIndex < currentPageIndex ? leftDir : rightDir;
    }
   }
  }
 },
 TryShowPhantomLoadingElements: function () {
  if(this.hasPhantomLoadingElements && this.InCallback()) {
   this.hasPhantomLoadingElements = false;
   this.ShowLoadingDivAndPanel();
  }
 },
 ShowLoadingDivAndPanel: function () {
  this.ShowLoadingDiv();
  this.RestoreLoadingDivOpacity();
  this.ShowLoadingPanel();
 },
 HideLoadingElements: function() {
  this.CancelBeginCallbackAnimation();
  this.HideLoadingPanel();
  this.HideLoadingDiv();
 },
 ShowLoadingPanelOnTimer: function() {
  this.ClearLoadingPanelTimer();
  if(!this.IsDOMDisposed()) {
   this.RestoreLoadingDivOpacity();
   this.ShowLoadingPanel();
  }
 },
 ClearLoadingPanelTimer: function() {
  this.lpTimer = ASPx.Timer.ClearTimer(this.lpTimer);
 },
 HideLoadingPanel: function() {
  this.ClearLoadingPanelTimer();
  this.hasPhantomLoadingElements = false;
  if(ASPx.IsExistsElement(this.loadingPanelElement)) {
   ASPx.RemoveElement(this.loadingPanelElement);
   this.loadingPanelElement = null;
  }
 },
 SetLoadingPanelLocation: function(offsetElement, loadingPanel, x, y, offsetX, offsetY) {
  if(!ASPx.IsExists(x) || !ASPx.IsExists(y)){
   var x1 = ASPx.GetAbsoluteX(offsetElement);
   var y1 = ASPx.GetAbsoluteY(offsetElement);
   var x2 = x1;
   var y2 = y1;
   if(offsetElement == document.body) {
    x1 = 0;
    y1 = 0;
    x2 = ASPx.GetDocumentMaxClientWidth();
    y2 = ASPx.GetDocumentMaxClientHeight();
   }
   else{
    x2 += offsetElement.offsetWidth;
    y2 += offsetElement.offsetHeight;
   }
   if(x1 < ASPx.GetDocumentScrollLeft())
    x1 = ASPx.GetDocumentScrollLeft();
   if(y1 < ASPx.GetDocumentScrollTop())
    y1 = ASPx.GetDocumentScrollTop();
   if(x2 > ASPx.GetDocumentScrollLeft() + ASPx.GetDocumentClientWidth())
    x2 = ASPx.GetDocumentScrollLeft() + ASPx.GetDocumentClientWidth();
   if(y2 > ASPx.GetDocumentScrollTop() + ASPx.GetDocumentClientHeight())
    y2 = ASPx.GetDocumentScrollTop() + ASPx.GetDocumentClientHeight();
   x = x1 + ((x2 - x1 - loadingPanel.offsetWidth) / 2);
   y = y1 + ((y2 - y1 - loadingPanel.offsetHeight) / 2);
  }
  if(ASPx.IsExists(offsetX) && ASPx.IsExists(offsetY)){
   x += offsetX;
   y += offsetY;
  }
  x = ASPx.PrepareClientPosForElement(x, loadingPanel, true);
  y = ASPx.PrepareClientPosForElement(y, loadingPanel, false);
  if(ASPx.Browser.IE && ASPx.Browser.Version > 8) {
   x = Math.round(x);
   y = Math.round(y);
  }
  ASPx.SetStyles(loadingPanel, { left: x, top: y });
 },
 GetLoadingDiv: function(){
  return ASPx.GetElementById(this.name + "_LD");
 },
 CreateLoadingDiv: function(parentElement, offsetElement){
  if(this.ShouldHideExistingLoadingElements())
   this.HideLoadingDiv();
  if(parentElement == null)
   return null;
  if(!this.IsLoadingContainerVisible()) {
   this.hasPhantomLoadingElements = true;
   return null;
  }
  if(!offsetElement)
   offsetElement = parentElement;
  var div = this.GetLoadingDiv();
  if(div != null){
   div = div.cloneNode(true);
   parentElement.appendChild(div);
   ASPx.SetElementDisplay(div, true);
   ASPx.Evt.AttachEventToElement(div, ASPx.TouchUIHelper.touchMouseDownEventName, ASPx.Evt.PreventEvent);
   ASPx.Evt.AttachEventToElement(div, ASPx.TouchUIHelper.touchMouseMoveEventName, ASPx.Evt.PreventEvent);
   ASPx.Evt.AttachEventToElement(div, ASPx.TouchUIHelper.touchMouseUpEventName, ASPx.Evt.PreventEvent);
   ASPx.Evt.AttachEventToElement(div, ASPx.Evt.GetMouseWheelEventName(), ASPx.Evt.PreventEvent);
   this.SetLoadingDivBounds(offsetElement, div);
   this.loadingDivElement = div;
   this.SetInitialLoadingDivOpacity();
   return div;
  }
  return null;
 },
 SetInitialLoadingDivOpacity: function() {
  if(!this.loadingDivElement) return;
  ASPx.Attr.SaveStyleAttribute(this.loadingDivElement, "opacity");
  ASPx.Attr.SaveStyleAttribute(this.loadingDivElement, "filter");
  ASPx.SetElementOpacity(this.loadingDivElement, 0.01);
 },
 RestoreLoadingDivOpacity: function() {
  if(!this.loadingDivElement) return;
  ASPx.Attr.RestoreStyleAttribute(this.loadingDivElement, "opacity");
  ASPx.Attr.RestoreStyleAttribute(this.loadingDivElement, "filter");
 },
 SetLoadingDivBounds: function(offsetElement, loadingDiv) {
  var absX = (offsetElement == document.body) ? 0 : ASPx.GetAbsoluteX(offsetElement);
  var absY = (offsetElement == document.body) ? 0 : ASPx.GetAbsoluteY(offsetElement);
  ASPx.SetStyles(loadingDiv, {
   left: ASPx.PrepareClientPosForElement(absX, loadingDiv, true),
   top: ASPx.PrepareClientPosForElement(absY, loadingDiv, false)
  });
  var width = (offsetElement == document.body) ? ASPx.GetDocumentWidth() : offsetElement.offsetWidth;
  var height = (offsetElement == document.body) ? ASPx.GetDocumentHeight() : offsetElement.offsetHeight;
  if(height < 0)
   height = 0;
  ASPx.SetStyles(loadingDiv, { width: width, height: height });
  var correctedWidth = 2 * width - loadingDiv.offsetWidth;
  if(correctedWidth <= 0) correctedWidth = width;
  var correctedHeight = 2 * height - loadingDiv.offsetHeight;
  if(correctedHeight <= 0) correctedHeight = height;
  ASPx.SetStyles(loadingDiv, { width: correctedWidth, height: correctedHeight });
 },
 ShowLoadingDiv: function() {
 },
 HideLoadingDiv: function() {
  this.hasPhantomLoadingElements = false;
  if(ASPx.IsExistsElement(this.loadingDivElement)){
   ASPx.RemoveElement(this.loadingDivElement);
   this.loadingDivElement = null;
  }
 },
 CanHandleGesture: function(evt) {
  return false;
 },
 CanHandleGestureCore: function(evt) {
  var source = ASPx.Evt.GetEventSource(evt);
  if(ASPx.GetIsParent(this.loadingPanelElement, source) || ASPx.GetIsParent(this.loadingDivElement, source))
   return true;
  var callbackAnimationElement = this.GetCallbackAnimationElement();
  if(!callbackAnimationElement)
   return false;
  var animationContainer = ASPx.AnimationHelper.getSlideAnimationContainer(callbackAnimationElement, false, false);
  if(animationContainer && ASPx.GetIsParent(animationContainer, source) && !ASPx.GetIsParent(animationContainer.childNodes[0], source))
   return true;
  return this.CanHandleGesture(evt);
 },
 AllowStartGesture: function() {
  return !this.beginCallbackAnimationProcessing && !this.endCallbackAnimationProcessing;
 },
 StartGesture: function() {
 },
 AllowExecuteGesture: function(value) {
  return false;
 },
 ExecuteGesture: function(value) {
 },
 CancelGesture: function(value) {
  if(this.repeatedGestureCount === 0) {
   this.repeatedGestureValue = value;
   this.repeatedGestureCount = 1;
  }
  else {
   if(this.repeatedGestureValue * value > 0)
    this.repeatedGestureCount++;
   else
    this.repeatedGestureCount--;
   if(this.repeatedGestureCount === 0)
    this.repeatedGestureCount = 0;
  }
 },
 CheckRepeatGesture: function() {
  if(this.repeatedGestureCount !== 0) {
   if(this.AllowExecuteGesture(this.repeatedGestureValue))
    this.ExecuteGesture(this.repeatedGestureValue, this.repeatedGestureCount);
   this.repeatedGestureValue = 0;
   this.repeatedGestureCount = 0;
  }
 },
 AllowExecutePagerGesture: function (pageIndex, pageCount, value) {
  if(pageIndex < 0) return false;
  if(pageCount <= 1) return false;
  if(value > 0 && pageIndex === 0) return false;
  if(value < 0 && pageIndex === pageCount - 1) return false;
  return true;
 },
 ExecutePagerGesture: function(pageIndex, pageCount, value, count, method) {
  if(!count) count = 1;
  var pageIndex = pageIndex + (value < 0 ? count : -count);
  if(pageIndex < 0) pageIndex = 0;
  if(pageIndex > pageCount - 1) pageIndex = pageCount - 1;
  method(PagerCommands.PageNumber + pageIndex);
 },
 RaiseInit: function(){
  if(!this.Init.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.Init.FireEvent(this, args);
  }
 },
 RaiseBeginCallbackInternal: function(command){
  if(!this.BeginCallback.IsEmpty()){
   var args = new ASPxClientBeginCallbackEventArgs(command);
   this.BeginCallback.FireEvent(this, args);
  }
 },
 RaiseEndCallbackInternal: function(command) {
  if(!this.EndCallback.IsEmpty()){
   var args = new ASPxClientEndCallbackEventArgs(command);
   this.EndCallback.FireEvent(this, args);
  }
 },
 RaiseCallbackErrorInternal: function(message, callbackId) {
  if(!this.CallbackError.IsEmpty()) {
   var args = new ASPxClientCallbackErrorEventArgs(message, callbackId);
   this.CallbackError.FireEvent(this, args);
   if(args.handled)
    return { isHandled: true, errorMessage: args.message };
  }
 },
 RaiseBeginCallback: function(command){
  this.RaiseBeginCallbackInternal(command);
  aspxGetControlCollection().RaiseBeginCallback(this, command);
 },
 RaiseEndCallback: function(command){
  this.RaiseEndCallbackInternal(command);
  aspxGetControlCollection().RaiseEndCallback(this, command);
 },
 RaiseCallbackError: function (message, callbackId) {
  var result = this.RaiseCallbackErrorInternal(message, callbackId);
  if(!result)
   result = aspxGetControlCollection().RaiseCallbackError(this, message, callbackId);
  return result;
 },
 RaiseEndCallbackAnimationStart: function(){
  if(!this.EndCallbackAnimationStart.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.EndCallbackAnimationStart.FireEvent(this, args);
  }
 },
 RaiseBeforePronounce: function(message) {
  var args = new ASPxClientControlBeforePronounceEventArgs(message, this);
  if(!this.BeforePronounce.IsEmpty())
   this.BeforePronounce.FireEvent(this, args);
  return args;
 },
 RaiseUnload: function() {
  var args = new ASPxClientControlUnloadEventArgs(this);
  if(!this.Unload.IsEmpty())
   this.Unload.FireEvent(this, args);
 },
 SendMessageToAssistiveTechnology: function(message) {
  if(!this.accessibilityCompliant)
   return;
  this.PronounceMessageInternal(message, ASPx.AccessibilityPronouncerType.live);
 },
 PronounceMessageInternal: function(messageArg, type) {
  var message = messageArg;
  if(!ASPx.Ident.IsArray(messageArg))
   message = [messageArg];
  var args = this.RaiseBeforePronounce(message);
  ASPx.AccessibilityPronouncer.Pronounce(args, type);
 },
 IsVisible: function() {
  var element = this.GetMainElement();
  return ASPx.IsElementVisible(element);
 },
 IsDisplayedElement: function(element) {
  while(element && element.tagName != "BODY") {
   if(!ASPx.GetElementDisplay(element))
    return false;
   element = element.parentNode;
  }
  return true;
 },
 IsDisplayed: function() {
  return this.IsDisplayedElement(this.GetMainElement());
 },
 IsHiddenElement: function(element) {
  return element && element.offsetWidth == 0 && element.offsetHeight == 0;
 },
 IsHidden: function() {
  return this.IsHiddenElement(this.GetMainElement());
 },
 IsDisposed: function() {
  return this.disposed;
 },
 GetParentControl: function() {
  var mainElement = this.getActualMainElement();
  var popupPostfix = ASPx.PCWIdSuffix + "-1";
  var result = null;
  ASPx.GetParent(mainElement, function(element) {
   if(element === mainElement || !element.id)
    return false;
   var controlName = element.id.replace(popupPostfix, "");
   result = ASPx.GetControlCollection().Get(controlName);
   return !!result;
  });
  return result;
 },
 getActualMainElement: function() { return this.GetMainElement(); },
 findParentByType: function (type) {
  var ctrl = this;
  while (ctrl) {
   var parent = ctrl.GetParentControl();
   if (parent && parent instanceof type)
    return parent;
   ctrl = parent;
  }
  return null;
 },
 Focus: function() {
 },
 GetClientVisible: function(){
  return this.GetVisible();
 },
 SetClientVisible: function(visible){
  this.SetVisible(visible);
 },
 GetVisible: function(){
  return this.clientVisible;
 },
 SetVisible: function(visible){
  if(this.clientVisible != visible){
   this.clientVisible = visible;
   ASPx.SetElementDisplay(this.GetMainElement(), visible);
   if(visible) {
    this.AdjustControl();
    var mainElement = this.GetMainElement();
    if(mainElement)
     aspxGetControlCollection().AdjustControls(mainElement);
   }
  }
 },
 GetEnabled: function() {
  return this.clientEnabled;
 },
 SetEnabled: function(enabled) {
  this.clientEnabled = enabled;
  if(ASPxClientControl.setEnabledLocked)
   return;
  else
   ASPxClientControl.setEnabledLocked = true;
  this.savedClientEnabled = enabled;
  aspxGetControlCollection().ProcessControlsInContainer(this.GetMainElement(), function(control) {
   if(ASPx.IsFunction(control.SetEnabled))
    control.SetEnabled(enabled && control.savedClientEnabled);
  });
  delete ASPxClientControl.setEnabledLocked;
 },
 InCallback: function() {
  return this.requestCount > 0;
 },
 DoBeginCallback: function(command) {
  this.RaiseBeginCallback(command || "");
  aspxGetControlCollection().Before_WebForm_InitCallback(this.name);
  if(typeof(WebForm_InitCallback) != "undefined" && WebForm_InitCallback) {
   __theFormPostData = "";
   __theFormPostCollection = [ ];
   this.ClearPostBackEventInput("__EVENTTARGET");
   this.ClearPostBackEventInput("__EVENTARGUMENT");
   WebForm_InitCallback();
   this.savedFormPostData = __theFormPostData;
   this.savedFormPostCollection = __theFormPostCollection;
  }
 },
 ClearPostBackEventInput: function(id){
  var element = ASPx.GetElementById(id);
  if(element != null) element.value = "";
 },
 PerformDataCallback: function(arg, handler) {
  this.CreateCustomDataCallback(arg, "", handler);
 },
 sendCallbackViaQueue: function (prefix, arg, showLoadingPanel, context, handler, onBeforeSend) {
  if (!this.useCallbackQueue())
   return false;
  var context = context || this;
  var token = this.callbackQueueHelper.sendCallback(ASPx.FormatCallbackArg(prefix, arg), context, handler || context.OnCallback, prefix, onBeforeSend);
  if (showLoadingPanel)
   this.callbackQueueHelper.showLoadingElements();
  return token;
 },
 CreateCallback: function (arg, command, handler) {
  var callbackInfo = this.CreateCallbackInfo(ASPx.CallbackType.Common, handler || null);
  var callbackID = this.CreateCallbackByInfo(arg, command, callbackInfo);
  return callbackID;
 },
 CreateCustomDataCallback: function(arg, command, handler) {
  var callbackInfo = this.CreateCallbackInfo(ASPx.CallbackType.Data, handler);
  this.CreateCallbackByInfo(arg, command, callbackInfo);
 },
 CreateCallbackByInfo: function(arg, command, callbackInfo) {
  if(!this.CanCreateCallback()) return;
  var callbackID;
  if(typeof(WebForm_DoCallback) != "undefined" && WebForm_DoCallback && ASPx.documentLoaded || ASPx.Platform === "NETCORE")
   callbackID = this.CreateCallbackInternal(arg, command, true, callbackInfo);
  else {
   if(!this.savedCallbacks)
    this.savedCallbacks = [];
   var callbackInfo = { arg: arg, command: command, callbackInfo: callbackInfo };
   if(this.allowMultipleCallbacks)
    this.savedCallbacks.push(callbackInfo);
   else
    this.savedCallbacks[0] = callbackInfo;
  }
  return callbackID;
 },
 CreateCallbackInternal: function(arg, command, viaTimer, callbackInfo) {
  var watcher = ASPx.ControlUpdateWatcher.getInstance();
  if(watcher && !watcher.CanSendCallback(this, arg)) {
   this.CancelCallbackInternal();
   return;
  }
  this.requestCount++;
  this.DoBeginCallback(command);
  if(typeof(arg) == "undefined")
   arg = "";
  if(typeof(command) == "undefined")
   command = "";
  var callbackID = this.SaveCallbackInfo(callbackInfo, command),
   customArgs = this.GetCustomCallbackArgs();
  if(viaTimer)
   window.setTimeout(function() { this.CreateCallbackCoreWithCustomArgs(arg, command, callbackID, customArgs); }.aspxBind(this), 0);
  else
   this.CreateCallbackCoreWithCustomArgs(arg, command, callbackID, customArgs);
  return callbackID;
 },
 CreateCallbackCoreWithCustomArgs: function(arg, command, callbackID, customArgs) {
  this.CreateCallbackCore(arg, command, callbackID);
 },
 GetCustomCallbackArgs: function() {
  return {};
 },
 CancelCallbackInternal: function() {
  this.CancelCallbackCore();
  this.HideLoadingElements();
 },
 CancelCallbackCore: function() {
 },
 CreateCallbackCore: function(arg, command, callbackID) {
  var callBackMethod = this.GetCallbackMethod(command);
  __theFormPostData = this.savedFormPostData;
  __theFormPostCollection = this.savedFormPostCollection;
  callBackMethod.call(this, this.GetSerializedCallbackInfoByID(callbackID) + arg);
 },
 GetCallbackMethod: function(command){
  return this.callBack;
 },
 CanCreateCallback: function() {
  return !this.InCallback() || (this.allowMultipleCallbacks && !this.beginCallbackAnimationProcessing && !this.endCallbackAnimationProcessing);
 },
 DoLoadCallbackScripts: function() {
  ASPx.ProcessScriptsAndLinks(this.name, true);
 },
 DoEndCallback: function() {
  if(this.IsCallbackAnimationEnabled() && this.CheckEndCallbackAnimationNeeded())
   return;
  this.requestCount--;
  if (this.requestCount < 1)
   this.callbackHandlersQueue.executeCallbacksHandlers();
  if(this.HideLoadingPanelOnCallback() && this.requestCount < 1)
   this.HideLoadingElements();
  if(this.isSwipeGesturesEnabled() && this.supportGestures) {
   ASPx.GesturesHelper.UpdateSwipeAnimationContainer(this.name);
   if(this.touchUIMouseScroller)
    this.touchUIMouseScroller.update();
  }
  this.isCallbackAnimationPrevented = false;
  this.OnCallbackFinalized();
  this.AssignEllipsisTooltips();
  var command = this.GetCallbackCommand();
  this.RaiseEndCallback(command);
  this.InitializeIntersectionObserversManager();
  this.currentCallbackID = -1;
 },
 DoFinalizeCallback: function() {
 },
 OnCallbackFinalized: function() {
 },
 AssignEllipsisTooltips: function() { },
 GetCallbackCommand: function() {
  var result = "";
  if(this.currentCallbackID != -1) {
   var command = this.callbackCommand[this.currentCallbackID];
   if(command)
    result = command;
  }
  return result;
 },
 HideLoadingPanelOnCallback: function() {
  return true;
 },
 ShouldHideExistingLoadingElements: function() {
  return true;
 },
 EvalCallbackResult: function(resultString){
  return eval(resultString);
 },
 ParseJSProperties: function(resultObj) {
  if(resultObj.cp) {
   for(var name in resultObj.cp)
    if(resultObj.cp.hasOwnProperty(name)) {
     this[name] = resultObj.cp[name];
     if(this.aspNetCoreWrapperInstance)
      this.aspNetCoreWrapperInstance[name] = resultObj.cp[name];
    }
  }
 },
 DoCallback: function(result) {
  if(this.IsCallbackAnimationEnabled() && this.CheckBeginCallbackAnimationInProgress(result))
   return;
  result = ASPx.Str.Trim(result);
  if(result.indexOf(ASPx.CallbackResultPrefix) != 0)
   this.ProcessCallbackGeneralError(result, false);
  else {
   var resultObj = null;
   try {
    resultObj = this.EvalCallbackResult(result);
   }
   catch(e) {
   }
   if(resultObj) {
    this.currentCallbackID = resultObj.id;
    ASPx.CacheHelper.DropCache(this);
    if(resultObj.redirect) {
     this.ParseJSProperties(resultObj);
     ASPx.Url.Redirect(resultObj.redirect);
    }
    else if(ASPx.IsExists(resultObj.generalError)) {
     this.ProcessCallbackGeneralError(resultObj.generalError, true);
    }
    else {
     var errorObj = resultObj.error;
     if(errorObj) {
      if(this.parseJSPropertiesOnCallbackError)
       this.ParseJSProperties(resultObj);
      this.ProcessCallbackError(errorObj,resultObj.id);
     } else {
      this.ParseJSProperties(resultObj);
      var callbackInfo = this.DequeueCallbackInfo(resultObj.id);
      if(callbackInfo && callbackInfo.type == ASPx.CallbackType.Data)
       this.ProcessCustomDataCallback(resultObj.result, callbackInfo);
      else {
       if (this.useCallbackQueue() && this.callbackQueueHelper.getCallbackInfoById(resultObj.id))
        this.callbackQueueHelper.processCallback(resultObj.result, resultObj.id);
       else {
        this.ProcessCallback(resultObj.result, resultObj.id);
        if(callbackInfo && callbackInfo.handler) {
         var handlerInfo = { handler: callbackInfo.handler, result: resultObj.result.data };
         this.callbackHandlersQueue.addCallbackHandler(handlerInfo);
        }
       }
      }
     }
    }
   }
  }
  this.DoLoadCallbackScripts();
 },
 DoCallbackError: function(result) {
  this.HideLoadingElements();
  this.ProcessCallbackGeneralError(result, false);
 },
 DoControlClick: function(evt) {
  this.OnControlClick(ASPx.Evt.GetEventSource(evt), evt);
 },
 ProcessCallback: function (result, callbackId) {
  this.OnCallback(result, callbackId);
 },
 ProcessCustomDataCallback: function(result, callbackInfo) {
  if(callbackInfo.handler != null)
   callbackInfo.handler(this, result);
  this.RaiseCustomDataCallback(result);
 },
 RaiseCustomDataCallback: function(result) {
  if(!this.CustomDataCallback.IsEmpty()) {
   var arg = new ASPxClientCustomDataCallbackEventArgs(result);
   this.CustomDataCallback.FireEvent(this, arg);
  }
 },
 OnCallback: function(result) {
 },
 CreateCallbackInfo: function(type, handler) {
  return { type: type, handler: handler };
 },
 GetSerializedCallbackInfoByID: function(callbackID) {
  return this.GetCallbackInfoByID(callbackID).type + callbackID + ASPx.CallbackSeparator;
 },
 SaveCallbackInfo: function(info, command) {
  var callbacks = this.GetActiveCallbacksInfo();
  var index = callbacks.indexOf(null);
  if(index === -1)
   index = callbacks.length;
  callbacks[index] = info;
  this.callbackCommand[index] = command;
  return index;
 },
 GetActiveCallbacksInfo: function() {
  var persistentProperties = this.GetPersistentProperties();
  if(!persistentProperties.activeCallbacks)
   persistentProperties.activeCallbacks = [ ];
  return persistentProperties.activeCallbacks;
 },
 GetPersistentProperties: function() {
  var storage = _aspxGetPersistentControlPropertiesStorage();
  var persistentProperties = storage[this.name];
  if(!persistentProperties) {
   persistentProperties = { };
   storage[this.name] = persistentProperties;
  }
  return persistentProperties;
 },
 GetCallbackInfoByID: function(callbackID) {
  return this.GetActiveCallbacksInfo()[callbackID];
 },
 DequeueCallbackInfo: function(index) {
  var activeCallbacksInfo = this.GetActiveCallbacksInfo();
  if(index < 0 || index >= activeCallbacksInfo.length)
   return null;
  var result = activeCallbacksInfo[index];
  activeCallbacksInfo[index] = null;
  return result;
 },
 ProcessCallbackError: function (errorObj, callbackId) {
  var data = ASPx.IsExists(errorObj.data) ? errorObj.data : null;
  var result = this.RaiseCallbackError(errorObj.message, callbackId);
  if(result.isHandled)
   this.OnCallbackErrorAfterUserHandle(result.errorMessage, data);
  else
   this.OnCallbackError(result.errorMessage, data);
 },
 OnCallbackError: function(errorMessage, data) {
  if(errorMessage)
   ASPx.ShowErrorAlert(errorMessage);
 },
 OnCallbackErrorAfterUserHandle: function(errorMessage, data) {
 },
 ProcessCallbackGeneralError: function(errorMessage, serverExceptionOnLastCallback) {
  this.serverExceptionOnLastCallback = serverExceptionOnLastCallback;
  var result = this.RaiseCallbackError(errorMessage);
  if(result.isHandled)
   this.OnCallbackGeneralErrorAfterUserHandle(result.errorMessage);
  else
   this.OnCallbackGeneralError(result.errorMessage);
 },
 OnCallbackGeneralError: function(errorMessage) {
  this.OnCallbackError(errorMessage, null);
 },
 OnCallbackGeneralErrorAfterUserHandle: function (errorMessage) {
 },
 SendPostBack: function(params, preventConvertToUpdatePanelCallback) {
  if(preventConvertToUpdatePanelCallback)
   this.sendMSAjaxCompatPostBack(params);
  else
   this.sendPostBackInternal(params);
 },
 sendPostBackInternal: function(params) {
  if(typeof(__doPostBack) != "undefined")
   __doPostBack(this.uniqueID, params);
  else{
   var form = this.GetParentForm();
   if(form) form.submit();
  }
 },
 sendMSAjaxCompatPostBack: function(params) {
  var rm = ASPx.GetMSAjaxRequestManager();
  var triggers = rm ? rm._postBackControlClientIDs : null;
  var needRegister = triggers && ASPx.Ident.IsArray(triggers) && ASPx.Data.ArrayIndexOf(triggers, this.name) == -1;
  if(needRegister)
   triggers.unshift(this.name);
  this.sendPostBackInternal(params);
  if(needRegister)
   triggers.shift();
 },
 IsValidInstance: function () {
  return aspxGetControlCollection().GetByName(this.name) === this;
 },
 OnDispose: function() {
  var varName = this.globalName;
  if(varName && varName !== "" && window && window[varName] && window[varName] == this){
   try{
    delete window[varName];
   }
   catch(e){  }
  }
  if(this.callbackQueueHelper)
   this.callbackQueueHelper.detachEvents();
  if (!this.IsDisposed())
   this.disposed = true;
 },
 OnGlobalControlsInitialized: function(args) {
 },
 OnGlobalBrowserWindowResized: function(args) {
 },
 OnGlobalBeginCallback: function(args) {
 },
 OnGlobalEndCallback: function(args) {
 },
 OnGlobalCallbackError: function(args) {
 },
 OnGlobalValidationCompleted: function(args) {
 },
 AddDefaultStateControllerItems: function() {
  var states = this.scStates;
  if(!states) return;
  var postfix = this.scPostfix ? ("_" + this.scPostfix) : "";
  var mainElementId = this.GetMainElementId();
  if(states & 2)
   this.AddDefaultReadOnlyStateControllerItem(this.scPrefix + "ReadOnly" + postfix, mainElementId);
  if(states & 4)
   this.AddDefaultDisabledStateControllerItem(this.scPrefix + "Disabled" + postfix, mainElementId);
 },
 AddDefaultReadOnlyStateControllerItem: function(cssClass, mainElementId) { throw "Not implemented"; },
 AddDefaultDisabledStateControllerItem: function(cssClass, mainElementId) { throw "Not implemented"; },
 DOMContentLoaded: function() { },
 IsStateControllerEnabled: function() { return false; },
 InitializeDOM: function() {
  var mainElement = this.GetMainElement();
  if(mainElement)
   ASPx.SetElementInitializedFlag(mainElement);
 },
 IsDOMInitialized: function() {
  var mainElement = this.GetMainElement();
  return mainElement && ASPx.GetElementInitializedFlag(mainElement);
 },
 AdjustControl: function(nestedCall) { },
 OnBrowserWindowResizeInternal: function(e) { },
 RegisterInControlTree: function(tree) { },
 InitializeIntersectionObserversManager: function () {
  var elementToObserve = this.getElementToObserveVisibilityChange();
  if(elementToObserve) {
   ASPx.IntersectionObserversManager.SubscribeElemensVisibilityChangeInBrowserWindow(elementToObserve, this.processVisibilityChanged.bind(this));
  }
 },
 getElementToObserveVisibilityChange: function () { },
 processVisibilityChanged: function (visible) { }
});
ASPxClientControlBase.Cast = function(obj) {
 if(typeof obj == "string")
  return window[obj];
 return obj;
};
var persistentControlPropertiesStorage = null;
function _aspxGetPersistentControlPropertiesStorage() {
 if(persistentControlPropertiesStorage == null)
  persistentControlPropertiesStorage = { };
 return persistentControlPropertiesStorage;
}
var ELLIPSIS_MARKER_CLASS = "dx-ellipsis";
var ELLIPSIS_TOOLTIP_MARKER_ATTR = "dxEllipsisTitle";
var ASPxClientControl = ASPx.CreateClass(ASPxClientControlBase, {
 constructor: function(name){
  this.constructor.prototype.constructor.call(this, name);
  this.rtl = false;
  this.enableEllipsis = false;
  this.isNative = false;
  this.isControlCollapsed = false;
  this.isInsideHierarchyAdjustment = false;
  this.controlOwner = null;
  this.adjustedSizes = { };
  this.dialogContentHashTable = { };
  this.renderIFrameForPopupElements = false;
  this.widthValueSetInPercentage = false;
  this.heightValueSetInPercentage = false;
  this.verticalAlignedElements = { };
  this.wrappedTextContainers = { };
  this.scrollPositionState = { };
  this.sizingConfig = {
   allowSetWidth: true,
   allowSetHeight: true,
   correction : false,
   adjustControl : false,
   supportPercentHeight: false,
   supportAutoHeight: false
  };
  this.percentSizeConfig = {
   width: -1,
   height: -1,
   markerWidth: -1,
   markerHeight: -1
  };
 },
 querySelector: function(selector) { return this.querySelectorAll(selector)[0] || null; },
 querySelectorAll: function(selector) {
  return ASPx.CacheHelper.GetCachedElement(this, "querySelectorAll_" + selector,
   function() { return Array.prototype.slice.call(this.GetMainElement().querySelectorAll(selector)); });
 },
 createAccessKey: function (popupItem, getPopupElement, keyTipElement, key, onlyClick, manualStopProcessing) {
  return new ASPx.AccessKey(popupItem, getPopupElement, keyTipElement, key, onlyClick, manualStopProcessing);
 },
 InlineInitialize: function() {
  this.InitializeDOM();
  ASPxClientControlBase.prototype.InlineInitialize.call(this);
 },
 AfterCreate: function() {
  ASPxClientControlBase.prototype.AfterCreate.call(this);
  if(!this.CanInitializeAdjustmentOnDOMContentLoaded() || ASPx.IsStartupScriptsRunning())
   this.InitializeAdjustment();
 },
 DOMContentLoaded: function() {
  if(this.CanInitializeAdjustmentOnDOMContentLoaded())
   this.InitializeAdjustment();
 },
 CanInitializeAdjustmentOnDOMContentLoaded: function() {
  return !ASPx.Browser.IE || ASPx.Browser.Version >= 10;
 },
 InitializeAdjustment: function() {
  this.UpdateAdjustmentFlags();
  this.AdjustControl();
 },
 AfterInitialize: function() {
  this.AdjustControl();
  ASPxClientControlBase.prototype.AfterInitialize.call(this);
 },
 IsStateControllerEnabled: function(){
  return typeof(ASPx.GetStateController) != "undefined" && ASPx.GetStateController();
 },
 GetWidth: function() {
  return this.GetMainElement().offsetWidth;
 },
 GetHeight: function() {
  return this.GetMainElement().offsetHeight;
 },
 SetWidth: function(width) {
  if(this.sizingConfig.allowSetWidth)
   this.SetSizeCore("width", width, "GetWidth", false);
 },
 SetHeight: function(height) {
  if(this.sizingConfig.allowSetHeight)
   this.SetSizeCore("height", height, "GetHeight", false);
 },
 SetSizeCore: function(sizePropertyName, size, getFunctionName, corrected) {
  if(size < 0 || !this.GetMainElement())
   return;
  this.GetMainElement().style[sizePropertyName] = size + "px";
  this.UpdateAdjustmentFlags(sizePropertyName);
  if(this.sizingConfig.adjustControl)
   this.AdjustControl(true);
  if(this.sizingConfig.correction && !corrected) {
   var realSize = this[getFunctionName]();
   if(realSize != size) {
    var correctedSize = size - (realSize - size);
    this.SetSizeCore(sizePropertyName, correctedSize, getFunctionName, true);
   }
  }
 },
 AdjustControl: function(nestedCall) {
  if(this.IsAdjustmentRequired() && (!ASPxClientControl.adjustControlLocked || nestedCall)) {
   ASPxClientControl.adjustControlLocked = true;
   try {
    if(!this.IsAdjustmentAllowed())
     return;
    this.AdjustControlCore();
    this.UpdateAdjustedSizes();
   }
   finally {
    delete ASPxClientControl.adjustControlLocked;
   }
  }
  this.AssignEllipsisTooltips();
  this.TryShowPhantomLoadingElements();
 },
 ResetControlAdjustment: function () {
  this.adjustedSizes = { };
 },
 UpdateAdjustmentFlags: function(sizeProperty) {
  var mainElement = this.GetMainElement();
  if(mainElement) {
   var mainElementStyle = ASPx.GetCurrentStyle(mainElement);
   this.UpdatePercentSizeConfig([mainElementStyle.width, mainElement.style.width], [mainElementStyle.height, mainElement.style.height], sizeProperty);
  }
 },
 UpdatePercentSizeConfig: function(widths, heights, modifyStyleProperty) {
  switch(modifyStyleProperty) {
   case "width":
    this.UpdatePercentWidthConfig(widths);
    break;
   case "height":
    this.UpdatePercentHeightConfig(heights);
    break;
   default:
    this.UpdatePercentWidthConfig(widths);
    this.UpdatePercentHeightConfig(heights);
    break;
  }
  this.ResetControlPercentMarkerSize();
 },
 UpdatePercentWidthConfig: function(widths) {
  this.widthValueSetInPercentage = false;
  for(var i = 0; i < widths.length; i++) {
   if(this.IsPercentageWidth(widths[i])) {
    this.percentSizeConfig.width = widths[i];
    this.widthValueSetInPercentage = true;
    break;
   }
  }
 },
 IsPercentageWidth: function(width) { return ASPx.IsPercentageSize(width); },
 UpdatePercentHeightConfig: function(heights) {
  this.heightValueSetInPercentage = false;
    for(var i = 0; i < heights.length; i++) {
   if(ASPx.IsPercentageSize(heights[i])) {
    this.percentSizeConfig.height = heights[i];
    this.heightValueSetInPercentage = true;
    break;
   }
  }
 },
 GetAdjustedSizes: function() {
  var mainElement = this.GetMainElement();
  if(mainElement)
   return { width: mainElement.offsetWidth, height: mainElement.offsetHeight };
  return { width: 0, height: 0 };
 },
 IsAdjusted: function() {
  return (this.adjustedSizes.width && this.adjustedSizes.width > 0) && (this.adjustedSizes.height && this.adjustedSizes.height > 0);
 },
 IsAdjustmentRequired: function() {
  if(!this.IsAdjusted())
   return true;
  if(this.widthValueSetInPercentage)
   return true;
  if(this.heightValueSetInPercentage)
   return true;
  var sizes = this.GetAdjustedSizes();
  for(var name in sizes){
   if(this.adjustedSizes[name] !== sizes[name])
    return true;
  }
  return false;
 },
 IsAdjustmentAllowed: function() {
  var mainElement = this.GetMainElement();
  return mainElement && this.IsDisplayed() && !this.IsHidden() && this.IsDOMInitialized();
 },
 UpdateAdjustedSizes: function() {
  var sizes = this.GetAdjustedSizes();
  for(var name in sizes)
   if(sizes.hasOwnProperty(name))
    this.adjustedSizes[name] = sizes[name];
 },
 AdjustControlCore: function() {
 },
 AdjustAutoHeight: function() {
 },
 IsControlCollapsed: function() {
  return this.isControlCollapsed;
 },
 NeedCollapseControl: function() {
  return this.NeedCollapseControlCore() && this.IsAdjustmentRequired() && this.IsAdjustmentAllowed();
 },
 NeedCollapseControlCore: function() {
  return false;
 },
 CollapseEditor: function() {
 },
 CollapseControl: function() {
  this.SaveScrollPositions();
  var mainElement = this.GetMainElement(),
   marker = this.GetControlPercentSizeMarker();
  marker.style.height = this.heightValueSetInPercentage && this.sizingConfig.supportPercentHeight
   ? this.percentSizeConfig.height
   : (mainElement.offsetHeight + "px");
  mainElement.style.display = "none";
  this.isControlCollapsed = true;
 },
 ExpandControl: function() {
  var mainElement = this.GetMainElement();
  mainElement.style.display = "";
  this.GetControlPercentSizeMarker().style.height = "0px";
  this.isControlCollapsed = false;
  this.RestoreScrollPositions();
 },
 CanCauseReadjustment: function() {
  return this.NeedCollapseControlCore();
 },
 IsExpandableByAdjustment: function() {
  return false;
 },
 HasFixedPosition: function() {
  return false;
 },
 SaveScrollPositions: function() {
  var mainElement = this.GetMainElement();
  this.scrollPositionState.outer = ASPx.GetOuterScrollPosition(mainElement.parentNode);
  this.scrollPositionState.inner = ASPx.GetInnerScrollPositions(mainElement);
 },
 RestoreScrollPositions: function() {
  ASPx.RestoreOuterScrollPosition(this.scrollPositionState.outer);
  ASPx.RestoreInnerScrollPositions(this.scrollPositionState.inner);
 },
 GetControlPercentSizeMarker: function() {
  if(this.percentSizeMarker === undefined) {
   this.percentSizeMarker = ASPx.CreateHtmlElementFromString("<div style='height:0px;font-size:0px;line-height:0;width:100%;'></div>");
   ASPx.InsertElementAfter(this.percentSizeMarker, this.GetMainElement());
  }
  return this.percentSizeMarker;
 },
 KeepControlPercentSizeMarker: function(needCollapse, needCalculateHeight) {
  var marker = this.GetControlPercentSizeMarker(),
   markerHeight;
  if(needCollapse)
   this.CollapseControl();
  if(this.widthValueSetInPercentage && marker.style.width !== this.percentSizeConfig.width)
   marker.style.width = this.percentSizeConfig.width;
  if(needCalculateHeight) {
   if(this.IsControlCollapsed())
    markerHeight = marker.style.height;
   marker.style.height = this.percentSizeConfig.height;
  }
  this.percentSizeConfig.markerWidth = marker.offsetWidth;
  if(needCalculateHeight) {
   this.percentSizeConfig.markerHeight = marker.offsetHeight;
   if(this.IsControlCollapsed())
    marker.style.height = markerHeight;
   else
    marker.style.height = "0px";
  }
  if(needCollapse)
   this.ExpandControl();
 },
 ResetControlPercentMarkerSize: function() {
  this.percentSizeConfig.markerWidth = -1;
  this.percentSizeConfig.markerHeight = -1;
 },
 GetControlPercentMarkerSize: function(hideControl, force) {
  var needCalculateHeight = this.heightValueSetInPercentage && this.sizingConfig.supportPercentHeight;
  if(force || this.percentSizeConfig.markerWidth < 1 || (needCalculateHeight && this.percentSizeConfig.markerHeight < 1))
   this.KeepControlPercentSizeMarker(hideControl && !this.IsControlCollapsed(), needCalculateHeight);
  return {
   width: this.percentSizeConfig.markerWidth,
   height: this.percentSizeConfig.markerHeight
  };
 },
 AssignEllipsisTooltips: function() {
  if(this.RequireAssignTooltips())
   this.AssignEllipsisTooltipsCore();
 },
 AssignEllipsisTooltipsCore: function(rootElement, reassingExistingTooltips) {
  var requirePaddingManipulation = ASPx.Browser.IE || ASPx.Browser.Edge || ASPx.Browser.Firefox;
  rootElement = rootElement || this.GetMainElement();
  var nodes = this.GetEllipsisNodes(rootElement);
  var nodeInfos = [];
  var nodesCount = nodes.length;
  for(var i = 0; i < nodesCount; i++) {
   var node = nodes[i];
   var info = { node: node };
   if(requirePaddingManipulation) {
    var style = ASPx.GetCurrentStyle(node);
    info.paddingLeft = node.style.paddingLeft;
    info.totalPadding = ASPx.GetLeftRightPaddings(node, style);
   }
   nodeInfos.push(info);
  }
  if(requirePaddingManipulation) {
   for(var i = 0; i < nodesCount; i++) {
    var info = nodeInfos[i];
    ASPx.SetStyles(info.node, { paddingLeft: info.totalPadding }, true);
   }
  }
  for(var i = 0; i < nodesCount; i++) {
   var info = nodeInfos[i];
   var node = info.node;
   info.isTextShortened = node.scrollWidth > node.clientWidth;
   info.hasTitle = ASPx.Attr.GetAttribute(node, "title") !== null;
   if(!info.hasTitle || reassingExistingTooltips)
    info.title = ASPx.GetEllipsisTooltipText(node);
  }
  for(var i = 0; i < nodesCount; i++) {
   var info = nodeInfos[i];
   var node = info.node;
   if(info.isTextShortened && info.title) {
    ASPx.Attr.SetAttribute(node, "title", info.title);
    ASPx.Attr.SetAttribute(node, ELLIPSIS_TOOLTIP_MARKER_ATTR, true);
   }
   if(!info.isTextShortened && info.hasTitle)
    ASPx.Attr.RemoveAttribute(node, "title");
  }
  if(requirePaddingManipulation) {
   for(var i = 0; i < nodesCount; i++) {
    var info = nodeInfos[i];
    var node = info.node;
    node.style.paddingLeft = info.paddingLeft;
   }
  }
 },
 GetEllipsisNodes: function(element) {
  var ellipsibleNodes = ASPx.Data.CollectionToArray(ASPx.GetNodesByClassName(element, ELLIPSIS_MARKER_CLASS));
  if(ASPx.ElementHasCssClass(element, ELLIPSIS_MARKER_CLASS))
   ellipsibleNodes.push(element);
  return ellipsibleNodes.filter(function(node) {
   return !ASPx.Attr.IsExistsAttribute(node, "title") || ASPx.Attr.IsExistsAttribute(node, ELLIPSIS_TOOLTIP_MARKER_ATTR);
  });
 },
 RequireAssignTooltips: function() {
  return this.enableEllipsis && !ASPx.Browser.MobileUI;
 },
 RemoveEllipsisFromNode: function(node) {
  ASPx.RemoveClassNameFromElement(node, ELLIPSIS_MARKER_CLASS);
  this.RemoveEllipsisTooltip(node);
 },
 RemoveEllipsisTooltip: function(node) {
  if(ASPx.Attr.IsExistsAttribute(node, ELLIPSIS_TOOLTIP_MARKER_ATTR)) {
   ASPx.Attr.RemoveAttribute(node, "title");
   ASPx.Attr.RemoveAttribute(node, ELLIPSIS_TOOLTIP_MARKER_ATTR);
  }
 },
 OnBrowserWindowResize: function(e) {
 },
 OnBrowserWindowResizeInternal: function(e){
  if(this.BrowserWindowResizeSubscriber())
   this.OnBrowserWindowResize(e);
 },
 BrowserWindowResizeSubscriber: function() {
  return this.widthValueSetInPercentage || !this.IsAdjusted();
 },
 ShrinkWrappedText: function(getElements, key, reCorrect) {
  if(!ASPx.Browser.Safari) return;
  var elements = ASPx.CacheHelper.GetCachedElements(this, key, getElements, this.wrappedTextContainers);
  for(var i = 0; i < elements.length; i++)
   this.ShrinkWrappedTextInContainer(elements[i], reCorrect);
 },
 ShrinkWrappedTextInContainer: function(container, reCorrect) {
  if(!ASPx.Browser.Safari || !container || (container.dxWrappedTextShrinked && !reCorrect) || container.offsetWidth === 0) return;
  ASPx.ShrinkWrappedTextInContainer(container);
  container.dxWrappedTextShrinked = true;
 },
 CorrectWrappedText: function(getElements, key, reCorrect) {
  var elements = ASPx.CacheHelper.GetCachedElements(this, key, getElements, this.wrappedTextContainers);
  for(var i = 0; i < elements.length; i++)
   this.CorrectWrappedTextInContainer(elements[i], reCorrect);
 },
 CorrectWrappedTextInContainer: function(container, reCorrect) {
  if(!container || (container.dxWrappedTextCorrected && !reCorrect) || container.offsetWidth === 0) return;
  ASPx.AdjustWrappedTextInContainer(container);
  container.dxWrappedTextCorrected = true;
 },
 CorrectVerticalAlignment: function(alignMethod, getElements, key, reAlign) {
  var elements = ASPx.CacheHelper.GetCachedElements(this, key, getElements, this.verticalAlignedElements);
  for(var i = 0; i < elements.length; i++)
   this.CorrectElementVerticalAlignment(alignMethod, elements[i], reAlign);
 },
 CorrectElementVerticalAlignment: function(alignMethod, element, reAlign) {
  if(!element || (element.dxVerticalAligned && !reAlign) || element.offsetHeight === 0) return;
  alignMethod(element);
  element.dxVerticalAligned = true;
 },
 ClearVerticalAlignedElementsCache: function() {
  ASPx.CacheHelper.DropCache(this.verticalAlignedElements);
 },
 ClearWrappedTextContainersCache: function() {
  ASPx.CacheHelper.DropCache(this.wrappedTextContainers);
 },
 AdjustPagerControls: function() {
  if(typeof(ASPx.GetPagersCollection) != "undefined")
   ASPx.GetPagersCollection().AdjustControls(this.GetMainElement());
 },
 RegisterInControlTree: function(tree) {
  var mainElement = this.GetMainElement();
  if(mainElement && mainElement.id)
   tree.createNode(mainElement.id, this);
 },
 GetItemElementName: function(element) {
  var name = "";
  if(element.id)
   name = element.id.substring(this.name.length + 1);
  return name;
 },
 GetLinkElement: function(element) {
  if(element == null) return null;
  return (element.tagName == "A") ? element : ASPx.GetNodeByTagName(element, "A", 0);
 },
 GetInternalHyperlinkElement: function(parentElement, index) {
  var element = ASPx.GetNodeByTagName(parentElement, "A", index);
  if(element == null)
   element = ASPx.GetNodeByTagName(parentElement, "SPAN", index);
  return element;
 },
 OnControlClick: function(clickedElement, htmlEvent) {
 }
});
ASPxClientControl.Cast = function(obj) {
 if(typeof obj == "string")
  return window[obj];
 return obj;
};
ASPxClientControl.AdjustControls = function(container, collapseControls){
 aspxGetControlCollection().AdjustControls(container, collapseControls);
};
ASPxClientControl.GetControlCollection = function(){
 return aspxGetControlCollection();
};
ASPxClientControl.LeadingAfterInitCallConsts = {
 None: 0,
 Direct: 1,
 Reverse: 2
};
var ASPxClientComponent = ASPx.CreateClass(ASPxClientControl, {
 constructor: function (name) {
  this.constructor.prototype.constructor.call(this, name);
 },
 IsDOMDisposed: function() {
  return false;
 }
});
var ASPxClientControlCollection = ASPx.CreateClass(ASPx.CollectionBase, {
 constructor: function(){
  this.constructor.prototype.constructor.call(this);
  this.prevWndWidth = "";
  this.prevWndHeight = "";
  this.requestCountInternal = 0;
  this.BeforeInitCallback = new ASPxClientEvent();
  this.ControlsInitialized = new ASPxClientEvent();
  this.BrowserWindowResized = new ASPxClientEvent();
  this.BrowserWindowResizedInternal = new ASPxClientEvent();
  this.BeginCallback = new ASPxClientEvent();
  this.EndCallback = new ASPxClientEvent();
  this.CallbackError = new ASPxClientEvent();
  this.ValidationCompleted = new ASPxClientEvent();
  aspxGetControlCollectionCollection().Add(this);
 },
 Add: function(element) {
  var existsElement = this.Get(element.name);
  if(existsElement && existsElement !== element)
   this.Remove(existsElement);
  ASPx.CollectionBase.prototype.Add.call(this, element.name, element);
 },
 Remove: function(element) {
  if(element && element instanceof ASPxClientControl && !element.IsDisposed())
   element.OnDispose();
  ASPx.CollectionBase.prototype.Remove.call(this, element.name);
 },
 GetGlobal: function(name) {
  var result = window[name];
  return result && Ident.IsASPxClientControl(result)
   ? result
   : null;
 },
 GetByName: function(name){
  return this.Get(name) || this.GetGlobal(name);
 },
 GetCollectionType: function(){
  return ASPxClientControlCollection.BaseCollectionType;
 },
 GetControlsByPredicate: function(predicate) {
  var result = [];
  this.ForEachControl(function(control) {
   if(!predicate || predicate(control))
    result.push(control);
  });
  return result;
 },
 GetControlsByType: function(type) {
  return this.GetControlsByPredicate(function(control) {
   return type && (control instanceof type);
  });
 },
 ForEachControl: function(action, context) {
  context = context || this;
  this.elementsMap.forEachEntry(function(name, control) {
   if(Ident.IsASPxClientControl(control) && (!this.filterPredicate || this.filterPredicate(control)))
    return action.call(context, control);
  }, context);
 },
 ProcessActionByPredicate: function(action, predicate) {
  try {
   this.filterPredicate = predicate;
   action(this);
  }
  finally {
   this.filterPredicate = null;
  }
 },
 adjustControlsInternal: function(container, context, collapseControls, adjustFunc) {
  context = context || this;
  var func = function(control) {
   adjustFunc.call(context, control);
  };
  ASPx.GetControlAdjuster().adjustControlsInHierarchy(this, func, container, collapseControls);
 },
 AdjustControls: function(container, collapseControls) {
  container = container || null;
  window.setTimeout(function() {
   this.AdjustControlsCore(container, collapseControls);
  }.aspxBind(this), 0);
 },
 AdjustControlsCore: function(container, collapseControls) {
  var adjustFunction = function(control) { control.AdjustControl(); };
  this.adjustControlsInternal(container, this, collapseControls, adjustFunction);
 },
 CollapseControls: function(container) {
  this.ProcessControlsInContainer(container, function(control) {
   if(control.isASPxClientEdit)
    control.CollapseEditor();
   else if(!!window.ASPxClientRibbon && control instanceof ASPxClientRibbon)
    control.CollapseControl();
  });
 },
 AtlasInitialize: function(isCallback) {
  this.ForEachControl(function(control) {
   control.AtlasPreInitialize();
  });
  ASPx.ProcessScriptsAndLinks("", isCallback);
  this.ForEachControl(function(control) {
   control.AtlasInitialize();
  });
 },
 DOMContentLoaded: function() {
  this.ForEachControl(function(control){
    control.DOMContentLoaded();
  });
 },
 OnDocumentUnload: function() {
  this.ForEachControl(function(control) {
   control.RaiseUnload();
  });
 },
 Initialize: function() {
  ASPx.GetPostHandler().Post.AddHandler(
   function(s, e) { this.OnPost(e); }.aspxBind(this)
  );
  ASPx.GetPostHandler().PostFinalization.AddHandler(
   function(s, e) { this.OnPostFinalization(e); }.aspxBind(this)
  );
  this.InitializeElements(false );
  if(typeof(Sys) != "undefined" && typeof(Sys.Application) != "undefined") {
   var checkIsInitialized = function() {
    if(Sys.Application.get_isInitialized())
     Sys.Application.add_load(aspxCAInit);
    else
     setTimeout(checkIsInitialized, 0);
   };
   checkIsInitialized();
  }
  this.InitWindowSizeCache();
 },
 FinalizeInitialization: function() {
  this.ForEachControl(function(control) {
   control.FinalizeInitialization();
  });
 },
 InitializeElements: function(isCallback) {
  this.ForEachControl(function(control){
   if(!control.isInitialized)
    control.Initialize();
  });
  this.AfterInitializeElementsLeadingCall();
  this.AfterInitializeElements();
  this.RaiseControlsInitialized(isCallback);
 },
 AfterInitializeElementsLeadingCall: function() {
  var controls = {};
  controls[ASPxClientControl.LeadingAfterInitCallConsts.Direct] = [];
  controls[ASPxClientControl.LeadingAfterInitCallConsts.Reverse] = [];
  this.ForEachControl(function(control) {
   if(control.leadingAfterInitCall != ASPxClientControl.LeadingAfterInitCallConsts.None && !control.isInitialized)
    controls[control.leadingAfterInitCall].push(control);
  });
  var directInitControls = controls[ASPxClientControl.LeadingAfterInitCallConsts.Direct],
   reverseInitControls = controls[ASPxClientControl.LeadingAfterInitCallConsts.Reverse];
  for(var i = 0, control; control = directInitControls[i]; i++)
   control.AfterInitialize();
  for(var i = reverseInitControls.length - 1, control; control = reverseInitControls[i]; i--)
   control.AfterInitialize();
 },
 AfterInitializeElements: function() {
  this.ForEachControl(function(control) {
   if(control.leadingAfterInitCall == ASPxClientControl.LeadingAfterInitCallConsts.None && !control.isInitialized)
    control.AfterInitialize();
  });
  ASPx.RippleHelper.Init();
 },
 DoFinalizeCallback: function() {
  this.ForEachControl(function(control){
   control.DoFinalizeCallback();
  });
 },
 ProcessControlsInContainer: function(container, processFunc, filterFunc) {
  this.ForEachControl(function(control){
   if((!filterFunc || filterFunc(control)) && (!container || this.IsControlInContainer(container, control)))
    processFunc(control);
  });
 },
 IsControlInContainer: function(container, control) {
  if(control.GetMainElement) {
   var mainElement = control.GetMainElement();
   if(mainElement && (mainElement != container)) {
    if(ASPx.GetIsParent(container, mainElement))
     return true;
   }
  }
  return false;
 },
 RaiseControlsInitialized: function(isCallback) {
  if(typeof(isCallback) == "undefined")
   isCallback = true;
  var args = new ASPxClientControlsInitializedEventArgs(isCallback);
  if(!this.ControlsInitialized.IsEmpty())
   this.ControlsInitialized.FireEvent(this, args);
  this.ForEachControl(function(control){
   control.OnGlobalControlsInitialized(args);
  });
 },
 RaiseBrowserWindowResized: function() {
  var args = new ASPxClientEventArgs();
  if(!this.BrowserWindowResized.IsEmpty())
   this.BrowserWindowResized.FireEvent(this, args);
  this.ForEachControl(function(control){
   control.OnGlobalBrowserWindowResized(args);
  });
 },
 RaiseBrowserWindowResizedInternal: function(eventInfo) {
  var args = new ASPxClientBrowserWindowResizedInternalEventArgs(eventInfo);
  if(!this.BrowserWindowResizedInternal.IsEmpty())
   this.BrowserWindowResizedInternal.FireEvent(this, args);
 },
 RaiseBeginCallback: function (control, command) {
  var args = new ASPxClientGlobalBeginCallbackEventArgs(control, command);
  if(!this.BeginCallback.IsEmpty())
   this.BeginCallback.FireEvent(this, args);
  this.ForEachControl(function(control){
   control.OnGlobalBeginCallback(args);
  });
  this.IncrementRequestCount();
 },
 RaiseEndCallback: function (control) {
  var args = new ASPxClientGlobalEndCallbackEventArgs(control);
  if (!this.EndCallback.IsEmpty())
   this.EndCallback.FireEvent(this, args);
  this.ForEachControl(function(control){
   control.OnGlobalEndCallback(args);
  });
  this.DecrementRequestCount();
 },
 InCallback: function() {
  return this.requestCountInternal > 0;
 },
 RaiseCallbackError: function (control, message, callbackId) {
  var args = new ASPxClientGlobalCallbackErrorEventArgs(control, message, callbackId);
  if (!this.CallbackError.IsEmpty())
   this.CallbackError.FireEvent(this, args);
  this.ForEachControl(function(control){
   control.OnGlobalCallbackError(args);
  });
  if(args.handled)
   return { isHandled: true, errorMessage: args.message };
  return { isHandled: false, errorMessage: message };
 },
 RaiseValidationCompleted: function (container, validationGroup, invisibleControlsValidated, isValid, firstInvalidControl, firstVisibleInvalidControl) {
  var args = new ASPxClientValidationCompletedEventArgs(container, validationGroup, invisibleControlsValidated, isValid, firstInvalidControl, firstVisibleInvalidControl);
  if (!this.ValidationCompleted.IsEmpty())
   this.ValidationCompleted.FireEvent(this, args);
  this.ForEachControl(function(control){
   control.OnGlobalValidationCompleted(args);
  });
  return args.isValid;
 },
 Before_WebForm_InitCallback: function(callbackOwnerID){
  var args = new BeforeInitCallbackEventArgs(callbackOwnerID);
  this.BeforeInitCallback.FireEvent(this, args);
 },
 InitWindowSizeCache: function(){
  this.prevWndWidth = ASPx.GetDocumentClientWidth();
  this.prevWndHeight = ASPx.GetDocumentClientHeight();
 },
 OnBrowserWindowResize: function(evt){
  var shouldIgnoreNestedEvents = ASPx.Browser.IE && ASPx.Browser.MajorVersion == 8;
  if(shouldIgnoreNestedEvents) {
   if(this.prevWndWidth === "" || this.prevWndHeight === "" || this.browserWindowResizeLocked)
    return;
   this.browserWindowResizeLocked = true;
  }
  this.OnBrowserWindowResizeCore(evt);
  if(shouldIgnoreNestedEvents)
   this.browserWindowResizeLocked = false;
 },
 OnBrowserWindowResizeCore: function(htmlEvent){
  var args = this.CreateOnBrowserWindowResizeEventArgs(htmlEvent);
  if(this.CalculateIsBrowserWindowSizeChanged()) {
   this.RaiseBrowserWindowResizedInternal(args);
   this.adjustControlsInternal(null, this, true, function(control) {
    if(control.IsDOMInitialized())
     control.OnBrowserWindowResizeInternal(args);
   });
   this.RaiseBrowserWindowResized();
  }
 },
 CreateOnBrowserWindowResizeEventArgs: function(htmlEvent) {
  return {
   htmlEvent: htmlEvent,
   wndWidth: ASPx.GetDocumentClientWidth(),
   wndHeight: ASPx.GetDocumentClientHeight(),
   prevWndWidth: this.prevWndWidth,
   prevWndHeight: this.prevWndHeight,
   virtualKeyboardShownOnAndroid: this.IsVirtualKeyboardShownOnAndroid()
  };
 },
 IsVirtualKeyboardShownOnAndroid: function() {
  if(!ASPx.Browser.AndroidMobilePlatform)
   return false;
  var documentClientWidth = ASPx.GetDocumentClientWidth();
  var documentClientHeight = ASPx.GetDocumentClientHeight();
  var isDocumentClientHeightChangedOnly = documentClientWidth === this.prevWndWidth && documentClientHeight !== this.prevWndHeight;
  return isDocumentClientHeightChangedOnly && this.IsElementSupportKeyboardInput(document.activeElement);
 },
 IsElementSupportKeyboardInput: function(element) {
  if(!element || !element.tagName)
   return false;
  var supportedKeyboardInputTagNames = ["INPUT", "TEXTAREA"];
  return supportedKeyboardInputTagNames.indexOf(element.tagName) !== -1;
 },
 CalculateIsBrowserWindowSizeChanged: function(){
  var wndWidth = ASPx.GetDocumentClientWidth();
  var wndHeight = ASPx.GetDocumentClientHeight();
  var isBrowserWindowSizeChanged = (this.prevWndWidth != wndWidth) || (this.prevWndHeight != wndHeight);
  if(isBrowserWindowSizeChanged){
   this.prevWndWidth = wndWidth;
   this.prevWndHeight = wndHeight;
   return true;
  }
  return false;
 },
 OnPost: function(args){
  this.ForEachControl(function(control) {
   control.OnPost(args);
  }, null);
 },
 OnPostFinalization: function(args){
  this.ForEachControl(function(control) {
   control.OnPostFinalization(args);
  }, null);
 },
 IncrementRequestCount: function() {
  this.requestCountInternal++;
 },
 DecrementRequestCount: function() {
  this.requestCountInternal--;
 },
 ResetRequestCount: function() {
  this.requestCountInternal = 0;
 }
});
ASPxClientControlCollection.BaseCollectionType = "Control";
var controlCollection = null;
function aspxGetControlCollection(){
 if(controlCollection == null) {
  controlCollection = new ASPxClientControlCollection();
  if(ASPx.loadControlCollectionPreloadHandlers)
   ASPx.loadControlCollectionPreloadHandlers(controlCollection);
 }
 return controlCollection;
}
var ControlCollectionCollection = ASPx.CreateClass(ASPx.CollectionBase, {
 constructor: function(){
  this.constructor.prototype.constructor.call(this);
 },
 Add: function(element) {
  var key = element.GetCollectionType();
  if(!key) throw "The collection type isn't specified.";
  if(this.Get(key)) throw "The collection with type='" + key + "' already exists.";
  ASPx.CollectionBase.prototype.Add.call(this, key, element);
 },
 RemoveDisposedControls: function(){
  var baseCollection = this.Get(ASPxClientControlCollection.BaseCollectionType);
  var disposedControls = [];
  baseCollection.elementsMap.forEachEntry(function(name, control) {
   if(!ASPx.Ident.IsASPxClientControl(control)) return;
   if(control.IsDOMDisposed())
    disposedControls.push(control);
  });
  this.RemoveControls(disposedControls);
 },
 RemoveControls: function(controls){
  for(var i = 0; i < controls.length; i++) {
   this.elementsMap.forEachEntry(function(key, collection) {
    if(ASPx.Ident.IsASPxClientCollection(collection))
     collection.Remove(controls[i]);
   });
  }
 }
});
var controlCollectionCollection = null;
function aspxGetControlCollectionCollection(){
 if(controlCollectionCollection == null)
  controlCollectionCollection = new ControlCollectionCollection();
 return controlCollectionCollection;
}
var AriaDescriptionAttributes = {
 Role: "0",
 AriaLabel: "1",
 TabIndex: "2",
 AriaOwns: "3",
 AriaDescribedBy: "4",
 AriaDisabled: "5",
 AriaHasPopup: "6",
 AriaLevel: "7"
};
var AriaDescriptor = ASPx.CreateClass(null, {
 constructor: function(ownerControl, description) {
  this.ownerControl = ownerControl;
  this.rootElement = ownerControl.GetMainElement();
  this.description = description;
 },
 setDescription: function(name, argList) {
  var description = this.findChildDescription(name);
  if(description) {
   var elements = name ? this.rootElement.querySelectorAll(this.getDescriptionSelector(description)) : [this.rootElement];
   for(var i = 0; i < elements.length; i++)
    this.applyDescriptionToElement(elements[i], description, argList[i] || argList[0]);
  }
 },
 getDescriptionName: function(description) {
  return description.n;
 },
 getDescriptionSelector: function(description) {
  return description.s;
 },
 findChildDescription: function(name) {
  if(name === this.getDescriptionName(this.description))
   return this.description;
  var childCollection = this.description.c || [];
  for(var i = 0; i < childCollection.length; i++) {
   var childDescription = childCollection[i];
   if(this.getDescriptionName(childDescription) === name)
    return childDescription;
  }
  return null;
 },
 applyDescriptionToElement: function(element, description, args) {
  if(!description || !element)
   return;
  this.trySetAriaOwnsAttribute(element, description);
  this.trySetAriaDescribedByAttribute(element, description);
  this.trySetAttribute(element, description, AriaDescriptionAttributes.Role, "role");
  this.trySetAttribute(element, description, AriaDescriptionAttributes.TabIndex, "tabindex");
  this.trySetAttribute(element, description, AriaDescriptionAttributes.AriaLevel, "aria-level");
  this.executeOnDescription(description, AriaDescriptionAttributes.AriaLabel, function(value) {
   ASPx.Attr.SetAttribute(element, "aria-label", ASPx.Str.ApplyReplacement(value, args));
  });
  this.executeOnDescription(description, AriaDescriptionAttributes.AriaDisabled, function(value) {
   ASPx.Attr.SetAttribute(element, "aria-disabled", !!value);
  });
  this.executeOnDescription(description, AriaDescriptionAttributes.AriaHasPopup, function(value) {
   ASPx.Attr.SetAttribute(element, "aria-haspopup", !!value);
  });
 },
 trySetAriaDescribedByAttribute: function(element, description) {
  this.executeOnDescription(description, AriaDescriptionAttributes.AriaDescribedBy, function(selectorInfo) {
   var descriptor = this.getNodesBySelector(element, selectorInfo.descriptorSelector)[0];
   var target = this.getNodesBySelector(element, selectorInfo.targetSelector)[0];
   if(!target || !descriptor)
    return;
   ASPx.Attr.SetAttribute(target, "aria-describedby", this.getNodeId(descriptor));
  });
 },
 trySetAriaOwnsAttribute: function(element, description) {
  this.executeOnDescription(description, AriaDescriptionAttributes.AriaOwns, function(selector) {
   var ownedNodes = this.getNodesBySelector(element, selector);
   var ariaOwnsAttributeValue = "";
   for(var i = 0; i < ownedNodes.length; i++)
    ariaOwnsAttributeValue += (this.getNodeId(ownedNodes[i]) + (i != ownedNodes.length - 1 ? " " : ""));
   ASPx.Attr.SetAttribute(element, "aria-owns", ariaOwnsAttributeValue);
  });
 },
 trySetAttribute: function(element, description, ariaAttribute, attributeName) {
  this.executeOnDescription(description, ariaAttribute, function(value) {
   ASPx.Attr.SetAttribute(element, attributeName, description[ariaAttribute]);
  });
 },
 executeOnDescription: function(description, ariaDescAttr, callback) {
  var descInfo = description[ariaDescAttr];
  if(ASPx.IsExists(descInfo))
   callback.aspxBind(this)(descInfo);
 },
 getNodesBySelector: function(element, selector) {
  var id = element.id || "";
  var childNodes = element.querySelectorAll("#" + this.getNodeId(element) + " > " + selector);
  ASPx.Attr.SetOrRemoveAttribute(element, "id", id);
  return childNodes;
 },
 getNodeId: function(node) {
  if(!node.id)
   node.id = this.createRandomId();
  return node.id;
 },
 createRandomId: function() {
  return "r" + ASPx.CreateGuid();
 }
});
PagerCommands = {
 Next : "PBN",
 Prev : "PBP",
 Last : "PBL",
 First : "PBF",
 PageNumber : "PN",
 PageSize : "PSP"
};
ASPx.callbackProcessed = false;
ASPx.Callback = function(result, context){
 var collection = aspxGetControlCollection();
 collection.DoFinalizeCallback();
 var control = collection.Get(context);
 if(control != null)
  control.DoCallback(result);
 ASPx.RippleHelper.ReInit();
 ASPx.callbackProcessed = true;
};
ASPx.CallbackError = function(result, context){
 var control = aspxGetControlCollection().Get(context);
 if(control != null)
  control.DoCallbackError(result, false);
 ASPx.callbackProcessed = true;
};
ASPx.CClick = function(name, evt) {
 var control = aspxGetControlCollection().Get(name);
 if(control != null) control.DoControlClick(evt);
};
function aspxCAInit() {
 var isAppInit = typeof(Sys$_Application$initialize) != "undefined" &&
  ASPx.FunctionIsInCallstack(arguments.callee, Sys$_Application$initialize, 10 );
 aspxGetControlCollection().AtlasInitialize(!isAppInit);
}
ASPx.Evt.AttachEventToElement(window, "resize", aspxGlobalWindowResize);
function aspxGlobalWindowResize(evt){
 aspxGetControlCollection().OnBrowserWindowResize(evt);
}
ASPx.Evt.AttachEventToElement(window, "unload", aspxClassesUnload);
function aspxClassesUnload(evt) {
 aspxGetControlCollection().OnDocumentUnload();
}
ASPx.attachToLoad(aspxClassesDOMContentLoaded);
function aspxClassesDOMContentLoaded(evt){
 aspxGetControlCollection().DOMContentLoaded();
}
ASPx.GetControlCollection = aspxGetControlCollection;
ASPx.GetControlCollectionCollection = aspxGetControlCollectionCollection;
ASPx.GetPersistentControlPropertiesStorage = _aspxGetPersistentControlPropertiesStorage;
ASPx.PagerCommands = PagerCommands;
ASPx.ELLIPSIS_MARKER_CLASS = ELLIPSIS_MARKER_CLASS;
window.ASPxClientBeginCallbackEventArgs = ASPxClientBeginCallbackEventArgs;
window.ASPxClientGlobalBeginCallbackEventArgs = ASPxClientGlobalBeginCallbackEventArgs;
window.ASPxClientEndCallbackEventArgs = ASPxClientEndCallbackEventArgs;
window.ASPxClientGlobalEndCallbackEventArgs = ASPxClientGlobalEndCallbackEventArgs;
window.ASPxClientCallbackErrorEventArgs = ASPxClientCallbackErrorEventArgs;
window.ASPxClientGlobalCallbackErrorEventArgs = ASPxClientGlobalCallbackErrorEventArgs;
window.ASPxClientCustomDataCallbackEventArgs = ASPxClientCustomDataCallbackEventArgs;
window.ASPxClientValidationCompletedEventArgs = ASPxClientValidationCompletedEventArgs;
window.ASPxClientControlsInitializedEventArgs = ASPxClientControlsInitializedEventArgs;
window.ASPxClientControlBeforePronounceEventArgs = ASPxClientControlBeforePronounceEventArgs;
window.ASPxClientControlUnloadEventArgs = ASPxClientControlUnloadEventArgs;
window.ASPxClientEndFocusEventArgs = ASPxClientEndFocusEventArgs;
window.ASPxClientItemFocusedEventArgs = ASPxClientItemFocusedEventArgs;
window.ASPxClientControlCollection = ASPxClientControlCollection;
window.ASPxClientControlBase = ASPxClientControlBase;
window.ASPxClientControl = ASPxClientControl;
window.ASPxClientComponent = ASPxClientComponent;
})(ASPx);

(function () {
 var PositionAnimationTransition = ASPx.CreateClass(ASPx.AnimationTransitionBase, {
  constructor: function (element, options) {
   this.constructor.prototype.constructor.call(this, element, options);
   this.direction = options.direction;
   this.animationTransition = this.createAnimationTransition();
   AnimationHelper.appendWKAnimationClassNameIfRequired(this.element);
  },
  Start: function (to) {
   var from = this.GetValue();
   if(ASPx.AnimationUtils.CanUseCssTransform()) {
    from = this.convertPosToCssTransformPos(from);
    to = this.convertPosToCssTransformPos(to);
   }
   this.animationTransition.Start(from, to);
  },
  SetValue: function (value) {
   ASPx.AnimationUtils.SetTransformValue(this.element, value, this.direction == AnimationHelper.SLIDE_VERTICAL_DIRECTION);
  },
  GetValue: function () {
   return ASPx.AnimationUtils.GetTransformValue(this.element, this.direction == AnimationHelper.SLIDE_VERTICAL_DIRECTION);
  },
  createAnimationTransition: function () {
   var transition = ASPx.AnimationUtils.CanUseCssTransform() ? this.createTransformAnimationTransition() : this.createPositionAnimationTransition();
   transition.transition = ASPx.AnimationConstants.Transitions.POW_EASE_OUT;
   return transition;
  },
  createTransformAnimationTransition: function () {
   return ASPx.AnimationUtils.createCssAnimationTransition(this.element, {
    property: ASPx.AnimationUtils.CanUseCssTransform(),
    duration: this.duration,
    onComplete: this.onComplete
   });
  },
  createPositionAnimationTransition: function () {
   return AnimationHelper.createAnimationTransition(this.element, {
    property: this.direction == AnimationHelper.SLIDE_VERTICAL_DIRECTION ? "top" : "left",
    unit: "px",
    duration: this.duration,
    onComplete: this.onComplete
   });
  },
  convertPosToCssTransformPos: function (position) {
   return ASPx.AnimationUtils.GetTransformCssText(position, this.direction == AnimationHelper.SLIDE_VERTICAL_DIRECTION);
  }
 });
 var AnimationHelper = {
  SLIDE_HORIZONTAL_DIRECTION: 0,
  SLIDE_VERTICAL_DIRECTION: 1,
  SLIDE_TOP_DIRECTION: 0,
  SLIDE_RIGHT_DIRECTION: 1,
  SLIDE_BOTTOM_DIRECTION: 2,
  SLIDE_LEFT_DIRECTION: 3,
  SLIDE_CONTAINER_CLASS: "dxAC",
  MAXIMUM_DEPTH: 3,
  createAnimationTransition: function (element, options) {
   if(options.onStep)
    options.animationEngineType = AnimationEngineType.JS;
   switch(options.animationEngineType) {
    case AnimationEngineType.JS:
     return ASPx.AnimationUtils.createJsAnimationTransition(element, options);
    case AnimationEngineType.CSS:
     return ASPx.AnimationUtils.createCssAnimationTransition(element, options);
    default:
     return ASPx.AnimationUtils.CanUseCssTransition() ? ASPx.AnimationUtils.createCssAnimationTransition(element, options) :
      ASPx.AnimationUtils.createJsAnimationTransition(element, options);
   }
  },
  createMultipleAnimationTransition: function (element, options) {
   return ASPx.AnimationUtils.createMultipleAnimationTransition(element, options);
  },
  createSimpleAnimationTransition: function (options) {
   return ASPx.AnimationUtils.createSimpleAnimationTransition(options);
  },
  cancelAnimation: function (element) {
   ASPx.AnimationTransitionBase.Cancel(element);
  },
  fadeIn: function(element, onComplete, duration, animationEngineType) {
   AnimationHelper.fadeTo(element, {
    from: 0, to: 1,
    onComplete: onComplete,
    animationEngineType: animationEngineType || AnimationEngineType.DEFAULT,
    duration: duration || ASPx.AnimationConstants.Durations.DEFAULT
   });
  },
  fadeOut: function(element, onComplete, duration, animationEngineType) {
   AnimationHelper.fadeTo(element, {
    from: ASPx.GetElementOpacity(element), to: 0,
    onComplete: onComplete,
    animationEngineType: animationEngineType || AnimationEngineType.DEFAULT,
    duration: duration || ASPx.AnimationConstants.Durations.DEFAULT
   });
  },
  fadeTo: function (element, options) {
   options.property = "opacity";
   if(!options.duration)
    options.duration = ASPx.AnimationConstants.Durations.SHORT;
   var transition = AnimationHelper.createAnimationTransition(element, options);
   if(!ASPx.IsExists(options.from))
    options.from = transition.GetValue();
   transition.Start(options.from, options.to);
  },
  slideIn: function (element, direction, onComplete, animationEngineType, rtl) {
   AnimationHelper.setOpacity(element, 1);
   var animationContainer = AnimationHelper.getSlideAnimationContainer(element, true, true);
   var pos = AnimationHelper.getSlideInStartPos(animationContainer, direction, rtl);
   var transition = AnimationHelper.createSlideTransition(animationContainer, direction,
    function (el) {
     AnimationHelper.resetSlideAnimationContainerSize(animationContainer);
     if(onComplete)
      onComplete(el);
    }, animationEngineType, rtl);
   transition.Start(pos, 0);
  },
  slideOut: function (element, direction, onComplete, animationEngineType, rtl) {
   var animationContainer = AnimationHelper.getSlideAnimationContainer(element, true, true);
   var pos = AnimationHelper.getSlideOutFinishPos(animationContainer, direction, rtl);
   var transition = AnimationHelper.createSlideTransition(animationContainer, direction,
    function (el) {
     AnimationHelper.setOpacity(el.firstChild, 0);
     if(onComplete)
      onComplete(el);
    }, animationEngineType, rtl);
   transition.Start(pos);
  },
  slideTo: function (element, options) {
   if(!ASPx.IsExists(options.direction))
    options.direction = AnimationHelper.SLIDE_HORIZONTAL_DIRECTION;
   var transition = new PositionAnimationTransition(element, options);
   transition.Start(options.to);
  },
  setOpacity: function (element, value) {
   ASPx.AnimationUtils.setOpacity(element, value);
  },
  appendWKAnimationClassNameIfRequired: function (element) {
   if(ASPx.AnimationUtils.CanUseCssTransform() && ASPx.Browser.WebKitFamily && !ASPx.ElementHasCssClass(element, "dx-wbv"))
    element.className += " dx-wbv";
  },
  findSlideAnimationContainer: function (element) {
   var container = element;
   for(var i = 0; i < AnimationHelper.MAXIMUM_DEPTH; i++) {
    if(container.tagName == "BODY")
     return null;
    if(ASPx.ElementHasCssClass(container, AnimationHelper.SLIDE_CONTAINER_CLASS))
     return container;
    container = container.parentNode;
   }
   return null;
  },
  createSlideAnimationContainer: function (element) {
   var rootContainer = document.createElement("DIV");
   ASPx.SetStyles(rootContainer, {
    className: AnimationHelper.SLIDE_CONTAINER_CLASS,
    overflow: "hidden"
   });
   var elementContainer = document.createElement("DIV");
   rootContainer.appendChild(elementContainer);
   var parentNode = element.parentNode;
   parentNode.insertBefore(rootContainer, element);
   elementContainer.appendChild(element);
   return rootContainer;
  },
  getSlideAnimationContainer: function (element, create, fixSize) {
   if(!element) return;
   var width = element.offsetWidth;
   var height = element.offsetHeight;
   var container;
   if(element.className == AnimationHelper.SLIDE_CONTAINER_CLASS)
    container = element;
   if(!container)
    container = AnimationHelper.findSlideAnimationContainer(element);
   if(!container && create)
    container = AnimationHelper.createSlideAnimationContainer(element);
   if(container && fixSize) {
    ASPx.SetStyles(container, {
     width: width, height: height
    });
    ASPx.SetStyles(container.firstChild, {
     width: width, height: height
    });
   }
   return container;
  },
  resetSlideAnimationContainerSize: function (container) {
   ASPx.SetStyles(container, {
    width: "", height: ""
   });
   ASPx.SetStyles(container.firstChild, {
    width: "", height: ""
   });
  },
  getModifyProperty: function (direction, rtl) {
   if(direction == AnimationHelper.SLIDE_TOP_DIRECTION || direction == AnimationHelper.SLIDE_BOTTOM_DIRECTION)
    return "marginTop";
   return rtl ? "margin-right" : "margin-left";
  },
  createSlideTransition: function (animationContainer, direction, complete, animationEngineType, rtl) {
   if(rtl == undefined)
    rtl = false;
   return AnimationHelper.createAnimationTransition(animationContainer.firstChild, {
    unit: "px",
    property: AnimationHelper.getModifyProperty(direction, rtl),
    onComplete: complete,
    animationEngineType: animationEngineType
   });
  },
  getSlideInStartPos: function (animationContainer, direction, rtl) {
   var dir = rtl ? -1 : 1;
   switch (direction) {
    case AnimationHelper.SLIDE_TOP_DIRECTION:
     return animationContainer.offsetHeight;
    case AnimationHelper.SLIDE_LEFT_DIRECTION:
     return animationContainer.offsetWidth * dir;
    case AnimationHelper.SLIDE_RIGHT_DIRECTION:
     return -animationContainer.offsetWidth * dir;
    case AnimationHelper.SLIDE_BOTTOM_DIRECTION:
     return -animationContainer.offsetHeight;
   }
  },
  getSlideOutFinishPos: function (animationContainer, direction, rtl) {
   var dir = rtl ? -1 : 1;
   switch (direction) {
    case AnimationHelper.SLIDE_TOP_DIRECTION:
     return -animationContainer.offsetHeight;
    case AnimationHelper.SLIDE_LEFT_DIRECTION:
     return -animationContainer.offsetWidth * dir;
    case AnimationHelper.SLIDE_RIGHT_DIRECTION:
     return animationContainer.offsetWidth * dir;
    case AnimationHelper.SLIDE_BOTTOM_DIRECTION:
     return animationContainer.offsetHeight;
   }
  }
 };
 var GestureHandler = ASPx.CreateClass(null, {
  constructor: function (getAnimationElement, canHandle, allowStart) {
   this.getAnimationElement = getAnimationElement;
   this.canHandle = canHandle;
   this.allowStart = allowStart;
   this.startMousePosX = 0;
   this.startMousePosY = 0;
   this.startTime = null;
   this.isEventsPrevented = false;
   this.savedElements = [];
  },
  OnSelectStart: function(evt) {
   ASPx.Evt.PreventEvent(evt);
  },
  OnDragStart: function(evt) {
   ASPx.Evt.PreventEvent(evt);
  },
  OnMouseDown: function (evt) {
   this.startMousePosX = ASPx.Evt.GetEventX(evt);
   this.startMousePosY = ASPx.Evt.GetEventY(evt);
   this.startTime = new Date();
  },
  OnMouseMove: function(evt) {
   if(!ASPx.Browser.MobileUI)
    ASPx.Selection.Clear();
   if(Math.abs(this.GetCurrentDistanceX(evt)) < GestureHandler.SLIDER_MIN_START_DISTANCE && Math.abs(this.GetCurrentDistanceY(evt)) < GestureHandler.SLIDER_MIN_START_DISTANCE)
    GesturesHelper.isExecutedGesture = false;
  },
  OnMouseUp: function (evt) {
  },
  CanHandleEvent: function (evt) {
   return !this.canHandle || this.canHandle(evt);
  },
  IsStartAllowed: function(value) {
   return !this.allowStart || this.allowStart(value);
  },
  RollbackGesture: function () {
  },
  GetRubberPosition: function (position) {
   return position / GestureHandler.FACTOR_RUBBER;
  },
  GetCurrentDistanceX: function (evt) {
   return ASPx.Evt.GetEventX(evt) - this.startMousePosX;
  },
  GetCurrentDistanceY: function (evt) {
   return ASPx.Evt.GetEventY(evt) - this.startMousePosY;
  },
  GetDistanceLimit: function () {
   return (new Date() - this.startTime) < GestureHandler.MAX_TIME_SPAN ? GestureHandler.MIN_DISTANCE_LIMIT : GestureHandler.MAX_DISTANCE_LIMIT;
  },
  GetContainerElement: function () {
  },
  AttachPreventEvents: function (evt) {
   if(!this.isEventsPrevented) {
    var element = ASPx.Evt.GetEventSource(evt);
    var container = this.GetContainerElement();
    while(element && element != container) {
     ASPx.Evt.AttachEventToElement(element, "mouseup", ASPx.Evt.PreventEvent);
     ASPx.Evt.AttachEventToElement(element, "click", ASPx.Evt.PreventEvent);
     this.savedElements.push(element);
     element = element.parentNode;
    }
    this.isEventsPrevented = true;
   }
  },
  DetachPreventEvents: function () {
   if(this.isEventsPrevented) {
    window.setTimeout(function () {
     while(this.savedElements.length > 0) {
      var element = this.savedElements.pop();
      ASPx.Evt.DetachEventFromElement(element, "mouseup", ASPx.Evt.PreventEvent);
      ASPx.Evt.DetachEventFromElement(element, "click", ASPx.Evt.PreventEvent);
     }
    }.aspxBind(this), 0);
    this.isEventsPrevented = false;
   }
  }
 });
 GestureHandler.MAX_DISTANCE_LIMIT = 70;
 GestureHandler.MIN_DISTANCE_LIMIT = 10;
 GestureHandler.MIN_START_DISTANCE = 0;
 GestureHandler.SLIDER_MIN_START_DISTANCE = 5;
 GestureHandler.MAX_TIME_SPAN = 300;
 GestureHandler.FACTOR_RUBBER = 4;
 GestureHandler.RETURN_ANIMATION_DURATION = 150;
 var SwipeSlideGestureHandler = ASPx.CreateClass(GestureHandler, {
  constructor: function (getAnimationElement, direction, canHandle, backward, forward, rollback, move) {
   this.constructor.prototype.constructor.call(this, getAnimationElement, canHandle);
   this.slideElement = this.getAnimationElement();
   this.container = this.slideElement.parentNode;
   this.direction = direction;
   this.backward = backward;
   this.forward = forward;
   this.rollback = rollback;
   this.slideElementSize = 0;
   this.containerElementSize = 0;
   this.startSliderElementPosition = 0;
   this.centeredSlideElementPosition = 0;
  },
  OnMouseDown: function (evt) {
   GestureHandler.prototype.OnMouseDown.call(this, evt);
   this.slideElementSize = this.GetElementSize();
   this.startSliderElementPosition = this.GetElementPosition();
   this.containerElementSize = this.GetContainerElementSize();
   if(this.slideElementSize <= this.containerElementSize)
    this.centeredSlideElementPosition = (this.containerElementSize - this.slideElementSize) / 2;
  },
  OnMouseMove: function (evt) {
   GestureHandler.prototype.OnMouseMove.call(this, evt);
   if(!ASPx.Browser.TouchUI && !ASPx.GetIsParent(this.container, ASPx.Evt.GetEventSource(evt))) {
    GesturesHelper.OnDocumentMouseUp(evt);
    return;
   }
   var distance = this.GetCurrentDistance(evt);
   if(Math.abs(distance) < GestureHandler.SLIDER_MIN_START_DISTANCE || ASPx.TouchUIHelper.isGesture)
    return;
   this.SetElementPosition(this.GetCalculatedPosition(distance));
   this.AttachPreventEvents(evt);
   ASPx.Evt.PreventEvent(evt);
  },
  GetCalculatedPosition: function (distance) {
   ASPx.AnimationTransitionBase.Cancel(this.slideElement);
   var position = this.startSliderElementPosition + distance,
    maxPosition = -(this.slideElementSize - this.containerElementSize),
    minPosition = 0;
   if(this.centeredSlideElementPosition > 0)
    position = this.GetRubberPosition(distance) + this.centeredSlideElementPosition;
   else if(position > minPosition)
    position = this.GetRubberPosition(distance);
   else if(position < maxPosition)
    position = this.GetRubberPosition(distance) + maxPosition;
   return position;
  },
  OnMouseUp: function (evt) {
   this.DetachPreventEvents();
   if(this.GetCurrentDistance(evt) != 0)
    this.OnMouseUpCore(evt);
  },
  OnMouseUpCore: function (evt) {
   var distance = this.GetCurrentDistance(evt);
   if(this.centeredSlideElementPosition > 0 || this.CheckSlidePanelIsOutOfBounds())
    this.PerformRollback();
   else
    this.PerformAction(distance);
  },
  PerformAction: function (distance) {
   if(Math.abs(distance) < this.GetDistanceLimit())
    this.PerformRollback();
   else if(distance < 0)
    this.PerformForward();
   else
    this.PerformBackward();
  },
  PerformBackward: function () {
   this.backward();
  },
  PerformForward: function () {
   this.forward();
  },
  PerformRollback: function () {
   this.rollback();
  },
  CheckSlidePanelIsOutOfBounds: function () {
   var minOffset = -(this.slideElementSize - this.containerElementSize), maxOffset = 0;
   var slideElementPos = this.GetElementPosition();
   if(slideElementPos > maxOffset || slideElementPos < minOffset)
    return true;
   return false;
  },
  GetContainerElement: function () {
   return this.container;
  },
  GetElementSize: function () {
   return this.IsHorizontalDirection() ? this.slideElement.offsetWidth : this.slideElement.offsetHeight;
  },
  GetContainerElementSize: function () {
   return this.IsHorizontalDirection() ? ASPx.GetClearClientWidth(this.container) : ASPx.GetClearClientHeight(this.container);
  },
  GetCurrentDistance: function (evt) {
   return this.IsHorizontalDirection() ? this.GetCurrentDistanceX(evt) : this.GetCurrentDistanceY(evt);
  },
  GetElementPosition: function () {
   return ASPx.AnimationUtils.GetTransformValue(this.slideElement, !this.IsHorizontalDirection());
  },
  SetElementPosition: function (position) {
   ASPx.AnimationUtils.SetTransformValue(this.slideElement, position, !this.IsHorizontalDirection());
  },
  IsHorizontalDirection: function () {
   return this.direction == AnimationHelper.SLIDE_HORIZONTAL_DIRECTION;
  }
 });
 var SwipeSimpleSlideGestureHandler = ASPx.CreateClass(SwipeSlideGestureHandler, {
  constructor: function (getAnimationElement, direction, canHandle, backward, forward, rollback, updatePosition) {
   this.constructor.prototype.constructor.call(this, getAnimationElement, direction, canHandle, backward, forward, rollback);
   this.container = this.slideElement;
   this.updatePosition = updatePosition;
   this.prevDistance = 0;
  },
  OnMouseDown: function (evt) {
   GestureHandler.prototype.OnMouseDown.call(this, evt);
   this.prevDistance = 0;
  },
  OnMouseUpCore: function (evt) {
   this.PerformAction(this.GetCurrentDistance(evt));
  },
  PerformAction: function (distance) {
   if(Math.abs(distance) < this.GetDistanceLimit())
    this.PerformRollback();
   else if(distance < 0)
    this.PerformForward();
   else
    this.PerformBackward();
  },
  GetCalculatedPosition: function (distance) {
   var position = distance - this.prevDistance;
   this.prevDistance = distance;
   return position;
  },
  SetElementPosition: function (position) {
   this.updatePosition(position);
  }
 });
 var SwipeGestureHandler = ASPx.CreateClass(GestureHandler, {
  constructor: function (getAnimationElement, canHandle, allowStart, start, allowComplete, complete, cancel, animationEngineType, rtl) {
   this.constructor.prototype.constructor.call(this, getAnimationElement, canHandle, allowStart);
   this.start = start;
   this.allowComplete = allowComplete;
   this.complete = complete;
   this.cancel = cancel;
   this.animationTween = null;
   this.currentDistanceX = 0;
   this.currentDistanceY = 0;
   this.tryStartGesture = false;
   this.tryStartScrolling = false;
   this.animationEngineType = animationEngineType;
   this.rtl = rtl;
   this.UpdateAnimationContainer();
  },
  UpdateAnimationContainer: function () {
   this.animationContainer = AnimationHelper.getSlideAnimationContainer(this.getAnimationElement(), true, false);
  },
  CanHandleEvent: function (evt) {
   if(GestureHandler.prototype.CanHandleEvent.call(this, evt))
    return true;
   return this.animationTween && this.animationContainer && ASPx.GetIsParent(this.animationContainer, ASPx.Evt.GetEventSource(evt));
  },
  OnMouseDown: function (evt) {
   GestureHandler.prototype.OnMouseDown.call(this, evt);
   if(this.animationTween)
    this.animationTween.Cancel();
   this.currentDistanceX = 0;
   this.currentDistanceY = 0;
   this.tryStartGesture = false;
   this.tryStartScrolling = false;
  },
  OnMouseMove: function (evt) {
   GestureHandler.prototype.OnMouseMove.call(this, evt);
   var isZoomGestureConflict = evt.touches && evt.touches.length > 1;
   if (isZoomGestureConflict)
    return false;
   this.currentDistanceX = this.GetCurrentDistanceX(evt);
   this.currentDistanceY = this.GetCurrentDistanceY(evt);
   if(this.rtl)
    this.currentDistanceX = -this.currentDistanceX;
   if(!this.animationTween && !this.tryStartScrolling && (Math.abs(this.currentDistanceX) >
    GestureHandler.MIN_START_DISTANCE || Math.abs(this.currentDistanceY) > GestureHandler.MIN_START_DISTANCE)) {
    if(Math.abs(this.currentDistanceY) < Math.abs(this.currentDistanceX)) {
     this.tryStartGesture = true;
     if(this.IsStartAllowed(this.currentDistanceX)) {
      this.animationContainer = AnimationHelper.getSlideAnimationContainer(this.getAnimationElement(), true, true);
      this.animationTween = AnimationHelper.createSlideTransition(this.animationContainer, AnimationHelper.SLIDE_LEFT_DIRECTION,
       function () {
        AnimationHelper.resetSlideAnimationContainerSize(this.animationContainer);
        this.animationContainer = null;
        this.animationTween = null;
       }.aspxBind(this), this.animationEngineType, this.rtl);
      this.PerformStart(this.currentDistanceX);
      this.AttachPreventEvents(evt);
     }
    }
    else
     this.tryStartScrolling = true;
   }
   if(this.animationTween) {
    if(this.allowComplete && !this.allowComplete(this.currentDistanceX))
     this.currentDistanceX = this.GetRubberPosition(this.currentDistanceX);
    this.animationTween.SetValue(this.currentDistanceX);
   }
   if(!this.tryStartScrolling && !ASPx.TouchUIHelper.isGesture && evt.touches && evt.touches.length < 2)
    ASPx.Evt.PreventEvent(evt);
  },
  OnMouseUp: function (evt) {
   if(!this.animationTween) {
    if(this.tryStartGesture)
     this.PerformCancel(this.currentDistanceX);
   }
   else {
    if(Math.abs(this.currentDistanceX) < this.GetDistanceLimit())
     this.RollbackGesture();
    else {
     if(this.IsCompleteAllowed(this.currentDistanceX)) {
      this.PerformComplete(this.currentDistanceX);
      this.animationContainer = null;
      this.animationTween = null;
     }
     else
      this.RollbackGesture();
    }
   }
   this.DetachPreventEvents();
   this.tryStartGesture = false;
   this.tryStartScrolling = false;
  },
  PerformStart: function (value) {
   if(this.start)
    this.start(value);
  },
  IsCompleteAllowed: function (value) {
   return !this.allowComplete || this.allowComplete(value);
  },
  PerformComplete: function (value) {
   if(this.complete)
    this.complete(value);
  },
  PerformCancel: function (value) {
   if(this.cancel)
    this.cancel(value);
  },
  RollbackGesture: function () {
   this.animationTween.Start(this.currentDistanceX, 0);
  },
  ResetGestureElementPosition: function () {
   if (this.currentDistanceX === 0) return;
   var container = AnimationHelper.getSlideAnimationContainer(this.getAnimationElement());
   var onComplete = function () { AnimationHelper.resetSlideAnimationContainerSize(container); };
   var animation = AnimationHelper.createSlideTransition(container, AnimationHelper.SLIDE_LEFT_DIRECTION, onComplete, this.animationEngineType, this.rtl);
   animation.Start(this.currentDistanceX, 0);
  },
  GetContainerElement: function () {
   return this.animationContainer;
  }
 });
 var GesturesHelper = {
  handlers: {},
  activeHandler: null,
  isAttachedEvents: false,
  isExecutedGesture: false,
  AddSwipeGestureHandler: function (id, getAnimationElement, canHandle, allowStart, start, allowComplete, complete, cancel, animationEngineType, rtl) {
   this.handlers[id] = new SwipeGestureHandler(getAnimationElement, canHandle, allowStart, start, allowComplete, complete, cancel, animationEngineType, rtl);
  },
  UpdateSwipeAnimationContainer: function (id) {
   if(this.handlers[id])
    this.handlers[id].UpdateAnimationContainer();
  },
  AddSwipeSlideGestureHandler: function (id, getAnimationElement, direction, canHandle, backward, forward, rollback, updatePosition) {
   if(updatePosition)
    this.handlers[id] = new SwipeSimpleSlideGestureHandler(getAnimationElement, direction, canHandle, backward, forward, rollback, updatePosition);
   else
    this.handlers[id] = new SwipeSlideGestureHandler(getAnimationElement, direction, canHandle, backward, forward, rollback);
  },
  getParentDXEditorWithSwipeGestures: function(element) {
     return ASPx.GetParent(element, function(parent) {
      var parentObj = ASPx.GetControlCollection().Get(parent.id);
      return parentObj && parentObj.supportGestures && parentObj.isSwipeGesturesEnabled();
   });
  },
  canHandleMouseDown: function(evt) {
   if(!ASPx.Evt.IsLeftButtonPressed(evt))
    return false;
   var element = ASPx.Evt.GetEventSource(evt);
   var dxFocusedEditor = ASPx.Ident.scripts.ASPxClientEdit && ASPx.GetFocusedEditor();
   if(dxFocusedEditor && dxFocusedEditor.IsEditorElement(element)) {
    var elementParentDXEditorWithSwipeGestures = GesturesHelper.getParentDXEditorWithSwipeGestures(element);
    if(!elementParentDXEditorWithSwipeGestures || !dxFocusedEditor.IsEditorElement(elementParentDXEditorWithSwipeGestures))
     return false;
   }
   var isTextEditor = element.tagName == "TEXTAREA" || element.tagName == "INPUT" && ASPx.Attr.GetAttribute(element, "type") == "text";
   if(isTextEditor && document.activeElement == element)
    return false;
   return true;
  },
  OnDocumentDragStart: function(evt) {
   if(GesturesHelper.activeHandler)
    GesturesHelper.activeHandler.OnDragStart(evt);
  },
  OnDocumentSelectStart: function(evt) {
   if(GesturesHelper.activeHandler)
    GesturesHelper.activeHandler.OnSelectStart(evt);
  },
  OnDocumentMouseDown: function (evt) {
   if(!GesturesHelper.canHandleMouseDown(evt))
    return;
   GesturesHelper.activeHandler = GesturesHelper.FindHandler(evt);
   if(GesturesHelper.activeHandler)
    GesturesHelper.activeHandler.OnMouseDown(evt);
  },
  OnDocumentMouseMove: function (evt) {
   if(GesturesHelper.activeHandler) {
    GesturesHelper.isExecutedGesture = true;
    GesturesHelper.activeHandler.OnMouseMove(evt);
   }
  },
  OnDocumentMouseUp: function (evt) {
   if(GesturesHelper.activeHandler) {
    GesturesHelper.activeHandler.OnMouseUp(evt);
    GesturesHelper.activeHandler = null;
    window.setTimeout(function () { GesturesHelper.isExecutedGesture = false; }, 0);
   }
  },
  AttachEvents: function () {
   if(!GesturesHelper.isAttachedEvents) {
    GesturesHelper.Attach(ASPx.Evt.AttachEventToElement);
    GesturesHelper.isAttachedEvents = true;
   }
  },
  DetachEvents: function () {
   if(GesturesHelper.isAttachedEvents) {
    GesturesHelper.Attach(ASPx.Evt.DetachEventFromElement);
    GesturesHelper.isAttachedEvents = false;
   }
  },
  Attach: function (changeEventsMethod) {
   var doc = window.document;
   changeEventsMethod(doc, ASPx.TouchUIHelper.touchMouseDownEventName, GesturesHelper.OnDocumentMouseDown);
   changeEventsMethod(doc, ASPx.TouchUIHelper.touchMouseMoveEventName, GesturesHelper.OnDocumentMouseMove);
   changeEventsMethod(doc, ASPx.TouchUIHelper.touchMouseUpEventName, GesturesHelper.OnDocumentMouseUp);
   if(!ASPx.Browser.MobileUI) {
    changeEventsMethod(doc, "selectstart", GesturesHelper.OnDocumentSelectStart);
    changeEventsMethod(doc, "dragstart", GesturesHelper.OnDocumentDragStart);
   }
  },
  FindHandler: function (evt) {
   var handlers = [];
   for(var id in GesturesHelper.handlers) {
    if(GesturesHelper.handlers.hasOwnProperty(id)) {
     var handler = GesturesHelper.handlers[id];
     if(handler.CanHandleEvent && handler.CanHandleEvent(evt))
      handlers.push(handler);
    }
   }
   if(!handlers.length)
    return null;
   handlers.sort(function (a, b) {
    return ASPx.GetIsParent(a.getAnimationElement(), b.getAnimationElement()) ? 1 : -1;
   });
   return handlers[0];
  },
  IsExecutedGesture: function () {
   return GesturesHelper.isExecutedGesture;
  }
 };
 GesturesHelper.AttachEvents();
 var AnimationEngineType = {
  "DEFAULT": 0,
  "CSS": 1,
  "JS": 2
 };
 ASPx.AnimationEngineType = AnimationEngineType;
 ASPx.AnimationHelper = AnimationHelper;
 ASPx.GesturesHelper = GesturesHelper;
})();

(function () {
var TreeViewCssClasses = {};
TreeViewCssClasses.Prefix = "dxtv-";
TreeViewCssClasses.WRAP_TEXT = TreeViewCssClasses.Prefix + 'wrap-text';
TreeViewCssClasses.Disabled = "dxtvDisabled";
TreeViewCssClasses.Rtl = "dxtvRtl";
TreeViewCssClasses.Elbow = TreeViewCssClasses.Prefix + "elb";
TreeViewCssClasses.ElbowWithoutLine = TreeViewCssClasses.Prefix + "elbNoLn";
TreeViewCssClasses.Button = TreeViewCssClasses.Prefix + "btn";
TreeViewCssClasses.Node = TreeViewCssClasses.Prefix + "nd";
TreeViewCssClasses.Line = TreeViewCssClasses.Prefix + "lb";
TreeViewCssClasses.NodeCheckbox = TreeViewCssClasses.Prefix + "ndChk";
TreeViewCssClasses.NodeImage = TreeViewCssClasses.Prefix + "ndImg";
TreeViewCssClasses.NodeText = TreeViewCssClasses.Prefix + "ndTxt";
TreeViewCssClasses.NodeTemplate = TreeViewCssClasses.Prefix + "ndTmpl";
TreeViewCssClasses.AccessibleNode = TreeViewCssClasses.Prefix + "acc-n";
var TreeViewRenderHelper = ASPx.CreateClass(null, {
 constructor: function(treeView) {
  this.treeView = treeView;
  this.nodeClickHandler = function (e) { treeView.HandleNodeClick(e); };
  this.nodeDblClickHandler = function (e) { treeView.HandleNodeDblClick(e); };
  this.nodeMouseMove = function(e) { treeView.CorrectControlWidthOnHover(e.target); };
 },
 InlineInitializeElements: function() {
  this.InitializeNodeContainerElements(this.GetRootList(), "", null);
 },
 InitializeNodeContainerElements: function(nodeContainer, parentIndexPath, parentClientNode) {
  var listItems = this.treeView.GetListItems(nodeContainer);
  if(!listItems)
   return;
  for(var i = 0, nodeIndex = 0; i < listItems.length; i++, nodeIndex++) {
   var serverProvidedNodeIndex = this.GetServerProvidedNodeIndex(listItems[i]);
   if(serverProvidedNodeIndex)
    nodeIndex = serverProvidedNodeIndex;
   var nodeIndexPath = this.treeView.GetNodeIndexPath(nodeIndex, parentIndexPath);
   var clientNode = this.treeView.CreateClientNode(i, parentClientNode, nodeIndexPath);
   if(clientNode)
    clientNode.last = i == listItems.length - 1;
   this.InitializeNodeElements(listItems[i], nodeIndexPath, clientNode);
  }
 },
 InitializeNodeElements: function (listItem, indexPath, clientNode) {
  this.InitializeNodeContent(listItem, indexPath, clientNode);
  this.InitializeExpandButton(listItem);
  if(clientNode) {
   if(!clientNode.clientVisible)
    this.treeView.SetNodeClientVisible(clientNode, false);
   if(!clientNode.clientEnabled)
    this.treeView.SetNodeClientEnabled(clientNode, false);
  }
  var subnodesList = this.GetSubNodesList(listItem);
  if(subnodesList)
   this.InitializeNodeContainerElements(subnodesList, indexPath, clientNode);
 },
 GetServerProvidedNodeIndex: function (listItem) {
  var nodeContentElement = this.GetNodeContentElement(listItem);
  if(!nodeContentElement || !nodeContentElement.id)
   return null;
  var nodeIndexPath = this.treeView.GetNodeIndexPathByContentElementID(nodeContentElement.id);
  var nodeIndices = nodeIndexPath.split(this.treeView.IndexPathSeparator);
  return parseInt(nodeIndices[nodeIndices.length - 1]);
 },
 InitializeExpandButton: function (listItem) {
  var button = this.GetNodeButtonElement(listItem);
  if(button && this.CanAttachExpandButtonHandler(this.GetNodeContentElement(listItem)))
   this.treeView.ToggleExpandButtonHandlers(true, button);
 },
 CanAttachExpandButtonHandler: function(contentElement) {
  return !this.IsNodeDisabled(contentElement);
 },
 InitializeNodeContent: function (listItem, nodeIndexPath, clientNode) {
  var nodeContentElement = this.GetNodeContentElement(listItem);
  if(!nodeContentElement)
   return;
  var contentElementID = this.GetElementID(this.treeView.NodeIDPrefix, nodeIndexPath);
  if(clientNode) {
   clientNode.enabled = !this.IsNodeDisabled(nodeContentElement);
   clientNode.contentElementID = contentElementID;
   var textSpan = this.GetNodeTextElement(nodeContentElement);
   clientNode.text = textSpan ? ASPx.GetInnerText(textSpan) : "";
  }
  nodeContentElement.id = contentElementID;
  if(clientNode && clientNode.last && ASPx.Browser.IE) {
   var listItem = ASPx.GetParentByTagName(nodeContentElement, "LI");
   var clearElement = ASPx.GetNodeByTagName(listItem, "B", 0);
   if(clearElement && clearElement.style.display == "inline")
    clearElement.style.display = "";
  }
  if(nodeContentElement.tagName === "A")
   ASPx.AssignAccessibilityEventsToLink(nodeContentElement);
  this.InitializeNodeOnClick(nodeContentElement);
  this.InitializeNodeImage(nodeContentElement, clientNode);
  var icbMainElement = this.GetNodeCheckBoxElement(nodeContentElement);
  if(icbMainElement) {
   var icbInputElement = ASPx.GetNodeByTagName(icbMainElement, "input", 0);
   icbInputElement.id = this.GetElementID(this.treeView.NodeCheckboxIDPostfix, nodeIndexPath);
   if(this.treeView.imageProperties)
    this.AddInternalCheckBoxToCollection(icbInputElement, nodeContentElement);
  }
 },
 InitializeNodeOnClick: function (nodeContentElement) {
  this.attachEventToElement(nodeContentElement, "click", this.nodeClickHandler);
  this.attachEventToElement(nodeContentElement, "dblclick", this.nodeDblClickHandler);
  if(this.treeView.contentBoundsMode && this.treeView.requireWidthRecalculationOnHover)
   this.attachEventToElement(nodeContentElement, "mousemove", this.nodeMouseMove);
 },
 attachEventToElement: function(element, eventName, handler) {
  ASPx.Evt.AttachEventToElement(element, eventName, handler);
 },
 InitializeNodeImage: function (nodeContentElement, clientNode) {
  var nodeImage = this.GetNodeImageElement(nodeContentElement);
  if(!nodeImage)
   return;
  nodeImage.id = nodeContentElement.id + this.treeView.NodeImageIDPostfix;
  this.InitializeNodeImageCore(nodeImage, clientNode);
 },
 InitializeNodeImageCore: function(nodeImage, clientNode) {
  if(!ASPx.Browser.IE) {
   var nodeImageLoaded = nodeImage.naturalWidth !== 0 && nodeImage.naturalHeight !== 0 && nodeImage.complete;
   if(!nodeImageLoaded) {
    var instance = this.treeView;
    ASPx.Evt.AttachEventToElement(nodeImage, "load", function (evt) {
     instance.CorrectControlWidth();
    });
    if(ASPx.Browser.WebKitFamily) {
     ASPx.Evt.AttachEventToElement(nodeImage, "error", function (evt) {
      instance.CorrectControlWidth();
     });
    }
   }
  }
  if(clientNode)
   clientNode.imageUrl = nodeImage.src;
 },
 AddInternalCheckBoxToCollection: function (icbInputElement, contentElement) {
  var instance = this.treeView;
  var internalCheckBox = this.treeView.internalCheckBoxCollection.Add(contentElement.id, icbInputElement);
  internalCheckBox.SetEnabled(!this.IsNodeDisabled(contentElement));
  internalCheckBox.readOnly = this.treeView.readOnly;
  internalCheckBox.CreateFocusDecoration(this.treeView.icbFocusedStyle);
  internalCheckBox.CheckedChanged.AddHandler(
   function (s, e) {
    instance.UpdateCheckedInNodesState(s.inputElement, true);
    instance.OnNodeCheckboxClick(s.inputElement);
   }
  );
 },
 IsNodeDisabled: function (contentElement) {
  return ASPx.ElementContainsCssClass(contentElement, TreeViewCssClasses.Disabled);
 },
 GetElementID: function (IDPrefix, indexPath) {
  return this.treeView.name + IDPrefix + indexPath;
 },
 GetRootList: function(){
  return ASPx.GetNodeByTagName(this.treeView.GetMainElement(), "UL", 0);
 },
 GetSubNodesList: function(listItem) {
  return ASPx.GetChildByTagName(listItem, "UL");
 },
 GetNodeContentElement: function(listItem){
  var node = this.GetNodeByClassName(listItem, TreeViewCssClasses.Node);
  if(node) return node;
  return this.GetNodeByClassName(listItem, TreeViewCssClasses.NodeTemplate);
 },
 GetNodeContentElementByClick: function(clickedElement){
  return ASPx.GetParentByClassName(clickedElement, TreeViewCssClasses.Node);
 },
 GetNodeTextElement: function(contentElement){
  return this.GetNodeByClassName(contentElement, TreeViewCssClasses.NodeText);
 },
 GetNodeImageElement: function(contentElement){
  return this.GetNodeByClassName(contentElement, TreeViewCssClasses.NodeImage);
 },
 GetNodeButtonElement: function(listItem){
  return this.GetNodeByClassName(listItem, TreeViewCssClasses.Button);
 },
 GetNodeCheckBoxElement: function(contentElement){
  return this.HasCheckBox() ? this.GetNodeByClassName(contentElement, TreeViewCssClasses.NodeCheckbox) : null;
 },
 GetNodeByClassName: function(el, className) {
  return el.querySelector ? el.querySelector("." + className) : ASPx.GetNodesByPartialClassName(el, className)[0];
 },
 HasCheckBox: function() { return !!this.treeView.imageProperties; }
});
var ASPxClientTreeView = ASPx.CreateClass(ASPxClientControl, {
 IndexPathSeparator: "_",
 NodeIDPrefix: "_N",
 NodeImageIDPostfix: "I",
 NodeLoadingPanelIDPostfix: "NLP",
 SampleExpandButtonIDPostfix: "_SEB",
 SampleCollapseButtonIDPostfix: "_SCB",
 SampleNodeLoadingPanelIDPostfix: "_SNLP",
 ControlContentDivIDPostfix: "_CD",
 NodeCheckboxIDPostfix: "_CHK",
 ExpandNodeCommand: "E",
 ExpandAllNodesCommand: "EA",
 CheckNodeRecursiveCommand: "CHKNR",
 RaiseNodeClickEventCommand: "NCLK",
 RaiseExpandedChangingEventCommand: "ECHANGING",
 RaiseCheckedChangedEventCommand: "CCHNGD",
 PostRequestArgsSeparator: "|",
 NodeClickServerEventName: "NodeClick",
 ExpandedChangingServerEventName: "ExpandedChanging",
 CheckedChangedServerEventName: "CheckedChanged",
 WidthMeasurementIncrement: 1000,
 IE6WidthMeasurementDivWidth: 99999,
 AnimationDuration: 300,
 MinAnimationDuration: 200,
 HoverCorrectionDelay: 50,
 constructor: function (name) {
  this.constructor.prototype.constructor.call(this, name);
  this.enableAnimation = true;
  this.nodesInfo = null;
  this.nodesUrls = null;
  this.contentBoundsMode = true;
  this.checkNodesRecursive = false;
  this.allowSelectNode = false;
  this.virtualMode = false;
  this.imageProperties = null;
  this.icbFocusedStyle = [];
  this.requireWidthRecalculationOnHover = false;
  this.nodeLoadingPanelWidth = 0;
  this.nodeLoadingPanelHeight = 0;
  this.enableNodeTextWrapping = false;
  var instance = this;
  this.expandCollapseHandler = function (e) { instance.HandleExpandButtonClick(e); };
  this.accessibleMouseDownHandler = function(e) { instance.HandleExpandButtonAccessibleMouseDown(e); };
  this.accessibleBlurHandler = function(e) { instance.HandleExpandButtonAccessibleBlur(e); };
  var rootNodeType = this.GetClientNodeType();
  this.rootNode = new rootNodeType(this);
  this.selectedNodeContentElementID = null;
  this.requireRaiseExpandedChangedList = [];
  this.initialControlWidth = 0;
  this.requireClearExpandButtonOutline = false;
  this.renderHelper = this.CreateRenderHelper();
  this.NodeClick = new ASPxClientEvent();
  this.ExpandedChanged = new ASPxClientEvent();
  this.ExpandedChanging = new ASPxClientEvent();
  this.CheckedChanged = new ASPxClientEvent();
 },
 UpdateWordWrapNodesWidth: function(nodeContainer) {
  if(this.enableNodeTextWrapping) {
   var listItems = this.GetListItems(nodeContainer);
   if(listItems) {
    for(var i = 0, item; item = listItems[i]; i++) {
     var subNodes = this.renderHelper.GetSubNodesList(item);
     if(subNodes && ASPx.IsElementVisible(subNodes))
      this.UpdateWordWrapNodesWidth(subNodes);
     var displayValueCache = '';
     var span = item.childNodes[0];
     var content = item.childNodes[1];
     if(item.offsetWidth == 0) {
      displayValueCache = item.style.display;
      item.style.display = '';
     }
     content.style.width = item.getBoundingClientRect().width - span.getBoundingClientRect().width - ASPx.GetLeftRightMargins(span) - ASPx.GetLeftRightMargins(content) + 'px';
     if(displayValueCache != '')
      item.style.display = displayValueCache;
    }
   }
  }
 },
 applyAccessibilityAttributes: function(ariaDescriptor) {
  this.setAriaDescription("");
  this.setAriaDescription("expandButtons");
  this.setAriaDescription("listElement");
  this.setAriaDescription("treeItemRelationship");
  this.setAriaDescription("nodeCheckboxes");
 },
 ReplaceElementWithSampleElement: function (srcElement, sampleElement, copySrcInnerHtml) {
  var newElement = sampleElement.cloneNode(true);
  newElement.id = srcElement.id;
  if(copySrcInnerHtml && srcElement.innerHTML)
   ASPx.SetInnerHtml(newElement, srcElement.innerHTML);
  srcElement.parentNode.replaceChild(newElement, srcElement);
  ASPx.SetElementDisplay(newElement, true);
  return newElement;
 },
 ToggleExpandButtonHandlers: function (attach, button) {
  var method = attach ? ASPx.Evt.AttachEventToElement : ASPx.Evt.DetachEventFromElement;
  method(button, "click", this.expandCollapseHandler);
  if(this.accessibilityCompliant) {
   method(button, "mousedown", this.accessibleMouseDownHandler);
   method(button, "blur", this.accessibleBlurHandler);
  }
 },
 AddElementCssClass: function (element, className) {
  this.RemoveElementCssClass(element, className);
  element.className = element.className + " " + className;
 },
 RemoveElementCssClass: function (element, className) {
  var newElementClassName = element.className.replace(className, "");
  element.className = ASPx.Str.Trim(newElementClassName);
 },
 RemoveEmptyTextNodes: function (element) {
  var nonEmptyTextPattern = /\S/;
  var textNodeType = 3;
  var elementNodeType = 1;
  for(var i = 0; i < element.childNodes.length; i++) {
   if(element.childNodes[i].nodeType == textNodeType &&
    !nonEmptyTextPattern.test(element.childNodes[i].nodeValue)) {
    element.removeChild(element.childNodes[i]);
    i--;
   } else if(element.childNodes[i].nodeType == elementNodeType)
    this.RemoveEmptyTextNodes(element.childNodes[i]);
  }
 },
 GetNodeIDByContentElementID: function (contentElementID) {
  return ASPx.Str.Trim(contentElementID.replace(this.name + "_", ""));
 },
 GetNodeIndexPathByContentElementID: function (contentElementID) {
  return ASPx.Str.Trim(contentElementID.replace(this.name + this.NodeIDPrefix, ""));
 },
 CreatePostRequestArgs: function (command, arg1, arg2) {
  var args = command + this.PostRequestArgsSeparator + arg1;
  if(arg2 || arg2 === "")
   args += this.PostRequestArgsSeparator + arg2;
  return args;
 },
 MergeNodesData: function(srcData, destData) {
  for(var key in srcData)
   if(srcData.hasOwnProperty(key))
    destData[key] = srcData[key];
 },
 GetNodeListItem: function (clientNode) {
  var contentElement = ASPx.GetElementById(clientNode.contentElementID);
  return ASPx.GetParentByTagName(contentElement, "LI");
 },
 SerializeBooleanValue: function (value) {
  return value ? "T" : "";
 },
 GetContentElementByNodeID: function (nodeID) {
  return ASPx.GetElementById(this.name + "_" + nodeID);
 },
 GetListItems: function (list) {
  var listNodes = ASPx.GetChildElementNodes(list);
  var listItems = [];
  if(!listNodes)
   return null;
  for(var i = 0; i < listNodes.length; i++) {
   if(listNodes[i].tagName == "LI")
    listItems.push(listNodes[i]);
  }
  return listItems;
 },
 GetClickedContentElementByEventArgs: function (e) {
  var clickedElement = ASPx.Evt.GetEventSource(e);
  var contentElement = this.renderHelper.GetNodeContentElementByClick(clickedElement);
  if(ASPx.ElementContainsCssClass(clickedElement, TreeViewCssClasses.NodeCheckbox)) {
   if(ASPx.Browser.Firefox) {
    ASPx.Evt.PreventEventAndBubble(e);
    var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
    window.setTimeout(function () {
     ASPx.CheckableElementHelper.Instance.InvokeClick(internalCheckBox, e);
    });
   }
   return null;
  }
  if(!contentElement || this.renderHelper.IsNodeDisabled(contentElement))
   return null;
  return contentElement;
 },
 IsRightToLeft: function () {
  return ASPx.IsElementRightToLeft(this.GetMainElement());
 },
 InlineInitialize: function () {
  ASPxClientControl.prototype.InlineInitialize.call(this);
  if(this.enableNodeTextWrapping)
   this.GetMainElement().className += ' ' + TreeViewCssClasses.WRAP_TEXT;
  this.SetInitialControlWidth();
  if(this.imageProperties)
   this.CreateInternalCheckBoxCollection();
  this.InitializeControlElements();
 },
 Initialize: function () {
  ASPxClientControl.prototype.Initialize.call(this);
  this.InitLoadingPanelSize();
 },
 OnBrowserWindowResize: function(e) {
  if(this.enableNodeTextWrapping)
   this.AdjustControl();
 },
 AdjustControlCore: function () {
  this.CorrectControlWidth();
  this.UpdateWordWrapNodesWidth(this.renderHelper.GetRootList());
 },
 CreateInternalCheckBoxCollection: function () {
  this.internalCheckBoxCollection = new ASPx.CheckBoxInternalCollection(this.imageProperties, true, undefined, undefined, undefined, this.accessibilityCompliant);
 },
 InitLoadingPanelSize: function () {
  var panel = this.GetSampleNodeLoadingPanel();
  if(panel) {
   this.nodeLoadingPanelWidth = panel.offsetWidth || panel.naturalWidth || panel.width;
   this.nodeLoadingPanelHeight = panel.offsetHeight || panel.naturalHeight || panel.width;
   ASPx.SetElementDisplay(panel, false);
   panel.style.visibility = "";
   panel.style.position = "";
  }
 },
 InitializeControlElements: function () {
  var mainElement = this.GetMainElement();
  if(ASPx.ElementContainsCssClass(mainElement, TreeViewCssClasses.Disabled))
   return;
  this.renderHelper.InlineInitializeElements();
  this.InitializeNodeSelection();
 },
 InitializeNodeSelection: function () {
  var contentElement = this.GetContentElementByNodeID(this.GetSelectedNodeIDFromState());
  if(contentElement)
   this.ApplySelectionToNode(contentElement);
  else if(this.allowSelectNode) {
   var firstNodeId = this.NodeIDPrefix.replace("_", "") + this.GetNodeIndexPath(0, 0);
   ASPx.GetStateController().DeselectElementBySrcElement(this.GetContentElementByNodeID(firstNodeId));
  }
 },
 GetNodeIndexPath: function (listItemIndex, parentIndexPath) {
  if(!parentIndexPath)
   return listItemIndex.toString();
  return parentIndexPath + this.IndexPathSeparator + listItemIndex.toString();
 },
 CreateRenderHelper: function() {
  return new TreeViewRenderHelper(this);
 },
 ApplyServerProvidedClientNodeInfo: function (clientNode, indexPath) {
  if(!this.nodesInfo[indexPath])
   return;
  clientNode.clientEnabled = !!this.nodesInfo[indexPath][0];
  clientNode.clientVisible = !!this.nodesInfo[indexPath][1];
  clientNode.name = this.nodesInfo[indexPath][2];
  clientNode.navigateUrl = this.nodesInfo[indexPath][3];
  clientNode.target = this.nodesInfo[indexPath][4];
 },
 GetClientNodeType: function() {
  return ASPxClientTreeViewNode;
 },
 CreateClientNode: function (index, parentClientNode, indexPath) {
  if(!this.nodesInfo)
   return null;
  var nodeType = this.GetClientNodeType();
  var clientNode = new nodeType();
  clientNode.treeView = this;
  clientNode.parent = parentClientNode;
  clientNode.index = index;
  this.ApplyServerProvidedClientNodeInfo(clientNode, indexPath, null);
  if(parentClientNode)
   parentClientNode.nodes.push(clientNode);
  else
   this.rootNode.nodes.push(clientNode);
  return clientNode;
 },
 GetControlContentDiv: function () {
  return ASPx.GetElementById(this.name + this.ControlContentDivIDPostfix);
 },
 SetInitialControlWidth: function () {
  var mainElement = this.GetMainElement();
  if(mainElement.style.width && !ASPx.IsPercentageSize(mainElement.style.width))
   this.initialControlWidth = mainElement.offsetWidth;
 },
 CorrectControlWidthOnHover: function (nodeElement) {
  if(!this.requireWidthRecalculationOnHover)
   return;
  if(ASPx.Browser.IE && ASPx.Browser.Version < 9) {
   var instance = this;
   window.setTimeout(function () {
    instance.CorrectControlWidth();
   }, 0);
   return;
  }
  if(nodeElement.lastCorrectionOnHover && (new Date().getTime() - nodeElement.lastCorrectionOnHover <= this.HoverCorrectionDelay))
   return;
  this.CorrectControlWidth();
  nodeElement.lastCorrectionOnHover = new Date().getTime();
 },
 CorrectControlWidth: function() {
  if(this.enableNodeTextWrapping)
   return;
  var mainElement = this.GetMainElement();
  var controlContentDiv = this.GetControlContentDiv();
  var rootNodesList = this.renderHelper.GetRootList();
  if(!rootNodesList)
   return;
  mainElement.style.overflow = "hidden";
  ASPx.SetElementFloat(rootNodesList, "left");
  var prevListWidth = 0;
  do {
   prevListWidth = rootNodesList.offsetWidth;
   ASPx.SetOffsetWidth(controlContentDiv, controlContentDiv.offsetWidth + this.WidthMeasurementIncrement);
   if(ASPx.Browser.Opera) {
    rootNodesList.style.width = "100%";
    var dummy = rootNodesList.offsetWidth;
    rootNodesList.style.width = "";
   }
  } while(prevListWidth != rootNodesList.offsetWidth);
  if (rootNodesList.offsetWidth > this.initialControlWidth) {
   var needRoundingCorrection = ASPx.Browser.HardwareAcceleration ||
           ASPx.Browser.MacOSMobilePlatform;
   var roundingCorrection = needRoundingCorrection ? 1 : 0;
   var isPercentageWidth = ASPx.IsPercentageSize(mainElement.style.width);
   mainElement.style[isPercentageWidth ? "minWidth" : "width"] = rootNodesList.offsetWidth + roundingCorrection + "px";
  }
  ASPx.SetElementFloat(rootNodesList, "");
  mainElement.style.overflow = "";
  controlContentDiv.style.width = "";
 },
 GetPreviousSiblingNodeListItem: function (clientNode) {
  var previousNodeIndex = clientNode.index - 1;
  if(previousNodeIndex < 0)
   return null;
  var previousClientNode = clientNode.parent ? clientNode.parent.GetNode(previousNodeIndex) :
   this.rootNode.nodes[previousNodeIndex];
  return this.GetNodeListItem(previousClientNode);
 },
 GetListItemElbowSpan: function (listItem) {
  return ASPx.GetNodesByPartialClassName(listItem, TreeViewCssClasses.Elbow)[0] ||
    ASPx.GetNodesByPartialClassName(listItem, TreeViewCssClasses.ElbowWithoutLine)[0];
 },
 SetNodeClientVisible: function (clientNode, clientVisible) {
  if(this.IsRootNode(clientNode))
   return;
  var listItem = this.GetNodeListItem(clientNode);
  ASPx.SetElementDisplay(listItem, clientVisible);
  this.CorrectControlWidth();
  if(!clientNode.last)
   return;
  var previousNodeListItem = this.GetPreviousSiblingNodeListItem(clientNode);
  if(!previousNodeListItem)
   return;
  var previousNodeElbowSpan = this.GetListItemElbowSpan(previousNodeListItem);
  if(ASPx.ElementContainsCssClass(previousNodeElbowSpan, TreeViewCssClasses.ElbowWithoutLine))
   return;
  this.renderHelper.InitializeExpandButton(previousNodeListItem);
  if(clientVisible)
   this.AddElementCssClass(previousNodeListItem, TreeViewCssClasses.Line);
  else
   this.RemoveElementCssClass(previousNodeListItem, TreeViewCssClasses.Line);
 },
 SetNodeClientEnabled: function (clientNode, clientEnabled) {
  if(this.IsRootNode(clientNode))
   return;
  var contentElement = ASPx.GetElementById(clientNode.contentElementID);
  ASPx.GetStateController().SetElementEnabled(contentElement, clientEnabled);
  if(this.internalCheckBoxCollection) {
   var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
   if(internalCheckBox)
    internalCheckBox.SetEnabled(clientEnabled);
  }
  var nodeLink = this.GetNodeLinkElement(clientNode);
  if(nodeLink)
   this.ChangeNodeLinkEnabledAttributes(nodeLink, clientNode, clientEnabled);
  var listItem = ASPx.GetParentByTagName(contentElement, "LI");
  var button = this.renderHelper.GetNodeButtonElement(listItem);
  if(button) {
   this.ToggleExpandButtonHandlers(clientEnabled, button);
   button.style.cursor = clientEnabled ? "pointer" : "default";
  }
 },
 ChangeNodeLinkEnabledAttributes: function (nodeLink, clientNode, clientEnabled) {
  if(!clientEnabled && nodeLink.href) {
   ASPx.Attr.SetAttribute(nodeLink, "savedhref", nodeLink.href);
   ASPx.Attr.RemoveAttribute(nodeLink, "href");
  }
  else if(clientEnabled && ASPx.Attr.GetAttribute(nodeLink, "savedhref")) {
   ASPx.Attr.SetAttribute(nodeLink, "href", ASPx.Attr.GetAttribute(nodeLink, "savedhref"));
   ASPx.Attr.RemoveAttribute(nodeLink, "savedhref");
  }
 },
 SetNodeText: function (clientNode, text) {
  if(this.IsRootNode(clientNode))
   return;
  var contentElement = ASPx.GetElementById(clientNode.contentElementID);
  var textSpan = this.renderHelper.GetNodeTextElement(contentElement);
  if(textSpan) {
   ASPx.SetInnerHtml(textSpan, text);
   this.CorrectControlWidth();
  }
 },
 SetNodeImageUrl: function (clientNode, url) {
  if(this.IsRootNode(clientNode))
   return;
  var contentElement = ASPx.GetElementById(clientNode.contentElementID);
  var nodeImage = this.renderHelper.GetNodeImageElement(contentElement);
  if(nodeImage)
   nodeImage.src = url;
 },
 GetNodeLinkElement: function (clientNode) {
  var contentElement = ASPx.GetElementById(clientNode.contentElementID);
  return this.GetNodeLinkElementCore(contentElement);
 },
 GetNodeLinkElementCore: function(contentElement) {
  if(ASPx.ElementContainsCssClass(contentElement, TreeViewCssClasses.NodeTemplate))
   return null;
  return contentElement.tagName == "A" ? contentElement : ASPx.GetNodeByTagName(contentElement, "A", 0);
 },
 GetNodeNavigateUrl: function (clientNode) {
  if(this.contentBoundsMode || this.IsRootNode(clientNode))
   return clientNode.navigateUrl || "";
  var nodeLink = this.GetNodeLinkElement(clientNode);
  return nodeLink ? (nodeLink.href || ASPx.Attr.GetAttribute(nodeLink, "savedhref")) : "";
 },
 SetNodeNavigateUrl: function (clientNode, url) {
  if(this.IsRootNode(clientNode))
   return;
  var nodeLink = this.GetNodeLinkElement(clientNode);
  if(nodeLink) {
   if(ASPx.Attr.IsExistsAttribute(nodeLink, "savedhref"))
    ASPx.Attr.SetAttribute(nodeLink, "savedhref", url);
   else if(ASPx.Attr.IsExistsAttribute(nodeLink, "href"))
    nodeLink.href = url;
   clientNode.navigateUrl = url;
  }
 },
 GetInternalCheckBoxCheckedState: function(internalCheckBox) {
  return internalCheckBox.GetCurrentCheckState();
 },
 GetInternalCheckBoxInputKey: function(internalCheckBox) {
  return internalCheckBox.GetCurrentInputKey();
 },
 GetInternalCheckBoxInputElement: function(internalCheckBox) {
  return internalCheckBox.inputElement;
 },
 UpdateCheckedInNodesState: function (checkbox, needToSaveToCookies) {
  var contentElement = this.renderHelper.GetNodeContentElementByClick(checkbox);
  var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
  var value = this.GetInternalCheckBoxInputKey(internalCheckBox);
  var nodeID = this.GetNodeIDByContentElementID(contentElement.id);
  this.nodesState[2][nodeID] = value;
  if(needToSaveToCookies)
   this.UpdateNodesStateCookies();
 },
 UpdateRecursiveCheckedNodesStateOnCallback: function (checkState, nodeIDs) {
  this.HideLoadingPanel();
  for(var i = 0; i < nodeIDs.length; i++) {
   if(this.nodesState[2][nodeIDs[i]] != checkState)
    this.nodesState[2][nodeIDs[i]] = checkState;
  }
  this.UpdateNodesStateCookies();
 },
 UpdateInvisibleDescCheckedInNodesState: function(checkbox, checkState) {
  var contentElement = this.renderHelper.GetNodeContentElementByClick(checkbox),
   parentNodeID = this.GetNodeIDByContentElementID(contentElement.id),
   checkedNodesState = this.nodesState[2];
  for(var key in checkedNodesState) {
   if(checkedNodesState.hasOwnProperty(key) && key.indexOf(parentNodeID) === 0 &&
    parentNodeID !== key && !this.GetContentElementByNodeID(key))
    checkedNodesState[key] = checkState;
  }
 },
 CreateRecursiveNodeCheckRequest: function (contentElement) {
  var requestArgs = this.CreatePostRequestArgs(this.CheckNodeRecursiveCommand,
    this.GetNodeIDByContentElementID(contentElement.id));
  if(this.autoPostBack) {
   if(this.isInitialized)
    this.SendPostBack(requestArgs);
   return;
  }
  if(this.callBack) {
   var mainElement = this.GetMainElement();
   this.CreateLoadingDiv(mainElement);
   this.CreateLoadingPanelWithAbsolutePosition(mainElement);
   this.CreateCallback(requestArgs);
  }
 },
 OnNodeCheckboxClick: function (checkbox) {
  var contentElement = this.renderHelper.GetNodeContentElementByClick(checkbox);
  var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
  if(this.checkNodesRecursive) {
   var checkBoxState = this.GetInternalCheckBoxInputKey(internalCheckBox);
   this.UpdateCheckedStateRecursive(checkbox, checkBoxState);
  }
  var processOnServer = this.RaiseCheckedChanged(contentElement);
  if(this.checkNodesRecursive && !this.virtualMode && (this.autoPostBack || this.callBack))
   this.CreateRecursiveNodeCheckRequest(contentElement);
  else if(processOnServer) {
   var requestArgs = this.CreatePostRequestArgs(this.RaiseCheckedChangedEventCommand,
    this.GetNodeIDByContentElementID(contentElement.id));
   if(this.isInitialized)
    this.SendPostBack(requestArgs);
  }
 },
 UpdateCheckedStateRecursive: function(checkbox, state) {
  var listItem = ASPx.GetParentByTagName(checkbox, "LI");
  this.UpdateDescendantsCheckedState(listItem, state);
  this.UpdateInvisibleDescCheckedInNodesState(checkbox, state);
  this.UpdateAncestorsCheckedState(listItem);
  this.UpdateNodesStateCookies();
 },
 UpdateDescendantsCheckedState: function (listItem, state) {
  var subnodesList = this.renderHelper.GetSubNodesList(listItem);
  if(!subnodesList) {
   listItem.requireUpdateCheckedState = true;
   listItem.checkedState = state;
   return;
  }
  var descendantListItems = this.GetListItems(subnodesList);
  for(var i = 0; i < descendantListItems.length; i++) {
   var contentElement = this.renderHelper.GetNodeContentElement(descendantListItems[i]);
   var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
   if(internalCheckBox && internalCheckBox.GetValue() != state) {
    internalCheckBox.SetValue(state);
    this.UpdateCheckedInNodesState(this.GetInternalCheckBoxInputElement(internalCheckBox));
   }
   this.UpdateDescendantsCheckedState(descendantListItems[i], state);
  }
 },
 UpdateAncestorsCheckedState: function (listItem) {
  var parentSubnodesList = ASPx.GetParentByTagName(listItem, "UL");
  var parentListItem = ASPx.GetParentByTagName(parentSubnodesList, "LI");
  if(!parentListItem || !ASPx.GetParentById(parentListItem, this.name))
   return;
  var parentChecked = true;
  var parentUnchecked = true;
  var siblingListItems = this.GetListItems(parentSubnodesList);
  for(var i = 0; i < siblingListItems.length; i++) {
   var contentElement = this.renderHelper.GetNodeContentElement(siblingListItems[i]);
   var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
   if(internalCheckBox) {
    var currentCheckBoxState = this.GetInternalCheckBoxInputKey(internalCheckBox);
    if(currentCheckBoxState != ASPx.CheckBoxInputKey.Checked)
     parentChecked = false;
    if(currentCheckBoxState != ASPx.CheckBoxInputKey.Unchecked)
     parentUnchecked = false;
   }
  }
  var parentCheckboxContentElement = this.renderHelper.GetNodeContentElement(parentListItem);
  if(parentCheckboxContentElement) {
   var parentCheckBoxState = parentChecked ? ASPx.CheckBoxInputKey.Checked : (parentUnchecked ? ASPx.CheckBoxInputKey.Unchecked : ASPx.CheckBoxInputKey.Indeterminate);
   var parentInternalCheckBox = this.internalCheckBoxCollection.Get(parentCheckboxContentElement.id);
   if(parentInternalCheckBox && parentInternalCheckBox.GetValue() != parentCheckBoxState) {
    parentInternalCheckBox.SetValue(parentCheckBoxState);
    this.UpdateCheckedInNodesState(this.GetInternalCheckBoxInputElement(parentInternalCheckBox));
   }
  }
  this.UpdateAncestorsCheckedState(parentListItem);
 },
 SetNodeState: function (clientNode, state) {
  if(this.IsRootNode(clientNode))
   return;
  var contentElement = ASPx.GetElementById(clientNode.contentElementID);
  var checkbox = this.renderHelper.GetNodeCheckBoxElement(contentElement);
  var stateKey = ASPx.CheckBoxInputKey[state];
  var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
  if(internalCheckBox && internalCheckBox.GetValue() != stateKey) {
   internalCheckBox.SetValue(stateKey);
   this.UpdateCheckedInNodesState(this.GetInternalCheckBoxInputElement(internalCheckBox), true);
  }
  if(this.checkNodesRecursive && checkbox)
   this.UpdateCheckedStateRecursive(checkbox, stateKey);
 },
 GetNodeState: function (clientNode) {
  if(!this.internalCheckBoxCollection)
   return ASPx.CheckBoxCheckState.Unchecked;
  var contentElement = ASPx.GetElementById(clientNode.contentElementID);
  var internalCheckBox = this.internalCheckBoxCollection.Get(contentElement.id);
  return internalCheckBox ? this.GetInternalCheckBoxCheckedState(internalCheckBox) : ASPx.CheckBoxCheckState.Unchecked;
 },
 GetSelectedNodeIDFromState: function () {
  return this.nodesState ? this.nodesState[1] : "";
 },
 SetSelectedNodeIDToState: function (nodeID) {
  if(!this.nodesState || !ASPx.IsExists(this.nodesState[1]))
   return;
  this.nodesState[1] = nodeID;
  this.UpdateNodesStateCookies();
 },
 NavigateToNodeLink: function (contentElementID) {
  var navigateUrl = null;
  var target = null;
  if(this.rootNode.nodes.length > 0) {
   var clientNode = this.rootNode.GetNodeByContentElementID(contentElementID);
   navigateUrl = clientNode.navigateUrl;
   target = clientNode.target;
  } else {
   var nodeIndexPath = this.GetNodeIndexPathByContentElementID(contentElementID);
   if(!(this.nodesUrls && this.nodesUrls[nodeIndexPath]))
    return;
   navigateUrl = this.nodesUrls[nodeIndexPath][0];
   target = this.nodesUrls[nodeIndexPath][1];
  }
  if(navigateUrl)
   ASPx.Url.Navigate(navigateUrl, target || "");
 },
 ApplySelectionToNode: function (contentElement) {
  var previouslySelectedContentElement = ASPx.GetElementById(this.selectedNodeContentElementID);
  if(previouslySelectedContentElement)
   ASPx.GetStateController().DeselectElementBySrcElement(previouslySelectedContentElement);
  if(contentElement) {
   ASPx.GetStateController().SelectElementBySrcElement(contentElement);
   this.CorrectControlWidth();
   this.selectedNodeContentElementID = contentElement.id;
  } else
   this.selectedNodeContentElementID = null;
 },
 HandleNodeClick: function (e) {
  var contentElement = this.GetClickedContentElementByEventArgs(e);
  if(!contentElement)
   return;
  if(this.allowSelectNode && this.selectedNodeContentElementID != contentElement.id) {
   this.SetSelectedNodeIDToState(this.GetNodeIDByContentElementID(contentElement.id));
   ASPx.ClearHoverState();
   this.ApplySelectionToNode(contentElement);
   ASPx.UpdateHoverState(e);
  }
  var processEventOnServer = this.RaiseNodeClick(contentElement, e);
  if(contentElement.tagName != "A")
   this.NavigateToNodeLink(contentElement.id);
  var nodeLink = this.GetNodeLinkElementCore(contentElement);
  if(processEventOnServer && (!nodeLink || nodeLink.href === "" || nodeLink.href === ASPx.AccessibilityEmptyUrl)) {
   var postbackArgs = this.CreatePostRequestArgs(this.RaiseNodeClickEventCommand,
    this.GetNodeIDByContentElementID(contentElement.id));
   if(this.isInitialized)
    this.SendPostBack(postbackArgs);
  }
 },
 OnCallback: function (resultObj) {
  if(!resultObj)
   return;
  switch (resultObj[0]) {
   case this.ExpandNodeCommand: {
    if(resultObj[6])
     eval(resultObj[6]);
    if(resultObj[1])
     this.ProcessNodeExpandingOnCallback(resultObj[1], resultObj[2], resultObj[3], resultObj[4]);
    else
     this.ProcessAllNodesExpandingOnCallback(resultObj[2], resultObj[3], resultObj[4], resultObj[5][0]);
    break;
   }
   case this.CheckNodeRecursiveCommand:
    this.UpdateRecursiveCheckedNodesStateOnCallback(resultObj[1], resultObj[2]);
    break;
  }
  if(resultObj[5])
   this.UpdateNodesStateCookies();
 },
 OnCallbackFinalized: function() {
  this.InitializeNodeSelection();
 },
 GetSampleNodeLoadingPanel: function () {
  return ASPx.GetElementById(this.name + this.SampleNodeLoadingPanelIDPostfix);
 },
 GetNodeLoadingPanelID: function (nodeID) {
  return this.name + this.NodeLoadingPanelIDPostfix + nodeID;
 },
 ShowNodeLoadingPanel: function (button, nodeID) {
  var sampleLoadingPanel = this.GetSampleNodeLoadingPanel();
  if(!sampleLoadingPanel || !button) {
   var mainElement = this.GetMainElement();
   this.CreateLoadingDiv(mainElement);
   this.CreateLoadingPanelWithAbsolutePosition(mainElement);
  }
  else
   this.ShowNodeLoadingPanelCore(button, sampleLoadingPanel, nodeID);
 },
 ShowNodeLoadingPanelCore: function (button, sampleLoadingPanel, nodeID) {
  var elbowSpan = ASPx.GetParentByTagName(button, "SPAN");
  var panel = this.CloneNodeLoadingPanel(sampleLoadingPanel, nodeID, elbowSpan);
  ASPx.SetElementDisplay(panel, true);
  this.SetNodeLoadingPanelPosition(panel, button, elbowSpan);
  ASPx.SetElementDisplay(button, false);
 },
 HideNodeLoadingPanel: function (nodeID) {
  var panel = ASPx.GetElementById(this.GetNodeLoadingPanelID(nodeID));
  if(panel)
   ASPx.RemoveElement(panel);
 },
 SetNodeLoadingPanelPosition: function (panel, button, elbowSpan) {
  elbowSpan.style.position = "relative";
  var buttonStyle = ASPx.GetCurrentStyle(button);
  var marginLeft = parseInt(buttonStyle.marginLeft);
  var marginTop = parseInt(buttonStyle.marginTop);
  var leftOffset = marginLeft - Math.round((this.nodeLoadingPanelWidth - button.offsetWidth) / 2);
  var topOffset = marginTop - Math.round((this.nodeLoadingPanelHeight - button.offsetHeight) / 2);
  elbowSpan.style.position = "";
  if(this.IsRightToLeft())
   panel.style.marginRight = elbowSpan.offsetWidth - this.nodeLoadingPanelWidth - leftOffset + "px";
  else
   panel.style.marginLeft = leftOffset + "px";
  panel.style.marginTop = topOffset + "px";
 },
 CloneNodeLoadingPanel: function (sampleLoadingPanel, nodeID, elbowSpan) {
  var clonedPanel = sampleLoadingPanel.cloneNode(true);
  clonedPanel.id = this.GetNodeLoadingPanelID(nodeID);
  clonedPanel.dir = "ltr";
  elbowSpan.appendChild(clonedPanel);
  return clonedPanel;
 },
 GetSampleExpandButton: function () {
  return ASPx.GetElementById(this.name + this.SampleExpandButtonIDPostfix);
 },
 GetSampleCollapseButton: function () {
  return ASPx.GetElementById(this.name + this.SampleCollapseButtonIDPostfix);
 },
 SetExpandedToState: function (nodeID, expanded) {
  this.nodesState[0][nodeID] = this.SerializeBooleanValue(expanded);
  this.UpdateNodesStateCookies();
 },
 GetExpandedDataFromState: function () {
  return this.nodesState[0];
 },
 HandleNodeDblClick: function (e) {
  var contentElement = this.GetClickedContentElementByEventArgs(e);
  if(!contentElement)
   return;
  var listItem = ASPx.GetParentByTagName(contentElement, "LI");
  var button = this.renderHelper.GetNodeButtonElement(listItem);
  var expandedState = this.GetExpandedDataFromState();
  var nodeID = this.GetNodeIDByContentElementID(contentElement.id);
  if(!button && !ASPx.IsExists(expandedState[nodeID]))
   return;
  this.ProcessUserInitiatedExpandCollapse(button, listItem);
 },
 InsertSubnodesListMarkup: function (listItem, subnodesListMarkup) {
  var fakeDiv = document.createElement("DIV");
  ASPx.SetInnerHtml(fakeDiv, subnodesListMarkup);
  while(fakeDiv.childNodes.length != 0)
   listItem.appendChild(fakeDiv.childNodes[0]);
 },
 InsertRootSubnodesListMarkup: function(contentDiv, rootSubnodesListMarkup) {
  contentDiv.innerHTML = rootSubnodesListMarkup;
 },
 ProcessAllNodesExpandingOnCallback: function (subnodesListMarkup, nodesData, nodeNames, expandedState) {
  this.HideLoadingPanel();
  this.nodesState[0] = expandedState;
  this.UpdateNodesStateCookies();
  this.MergeRetrievedOnCallbackNodeInfo(nodesData, nodeNames);
  var contentDiv = this.GetControlContentDiv();
  this.InsertRootSubnodesListMarkup(contentDiv, subnodesListMarkup);
  var subnodesList = this.renderHelper.GetSubNodesList(contentDiv);
  this.rootNode.nodes = [];
  this.renderHelper.InitializeNodeContainerElements(subnodesList, "", null);
  this.AdjustControl();
 },
 MergeRetrievedOnCallbackNodeInfo: function (nodesData, nodeNames) {
  if(nodesData) {
   var destData = this.nodesInfo || this.nodesUrls;
   this.MergeNodesData(nodesData, destData);
  }
  if(nodeNames) {
   this.MergeNodesData(nodeNames, this.nodesState[3]);
   this.UpdateNodesStateCookies();
  }
 },
 ProcessNodeExpandingOnCallback: function (nodeID, subnodesListMarkup, nodesData, nodeNames) {
  this.MergeRetrievedOnCallbackNodeInfo(nodesData, nodeNames);
  var contentElement = this.GetContentElementByNodeID(nodeID);
  contentElement.performingExpandNodeRequest = false;
  this.HideNodeLoadingPanel(this.GetNodeIDByContentElementID(contentElement.id));
  var listItem = ASPx.GetParentByTagName(contentElement, "LI");
  this.InsertSubnodesListMarkup(listItem, subnodesListMarkup);
  var subnodesList = this.renderHelper.GetSubNodesList(listItem);
  var nodeIndexPath = this.GetNodeIndexPathByContentElementID(contentElement.id);
  var clientNode = null;
  if(this.rootNode.nodes.length > 0)
   clientNode = this.rootNode.GetNodeByContentElementID(contentElement.id);
  this.renderHelper.InitializeNodeContainerElements(subnodesList, nodeIndexPath, clientNode);
  if(listItem.requireUpdateCheckedState)
   this.UpdateDescendantsCheckedState(listItem, listItem.checkedState);
  if(this.checkNodesRecursive) {
   var listItems = this.GetListItems(subnodesList);
   if(listItems)
    this.UpdateAncestorsCheckedState(listItems[0]);
  }
  var button = this.renderHelper.GetNodeButtonElement(listItem);
  this.PerformNodeExpand(subnodesList, button);
 },
 HandleExpandButtonClick: function (e) {
  var button = this.GetExpandButton(e);
  var listItem = ASPx.GetParentByTagName(button, "LI");
  this.ProcessUserInitiatedExpandCollapse(button, listItem);
 },
 GetExpandButton: function(e) {
  return ASPx.GetParentByClassName(ASPx.Evt.GetEventSource(e), TreeViewCssClasses.Button);
 },
 HandleExpandButtonAccessibleMouseDown: function(e) {
  if(ASPx.Evt.IsLeftButtonPressed(e))
   this.requireClearExpandButtonOutline = true;
 },
 HandleExpandButtonAccessibleBlur: function(e) {
  if(this.requireClearExpandButtonOutline)
   return;
  var button = this.GetExpandButton(e);
  var listItem = ASPx.GetParentByTagName(button, "LI");
  ASPx.RemoveClassNameFromElement(listItem, TreeViewCssClasses.AccessibleNode);
 },
 ProcessUserInitiatedExpandCollapse: function (button, listItem) {
  var contentElement = this.renderHelper.GetNodeContentElement(listItem);
  if(contentElement.performingExpandNodeRequest)
   return;
  var expandedChangingResults = this.RaiseExpandedChanging(listItem);
  if(expandedChangingResults.cancel)
   return;
  this.ToggleNodeExpandCollapse(listItem, button, true, expandedChangingResults.processOnServer);
 },
 ToggleNodeExpandCollapse: function (listItem, button, requireRaiseExpandedChanged, processOnServer) {
  var subnodesList = this.renderHelper.GetSubNodesList(listItem);
  var expanding = !subnodesList || !ASPx.GetElementDisplay(subnodesList);
  var contentElement = this.renderHelper.GetNodeContentElement(listItem);
  if(processOnServer) {
   var requestArgs = this.CreatePostRequestArgs(this.RaiseExpandedChangingEventCommand,
    this.GetNodeIDByContentElementID(contentElement.id), this.SerializeBooleanValue(expanding));
   if(this.isInitialized)
    this.SendPostBack(requestArgs);
   return;
  }
  this.SetExpandedToState(this.GetNodeIDByContentElementID(contentElement.id), expanding);
  if(requireRaiseExpandedChanged)
   this.requireRaiseExpandedChangedList.push(contentElement.id);
  if(subnodesList) {
   if(expanding)
    this.PerformNodeExpand(subnodesList, button);
   else
    this.PerformNodeCollapse(subnodesList, button);
   this.ToggleNodeAriaExpanded(contentElement, expanding);
  }
  else {
   contentElement.performingExpandNodeRequest = true;
   this.SendExpandNodePostRequest(contentElement.id, button);
  }
 },
 ToggleNodeAriaExpanded: function(contentElement, expanding){
  if(this.accessibilityCompliant)
   ASPx.Attr.Aria.SetExpanded(contentElement, expanding);
 },
 SendExpandNodePostRequest: function (contentElementID, button) {
  var requestArgs = this.CreatePostRequestArgs(this.ExpandNodeCommand,
   this.GetNodeIDByContentElementID(contentElementID));
  if(this.autoPostBack || !this.callBack) {
   if(this.isInitialized)
    this.SendPostBack(requestArgs);
   return;
  }
  this.ShowNodeLoadingPanel(button, this.GetNodeIDByContentElementID(contentElementID));
  this.CreateCallback(requestArgs);
 },
 StartExpandCollapseAnimation: function (subnodesList, expanding) {
  var height = subnodesList.offsetHeight;
  if(expanding)
   ASPx.SetOffsetHeight(subnodesList, 0);
  ASPx.AnimationHelper.createAnimationTransition(subnodesList, {
   animationEngineType: ASPx.AnimationEngineType.JS,
   property: "height", unit: "px",
   duration: height > 120 ? this.AnimationDuration : this.MinAnimationDuration,
   onComplete: function (el) {
    this.OnCompleteAnimation(el, expanding);
   }.aspxBind(this)
  }).Start(expanding ? 0 : height, expanding ? height : 0);
 },
 OnCompleteAnimation: function (element, expanding) {
  element.style.height = "";
  if(!expanding) {
   ASPx.SetElementDisplay(element, false);
   this.CorrectControlWidth();
  }
  this.RaiseExpandedChanged(element);
 },
 ReplaceExpandButtonWithSampleButton: function (button, sampleButton) {
  var newButton = this.ReplaceElementWithSampleElement(button, sampleButton, false);
  var listItem = ASPx.GetParentByTagName(newButton, "LI");
  var contentElement = this.renderHelper.GetNodeContentElement(listItem);
  if(this.renderHelper.CanAttachExpandButtonHandler(contentElement))
   this.ToggleExpandButtonHandlers(true, newButton);
  else
   newButton.style.cursor = "default";
  if(this.accessibilityCompliant) {
   if(this.requireClearExpandButtonOutline) {
    ASPx.AddClassNameToElement(listItem, TreeViewCssClasses.AccessibleNode);
    this.requireClearExpandButtonOutline = false;
   }
   newButton.focus();
  }
 },
 AccomplishExpandCollapse: function (expandButton, sampleButton, subnodesList) {
  if(expandButton)
   this.ReplaceExpandButtonWithSampleButton(expandButton, sampleButton);
  if(!this.enableAnimation)
   this.RaiseExpandedChanged(subnodesList);
 },
 PerformNodeExpand: function(subnodesList, expandButton) {
  var prevWidth = (this.enableNodeTextWrapping) ? this.GetMainElement().offsetWidth : 0;
  ASPx.SetElementDisplay(subnodesList, true);
  if(this.enableNodeTextWrapping && this.GetMainElement().offsetWidth !== prevWidth)
   this.AdjustControlCore();
  else {
   this.UpdateWordWrapNodesWidth(subnodesList);
   this.CorrectControlWidth();
  }
  if(this.enableAnimation)
   this.StartExpandCollapseAnimation(subnodesList, true);
  this.AccomplishExpandCollapse(expandButton, this.GetSampleCollapseButton(), subnodesList);
 },
 PerformNodeCollapse: function (subnodesList, expandButton) {
  if(this.enableAnimation)
   this.StartExpandCollapseAnimation(subnodesList, false);
  else {
   ASPx.SetElementDisplay(subnodesList, false);
   this.CorrectControlWidth();
  }
  this.AccomplishExpandCollapse(expandButton, this.GetSampleExpandButton(), subnodesList);
 },
 GetNodeExpanded: function (clientNode) {
  if(this.IsRootNode(clientNode))
   return true;
  var expandedState = this.GetExpandedDataFromState();
  var nodeID = this.GetNodeIDByContentElementID(clientNode.contentElementID);
  if(ASPx.IsExists(expandedState[nodeID]))
   return !!expandedState[nodeID];
  return false;
 },
 SetNodeExpanded: function (clientNode) {
  if(this.IsRootNode(clientNode))
   return;
  var contentElement = ASPx.GetElementById(clientNode.contentElementID);
  if(contentElement.performingExpandNodeRequest)
   return;
  var listItem = this.GetNodeListItem(clientNode);
  var button = this.renderHelper.GetNodeButtonElement(listItem);
  var nodeID = this.GetNodeIDByContentElementID(clientNode.contentElementID);
  var expandedState = this.GetExpandedDataFromState();
  if(!button && !ASPx.IsExists(expandedState[nodeID]))
   return;
  if(this.accessibilityCompliant)
   this.requireClearExpandButtonOutline = true;
  this.ToggleNodeExpandCollapse(listItem, button, false, false);
 },
 UpdateStateObject: function(){
  this.UpdateStateObjectWithObject({ nodesState: this.nodesState });
 },
 UpdateNodesStateCookies: function() {
  if(this.cookieName) {
   ASPx.Cookie.DelCookie(this.cookieName);
   ASPx.Cookie.SetCookie(this.cookieName, this.GetClientStateString());
  }
 },
 GetClientStateString: function() {
  return ASPx.Json.ToJson(this.nodesState);
 },
 AreChildNodesLoaded: function (node) {
  var listItem = this.GetNodeListItem(node);
  var button = this.renderHelper.GetNodeButtonElement(listItem);
  return !button || !!this.renderHelper.GetSubNodesList(listItem);
 },
 CreateNodeClickEventArgs: function(processOnServer, node, htmlElement, htmlEvent) {
  return new ASPxClientTreeViewNodeClickEventArgs(processOnServer, node, htmlElement, htmlEvent);
 },
 CreateNodeEventArgs: function(node) {
  return new ASPxClientTreeViewNodeEventArgs(node);
 },
 CreateNodeCancelEventArgs: function(processOnServer, node) {
  return new ASPxClientTreeViewNodeCancelEventArgs(processOnServer, node);
 },
 CreateNodeProcessingModeEventArgs: function(processOnServer, node) {
  return new ASPxClientTreeViewNodeProcessingModeEventArgs(processOnServer, node);
 },
 RaiseNodeClick: function (contentElement, htmlEvent) {
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned(this.NodeClickServerEventName);
  if(!this.NodeClick.IsEmpty()) {
   var clientNode = this.rootNode.GetNodeByContentElementID(contentElement.id);
   var args = this.CreateNodeClickEventArgs(processOnServer, clientNode, contentElement, htmlEvent);
   this.NodeClick.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseExpandedChanged: function (subnodesList) {
  if(this.ExpandedChanged.IsEmpty())
   return;
  var listItem = ASPx.GetParentByTagName(subnodesList, "LI");
  var contentElement = this.renderHelper.GetNodeContentElement(listItem);
  var nodeIndex = ASPx.Data.ArrayIndexOf(this.requireRaiseExpandedChangedList, contentElement.id);
  if(nodeIndex < 0)
   return;
  this.requireRaiseExpandedChangedList.splice(nodeIndex, 1);
  var clientNode = this.rootNode.GetNodeByContentElementID(contentElement.id);
  var args = this.CreateNodeEventArgs(clientNode);
  this.ExpandedChanged.FireEvent(this, args);
 },
 RaiseExpandedChanging: function (listItem) {
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned(this.ExpandedChangingServerEventName);
  var contentElement = this.renderHelper.GetNodeContentElement(listItem);
  var clientNode = this.rootNode.GetNodeByContentElementID(contentElement.id);
  var args = this.CreateNodeCancelEventArgs(processOnServer, clientNode);
  if(!this.ExpandedChanging.IsEmpty())
   this.ExpandedChanging.FireEvent(this, args);
  return args;
 },
 RaiseCheckedChanged: function (contentElement) {
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned(this.CheckedChangedServerEventName);
  if(!this.CheckedChanged.IsEmpty()) {
   var clientNode = this.rootNode.GetNodeByContentElementID(contentElement.id);
   var args = this.CreateNodeProcessingModeEventArgs(processOnServer, clientNode);
   this.CheckedChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 GetNode: function (index) {
  return this.rootNode.GetNode(index);
 },
 GetNodeByName: function (name) {
  return this.rootNode.GetNodeByName(name);
 },
 GetNodeByText: function (text) {
  return this.rootNode.GetNodeByText(text);
 },
 GetNodeCount: function () {
  return this.rootNode.GetNodeCount();
 },
 GetSelectedNode: function () {
  return this.rootNode.GetNodeByContentElementID(this.selectedNodeContentElementID);
 },
 SetSelectedNode: function (node) {
  if(node && (node.treeView != this || this.IsRootNode(node)) || !this.allowSelectNode)
   return;
  var contentElement = node ? ASPx.GetElementById(node.contentElementID) : null;
  var selectedNodeID = contentElement ? this.GetNodeIDByContentElementID(contentElement.id) : "";
  this.SetSelectedNodeIDToState(selectedNodeID);
  this.ApplySelectionToNode(contentElement);
 },
 GetRootNode: function () {
  return this.rootNode;
 },
 IsRootNode: function (clientNode) {
  return clientNode == this.rootNode;
 },
 ExpandCollapseNodesRecursive: function (clientNodes, expand) {
  for(var i = 0; i < clientNodes.length; i++) {
   clientNodes[i].SetExpanded(expand);
   if(clientNodes[i].nodes.length > 0)
    this.ExpandCollapseNodesRecursive(clientNodes[i].nodes, expand);
  }
 },
 CollapseAll: function () {
  if(this.rootNode.nodes.length == 0)
   return;
  this.ExpandCollapseNodesRecursive(this.rootNode.nodes, false);
 },
 ExpandAll: function () {
  if(this.rootNode.nodes.length == 0)
   return;
  var postRequestArgs = this.CreatePostRequestArgs(this.ExpandAllNodesCommand, "");
  if(this.autoPostBack) {
   if(this.isInitialized)
    this.SendPostBack(postRequestArgs);
   return;
  }
  if(this.callBack && !this.IsAllNodesLoadedRecursive(this.rootNode.nodes)) {
   var mainElement = this.GetMainElement();
   this.CreateLoadingDiv(mainElement);
   this.CreateLoadingPanelWithAbsolutePosition(mainElement);
   this.CreateCallback(postRequestArgs);
   return;
  }
  this.ExpandCollapseNodesRecursive(this.rootNode.nodes, true);
 },
 IsAllNodesLoadedRecursive: function(nodes) {
  for(var i = 0; i < nodes.length; i++) {
   var clientNode = nodes[i],
    listItem = this.GetNodeListItem(clientNode),
    expandedState = this.GetExpandedDataFromState(),
    nodeID = this.GetNodeIndexPathByContentElementID(clientNode.contentElementID);
    hasSubnodes = !!ASPx.IsExists(expandedState["N" + nodeID]);
   if(hasSubnodes && (!this.renderHelper.GetSubNodesList(listItem) || !this.IsAllNodesLoadedRecursive(clientNode.nodes)))
    return false;
  }
  return true;
 }
});
ASPxClientTreeView.Cast = ASPxClientControl.Cast;
var ASPxClientTreeViewNode = ASPx.CreateClass(null, {
 constructor: function (treeView, parent, index, name) {
  this.treeView = treeView;
  this.parent = parent;
  this.index = index;
  this.name = name;
  this.enabled = true;
  this.clientEnabled = true;
  this.clientVisible = true;
  this.navigateUrl = null;
  this.target = null;
  this.text = null;
  this.imageUrl = null;
  this.nodes = [];
  this.contentElementID = null;
  this.last = false;
 },
 GetNodeCount: function () {
  return this.nodes.length;
 },
 GetNode: function (index) {
  return (index >= 0 && index < this.nodes.length) ? this.nodes[index] : null;
 },
 GetNodeBySelector: function (selector) {
  for(var i = 0; i < this.nodes.length; i++) {
   if(selector(this.nodes[i]))
    return this.nodes[i];
   var foundNode = this.nodes[i].GetNodeBySelector(selector);
   if(foundNode)
    return foundNode;
  }
  return null;
 },
 GetNodeByContentElementID: function (contentElementID) {
  return this.GetNodeBySelector(function (node) { return node.contentElementID == contentElementID; });
 },
 SetCheckState: function (value) {
  this.treeView.SetNodeState(this, value);
 },
 GetNodeByName: function (name) {
  return this.GetNodeBySelector(function (node) { return node.name == name; });
 },
 GetNodeByText: function (text) {
  return this.GetNodeBySelector(function (node) { return node.GetText() == text; });
 },
 GetExpanded: function () {
  return this.treeView.GetNodeExpanded(this);
 },
 SetExpanded: function (value) {
  if(this.GetExpanded() == value)
   return;
  this.treeView.SetNodeExpanded(this);
 },
 GetChecked: function () {
  return this.GetCheckState() == ASPx.CheckBoxCheckState.Checked;
 },
 SetChecked: function (value) {
  this.SetCheckState(value ? ASPx.CheckBoxCheckState.Checked : ASPx.CheckBoxCheckState.Unchecked);
 },
 GetCheckState: function () {
  return this.treeView.GetNodeState(this);
 },
 GetEnabled: function () {
  return this.enabled && this.clientEnabled;
 },
 SetEnabled: function (value) {
  this.clientEnabled = value;
  this.treeView.SetNodeClientEnabled(this, this.clientEnabled);
 },
 GetImageUrl: function () {
  return this.imageUrl || "";
 },
 SetImageUrl: function (value) {
  this.imageUrl = value;
  this.treeView.SetNodeImageUrl(this, value);
 },
 GetNavigateUrl: function () {
  return this.treeView.GetNodeNavigateUrl(this);
 },
 SetNavigateUrl: function (value) {
  this.treeView.SetNodeNavigateUrl(this, value);
 },
 GetText: function () {
  var nbspChar = String.fromCharCode(160);
  return this.text ? this.text.replace(new RegExp(nbspChar, "g"), " ") : "";
 },
 SetText: function (value) {
  this.text = value;
  this.treeView.SetNodeText(this, value);
 },
 GetVisible: function () {
  return this.clientVisible;
 },
 SetVisible: function (value) {
  this.clientVisible = value;
  this.treeView.SetNodeClientVisible(this, this.clientVisible);
 },
 GetHtmlElement: function () {
  return ASPx.GetElementById(this.contentElementID);
 }
});
var ASPxClientTreeViewNodeProcessingModeEventArgs = ASPx.CreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function (processOnServer, node) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.node = node;
 }
});
var ASPxClientTreeViewNodeClickEventArgs = ASPx.CreateClass(ASPxClientTreeViewNodeProcessingModeEventArgs, {
 constructor: function (processOnServer, node, htmlElement, htmlEvent) {
  this.constructor.prototype.constructor.call(this, processOnServer, node);
  this.htmlElement = htmlElement;
  this.htmlEvent = htmlEvent;
 }
});
var ASPxClientTreeViewNodeEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function (node) {
  this.node = node;
 }
});
var ASPxClientTreeViewNodeCancelEventArgs = ASPx.CreateClass(ASPxClientProcessingModeCancelEventArgs, {
 constructor: function (processOnServer, node) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.node = node;
 }
});
ASPx.TreeViewRenderHelper = TreeViewRenderHelper;
window.ASPxClientTreeView = ASPxClientTreeView;
window.ASPxClientTreeViewNode = ASPxClientTreeViewNode;
window.ASPxClientTreeViewNodeProcessingModeEventArgs = ASPxClientTreeViewNodeProcessingModeEventArgs;
window.ASPxClientTreeViewNodeClickEventArgs = ASPxClientTreeViewNodeClickEventArgs;
window.ASPxClientTreeViewNodeEventArgs = ASPxClientTreeViewNodeEventArgs;
window.ASPxClientTreeViewNodeCancelEventArgs = ASPxClientTreeViewNodeCancelEventArgs;
})();

(function(dx) {
 var Interactions = ASPx.CreateClass(null, {
  onSwipeLeft: function(selector, func) {
  },
  onSwipeRight: function(selector, func) {
  }
 });
 var BootstrapCore = {};
 BootstrapCore.Interactions = new Interactions();
 BootstrapCore.BootstrapMode = 'Bootstrap4';
 BootstrapCore.IsBootstrap3 = BootstrapCore.BootstrapMode == "Bootstrap3";
 BootstrapCore.IsBootstrap4 = BootstrapCore.BootstrapMode == "Bootstrap4";
 BootstrapCore.CheckReferences = 'true';
 BootstrapCore.zIndexCategories = {
  dropdown: 1000,
  sticky: 1020,
  fixed: 1030,
  modalBackdrop: 1040,
  modal: 1050,
  popover: 1060,
  tooltip: 1070
 };
 var bsCssClass = "dxbs-" + BootstrapCore.BootstrapMode.charAt(BootstrapCore.BootstrapMode.length - 1);
 if(document && document.documentElement)
  ASPx.AddClassNameToElement(document.documentElement, bsCssClass);
 var BootstrapCssSelectors = {};
 BootstrapCssSelectors.Table = "table";
 BootstrapCssSelectors.TableBordered = "table-bordered";
 BootstrapCssSelectors.TableSmall = BootstrapCore.IsBootstrap3 ? "table-condensed" : "table-sm";
 BootstrapCssSelectors.TableActive = BootstrapCore.IsBootstrap3 ? "" : "table-active";
 BootstrapCssSelectors.BackgroundLight = BootstrapCore.IsBootstrap3 ? "" : "bg-light";
 BootstrapCssSelectors.BackgroundPrimary = BootstrapCore.IsBootstrap3 ? "bg-primary" : "bg-primary text-white";
 BootstrapCssSelectors.BackgroundDanger = "bg-danger";
 BootstrapCssSelectors.Hidden = BootstrapCore.IsBootstrap3 ? "hidden" : "d-none";
 BootstrapCssSelectors.Row = "row";
 BootstrapCssSelectors.Column = "col";
 BootstrapCssSelectors.ColumnAuto = BootstrapCore.IsBootstrap3 ? "" : "col-auto";
 BootstrapCssSelectors.Panel = BootstrapCore.IsBootstrap3 ? "panel" : "card";
 BootstrapCssSelectors.PanelDefault = BootstrapCore.IsBootstrap3 ? "panel-default" : "";
 BootstrapCssSelectors.PanelHeading = BootstrapCore.IsBootstrap3 ? "panel-heading" : "card-header";
 BootstrapCssSelectors.PanelTitle = BootstrapCore.IsBootstrap3 ? "panel-title" : "card-title";
 BootstrapCssSelectors.PanelBody = BootstrapCore.IsBootstrap3 ? "panel-body" : "card-body";
 BootstrapCssSelectors.PanelFooter = BootstrapCore.IsBootstrap3 ? "panel-footer" : "card-footer";
 BootstrapCssSelectors.Radio = BootstrapCore.IsBootstrap3 ? "radio" : "form-check";
 BootstrapCssSelectors.CheckBox = BootstrapCore.IsBootstrap3 ? "checkbox" : "form-check";
 BootstrapCssSelectors.InlineCheckBox = BootstrapCore.IsBootstrap3 ? "checkbox-inline" : "form-check form-check-inline";
 BootstrapCssSelectors.CheckBoxLabel = BootstrapCore.IsBootstrap3 ? "" : "form-check-label";
 BootstrapCssSelectors.CheckBoxInput = BootstrapCore.IsBootstrap3 ? "" : "form-check-input";
 BootstrapCssSelectors.CustomCheckBox = BootstrapCore.IsBootstrap3 ? "" : "custom-control custom-checkbox";
 BootstrapCssSelectors.CustomInlineCheckBox = BootstrapCore.IsBootstrap3 ? "" : "custom-control custom-control-inline custom-checkbox";
 BootstrapCssSelectors.CustomRadioButton = BootstrapCore.IsBootstrap3 ? "" : "custom-control custom-radio";
 BootstrapCssSelectors.CustomInlineRadioButton = BootstrapCore.IsBootstrap3 ? "" : "custom-control custom-control-inline custom-radio";
 BootstrapCssSelectors.CustomCheckLabel = BootstrapCore.IsBootstrap3 ? "" : "custom-control-label";
 BootstrapCssSelectors.CustomCheckInput = BootstrapCore.IsBootstrap3 ? "" : "custom-control-input";
 BootstrapCssSelectors.ControlLabel = BootstrapCore.IsBootstrap3 ? "control-label" : "col-form-label";
 BootstrapCssSelectors.FormControlStatic = BootstrapCore.IsBootstrap3 ? "form-control-static" : "form-control-plaintext" ;
 BootstrapCssSelectors.HelpBlock = BootstrapCore.IsBootstrap3 ? "help-block" : "form-text";
 BootstrapCssSelectors.HasError = BootstrapCore.IsBootstrap3 ? "has-error" : "";
 BootstrapCssSelectors.FormControlFeedback = BootstrapCore.IsBootstrap3 ? "form-control-feedback" : "dxbs-feedback";
 BootstrapCssSelectors.InvalidFormControl = BootstrapCore.IsBootstrap3 ? "" : "is-invalid";
 BootstrapCssSelectors.InvalidFeedback = BootstrapCore.IsBootstrap3 ? "" : "invalid-feedback";
 BootstrapCssSelectors.InputGroup = "input-group";
 BootstrapCssSelectors.InputGroupAppendButton = BootstrapCore.IsBootstrap3 ? "input-group-btn" : "input-group-append";
 BootstrapCssSelectors.InputGroupPrependButton = BootstrapCore.IsBootstrap3 ? "input-group-btn" : "input-group-prepend";
 BootstrapCssSelectors.Divider = BootstrapCore.IsBootstrap3 ? "divider" : "dropdown-divider";
 BootstrapCssSelectors.NavItem = BootstrapCore.IsBootstrap3 ? "" : "nav-item";
 BootstrapCssSelectors.NavLink = BootstrapCore.IsBootstrap3 ? "" : "nav-link";
 BootstrapCssSelectors.DropDownMenu = "dropdown-menu";
 BootstrapCssSelectors.DropDownMenuItem = BootstrapCore.IsBootstrap3 ? "" : "dropdown-item";
 BootstrapCssSelectors.ListBoxItemLink = BootstrapCore.IsBootstrap3 ? "list-group-item" : "list-group-item list-group-item-action";
 BootstrapCssSelectors.HiddenLayout = "dxbs-hl";
 BootstrapCssSelectors.Breabcrumb = "breadcrumb";
 BootstrapCssSelectors.BreadcrumbItem = BootstrapCore.IsBootstrap3 ? "" : "breadcrumb-item";
 BootstrapCssSelectors.Toolbar = "btn-toolbar";
 BootstrapCssSelectors.Button = "btn";
 BootstrapCssSelectors.ButtonGroup = "btn-group";
 BootstrapCssSelectors.ButtonGroupVertical = "btn-group-vertical";
 BootstrapCssSelectors.DropDown = "dropdown";
 BootstrapCssSelectors.DropDownToggle = "dropdown-toggle";
 BootstrapCssSelectors.Modal = "modal";
 BootstrapCssSelectors.ModalContent = "modal-content";
 BootstrapCssSelectors.ModalBody = "modal-body";
 BootstrapCssSelectors.ModalHeader = "modal-header";
 BootstrapCssSelectors.ModalTitle = "modal-title";
 BootstrapCssSelectors.ModalFooter = "modal-footer";
 BootstrapCssSelectors.ModalBackdrop = "modal-backdrop " + (BootstrapCore.IsBootstrap3 ? "in" : "show");
 BootstrapCssSelectors.Label = BootstrapCore.IsBootstrap3 ? "label" : "badge";
 BootstrapCssSelectors.TextCenter = "text-center";
 BootstrapCssSelectors.Alert = "alert";
 function selectClass() { return arguments[+(arguments.length > 1 && !BootstrapCore.IsBootstrap3)]; }
 BootstrapCssSelectors.Popover = selectClass("popover");
 BootstrapCssSelectors.PopoverArrow = selectClass("arrow");
 BootstrapCssSelectors.PopoverBody = selectClass("popover-content", "popover-body");
 BootstrapCssSelectors.PopoverHeader = selectClass("popover-title", "popover-header");
 BootstrapCssSelectors.PopoverBottom = selectClass("bottom", "bs-popover-bottom");
 BootstrapCssSelectors.PopoverLeft = selectClass("left", "bs-popover-left");
 BootstrapCssSelectors.PopoverRight = selectClass("right", "bs-popover-right");
 BootstrapCssSelectors.PopoverTop = selectClass("top", "bs-popover-top");
 BootstrapCssSelectors.Tooltip = selectClass("tooltip");
 BootstrapCssSelectors.TooltipArrow = selectClass("tooltip-arrow", "arrow");
 BootstrapCssSelectors.TooltipContent = selectClass("tooltip-inner");
 BootstrapCssSelectors.TooltipBottom = selectClass("bottom", "bs-tooltip-bottom");
 BootstrapCssSelectors.TooltipLeft = selectClass("left", "bs-tooltip-left");
 BootstrapCssSelectors.TooltipRigth = selectClass("right", "bs-tooltip-right");
 BootstrapCssSelectors.TooltipTop = selectClass("top", "bs-tooltip-top");
 BootstrapCssSelectors.Border = selectClass("dxbs-border", "border");
 BootstrapCssSelectors.TableHeadLight = selectClass("", "thead-light");
 BootstrapCssSelectors.TextRight = selectClass("text-right");
 BootstrapCssSelectors.PanelHeadingTabs = selectClass("panel-heading-tabs", "card-header-tabs");
 var mediaQueryScreenSizesCache = {};
 function createCssRuleForScreenSizeMediaQuery(cssVarName, fallbackWidth, cssRule) {
  var cache = mediaQueryScreenSizesCache;
  var minWidth = cache[cssVarName] || (cache[cssVarName] = (ASPx.GetCurrentStyle(document.body).getPropertyValue(cssVarName) || fallbackWidth));
  if(minWidth) {
   var styleSheet = ASPx.GetCurrentStyleSheet();
   if(styleSheet)
    styleSheet.insertRule("@media (min-width: " + minWidth + ") {\n" + cssRule + "\n}\n", styleSheet.cssRules.length);
  }
 }
 BootstrapCore.createCssRuleForLargeScreen = function(cssRule) {
  createCssRuleForScreenSizeMediaQuery("--breakpoint-lg", "992px", cssRule);
 };
 function getTableCellStyleRuleCssText(cellElement, addBorders, addPaddings) {
  var cellStyleProperties = [];
  if(addBorders) {
   cellStyleProperties = cellStyleProperties.concat([
    "border", "border-left", "border-top", "border-right", "border-bottom",
    "border-left-width", "border-left-style", "border-left-color",
    "border-top-width", "border-top-style", "border-top-color",
    "border-right-width", "border-right-style", "border-right-color",
    "border-bottom-width", "border-bottom-style", "border-bottom-color"
   ]);
  }
  if(addPaddings)
   cellStyleProperties = cellStyleProperties.concat(["padding", "padding-left", "padding-top", "padding-right", "padding-bottom"]);
  return getStyleRuleCssText(ASPx.GetCurrentStyle(cellElement), cellStyleProperties);
 }
 function getStyleRuleCssText(currentStyle, styleProperties) {
  var rules = [];
  if(currentStyle) {
   for(var i = 0; i < styleProperties.length; i++) {
    var stylePropertyValue = ASPx.Str.Trim(currentStyle.getPropertyValue(styleProperties[i])) + "";
    if(stylePropertyValue)
     rules.push(styleProperties[i] + ": " + stylePropertyValue);
   }
  }
  return rules.join(";");
 }
 function updateTableCellStyleSheetRule(tableClassName, styleSheet, cssText, isHeaderCell, forceAdd) {
  if(!cssText || !cssText.length)
   return;
  var selector = "." + tableClassName + " tr > " + (isHeaderCell ? "th" : "td");
  updateStyleSheetRule(styleSheet, selector, cssText, forceAdd);
 }
 function updateStyleSheetRule(styleSheet, selector, cssText, forceAdd) {
  if(!forceAdd) {
   var rule = ASPx.GetStyleSheetRules(selector.substring(1));
   if(rule)
    rule.style.cssText = cssText;
   else
    forceAdd = true;
  }
  if(forceAdd)
   ASPx.AddStyleSheetRule(styleSheet, selector, cssText);
 }
 BootstrapCore.updateTableCellStyleSheetRules = function(forceAdd) {
  if(BootstrapCore.IsBootstrap3) {
   var styleSheet = ASPx.GetCurrentStyleSheet();
   if(styleSheet) {
    var container = createTestElement();
    var tableElement = document.createElement("table");
    var tableBody = document.createElement("tbody");
    tableElement.appendChild(tableBody);
    container.appendChild(tableElement);
    var row = document.createElement("tr");
    var cell = document.createElement("td");
    row.appendChild(cell);
    tableBody.appendChild(row);
    var rowWithHeaderCell = document.createElement("tr");
    var headerCell = document.createElement("th");
    rowWithHeaderCell.appendChild(headerCell);
    tableBody.appendChild(rowWithHeaderCell);
    document.body.appendChild(container);
    var tableClassName = BootstrapCssSelectors.Table;
    var tableBorderedClassName = BootstrapCssSelectors.TableBordered;
    var tableSmallClassName = BootstrapCssSelectors.TableSmall;
    tableElement.className = tableClassName;
    updateTableCellStyleSheetRule(tableClassName, styleSheet, getTableCellStyleRuleCssText(cell, true, true), true, forceAdd);
    updateTableCellStyleSheetRule(tableClassName, styleSheet, getTableCellStyleRuleCssText(headerCell, true, true), false, forceAdd);
    cell.className = "active";
    var tableActiveCssClass = "dxbs-table-active";
    var tableActiveCssText = getStyleRuleCssText(ASPx.GetCurrentStyle(cell), ["background-color"]);
    updateStyleSheetRule(styleSheet, "." + tableActiveCssClass, tableActiveCssText, forceAdd);
    cell.className = "";
    tableElement.className = tableBorderedClassName;
    updateTableCellStyleSheetRule(tableBorderedClassName, styleSheet, getTableCellStyleRuleCssText(cell, true, false), true, forceAdd);
    updateTableCellStyleSheetRule(tableBorderedClassName, styleSheet, getTableCellStyleRuleCssText(headerCell, true, false), false, forceAdd);
    tableElement.className = tableSmallClassName;
    updateTableCellStyleSheetRule(tableSmallClassName, styleSheet, getTableCellStyleRuleCssText(cell, false, true), true, forceAdd);
    updateTableCellStyleSheetRule(tableSmallClassName, styleSheet, getTableCellStyleRuleCssText(headerCell, false, true), false, forceAdd);
    document.body.removeChild(container);
   }
  }
 };
 var existingColors = {};
 BootstrapCore.createColorItemsRules = function () {
  var colorElements = document.querySelectorAll("[data-color]");
  var cssText = "";
  for (var i = 0; i < colorElements.length; i++) {
   var colorElement = colorElements[i];
   var colorValue = ASPx.Attr.GetAttribute(colorElement, "data-color");
   if(existingColors[colorValue])
    continue;
   existingColors[colorValue] = true;
   cssText += "[data-color=\"" + colorValue + "\"],\n[data-item-color=\"" + colorValue + "\"]:before { background-color: " + colorValue + "; }\n";
  }
  if (cssText)
   BootstrapCore.createStylesBlock(cssText, "colors" + ASPx.CreateGuid());
 };
 BootstrapCore.createColorRule = function(c) {
  if(existingColors[c])
   return;
  existingColors[c] = true;
  ASPx.AddStyleSheetRule(ASPx.GetCurrentStyleSheet(), "[data-color=\"" + c + "\"],\n[data-item-color=\"" + c + "\"]:before", "background-color: " + c + ";");
 };
 BootstrapCore.getActualBgColor = function (el) {
  var color = ASPx.GetCurrentStyle(el).backgroundColor;
  var c = ASPx.Color.ColorToHexadecimal(color, true);
  if(c.a < 1) {
   var bgColor = ASPx.GetCurrentStyle(el.parentNode).backgroundColor;
   var bg;
   while(el.parentNode && el.parentNode.nodeType == 1 && (bg = ASPx.Color.ColorToHexadecimal(bgColor, true)).a === 0)
    bgColor = ASPx.GetCurrentStyle(el = el.parentNode).backgroundColor;
   c.r = Math.round(((1 - c.a) * bg.r) + (c.a * c.r));
   c.g = Math.round(((1 - c.a) * bg.g) + (c.a * c.g));
   c.b = Math.round(((1 - c.a) * bg.b) + (c.a * c.b));
  }
  return "rgb(" + c.r + "," + c.g + "," + c.b + ")";
 };
 var createdStylesBlockKeys = {};
 BootstrapCore.removeStylesBlock = function(key) {
  var stylesBlock = document.getElementById(key + "_styles");
  if(stylesBlock)
   ASPx.RemoveElement(stylesBlock);
 };
 BootstrapCore.createStylesBlock = function(cssText, key, container) {
  key = key + "_styles";
  var styleElement = null;
  if(key) {
   if(createdStylesBlockKeys[key]) {
    styleElement = document.getElementById(key);
    if(styleElement)
     ASPx.RemoveElement(styleElement);
   }
   createdStylesBlockKeys[key] = true;
  }
  styleElement = document.createElement("STYLE");
  styleElement.appendChild(document.createTextNode(cssText));
  if(container === undefined)
   container = ASPx.GetHeadElementOrCreateIfNotExist(document);
  container.appendChild(styleElement);
  styleElement.id = key;
 };
 BootstrapCore.initializeAccentColorRelatedSelectors = function(forceAddCssRule) {
  var linkEl = document.createElement("A");
  linkEl.href = ASPx.AccessibilityEmptyUrl;
  linkEl.className = ASPx.BootstrapCssSelectors.HiddenLayout;
  ASPx.DOM.ChangeDOM(function () {
   document.body.appendChild(linkEl);
   ASPx.DOM.CalculateStyles(function () {
    var accentColor = ASPx.Color.ColorToHexadecimal(ASPx.GetCurrentStyle(linkEl).color);
    ASPx.DOM.ChangeDOM(function() {
     updateStyleSheetRule(ASPx.GetCurrentStyleSheet(), ".dx-accent-color", "color: " + accentColor, forceAddCssRule);
     ASPx.RemoveElement(linkEl);
    });
   });
  });
 };
 function createBootstrapStateItemClass() {
  var stateClass = ASPx.CreateClass(ASPx.StateItem, {
   Clone: function() {
    return new stateClass(this.name, this.classNames, this.cssTexts, this.postfixes,
     this.imageObjs, this.imagePostfixes, this.kind, this.disableApplyingStyleToLink);
   },
   Apply: function(element) {
    this.changeState(element, true);
   },
   Cancel: function(element) {
    this.changeState(element, false);
   },
   changeState: function(element, condition) {
    if(!this.enabled) return;
    var elements = this.GetElements(element);
    for(var i = 0; i < elements.length; i++) {
     if(elements[i])
      this.changeClassName(elements[i], this.GetResultClassName(i), condition);
    }
   },
   changeClassName: function(el, className, condition) {
    if (!!className)
     ASPx.DOM.ToggleCssClass(el, className, condition);
   },
   ForceRedrawAppearance: function() { }
  });
  return stateClass;
 }
 var bootstrapStateItemClass;
 BootstrapCore.AddStateItems = function(callback) {
  ASPx.GetStateController().withCustomStateItemType(bootstrapStateItemClass || (bootstrapStateItemClass = createBootstrapStateItemClass()), callback);
 };
 ASPx.BootstrapCore = BootstrapCore;
 ASPx.BootstrapCssSelectors = BootstrapCssSelectors;
 ASPx.BuildBSCssClass = function() {
  return ASPx.Data.CollectionToArray(arguments)
   .map(function (c) { return BootstrapCssSelectors[c] || c; }).join(" ");
 };
 ASPx.CreatePatchedClass = function(baseClass, properties, patch) {
  var patchedBaseClass = ASPx.CreateClass(baseClass, patch);
  return ASPx.CreateClass(patchedBaseClass, properties || {});
 };
 if(BootstrapCore.CheckReferences)
  ASPx.attachToReady(detectBootstrapFramework);
 function detectBootstrapFramework() {
  var testElement = createTestElement();
  testElement.className = "input-group";
  document.body.appendChild(testElement);
  var style = ASPx.GetCurrentStyle(testElement);
  var exists = true;
  if (BootstrapCore.BootstrapMode === "Bootstrap3") {
   exists = style.display.indexOf("table") > -1;
  }
  else if (BootstrapCore.BootstrapMode === "Bootstrap4") {
   exists = style.display.indexOf("flex") > -1;
  }
  document.body.removeChild(testElement);
  if (!exists) {
   var version = parseInt(ASPx.BootstrapCore.BootstrapMode.substr(9));
   console.error("Bootstrap " + version + " required by DevExpress Bootstrap controls is not linked to the page. Add a bootstrap.css link to the page for the controls to work properly.");
  }
 }
 function createTestElement() {
  var testElement = document.createElement("div");
  testElement.style.position = "absolute";
  testElement.style.top = ASPx.InvalidPosition + "px";
  testElement.style.left = ASPx.InvalidPosition + "px";
  return testElement;
 }
 ASPx.attachToLoad(function() {
  ASPx.BootstrapCore.updateTableCellStyleSheetRules(true);
  ASPx.BootstrapCore.initializeAccentColorRelatedSelectors(true);
 });
})(dx || (dx = {}));

(function(dx) {
 (function (env) {
  var baseClass = env.CreateClass({
   constructor: function (args) {
    Object.defineProperty(this, '__dx__', { value: args, enumerable: false, configurable: false, writable: false });
    if(!args[1].getInstance)
     Object.defineProperty(args[1], 'getInstance', { value: args[2], enumerable: true, configurable: false, writable: false });
   },
   getType: function () { return this.__dx__[1]; },
   clone: function (env) { return create(this.__dx__[0], env, env ? null : this.getType()); }
  });
  function create(setupEnv, envObj, type, ret) {
   type = type || (type = env.CreateClass(baseClass, setupEnv(envObj || env)));
   return ret = new type([setupEnv, type, function () { return ret; }]);
  }
  env.CreateSingleton = create;
 })(ASPx);
 var BootstrapEventManager = {};
 var globalContainersStorage = {};
 function getEventAttachFunc(owner, key) {
  var cs = globalContainersStorage[owner.name];
  if(!cs || cs.checkSum !== owner.checkSum)
   cs = globalContainersStorage[owner.name] = { checkSum: (owner.checkSum = ASPx.CreateGuid()), c: {} };
  return cs.c[key] || (cs.c[key] = createEventHandlerContainer(
   owner.getEventContainers || function() { return [document.getElementById(owner.name)]; }, key));
 }
 function createEventHandlerContainer(getEventContainers, eventName) {
  var elements = getEventContainers();
  var queue = [], i = 0, order = [queue];
  function addToHierarchy(el, handler) {
   var foundQueue = queue;
   var detachIndex = foundQueue.length;
   foundQueue.push({ target: el, handler: handler });
   return function() { foundQueue.splice(detachIndex, 1); };
  }
  function handleEvent(e) {
   if(e.cancelBubble) return;
   var srcEl = ASPx.Evt.GetEventSource(e);
   for(var i = 0; !e.cancelBubble && i < order.length; i++) {
    var q = order[i];
    if(q && q.length) {
     for(var j = 0; !e.cancelBubble && j < q.length; j++) {
      if(ASPx.GetIsParent(q[j].target, srcEl)) {
       q[j].handler(e);
       break;
      }
     }
    }
   }
  }
  for(var i = 0; i < elements.length; i++) {
   ASPx.Evt.AttachEventToElement(elements[i], eventName, handleEvent);
  }
  return addToHierarchy;
 }
 BootstrapEventManager.attachEventToElement = function(owner, element, eventName, handler) {
  var detacherBagRef = element._detacherBagRef || (element._detacherBagRef = {});
  detacherBagRef[eventName] = getEventAttachFunc(owner, eventName)(element, handler);
 };
 BootstrapEventManager.detachEventFromElement = function(element, eventName, handler) {
  var detacherBagRef = element._detacherBagRef || (element._detacherBagRef = {});
  if(detacherBagRef[eventName])
   detacherBagRef[eventName]();
 };
 BootstrapEventManager.EventsHub = ASPx.CreateSingleton(function (ASPx) {
  var eventListenersAttachedToDOM = false, eventListenersBuffer = [], handleOnEventBubbling = true, emptyEventListener = { attach: function () { }, detach: function () { } };
  function ensureEventListenersActive() {
   if (eventListenersAttachedToDOM === true)
    return;
   eventListenersBuffer.forEach(function (f) { f(); });
   eventListenersBuffer = null;
   eventListenersAttachedToDOM = true;
  }
  function getEventListener(eventName, targetGetter) {
   targetGetter = targetGetter || function () { return document; };
   if (eventName === "mouseover" && ASPx.Browser.MobileUI)
    return emptyEventListener;
   var listeners = [];
   function getDepth(root, el) { return el !== root ? getDepth(root, el.parentNode) + 1 : 0; }
   function attachListenersToDOM() {
    ASPx.Evt.AttachEventToElement(targetGetter(), eventName, function (evt) {
     var evtSrc = ASPx.Evt.GetEventSource(evt);
     function invokeHandlerForListener(listener) { listener.handler(listener.el, evt, evtSrc, eventName); }
     function createListenerInfo(listener) {
      var p = ASPx.GetParentBySelector(evtSrc, listener.targetSelector);
      if (!p && !(listener.fallbackSelector && ASPx.ElementMatchesSelector(evtSrc, listener.fallbackSelector)))
       return null;
      return { isFallback: !p, handler: p ? listener.handler : listener.fallbackHandler, el: p || evtSrc, depth: p ? getDepth(p, evtSrc) : 0 };
     }
     function processRelatedListeners(relatedListeners, isFallback) {
      relatedListeners.filter(function (rl) { return rl.isFallback === isFallback; }).sort(function (a, b) { return a.depth < b.depth; }).forEach(invokeHandlerForListener);
     }
     var relatedListeners = listeners.map(createListenerInfo).filter(function (rl) { return !!rl; });
     processRelatedListeners(relatedListeners, false);
     processRelatedListeners(relatedListeners, true);
    }, handleOnEventBubbling);
   }
   function attach(eventListenerInfo) {
    var targetSelector, handler, fallbackSelector, fallbackHandler;
    for (var k in eventListenerInfo) {
     if (eventListenerInfo.hasOwnProperty(k)) {
      if (k === "*") {
       fallbackSelector = k;
       fallbackHandler = eventListenerInfo[k];
      } else {
       targetSelector = k;
       handler = eventListenerInfo[k];
      }
     }
    }
    listeners.push({ targetSelector: targetSelector, handler: handler, fallbackSelector: fallbackSelector, fallbackHandler: fallbackHandler, owner: eventListenerInfo });
   }
   function detach(eventListenerInfo) {
    listeners = listeners.filter(function (l) { return l.owner !== eventListenerInfo; });
   }
   eventListenersBuffer.push(attachListenersToDOM);
   return {
    attach: attach,
    detach: detach
   };
  }
  return {
   getEventListener: getEventListener,
   ensureEventListenersActive: ensureEventListenersActive
  };
 });
 ASPx.BootstrapEventManager = BootstrapEventManager;
 var BootstrapPopupManager = {};
 var visiblePopups;
 var popupInfo = function(elements, onHide){
  this.elements = elements;
  this.onHide = onHide;
 };
 BootstrapPopupManager.registerVisiblePopup = function(elements, onHide){
  if(!visiblePopups)
   visiblePopups = [];
  if(!ASPx.Ident.IsArray(elements))
   elements = [elements];
  visiblePopups.push(new popupInfo(elements, onHide));
  showPopup(elements);
 };
 BootstrapPopupManager.correctPopupPositionForClientWindow = function(elements, hAlign, hOffset, vAlign, vOffset) {
  correctPopupForClientWindow(ASPx.Ident.IsArray(elements) ? elements : [elements], hAlign, hOffset, vAlign, vOffset);
 };
 BootstrapPopupManager.unregisterVisiblePopup = function(elements){
  if(visiblePopups && visiblePopups.length && elements && elements.length) {
   var popupInfo = this.findPopupInfo(elements);
   if(popupInfo) {
    hidePopup(popupInfo.elements);
    ASPx.Data.ArrayRemove(visiblePopups, popupInfo);
    if(popupInfo.onHide)
     popupInfo.onHide();
   }
  }
 };
 BootstrapPopupManager.findPopupInfo = function(elements){
  for(var i = 0; i < visiblePopups.length; i++){
   if(ASPx.Data.ArrayEqual(visiblePopups[i].elements, elements))
    return visiblePopups[i];
  }
  return null;
 };
 BootstrapPopupManager.isPopupVisible = function(elements){
  return visiblePopups && visiblePopups.length && elements && elements.length && this.findPopupInfo(elements);
 };
 function showPopup(elements) {
  var originElement = getOriginElement(elements);
  var popupElement = getPopupElement(elements);
  var x = ASPx.GetAbsoluteX(originElement);
  var y = ASPx.GetAbsoluteY(originElement) + originElement.offsetHeight;
  ASPx.SetAbsoluteX(popupElement, x);
  ASPx.SetAbsoluteY(popupElement, y);
  ASPx.SetElementDisplay(popupElement, true);
 }
 function correctPopupForClientWindow(elements, hAlign, hOffset, vAlign, vOffset) {
  var originElement = getOriginElement(elements);
  var popupElement = getPopupElement(elements);
  ASPx.SetAbsoluteX(popupElement, correctPopupPositionToClientScreen(popupElement, originElement, true, hAlign, hOffset));
  ASPx.SetAbsoluteY(popupElement, correctPopupPositionToClientScreen(popupElement, originElement, false, vAlign, vOffset));
 }
 function hidePopup(elements){
  var popupElement = getPopupElement(elements);
  if(popupElement)
   ASPx.SetElementDisplay(popupElement, false);
 }
 function getPopupElement(elements){
  return elements && elements.length > 0 ? elements[0] : null;
 }
 function getOriginElement(elements){
  return elements && elements.length > 1 ? elements[1] : null;
 }
 function correctPopupPositionToClientScreen(popupElement, originElement, isX, align, offset) {
  var startPos = ASPx.InvalidPosition;
  var startPosInit = isX ? ASPx.GetAbsoluteX(popupElement) : ASPx.GetAbsoluteY(popupElement);
  var popupPosition = isX ? ASPx.PopupUtils.GetPopupAbsoluteX(popupElement, originElement, align, offset, startPos, startPosInit, false, true)
   : ASPx.PopupUtils.GetPopupAbsoluteY(popupElement, originElement, align, offset, startPos, startPosInit, true, false);
  return popupPosition.position;
 }
 ASPx.Evt.AttachEventToDocument("mousedown", function(evt) {
  if(!visiblePopups || !visiblePopups.length) return;
  var eventSource = ASPx.Evt.GetEventSource(evt);
  if(typeof(ASPx.GetDropDownCollection) != "undefined") {
   var dropDownCollection = ASPx.GetDropDownCollection();
   var dropDownControl = dropDownCollection.GetDroppedDropDown();
   if(dropDownControl != null) {
    var modalWrapperElement = dropDownControl.GetMainElement().querySelector(".dxbs-ddmodal");
    var isEventFromModalWrapper = ASPx.GetIsParent(modalWrapperElement, eventSource);
    var isEventFromDropDownWindow = ASPx.GetIsParent(dropDownControl.GetDropDownWindow(), eventSource);
    if(!(isEventFromModalWrapper || isEventFromDropDownWindow)) {
     var isEventFromDropDownControl = !dropDownCollection.IsEventNotFromControlSelf(evt, dropDownControl);
     if(isEventFromDropDownControl)
      return;
    }
    var isEventOutFromModalDialog = isEventFromModalWrapper && !isEventFromDropDownWindow;
    if(isEventOutFromModalDialog) {
     dropDownControl.CloseDropDownByDocumentOrWindowEvent(false);
     return;
    }
   }
  }
  for(var i = visiblePopups.length - 1; i >= 0; i--) {
   var needHidePopup = true;
   var popupElements = visiblePopups[i].elements;
   for(var j = 0; j < popupElements.length; j++) {
    if(ASPx.GetIsParent(popupElements[j], eventSource))
     needHidePopup = false;
   }
   if(needHidePopup)
    BootstrapPopupManager.unregisterVisiblePopup(popupElements);
  }
 });
 BootstrapPopupManager.PopupZIndex = 500;
 BootstrapPopupManager.PopupModalZIndex = 1100;
 BootstrapPopupManager.PopupType = "bspopup";
 BootstrapPopupManager.PopupModalType = "modalbspopup";
 ASPx.BootstrapPopupManager = BootstrapPopupManager;
 var defaultDecorationStyles = { };
 var BootstrapEditorStyleDecoration = ASPx.CreateClass(ASPx.TextEditorStyleDecoration, {
  constructor: function(editor) {
   this.constructor.prototype.constructor.call(this, editor);
   if(editor.cssClasses && editor.cssClasses.nt)
    this.innerStyles["N"] = editor.cssClasses.nt;
  },
  InitializeNullTextClassName: function() {
   if(this.HasDecoration("N"))
    this.nullTextClassName = this.innerStyles["N"];
  },
  IsTimeEditDecorated: function() {
   return ASPx.Ident.IsASPxClientTimeEdit && ASPx.Ident.IsASPxClientTimeEdit(this.editor);
  },
  HasDecoration: function(key) {
   var editor = this.editor;
   var validationEnabled = editor.customValidationEnabled;
   var hasNullTextDecoration = key == "N" && (!!editor.nullText || this.IsTimeEditDecorated());
   var hasInvalidDecoration = key == "I" && validationEnabled;
   var hasFocusedDecoration = editor.needFocusedStyleDecoration && (key == "F" || key == "FI" && validationEnabled);
   var hasDecoration = hasNullTextDecoration || hasInvalidDecoration || hasFocusedDecoration;
   if(hasDecoration) {
    var needUpdateDefaultDecoration = !defaultDecorationStyles[key] || !defaultDecorationStyles[key].isValid;
    if(needUpdateDefaultDecoration)
     BootstrapEditorStyleDecoration.UpdateDefaultDecorationStyles([key]);
    if(!this.innerStyles[key] && defaultDecorationStyles[key])
     this.innerStyles[key] = defaultDecorationStyles[key].className;
   }
   return hasDecoration;
  },
  CanApplyNullTextStyleToElement: function(element) {
   var needApplyNullTextClassName = this.editor.focused && this.IsTimeEditDecorated();
   return !needApplyNullTextClassName
    ? this.IsInputElement(element) && this.editor.GetInputElement() == element
    : false;
  },
  CanApplyFocusedStyleToElement: function(element) {
   var tabIndex = parseInt(ASPx.Attr.GetAttribute(element, "tabindex"));
   return !this.IsInputElement(element)
    ? !isNaN(tabIndex) && tabIndex >= 0 || ASPx.ElementContainsCssClass(element, "form-control")
    : false;
  },
  CanApplyInvalidStyleToElement: function(element) {
   var editor = this.editor;
   var isEditorInputElement = editor.GetInputElement() == element
    || editor.GetPasswordNullTextInputElement && editor.GetPasswordNullTextInputElement() == element;
   var isFormControlElement = isEditorInputElement || ASPx.ElementContainsCssClass(element, "form-control");
   var isCheckInputElement = ASPx.ElementContainsCssClass(element, "form-check-input")
    || ASPx.ElementContainsCssClass(element, "custom-control-input");
   return (isFormControlElement || isCheckInputElement) == ASPx.BootstrapCore.IsBootstrap4;
  },
  ApplyFocusedStyle: function(element, inner) {
   var focusedInvalidStyleApplied = !this.editor.GetIsValid() && this.editor.focused && this.editor.customValidationEnabled;
   if(!focusedInvalidStyleApplied && this.CanApplyFocusedStyleToElement(element))
    ASPx.TextEditorStyleDecoration.prototype.ApplyFocusedStyle.call(this, element, true);
  },
  ApplyFocusedInvalidStyle: function(element) {
   if(this.CanApplyFocusedStyleToElement(element) && this.HasDecoration("FI"))
    this.ApplyDecoration("FI", element, true, this.editor.focused && !this.editor.GetIsValid());
  },
  ApplyInvalidStyle: function(element, inner) {
   if(this.CanApplyInvalidStyleToElement(element))
    ASPx.TextEditorStyleDecoration.prototype.ApplyInvalidStyle.call(this, element, true);
   this.ApplyFocusedInvalidStyle(element);
  },
  ApplyNullTextStyle: function(element, inner) {
   if(this.CanApplyNullTextStyleToElement(element))
    ASPx.TextEditorStyleDecoration.prototype.ApplyNullTextStyle.call(this, element, true);
  },
  ApplyNullTextClassName: function(active) {
   var nullTextClassName = this.GetNullTextClassName();
   var inputElement = this.editor.GetInputElement();
   if(active)
    ASPx.AddClassNameToElement(inputElement, nullTextClassName);
   else
    ASPx.RemoveClassNameFromElement(inputElement, nullTextClassName);
  },
  Update: function() {
   if(this.IsUpdateLocked())
    return;
   var mainElement = this.editor.GetMainElement();
   for(var i = 0; i < this.postfixList.length; i++) {
    var postfix = this.postfixList[i];
    var elements = postfix.length ? mainElement.querySelectorAll(postfix) : [ mainElement ];
    for(var j = 0; j < elements.length; j++)
     if(elements[j])
      this.ApplyStyles(elements[j], true);
   }
  },
  IsInputElement: function(element) {
   var tagName = element.tagName.toUpperCase();
   return tagName == "TEXTAREA" || tagName == "INPUT" || tagName == "SELECT";
  }
 });
 BootstrapEditorStyleDecoration.UpdateDefaultDecorationStyles = function(keys) {
  var container = document.createElement("DIV");
  ASPx.Attr.SetAttribute(container,
   "style", "overflow:hidden;position:fixed;z-index:10000;top:0;left:0;opacity:0;");
  document.body.appendChild(container);
  var inputElement = document.createElement("INPUT");
  inputElement.type = "text";
  ASPx.Attr.SetAttribute(inputElement,
   "style", "transition:none!important;-webkit-transition:none!important;-o-transition:none!important;");
  container.appendChild(inputElement);
  resetDefaultDecorationStyles(keys);
  if(!keys || !keys.length)
   keys = ["N", "I", "F", "FI"];
  for(var key, i = 0; key = keys[i]; i++)
   updateDefaultStyleDecoration(key, inputElement, container);
  document.body.removeChild(container);
 };
 function resetDefaultDecorationStyles(keys) {
  if(!keys || !keys.length)
   keys = ASPx.GetObjectKeys(defaultDecorationStyles);
  for(var key, i = 0; key = keys[i]; i++) {
   if(defaultDecorationStyles[key])
    defaultDecorationStyles[key].isValid = false;
  }
 }
 function updateDefaultStyleDecoration(key, input, inputContainer) {
  var defaultNullTextClassName = "text-muted";
  var defaultInvalidClassName = ASPx.BootstrapCore.IsBootstrap3 ? ASPx.BootstrapCssSelectors.HasError : ASPx.BootstrapCssSelectors.InvalidFormControl;
  switch(key) {
   case "N":
    if(ASPx.BootstrapCore.IsBootstrap3) {
     ASPx.SetClassName(input, defaultNullTextClassName);
     setDefaultStyleDecoration(key, "", getDecorationStyleRuleCssText(ASPx.GetCurrentStyle(input), ["color", "opacity", "text-shadow"]));
    }
    else
     setDefaultStyleDecoration(key, defaultNullTextClassName);
    break;
   case "I":
    setDefaultStyleDecoration(key, defaultInvalidClassName);
    break;
   case "F":
   case "FI":
    if(document.hasFocus()) {
     ASPx.SetClassName(input, "form-control");
     if(key == "FI")
      ASPx.AddClassNameToElement(ASPx.BootstrapCore.IsBootstrap3 ? inputContainer : input, defaultInvalidClassName);
     setDefaultStyleDecoration(key, "", getEditorFocusedStyleRuleCssText(input));
    }
    break;
   default:
    break;
  }
 }
 function setDefaultStyleDecoration(key, cssClass, cssText) {
  if(defaultDecorationStyles[key]) {
   if(cssClass)
    defaultDecorationStyles[key].className = cssClass;
   else {
    var rule = ASPx.GetStyleSheetRules(defaultDecorationStyles[key].className);
    if(rule)
     rule.style.cssText = ASPx.CreateImportantCssText(cssText);
   }
   defaultDecorationStyles[key].isValid = true;
  }
  else {
   if(!cssClass && cssText)
    cssClass = ASPx.Str.Trim(ASPx.CreateImportantStyleRule(ASPx.GetCurrentStyleSheet(), cssText));
   defaultDecorationStyles[key] = createDefaultStyleDecoration(cssClass);
  }
 }
 function createDefaultStyleDecoration(cssClass) {
  return { className: cssClass, isValid: true };
 }
 function getEditorFocusedStyleRuleCssText(inputElement) {
  var focusedElement = ASPx.GetFocusedElement();
  inputElement.focus();
  var focusedStyle = ASPx.GetCurrentStyle(inputElement);
  var cssText = getDecorationStyleRuleCssText(focusedStyle, [
   "border-top-width", "border-top-style", "border-top-color",
   "border-left-width", "border-left-style", "border-left-color",
   "border-bottom-width", "border-bottom-style", "border-bottom-color",
   "border-right-width", "border-right-style", "border-right-color",
   "outline-width", "outline-style", "outline-color", "outline-offset",
   "box-shadow", "-webkit-box-shadow"
  ]);
  inputElement.blur();
  if(focusedElement)
   ASPx.SetFocus(focusedElement);
  return cssText;
 }
 function getDecorationStyleRuleCssText(currentStyle, styleProperties) {
  var rules = [ ];
  for(var i = 0; i < styleProperties.length; i++) {
   var stylePropertyValue = ASPx.Str.Trim(currentStyle.getPropertyValue(styleProperties[i])) + "";
   if(stylePropertyValue)
    rules.push(styleProperties[i] + ": " + stylePropertyValue);
  }
  return rules.join(";");
 }
 ASPx.BootstrapEditorStyleDecoration = BootstrapEditorStyleDecoration;
 var styleUpdateListeners = [];
 BootstrapClientUtils = {};
 BootstrapClientUtils.UpdateDefaultStyles = function() {
  ASPx.BootstrapEditorStyleDecoration.UpdateDefaultDecorationStyles();
  ASPx.BootstrapCore.updateTableCellStyleSheetRules();
  ASPx.BootstrapCore.initializeAccentColorRelatedSelectors();
  for(var i = 0; i < styleUpdateListeners.length; i++)
   styleUpdateListeners[i].beginStyleUpdate();
  for(var i = 0; i < styleUpdateListeners.length; i++)
   styleUpdateListeners[i].updateStyle();
  for(var i = 0; i < styleUpdateListeners.length; i++)
   styleUpdateListeners[i].endStyleUpdate();
 };
 BootstrapClientUtils.attachToUpdateDefaultStylesRequest = function(styleUpdateListener) {
  styleUpdateListeners.push(styleUpdateListener);
 };
 BootstrapClientUtils.detachUpdateDefaultStylesRequestListener = function(styleUpdateListener) {
  ASPx.Data.ArrayRemove(styleUpdateListeners, styleUpdateListener);
 };
 var BootstrapEditFeedbackRenderHelper = ASPx.CreateClass(null, {
  constructor: function(editor) {
   this.editor = editor;
  },
  getErrorImage: function() {
   var editorElement = this.editor.GetMainElement();
   return editorElement && editorElement.querySelector("[data-error-image]");
  },
  getClearButton: function() {
   var editorElement = this.editor.GetMainElement();
   return editorElement && editorElement.querySelector(BootstrapEditFeedbackRenderHelper.FeedbackSelector + " > .dxbs-clear-btn");
  },
  getErrorTextElement: function() {
   var editorElement = this.editor.GetMainElement();
   return editorElement && editorElement.querySelector(".dxbs-edit-error-text");
  },
  setElementVisible: function(element, value) {
   if(element && ASPx.ElementHasCssClass(element, ASPx.BootstrapCssSelectors.Hidden) == value) {
    var action = value ? ASPx.RemoveClassNameFromElement : ASPx.AddClassNameToElement;
    action(element, ASPx.BootstrapCssSelectors.Hidden);
    this.updateInputRightPadding();
   }
  },
  setClearButtonVisible: function(value) {
   var clearButton = this.getClearButton();
   if(!clearButton)
    return;
   if(this.editor.clearButtonDisplayMode === 'Always' && ASPx.Attr.GetAttribute(clearButton, "role") == "button")
    this.editor.SetAccessibilityAnchorEnabled(clearButton, value);
   this.setElementVisible(clearButton, value);
  },
  setErrorControlVisible: function(value) {
   var errorTextElement = this.getErrorTextElement();
   if(errorTextElement)
    this.setElementVisible(errorTextElement, value);
   if(this.editor.errorDisplayMode == "i")
    this.setErrorImageVisible(value);
  },
  setErrorImageVisible: function(value) {
   var errorImage = this.getErrorImage();
   if(errorImage) {
    if(!this.getErrorTextElement() && ASPx.BootstrapCore.IsBootstrap4) {
     var feedbackControl = this.editor.GetMainElement().querySelector(BootstrapEditFeedbackRenderHelper.FeedbackSelector);
     var action = value ? ASPx.AddClassNameToElement : ASPx.RemoveClassNameFromElement;
     action(feedbackControl || errorImage, ASPx.BootstrapCssSelectors.InvalidFeedback);
    }
    this.setElementVisible(errorImage, value);
    if(!value) {
     ASPx.Attr.RemoveAttribute(errorImage, "title");
     ASPx.Attr.RemoveAttribute(errorImage, "data-error-tooltip");
    }
    else
     this.updateErrorText();
   }
  },
  updateErrorText: function() {
   var errorText = this.editor.HtmlEncode(this.editor.errorText);
   var errorTextElement = this.getErrorTextElement();
   if(errorTextElement) {
    var textNode = ASPx.GetNormalizedTextNode(errorTextElement);
    if(textNode) {
     textNode.nodeValue = errorText;
     return;
    }
   }
   var errorImage = this.getErrorImage();
   if(errorImage) {
    ASPx.Attr.SetAttribute(errorImage, "title", errorText);
    if(ASPx.Browser.TouchUI) {
     var x = ASPx.GetAbsolutePositionX(errorImage);
     var docWidth = ASPx.Browser.WebKitTouchUI ? window.innerWidth : ASPx.GetDocumentClientWidth();
     var availableWidth = this.editor.isASPxClientCheckEdit ? docWidth - x - errorImage.offsetWidth : x;
     if(availableWidth > 0) {
      var fontSize = ASPx.GetCurrentStyle(errorImage).fontSize;
      ASPx.Attr.SetAttribute(errorImage, "data-error-tooltip", this.formatErrorText(errorText, availableWidth, fontSize));
     }
    }
   }
  },
  formatErrorText: function(errorText, availableWidth, fontSize) {
   var errorTextSize = ASPx.GetSizeOfText(errorText, {
    fontFamily: '"Helvetica Neue", Helvetica, Arial, sans-serif',
    fontSize: 'calc(0.75 * ' + fontSize + ')',
    fontWeight: "normal",
    letterSpacing: "normal",
    lineHeight: "2"
   }).width + 1.2 * ASPx.PxToInt(fontSize);
   if(errorTextSize > availableWidth) {
    var availableCharCount = Math.floor(errorText.length * availableWidth / errorTextSize);
    if(availableCharCount) {
     var errorTextRows = [];
     while(errorText && errorText.length) {
      var textRow = errorText.substr(0, availableCharCount);
      var spacesAtStart = /(^\s+)\S/.exec(textRow);
      if(spacesAtStart)
       textRow = errorText.substr(0, availableCharCount + spacesAtStart[1].length);
      var spacesAtEnd = /(\s+)\S{1,4}$/.exec(textRow);
      if(spacesAtEnd && spacesAtEnd.index)
       textRow = errorText.slice(0, spacesAtEnd.index + spacesAtEnd[1].length);
      errorTextRows.push(ASPx.Str.TrimStart(textRow));
      errorText = errorText.replace(textRow, "");
     }
     errorText = errorTextRows.join("\n");
    }
   }
   return errorText;
  },
  updateInputRightPadding: function() {
   if(this.editor.isASPxClientTextEdit) {
    var feedbackControl = this.editor.GetMainElement().querySelector(BootstrapEditFeedbackRenderHelper.FeedbackSelector);
    if(feedbackControl) {
     var feedbackWidth = feedbackControl.offsetWidth;
     var formControl = this.editor.GetFormControlElement ? this.editor.GetFormControlElement() : this.editor.GetInputElement();
     formControl.style["padding-right"] = feedbackWidth ? feedbackWidth + "px" : "";
     if(this.editor.UpdateDropDownOnFeedbackChanged)
      this.editor.UpdateDropDownOnFeedbackChanged();
    }
   }
  }
 });
 BootstrapEditFeedbackRenderHelper.FeedbackSelector = "." + ASPx.BootstrapCssSelectors.FormControlFeedback;
 ASPx.BootstrapEditFeedbackRenderHelper = BootstrapEditFeedbackRenderHelper;
 var BootstrapTextEditHelpText = ASPx.CreateClass(null, {
  constructor: function(editor, helpText, animationEnabled, isPopupDisplayMode) {
   this.editor = editor;
   this.isPopupDisplayMode = isPopupDisplayMode;
   this.animationEnabled = animationEnabled;
   this.createHelpTextElement(helpText);
  },
  createHelpTextElement: function(helpText) {
   var helpTextElement = document.createElement("SPAN");
   ASPx.SetClassName(helpTextElement, ASPx.BootstrapCssSelectors.HelpBlock);
   ASPx.Security.setInnerHtml(helpTextElement, helpText, ASPx.Security.DataType.Trusted);
   ASPx.InsertElementAfter(helpTextElement, this.editor.GetHelpTextElementPrevSibling());
   if(this.isPopupDisplayMode) {
    var parentNode = helpTextElement.parentNode;
    if(parentNode) {
     var parentStyle = ASPx.GetCurrentStyle(parentNode);
     if(parentStyle.position != "relative")
      parentNode.style.position = "relative";
    }
    ASPx.AddClassNameToElement(helpTextElement, "dxbs-popup-help-text mark");
    ASPx.SetElementDisplay(helpTextElement, false);
   }
   else {
    ASPx.SetElementDisplay(helpTextElement, this.editor.clientVisible);
    if(ASPx.BootstrapCore.IsBootstrap4)
     ASPx.AddClassNameToElement(helpTextElement, "text-muted");
   }
   this.helpTextElement = helpTextElement;
  },
  show: function() {
   if(this.isPopupDisplayMode)
    this.showPopup();
   else
    ASPx.SetElementDisplay(this.helpTextElement, true);
  },
  hide: function() {
   if(this.isPopupDisplayMode)
    this.hidePopup();
   else
    ASPx.SetElementDisplay(this.helpTextElement, false);
  },
  showPopup: function() {
   ASPx.SetElementDisplay(this.helpTextElement, true);
   if(this.animationEnabled)
    ASPx.AnimationHelper.fadeIn(this.helpTextElement);
   else
    ASPx.AnimationHelper.setOpacity(this.helpTextElement, 1);
  },
  hidePopup: function() {
   var onHidePopupComplete = function() {
    ASPx.SetElementDisplay(this.helpTextElement, false);
   }.aspxBind(this);
   if(this.animationEnabled)
    ASPx.AnimationHelper.fadeOut(this.helpTextElement, onHidePopupComplete);
   else {
    ASPx.AnimationHelper.setOpacity(this.helpTextElement, 0);
    onHidePopupComplete();
   }
  }
 });
 ASPx.BootstrapTextEditHelpText = BootstrapTextEditHelpText;
 var BootstrapCheckBoxInternal = ASPx.CreateClass(null, {
  constructor: function(mainElement, allowGrayed, allowGrayedByClick, storeValueInInput, inputName) {
   this.mainElement = mainElement;
   this.allowGrayed = allowGrayed;
   this.allowGrayedByClick = allowGrayedByClick;
   this.storeValueInInput = storeValueInInput;
   if(this.storeValueInInput)
    this.stateInput = this.createStateInput(inputName);
   this.mainInput = this.findMainInput();
   this.initializeSiblingLabelElement();
   this.initializeIndeterminateState();
   this.CheckedChanged = new ASPxClientEvent();
   this.Focus = new ASPxClientEvent();
   this.LostFocus = new ASPxClientEvent();
   this.attachHtmlEvents();
   this.updateState();
  },
  SetValue: function(value) {
   this.setValueCore(value);
  },
  GetValue: function() {
   return this.getValueCore();
  },
  GetChecked: function() {
   return this.getValueCore() === true;
  },
  SetChecked: function(checked) {
   this.setValueCore(!!checked);
  },
  SetEnabled: function(enabled) {
   this.setEnabledCore(enabled);
  },
  GetEnabled: function() {
   return this.getEnabledCore();
  },
  GetReadOnly: function() {
   return false;
  },
  attachHtmlEvents: function() {
   var isMSBrowser = ASPx.Browser.IE || ASPx.Browser.Edge;
   ASPx.Evt.AttachEventToElement(this.mainInput, "change", function(evt) {
    if(this.allowGrayed && this.allowGrayedByClick && isMSBrowser) {
     ASPx.Evt.PreventEvent(evt);
     return false;
    }
    if(!this.correctNextValue())
     this.updateState();
    this.CheckedChanged.FireEvent(this, evt);
   }.bind(this));
   ASPx.Evt.AttachEventToElement(this.mainInput, "focus", function(evt) {
    this.Focus.FireEvent(this, null);
   }.bind(this));
   ASPx.Evt.AttachEventToElement(this.mainInput, "blur", function(evt) {
    this.LostFocus.FireEvent(this, null);
   }.bind(this));
   ASPx.Evt.AttachEventToElement(this.mainInput, "click", function(evt) {
    if (this.GetReadOnly()) {
     ASPx.Evt.PreventEvent(evt);
     return false;
    }
    if(this.allowGrayed && isMSBrowser) {
     var raiseCheckedChanged = false;
     if(this.allowGrayedByClick && this.lastValue) {
      this.setValueCore(false);
      raiseCheckedChanged = true;
     }
     else if(this.correctNextValue()) {
      this.updateState();
      raiseCheckedChanged = true;
     }
     if(raiseCheckedChanged)
      this.CheckedChanged.FireEvent(this, evt);
    }
   }.bind(this));
  },
  invokeClick: function() {
   if(this.mainInput){
    this.mainInput.focus();
    this.mainInput.click();
   }
  },
  correctNextValue: function() {
   if(!this.allowGrayed)
    return;
   if(this.allowGrayedByClick && this.lastValue === false){
    this.setValueCore(null);
    return true;
   }
   if(this.lastValue === null) {
    this.setValueCore(true);
    return true;
   }
  },
  findMainInput: function() {
   return this.mainElement.querySelectorAll("[type=checkbox]")[0] || this.mainElement.querySelectorAll("[type=radio]")[0];
  },
  createStateInput: function (inputName) {
   var input = ASPx.CreateHiddenField(inputName, this.mainElement.id + "_S");
   this.mainElement.appendChild(input);
   return input;
  },
  initializeIndeterminateState: function() {
   if(ASPx.Attr.GetAttribute(this.mainInput, "data-value") === "indeterminate") {
    ASPx.Attr.RemoveAttribute(this.mainInput, "data-value");
    this.mainInput.indeterminate = true;
   }
  },
  initializeSiblingLabelElement: function() {
   if(this.mainInput && this.mainInput.id) {
    var siblingLabel = this.mainElement.querySelectorAll("[type=checkbox]+label, label+[type=checkbox], [type=radio]+label, label+[type=radio]")[0];
    if(siblingLabel)
     ASPx.Attr.SetAttribute(siblingLabel, "for", this.mainInput.id);
   }
  },
  setValueCore: function(value) {
   if(value === true || value === ASPx.CheckBoxInputKey.Checked) {
    this.mainInput.checked = true;
    this.mainInput.indeterminate = false;
    this.updateState(true);
   }
   else if(value === false || value === ASPx.CheckBoxInputKey.Unchecked) {
    this.mainInput.checked = false;
    this.mainInput.indeterminate = false;
    this.updateState(false);
   }
   else if(value === null || value === ASPx.CheckBoxInputKey.Indeterminate) {
    this.mainInput.indeterminate = true;
    this.updateState(null);
   }
  },
  getValueCore: function() {
   var mainInput = this.mainInput;
   if(mainInput.indeterminate)
    return null;
   return mainInput.checked;
  },
  setEnabledCore: function(enabled) {
   if(enabled) {
    ASPx.RemoveClassNameFromElement(this.mainElement, "disabled");
    ASPx.Attr.RemoveAttribute(this.mainInput, "disabled");
    ASPx.Attr.RemoveAttribute(this.stateInput, "disabled");
   }
   else {
    ASPx.AddClassNameToElement(this.mainElement, "disabled");
    ASPx.Attr.SetAttribute(this.mainInput, "disabled", "disabled");
    ASPx.Attr.SetAttribute(this.stateInput, "disabled", "disabled");
   }
  },
  getEnabledCore: function() {
   return !ASPx.Attr.GetAttribute(this.mainInput, "disabled");
  },
  updateState: function(value) {
   value = value === undefined ? this.getValueCore() : value;
   this.lastValue = value;
   var stateInput = this.stateInput;
   if(stateInput) {
    if(value === true)
     stateInput.value = ASPx.CheckBoxInputKey.Checked;
    else if(value === false)
     stateInput.value = ASPx.CheckBoxInputKey.Unchecked;
    else
     stateInput.value = ASPx.CheckBoxInputKey.Indeterminate;
   }
  }
 });
 var BootstrapCheckBoxInternalCollection = ASPx.CreateClass(ASPx.CollectionBase, {
  constructor: function(allowGrayed, allowGrayedByClick, storeValueInInput) {
   this.constructor.prototype.constructor.call(this);
   this.allowGrayed = !!allowGrayed;
   this.allowGrayedByClick = !!allowGrayedByClick;
   this.storeValueInInput = !!storeValueInInput;
  },
  Add: function(key, mainElement) {
   this.Remove(key);
   var checkBox = this.createInternalCheckBox(key, mainElement);
   ASPx.CollectionBase.prototype.Add.call(this, key, checkBox);
   return checkBox;
  },
  createInternalCheckBox: function(key, mainElement) {
   return new BootstrapCheckBoxInternal(mainElement, this.allowGrayed, this.allowGrayedByClick, this.storeValueInInput);
  }
 });
 ASPx.BootstrapCheckBoxInternal = BootstrapCheckBoxInternal;
 ASPx.BootstrapCheckBoxInternalCollection = BootstrapCheckBoxInternalCollection;
 var BootstrapLoadingPanelManager = {};
 var loadingPanels = {};
 var loadingDivs = {};
 BootstrapLoadingPanelManager.getLoadingPanel = function(name, settings, inline) {
  if(!settings) return null;
  var lpID = name + "_LP";
  if(!loadingPanels[lpID]){
   var lp = document.createElement("DIV");
   lp.id = lpID;
   ASPx.SetClassName(lp, ASPx.Str.Trim([
    "dxbs-lp" + (inline ? " dxbs-lp-inline" : ""),
    ASPx.HiddenChangable, ASPx.BootstrapCssSelectors.Panel, ASPx.BootstrapCssSelectors.PanelDefault
   ].join(" ")));
   var lpBody = document.createElement("DIV");
   ASPx.SetClassName(lpBody, ASPx.BootstrapCssSelectors.PanelBody);
   if(settings.showImage !== false) {
    var lpImg = document.createElement("SPAN");
    var imgCssClass = settings.imageCssClass ? settings.imageCssClass : "dxbs-icon dxbs-icon-refresh";
    ASPx.SetClassName(lpImg, "image " + imgCssClass);
    lpBody.appendChild(lpImg);
   }
   if(settings.text !== "") {
    var breakHtml = "";
    var textHtml = "<span>" + (settings.text || "Loading&hellip;") + "</span>";
    if(settings.imagePosition && (settings.imagePosition === "Top" || settings.imagePosition === "Bottom"))
     breakHtml = "<br />";
    if(settings.imagePosition && (settings.imagePosition === "Right" || settings.imagePosition === "Bottom"))
     ASPx.Security.setInnerHtml(lpBody, textHtml + breakHtml + lpBody.innerHTML, ASPx.Security.DataType.Trusted);
    else
     ASPx.Security.setInnerHtml(lpBody, lpBody.innerHTML + breakHtml + textHtml, ASPx.Security.DataType.Trusted);
   }
   lp.appendChild(lpBody);
   loadingPanels[lpID] = lp;
  }
  return loadingPanels[lpID];
 };
 BootstrapLoadingPanelManager.getLoadingDiv = function(name, settings){
  if(!settings || settings.fade === false) return null;
  var ldID = name + "_LD";
  if(!loadingDivs[ldID]){
   var ld = document.createElement("DIV");
   ld.id = ldID;
   ASPx.SetClassName(ld, "dxbs-ld " + ASPx.HiddenChangable);
   loadingDivs[ldID] = ld;
  }
  return loadingDivs[ldID];
 };
 ASPx.BootstrapLoadingPanelManager = BootstrapLoadingPanelManager;
 var BootstrapOverlayManager = {};
 BootstrapOverlayManager.createOverlay = function(name, settings) {
  var overlay = document.createElement("DIV");
  overlay.id = name + "_OV";
  ASPx.SetClassName(overlay, ASPx.BootstrapCssSelectors.ModalBackdrop + " dxbs-modal-back" + (settings.cssClass ? " " + settings.cssClass : ""));
  return overlay;
 };
 ASPx.BootstrapOverlayManager = BootstrapOverlayManager;
 var BootstrapBadgeManager = ASPx.CreateClass(ASPx.BadgeManagerBase, {
  getBadgeClassName: function() {
   return "badge";
  },
  getBadgeIconDefaultClassName: function() {
   return "image";
  },
  createBadgeForButton: function(button, toLeftSide) {
   var badge = this.createBadge();
   var badgeClassName = "";
   if(!ASPx.BootstrapCore.IsBootstrap3) {
    badgeClassName = "badge-pill";
    if(ASPx.ElementHasCssClass(button, "btn-danger"))
     badgeClassName += " bg-white text-danger";
    else if(ASPx.ElementHasCssClass(button, "btn-secondary") || ASPx.ElementHasCssClass(button, "btn-outline-secondary"))
     badgeClassName += " badge-dark";
    else if(ASPx.ElementHasCssClass(button, "btn-link"))
     badgeClassName += " badge-primary";
    else
     badgeClassName += " text-primary";
    ASPx.AddClassNameToElement(badge, badgeClassName);
   }
   if(toLeftSide)
    button.insertBefore(badge, button.childNodes[0]);
   else
    button.appendChild(badge);
   return badge;
  },
  updateToolbarItemBadge: function(item, count) {
   var button = item.menu.IsEnabledAdaptivity() ? item.itemViewModel.getElement() : item.menu.GetItemContentElement(item.indexPath);
   var badge = this.findBadge(button);
   if(!badge)
    badge = this.createBadgeForButton(button);
   if(badge)
    this.setBadgeText(badge, count > 0 ? count : "");
  }
 });
 ASPx.BootstrapBadgeManager = new BootstrapBadgeManager();
 var BASE64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
 var getBase64Char = function(index) {
  return BASE64_CHARS.charAt(index);
 };
 var getIndexOfBase64Char = function(char) {
  return BASE64_CHARS.indexOf(char);
 };
 var codeArrayToString = function(codes) {
  return codes.map(function(code) { return String.fromCharCode(code); }).join("");
 };
 var base64_encode = function(input) {
  var result = "";
  if (!$.isArray(input))
   input = stringToByteArray(String(input));
  for (var i = 0; i < input.length; i += 3) {
   var octet1 = input[i],
    octet2 = input[i + 1],
    octet3 = input[i + 2];
   result += $.map([octet1 >> 2, (3 & octet1) << 4 | octet2 >> 4, isNaN(octet2) ? 64 : (15 & octet2) << 2 | octet3 >> 6, isNaN(octet3) ? 64 : 63 & octet3], getBase64Char).join("");
  }
  return result;
 };
 var base64_decode = function(input) {
  var result = "";
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
  for (var i = 0; i < input.length; i += 4) {
   var bytes = [];
   var octet1 = getIndexOfBase64Char(input.charAt(i)),
    octet2 = getIndexOfBase64Char(input.charAt(i + 1)),
    octet3 = getIndexOfBase64Char(input.charAt(i + 2)),
    octet4 = getIndexOfBase64Char(input.charAt(i + 3));
   bytes.push((octet1 << 2) | (octet2 >> 4));
   if(octet3 != 64)
    bytes.push(((octet2 & 15) << 4) | (octet3 >> 2));
   if(octet4 != 64)
    bytes.push(((octet3 & 3) << 6) | octet4);
   result += codeArrayToString(bytes);
  }
  return decodeText(result);
 };
 var stringToByteArray = function(str) {
  var bytes = [];
  var code = 0;
  for (var i = 0; i < str.length; i++) {
   code = str.charCodeAt(i);
   if (code < 128) {
    bytes.push(code);
   } else {
    if (code < 2048) {
     bytes.push(192 + (code >> 6), 128 + (63 & code));
    } else {
     if (code < 65536) {
      bytes.push(224 + (code >> 12), 128 + (code >> 6 & 63), 128 + (63 & code));
     } else {
      if (code < 2097152) {
       bytes.push(240 + (code >> 18), 128 + (code >> 12 & 63), 128 + (code >> 6 & 63), 128 + (63 & code));
      }
     }
    }
   }
  }
  return bytes;
 };
 var decodeText = function(codeText) {
  var bytes = [];
  var code = 0,
   code2 = 0,
   code3 = 0;
  for (var i = 0; i < codeText.length; i++) {
   code = codeText.charCodeAt(i);
   if (code < 128) {
    bytes.push(code);
   } else {
    i += 1;
    code2 = codeText.charCodeAt(i);
    if((code > 191) && (code < 224)) {
     bytes.push(((code & 31) << 6) | (code2 & 63));
    } else {
     i += 1;
     code3 = codeText.charCodeAt(i);
     bytes.push(((code & 15) << 12) | ((code2 & 63) << 6) | (code3 & 63));
    }
   }
  }
  return codeArrayToString(bytes);
 };
 ASPx.Base64 = {};
 ASPx.Base64.Encode = base64_encode;
 ASPx.Base64.Decode = base64_decode;
 dx.BootstrapClientUtils = BootstrapClientUtils;
 ASPx.BootstrapDockManager = ASPx.CreateSingleton(function(ASPx) {
  var showCssClass = "show",
   matrixRegex = "\\s*matrix\\(\\s*" + ([0, 0, 0, 0, 0, 0].map(function() { return "(\\-?\\d+\\.?\\d*)"; }).join(",\\s*")) + "\\)\\s*";
  function parseTranslateInfo(styles) {
   var m = new RegExp(matrixRegex).exec(styles.transform);
   return m ? { left: parseInt(m[5]), top: parseInt(m[6]) } : { left: 0, top: 0 };
  }
  function getBoundingBox(x, y, w, h) { return { left: x, top: y, right: x + w, bottom: y + h, width: w, height: h }; }
  function getSafeBoundingBox(element, roundLT, roundRB) {
   var box = element.getBoundingClientRect();
   var safeBox = { left: roundLT(box.left), top: roundLT(box.top), right: roundRB(box.right), bottom: roundRB(box.bottom) };
   safeBox.width = safeBox.right - safeBox.left;
   safeBox.height = safeBox.bottom - safeBox.top;
   return safeBox;
  }
  function getOuterBoundingBox(element) {
   return getSafeBoundingBox(element, Math.floor, Math.ceil);
  }
  function getInnerBoundingBox(element) {
   return getSafeBoundingBox(element, Math.ceil, Math.floor);
  }
  var DockPoint = ASPx.CreateClass(null, {
   constructor: function (key, info) {
    this.key = key;
    this.info = info;
   },
   checkMargin: function () { return true; },
   allowScroll: function () { return this.info.size === "height"; },
   canApplyToElement: function(element) { return ASPx.GetClassName(element).indexOf("dxbs-align-" + this.key) > -1; },
   getRange: function (dockInfo) {
    var c1 = this.getTargetBox(dockInfo)[this.info.to];
    var c2 = c1 + this.info.sizeM * (dockInfo.elementBox[this.info.size] + (this.checkMargin() ? dockInfo.margin : 0));
    return {
     from: Math.min(c1, c2),
     to: Math.max(c1, c2),
     windowOverflow: 0
    };
   },
   getTargetBox: function (dockInfo) { return null; },
   validate: function (range, windowInfo) {
    var windowSize = windowInfo[this.info.size];
    range.windowOverflow = Math.abs(Math.min(0, range.from - windowSize.from) + Math.min(0, windowSize.to - range.to));
    range.validTo = Math.min(range.to, windowSize.to);
    range.validFrom = Math.max(range.from, windowSize.from);
    return range.windowOverflow === 0;
   },
   applyRange: function (range, dockInfo) {
    dockInfo.appliedModifierKeys[this.info.size] = this.key;
    var side = this.info.size === "width" ? "left" : "top";
    var style = dockInfo.styles;
    var from = range.from;
    if (this.allowScroll() && range.windowOverflow > 0) {
     if (!dockInfo.limitBox.scroll.width) {
      dockInfo.limitBox.scroll.width = true;
      dockInfo.limitBox.width.to -= ASPx.GetVerticalScrollBarWidth();
     }
     if (dockInfo.isScrollable) {
      style["max-height"] = dockInfo.height - range.windowOverflow + "px";
      dockInfo.width += ASPx.GetVerticalScrollBarWidth();
      dockInfo.elementBox.width += ASPx.GetVerticalScrollBarWidth();
      from = range.validFrom;
     }
    }
    style.width = dockInfo.width + "px";
    if(this.checkMargin())
     from += Math.max(0, this.info.sizeM) * dockInfo.margin;
    dockInfo.elementBox[side] += from;
    style["transform"] =
     "matrix(1, 0, 0, 1, " + dockInfo.elementBox.left + ", " + dockInfo.elementBox.top + ")";
   },
   dockElementToTarget: function (dockInfo) {
    var range1 = this.getRange(dockInfo);
    if (!this.dockElementToTargetInternal(range1, dockInfo))
     this.applyRange(range1, dockInfo);
   },
   dockElementToTargetInternal: function (range1, dockInfo) { }
  });
  var OuterDockPoint = ASPx.CreateClass(DockPoint, {
   constructor: function (name, info, oppositePointName) {
    this.constructor.prototype.constructor.apply(this, arguments);
    this.oppositePointName = oppositePointName || null;
   },
   getTargetBox: function (dockInfo) { return dockInfo.targetBox.outer; },
   getOppositePoint: function () {
    return this._oppositePoint || (this._oppositePoint = dockPoints.filter(function (d) {
     return d.key === this.oppositePointName;
    }.bind(this))[0]);
   },
   dockElementToTargetInternal: function (range1, dockInfo) {
    if (this.validate(range1, dockInfo.limitBox))
     this.applyRange(range1, dockInfo);
    else {
     var oppositePoint = this.getOppositePoint();
     var range2 = oppositePoint.getRange(dockInfo);
     if (oppositePoint.validate(range2, dockInfo.limitBox) || range2.windowOverflow < range1.windowOverflow)
      oppositePoint.applyRange(range2, dockInfo);
     else
      return false;
    }
    return true;
   }
  });
  var InnerDockPoint = ASPx.CreateClass(DockPoint, {
   checkMargin: function () { return false; },
   getTargetBox: function (dockInfo) { return dockInfo.targetBox.inner; },
   dockElementToTargetInternal: function (range1, dockInfo) {
    this.validate(range1, dockInfo.limitBox);
    return false;
   },
   validate: function (range, windowInfo) {
    var toOverflow = Math.min(range.from, Math.max(0, range.to - windowInfo[this.info.size].to));
    if (toOverflow > 0) {
     range.from -= toOverflow;
     range.to -= toOverflow;
    }
    return DockPoint.prototype.validate.call(this, range, windowInfo);
   }
  });
  var dockPoints = [
   new OuterDockPoint("above", { to: "top", from: "bottom", size: "height", sizeM: -1 }, "below"),
   new OuterDockPoint("below", { to: "bottom", from: "top", size: "height", sizeM: 1 }, "above"),
   new InnerDockPoint("top-sides", { to: "top", from: "top", size: "height", sizeM: 1 }),
   new InnerDockPoint("bottom-sides", { to: "bottom", from: "bottom", size: "height", sizeM: -1 }),
   new OuterDockPoint("outside-left", { to: "left", from: "right", size: "width", sizeM: -1 }, "outside-right"),
   new OuterDockPoint("outside-right", { to: "right", from: "left", size: "width", sizeM: 1 }, "outside-left"),
   new InnerDockPoint("left-sides", { to: "left", from: "left", size: "width", sizeM: 1 }),
   new InnerDockPoint("right-sides", { to: "right", from: "right", size: "width", sizeM: -1 })
  ];
  var defaultHorizontalItemDockPoints = [dockPoints[1], dockPoints[6]],
   defaultVerticalItemDockPoints = [dockPoints[2], dockPoints[5]];
  function getElementPopupInfo(element, targetElement, isVertical, settings) {
   var elementStyle = ASPx.GetCurrentStyle(element);
   var box = getOuterBoundingBox(element);
   var docEl = element.ownerDocument.documentElement;
   var result = {
    isScrollable: ASPx.ElementHasCssClass(element, "dxbs-scrollable"),
    specifiedOffsetModifiers: dockPoints.filter(function (m) { return m.canApplyToElement(element); }),
    margin: ASPx.PxToInt(elementStyle.marginTop),
    width: settings ? Math.max(settings.width, Math.ceil(element.offsetWidth)) : Math.ceil(element.offsetWidth),
    height: Math.ceil(element.offsetHeight),
    appliedModifierKeys: { height: null, width: null }
   };
   var styles = parseTranslateInfo(elementStyle);
   result.elementBox = getBoundingBox(styles.left - box.left, styles.top - box.top, box.width, box.height);
   result.targetBox = { outer: getOuterBoundingBox(targetElement), inner: getInnerBoundingBox(targetElement) };
   result.limitBox = {
    scroll: { width: docEl.clientWidth < window.innerWidth, height: docEl.clientHeight < window.innerHeight },
    width: { from: 0, to: docEl.clientWidth },
    height: { from: 0, to: docEl.clientHeight }
   };
   result.styles = {};
   var highPriorityModifiersData = ASPx.Attr.GetAttribute(element, "data-popup-align") || settings && settings.align;
   if (highPriorityModifiersData) {
    var highPriorityModifiers = highPriorityModifiersData.split(/\s+/);
    result.offsetModifiers = dockPoints.filter(function (m) {
     return highPriorityModifiers.some(function (k) { return m.key === k; });
    });
   } else
    result.offsetModifiers = result.specifiedOffsetModifiers.filter(function (m) { return !isVertical; });
   if (result.offsetModifiers.length === 0)
    result.offsetModifiers = isVertical ? defaultVerticalItemDockPoints : defaultHorizontalItemDockPoints;
   return result;
  }
  function hide(element) {
   if (ASPx.ElementHasCssClass(element, showCssClass)) {
    if (element.isDockedElementHidden)
     delete element.isDockedElementHidden;
    ASPx.DOM.ClearStyles(element);
    ASPx.DOM.ToggleCssClass(element, showCssClass, false);
   } else if (element.isDockedElementHidden)
    delete element.isDockedElementHidden;
  }
  function show(element, targetElement, isVertical) {
   ASPx.DOM.ClearStyles(element);
   ASPx.DOM.ToggleCssClass(element, showCssClass, true);
   preparePosition(element, targetElement, isVertical, null, function () { });
  }
  function preparePosition(element, targetElement, isVertical, settings, onShow) {
   ASPx.DOM.CalculateStyles(function () {
    var dockInfo = getElementPopupInfo(element, targetElement, isVertical, settings);
    for (var i = 0; i < dockInfo.offsetModifiers.length; i++)
     dockInfo.offsetModifiers[i].dockElementToTarget(dockInfo);
    ASPx.DOM.ChangeDOM(function () { onShow(dockInfo); });
    ASPx.DOM.SetStyles(element, dockInfo.styles);
   }.bind(this));
  }
  return {
   getElementPopupInfo: getElementPopupInfo,
   hide: hide,
   show: show,
   preparePosition: preparePosition
  };
 });
 ASPx.DOM = ASPx.CreateSingleton(function (ASPx) {
  var FrameContext = ASPx.CreateClass(null, {
   constructor: function (requestFrame) {
    this.requestFrame = requestFrame;
    this.cache = [[]];
    this.isInFrame = false;
    this.isWaiting = false;
   },
   getBuffer: function (order) {
    if (!order) order = 0;
    if (this.cache.length <= order) this.cache[order] = [];
    return this.cache[order];
   },
   execute: function (callback, order) {
    if (!this.isInFrame)
     return false;
    var buffer = this.cache[order || 0];
    if (buffer === null)
     callback(requestFrameId);
    else
     (buffer = this.getBuffer(order)).push(callback);
    return true;
   },
   runAll: function () {
    this.isWaiting = false;
    this.isInFrame = true;
    for (var i = 0; i < this.cache.length; i++) {
     var buffer = this.cache[i];
     if (buffer) {
      this.cache[i] = null;
      while (buffer.length)
       buffer.shift()(requestFrameId);
     }
    }
    this.waitNextFrame();
   },
   waitNextFrame: function () {
    this.cache = [[]];
    this.isInFrame = false;
    this.isWaiting = false;
   },
   requestExecution: function (callback, order) {
    if (!this.execute(callback, order)) {
     this.getBuffer(order).push(callback);
     if (this.isWaiting === false) {
      this.isWaiting = true;
      this.requestFrame(this.runAll.bind(this));
     }
    }
   }
  });
  var requestFrameId = null;
  function requestAnimationFrame(callback) { return requestFrameId = ASPx.RequestAnimationFrame(callback); }
  function createAccumulator(requestFrame) {
   var context = new FrameContext(requestFrame);
   return context.requestExecution.bind(context);
  }
  var changeDom = createAccumulator(requestAnimationFrame);
  var calculateStyles = createAccumulator(function (callback) { changeDom(function () { setTimeout(callback); }); });
  var observers = [], minimumIntervalBetweenChecks = 50;
  function itemObserver(element, callback, width) {
   return function () {
    if (element.compareDocumentPosition(document.body) & Node.DOCUMENT_POSITION_DISCONNECTED)
     return false;
    var currentStyle = ASPx.GetCurrentStyle(element);
    if (currentStyle.width === "auto")
     return true;
    var w = ASPx.PxToInt(currentStyle.width) - ASPx.GetLeftRightBordersAndPaddingsSummaryValue(element);
    if (width !== w)
     callback(width = w);
    return true;
   };
  }
  function subscribeElementContentWidth(el, callback) {
   if (observers.length === 0) {
    observers.push(itemObserver(el, callback, -1));
    calculateStyles(updateTrackedElements);
   } else
    observers.push(itemObserver(el, callback, -1));
  }
  function elementSizeObserver(element, callback, size) {
   return function() {
    if(element.compareDocumentPosition(document.body) & Node.DOCUMENT_POSITION_DISCONNECTED)
     return false;
    var currentStyle = ASPx.GetCurrentStyle(element);
    if(currentStyle.width === "auto")
     return true;
    var elementWidth = ASPx.PxToInt(currentStyle.width) - ASPx.GetLeftRightBordersAndPaddingsSummaryValue(element);
    var elementHeight = ASPx.PxToInt(currentStyle.height) - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(element);
    if(size.width !== elementWidth || size.height !== elementHeight) {
     size.width = elementWidth;
     size.height = elementHeight;
     callback(size);
    }
    return true;
   };
  }
  function subscribeElementContentSize(element, callback) {
   if(observers.length === 0) {
    observers.push(elementSizeObserver(element, callback, { width: -1, height: -1 }));
    calculateStyles(updateTrackedElements);
   } else
    observers.push(elementSizeObserver(element, callback, { width: -1, height: -1 }));
  }
  function updateTrackedElements() {
   observers = observers.filter(function (observer) { return observer(); });
   if (observers.length > 0) {
    setTimeout(function () {
     calculateStyles(updateTrackedElements);
    }, minimumIntervalBetweenChecks);
   }
  }
  function applyStyles(element, styles) {
   var stylesArr = [];
   for (var property in styles) {
    if (styles.hasOwnProperty(property))
     stylesArr.push({ attr: property, value: styles[property] });
   }
   if (stylesArr.length === 1) {
    element.style[stylesArr[0].attr] = stylesArr[0].value;
   } else {
    var cssText = "";
    if (element.style.cssText) {
     var oldStylesArr = element.style.cssText.split(';').map(function (nvp) { return nvp.trim().split(':'); });
     for (var i = 0; i < oldStylesArr.length; i++) {
      var oldStyleArr = oldStylesArr[i];
      if (oldStyleArr.length === 2 && styles[oldStyleArr[0]] === undefined)
       cssText += oldStyleArr[0] + ":" + oldStyleArr[1].trim() + ";";
     }
    }
    for (var i = 0; i < stylesArr.length; i++) {
     var style = stylesArr[i];
     if (style.value !== "")
      cssText += style.attr + ":" + style.value + ";";
    }
    ASPx.Attr.SetOrRemoveAttribute(element, "style", cssText);
   }
  }
  function applyStateToElement(element, state) {
   if (state.inlineStyles === null)
    ASPx.Attr.RemoveAttribute(element, "style");
   else
    applyStyles(element, state.inlineStyles);
   for (var attrName in state.attributes) {
    if (state.attributes.hasOwnProperty(attrName))
     ASPx.Attr.SetOrRemoveAttribute(element, attrName, state.attributes[attrName]);
   }
   var allCssClasses = ASPx.GetClassNameList(state);
   if (allCssClasses) {
    var toggleInfo = state.cssClassToggleInfo;
    var cssClasses = allCssClasses.filter(function (c) { return toggleInfo[c] !== false; });
    for (var c in toggleInfo) {
     if (toggleInfo.hasOwnProperty(c) && toggleInfo[c] && cssClasses.indexOf(c) === -1)
      cssClasses.push(c);
    }
    var cssClass = cssClasses.join(" ");
    if (cssClass)
     ASPx.SetClassName(element, cssClass);
    else
     ASPx.Attr.RemoveAttribute(element, "class");
   }
  }
  function createElementState(element) {
   return { inlineStyles: {}, cssClassToggleInfo: {}, className: ASPx.GetClassName(element), attributes: {} };
  }
  function updateElementState(elementOrCollection, callback) {
   if (elementOrCollection.length !== undefined) {
    for (var i = 0; i < elementOrCollection.length; i++)
     updateElementState(elementOrCollection[i], callback);
    return;
   }
   var element = elementOrCollection;
   if (!element._dxCurrentFrameElementStateInfo) {
    callback(element._dxCurrentFrameElementStateInfo = createElementState(element));
    changeDom(function () {
     applyStateToElement(element, element._dxCurrentFrameElementStateInfo);
     element._dxCurrentFrameElementStateInfo = null;
    }, 1);
   } else
    callback(element._dxCurrentFrameElementStateInfo);
  }
  function setStyles(el, styles) {
   updateElementState(el, function (state) {
    if (state.inlineStyles === null)
     state.inlineStyles = styles;
    else {
     for (var i in styles) {
      if (styles.hasOwnProperty(i))
       state.inlineStyles[i] = styles[i];
     }
    }
   });
  }
  function clearStyles(el) {
   updateElementState(el, function (state) {
    state.inlineStyles = null;
   });
  }
  function toggleCssClass(el, cssClass, condition) {
   updateElementState(el, function (state) {
    state.cssClassToggleInfo[cssClass] = condition;
   });
  }
  function setCssClassName(el, className) {
   updateElementState(el, function (state) {
    state.cssClassToggleInfo = {};
    state.className = className;
   });
  }
  function updateAttribute(el, attrName, attrValue) {
   updateElementState(el, function (state) {
    state.attributes[attrName] = attrValue;
   });
  }
  function nextChangeDOM(callback) {
   changeDom(callback, 2);
  }
  return {
   ChangeDOM: changeDom,
   NextChangeDOM: nextChangeDOM,
   CalculateStyles: calculateStyles,
   SubscribeElementContentWidth: subscribeElementContentWidth,
   SubscribeElementContentSize: subscribeElementContentSize,
   SetStyles: setStyles,
   ClearStyles: clearStyles,
   ToggleCssClass: toggleCssClass,
   SetCssClassName: setCssClassName,
   UpdateAttribute: updateAttribute
  };
 });
 ASPx.DefaultDisplayNoneSelectors = ASPx.DefaultDisplayNoneSelectors.concat([
  ASPx.BootstrapCssSelectors.Modal,
  ASPx.BootstrapCssSelectors.DropDownMenu,
  "dxbs-dropdown-area",
  ASPx.BootstrapCssSelectors.HiddenLayout
 ]);
 ASPx.ProcessStyleSheetRules(".dropdown-item", function(name, style, rule) {
  if(name.indexOf(":hover") > -1 && style.backgroundColor) {
   var cssText = "background-color: " + style.backgroundColor + ";";
   if(style.color)
    cssText += "color: " + style.color + "; ";
   ASPx.AddStyleSheetRule(rule.parentStyleSheet, ".dxbs-item-hover", cssText);
   return true;
  }
 });
})(dx || (dx = {}));

(function(dx) {
 var ITEM_IMAGE_CLASS = "image",
  ITEM_EXPAND_BTN_CLASS = "expand-btn",
  TEMPLATE_CONTENT_CLASS = "dxbs-tree-tmpl";
 var BootstrapTreeViewRenderHelper = ASPx.CreateClass(ASPx.TreeViewRenderHelper, {
  NodeListItemIDPrefix: "_NLI",
  NodeContentIDPrefix: "_N",
  constructor: function(treeView) {
   this.constructor.prototype.constructor.call(this, treeView);
   this.nodeKeyDownHandler = function (e) { treeView.HandleNodeKeyDown(e); };
  },
  InlineInitializeElements: function() {
   if(this.treeView.IsStateControllerEnabled())
    this.InitializeStateControllerItems();
   ASPx.TreeViewRenderHelper.prototype.InlineInitializeElements.call(this);
  },
  InitializeStateControllerItems: function() {
   var itemSuffixes = [];
   for(var indexPath in this.treeView.nodesInfo){
    if(this.treeView.nodesInfo.hasOwnProperty(indexPath)) {
     var suffixCore = ASPx.BootstrapCore.IsBootstrap3 ? this.NodeListItemIDPrefix : this.NodeContentIDPrefix;
     itemSuffixes.push(suffixCore.substring(1) + indexPath);
    }
   }
   ASPx.BootstrapCore.AddStateItems(function() {
    ASPx.AddSelectedItems(this.treeView.name, [[['active'], [''], itemSuffixes]], true);
    ASPx.AddDisabledItems(this.treeView.name, [[['disabled'], [''], itemSuffixes]], true);
   }.bind(this));
  },
  InitializeNodeElements: function (listItem, indexPath, clientNode) {
   listItem.id = this.GetElementID(this.NodeListItemIDPrefix, indexPath);
   ASPx.TreeViewRenderHelper.prototype.InitializeNodeElements.call(this, listItem, indexPath, clientNode);
  },
  InitializeNodeContent: function(listItem, nodeIndexPath, clientNode) {
   ASPx.TreeViewRenderHelper.prototype.InitializeNodeContent.call(this, listItem, nodeIndexPath, clientNode);
   var nodeContentElement = this.GetNodeContentElement(listItem);
   if(nodeContentElement && !this.IsNodeDisabled(nodeContentElement) && nodeContentElement.href === "")
    nodeContentElement.href = ASPx.AccessibilityEmptyUrl;
  },
  InitializeNodeImageCore: function(nodeImage, clientNode) {
   if(clientNode) {
    var regEx = new RegExp("(?:^|\\s)" + ITEM_IMAGE_CLASS + "(?!\\S)");
    clientNode.iconCssClass = ASPx.Str.Trim(ASPx.GetClassName(nodeImage).replace(regEx, ""));
   }
  },
  InitializeNodeOnClick: function (nodeContentElement) {
   ASPx.TreeViewRenderHelper.prototype.InitializeNodeOnClick.call(this, nodeContentElement);
   this.attachEventToElement(nodeContentElement, "keydown", this.nodeKeyDownHandler);
  },
  attachEventToElement: function(element, eventName, handler) {
   ASPx.BootstrapEventManager.attachEventToElement(this.treeView, element, eventName, handler);
  },
  IsNodeDisabled: function (contentElement) {
   var element = ASPx.BootstrapCore.IsBootstrap3 ? contentElement.parentNode : contentElement;
   return ASPx.ElementContainsCssClass(element, "disabled");
  },
  AddInternalCheckBoxToCollection: function(icbInputElement, contentElement) {
   var instance = this.treeView;
   var internalCheckBox = this.treeView.internalCheckBoxCollection.Add(contentElement.id, icbInputElement.parentNode);
   icbInputElement.disabled = this.IsNodeDisabled(contentElement);
   icbInputElement.readOnly = this.treeView.readOnly;
   internalCheckBox.CheckedChanged.AddHandler(
    function(s, e) {
     instance.UpdateCheckedInNodesState(s.mainInput, true);
     instance.OnNodeCheckboxClick(s.mainInput);
    }
   );
  },
  GetRootList: function(){
   return ASPx.GetChildByTagName(this.treeView.GetMainElement(), "UL");
  },
  GetNodeContentElement: function(listItem){
   return ASPx.GetChildByTagName(listItem, "A") || ASPx.GetChildByClassName(listItem, TEMPLATE_CONTENT_CLASS);
  },
  GetNodeContentElementByClick: function(clickedElement){
   if(ASPx.ElementContainsCssClass(clickedElement, ASPx.BootstrapCssSelectors.CheckBoxInput) ||
    ASPx.ElementContainsCssClass(clickedElement, ASPx.BootstrapCssSelectors.CheckBox)) {
    var listItem = ASPx.GetParentByTagName(clickedElement, "LI");
    return this.GetNodeContentElement(listItem);
   }
   if(ASPx.ElementContainsCssClass(clickedElement, ITEM_EXPAND_BTN_CLASS))
    return null;
   return ASPx.GetParentByTagName(clickedElement, "A") || ASPx.GetParentByClassName(clickedElement, TEMPLATE_CONTENT_CLASS);
  },
  GetNodeTextElement: function(contentElement){
   return ASPx.GetChildNodes(contentElement, function(el) {
    return el.tagName === "SPAN" && !ASPx.ElementHasCssClass(el, ITEM_IMAGE_CLASS) && !ASPx.ElementHasCssClass(el, ITEM_EXPAND_BTN_CLASS);
   })[0];
  },
  GetNodeImageElement: function(contentElement){
   return ASPx.GetChildByPartialClassName(contentElement, ITEM_IMAGE_CLASS);
  },
  GetNodeButtonElement: function(listItem){
   return ASPx.GetNodesByPartialClassName(listItem, ITEM_EXPAND_BTN_CLASS)[0];
  },
  GetNodeCheckBoxElement: function(contentElement) {
   if(contentElement.previousSibling && ASPx.ElementContainsCssClass(contentElement.previousSibling, ASPx.BootstrapCssSelectors.CheckBox))
    return contentElement.previousSibling;
   return null;
  }
 });
 var BootstrapClientTreeView = ASPx.CreateClass(ASPxClientTreeView, {
  constructor: function (name) {
   this.constructor.prototype.constructor.call(this, name);
  },
  CreateRenderHelper: function() {
   return new BootstrapTreeViewRenderHelper(this);
  },
  GetClientNodeType: function() {
   return BootstrapClientTreeViewNode;
  },
  CreateInternalCheckBoxCollection: function() {
   this.internalCheckBoxCollection = new ASPx.BootstrapCheckBoxInternalCollection(true, false, false);
  },
  GetInternalCheckBoxInputElement: function(internalCheckBox) {
   return internalCheckBox.mainInput;
  },
  GetInternalCheckBoxCheckedState: function(internalCheckBox) {
   var value = internalCheckBox.GetValue();
   if(value === true)
    return ASPx.CheckBoxCheckState.Checked;
   if(value === null)
    return ASPx.CheckBoxCheckState.Indeterminate;
   return ASPx.CheckBoxCheckState.Unchecked;
  },
  GetInternalCheckBoxInputKey: function(internalCheckBox) {
   return internalCheckBox.GetValue() ? ASPx.CheckBoxInputKey.Checked : ASPx.CheckBoxInputKey.Unchecked;
  },
  ShowNodeLoadingPanelCore: function(button, sampleLoadingPanel, nodeID) {
   var panel = sampleLoadingPanel.cloneNode(true);
   panel.id = this.GetNodeLoadingPanelID(nodeID);
   button.parentNode.insertBefore(panel, button);
   ASPx.SetElementDisplay(panel, true);
   ASPx.SetElementDisplay(button, false);
  },
  ToggleNodeAriaExpanded: function(contentElement, expanding){
   ASPx.Attr.Aria.SetExpanded(contentElement, expanding);
  },
  ReplaceElementWithSampleElement: function (srcElement, sampleElement, copySrcInnerHtml) {
   var element = ASPxClientTreeView.prototype.ReplaceElementWithSampleElement.call(this, srcElement, sampleElement, copySrcInnerHtml);
   ASPx.RemoveClassNameFromElement(element, "sample");
   return element;
  },
  HandleNodeClick: function(e) {
   var contentElement = this.GetClickedContentElementByEventArgs(e);
   if(!contentElement) {
    ASPx.Evt.PreventEvent(e);
    return;
   }
   ASPxClientTreeView.prototype.HandleNodeClick.call(this, e);
  },
  HandleNodeKeyDown: function (e) {
   var contentElement = this.GetClickedContentElementByEventArgs(e);
   if(!contentElement)
    return;
   var listItem = ASPx.GetParentByTagName(contentElement, "LI");
   var subnodesList = this.renderHelper.GetSubNodesList(listItem);
   var expanding = !subnodesList || !ASPx.GetElementDisplay(subnodesList);
   var keyCode = ASPx.Evt.GetKeyCode(e);
   if(((keyCode == 39 || keyCode == 107) && expanding) || ((keyCode == 37 || keyCode == 109) && !expanding))
    this.HandleNodeDblClick(e);
  },
  GetLoadingPanelElement: function(){
   return ASPx.BootstrapLoadingPanelManager.getLoadingPanel(this.name, this.loadingPanel);
  },
  GetLoadingDiv: function(){
   return ASPx.BootstrapLoadingPanelManager.getLoadingDiv(this.name, this.loadingPanel);
  },
  GetExpandButton: function(e) {
   return ASPx.getSpriteMainElement(ASPx.Evt.GetEventSource(e));
  },
  BrowserWindowResizeSubscriber: function () {
   return false;
  },
  AdjustControlCore: function() {
  },
  CorrectControlWidth: function () {
  },
  GetControlContentDiv: function() {
   return this.GetMainElement();
  },
  InsertRootSubnodesListMarkup: function(contentDiv, rootSubnodesListMarkup) {
   var fakeDiv = document.createElement("DIV");
   ASPx.Security.setInnerHtml(fakeDiv, rootSubnodesListMarkup, ASPx.Security.DataType.Trusted);
   var rootNodesList = this.renderHelper.GetRootList();
   if(rootNodesList)
    rootNodesList.parentNode.replaceChild(fakeDiv.firstChild, rootNodesList);
   else
    contentDiv.insertBefore(fakeDiv.firstChild, contentDiv.childNodes[0]);
  },
  SetNodeIconCssClass: function(clientNode, cssClass) {
   if(this.IsRootNode(clientNode))
    return;
   var contentElement = ASPx.GetElementById(clientNode.contentElementID);
   var nodeImage = this.renderHelper.GetNodeImageElement(contentElement);
   if(nodeImage)
    ASPx.SetClassName(nodeImage, ITEM_IMAGE_CLASS + (cssClass ? " " + cssClass : ""));
  },
  GetNodeBadgeText: function(clientNode) {
   return this.IsRootNode(clientNode) ? ""
    : ASPx.BootstrapBadgeManager.getBadgeText(ASPx.GetElementById(clientNode.contentElementID));
  },
  SetNodeBadgeText: function(clientNode, text) {
   if(this.IsRootNode(clientNode))
    return;
   var badgeText = this.HtmlEncode(text);
   var contentElement = ASPx.GetElementById(clientNode.contentElementID);
   var badge = ASPx.BootstrapBadgeManager.findBadge(contentElement);
   if(badge)
    ASPx.BootstrapBadgeManager.setBadgeText(badge, badgeText);
   else
    contentElement.appendChild(ASPx.BootstrapBadgeManager.createBadge(badgeText));
  },
  GetNodeBadgeIconCssClass: function(clientNode) {
   return this.IsRootNode(clientNode) ? ""
    : ASPx.BootstrapBadgeManager.getBadgeIconCssClass(ASPx.GetElementById(clientNode.contentElementID));
  },
  SetNodeBadgeIconCssClass: function(clientNode, cssClass) {
   if(this.IsRootNode(clientNode))
    return;
   var contentElement = ASPx.GetElementById(clientNode.contentElementID);
   var badge = ASPx.BootstrapBadgeManager.findBadge(contentElement);
   if(badge)
    ASPx.BootstrapBadgeManager.setBadgeIconCssClass(badge, cssClass);
   else
    contentElement.appendChild(ASPx.BootstrapBadgeManager.createBadge("", cssClass));
  },
  ChangeNodeLinkEnabledAttributes: function (nodeLink, clientNode, clientEnabled) {
   ASPxClientTreeView.prototype.ChangeNodeLinkEnabledAttributes.call(this, nodeLink, clientNode, clientEnabled);
   if(!ASPx.BootstrapCore.IsBootstrap3) {
    var action = clientEnabled ? ASPx.Attr.RemoveAttribute : ASPx.Attr.SetAttribute;
    action(nodeLink, "tabIndex", "-1");
   }
  },
  CreateNodeClickEventArgs: function(processOnServer, node, htmlElement, htmlEvent) {
   return new BootstrapClientTreeViewNodeClickEventArgs(processOnServer, node, htmlElement, htmlEvent);
  },
  CreateNodeEventArgs: function(node) {
   return new BootstrapClientTreeViewNodeEventArgs(node);
  },
  CreateNodeCancelEventArgs: function(processOnServer, node) {
   return new BootstrapClientTreeViewNodeCancelEventArgs(processOnServer, node);
  },
  CreateNodeProcessingModeEventArgs: function(processOnServer, node) {
   return new BootstrapClientTreeViewNodeProcessingModeEventArgs(processOnServer, node);
  }
 });
 var BootstrapClientTreeViewNode = ASPx.CreateClass(ASPxClientTreeViewNode, {
  constructor: function(treeView, parent, index, name) {
   this.constructor.prototype.constructor.call(this, treeView, parent, index, name);
   this.iconCssClass = null;
  },
  GetBadgeText: function() {
   return this.treeView.GetNodeBadgeText(this);
  },
  SetBadgeText: function(text) {
   this.treeView.SetNodeBadgeText(this, text);
  },
  GetBadgeIconCssClass: function() {
   return this.treeView.GetNodeBadgeIconCssClass(this);
  },
  SetBadgeIconCssClass: function(cssClass) {
   this.treeView.SetNodeBadgeIconCssClass(this, cssClass);
  },
  GetIconCssClass: function() {
   return this.iconCssClass || "";
  },
  SetIconCssClass: function(cssClass) {
   this.iconCssClass = cssClass;
   this.treeView.SetNodeIconCssClass(this, cssClass);
  }
 });
 var BootstrapClientTreeViewNodeProcessingModeEventArgs = ASPx.CreateClass(ASPxClientTreeViewNodeProcessingModeEventArgs, {
  constructor: function(processOnServer, node) {
   this.constructor.prototype.constructor.call(this, processOnServer, node);
  }
 });
 var BootstrapClientTreeViewNodeClickEventArgs = ASPx.CreateClass(BootstrapClientTreeViewNodeProcessingModeEventArgs, {
  constructor: function(processOnServer, node, htmlElement, htmlEvent) {
   this.constructor.prototype.constructor.call(this, processOnServer, node);
   this.htmlElement = htmlElement;
   this.htmlEvent = htmlEvent;
  }
 });
 var BootstrapClientTreeViewNodeEventArgs = ASPx.CreateClass(ASPxClientTreeViewNodeEventArgs, {
  constructor: function(node) {
   this.constructor.prototype.constructor.call(this, node);
  }
 });
 var BootstrapClientTreeViewNodeCancelEventArgs = ASPx.CreateClass(ASPxClientTreeViewNodeCancelEventArgs, {
  constructor: function(processOnServer, node) {
   this.constructor.prototype.constructor.call(this, processOnServer, node);
  }
 });
 dx.BootstrapClientTreeView = BootstrapClientTreeView;
 dx.BootstrapClientTreeViewNode = BootstrapClientTreeViewNode;
 dx.BootstrapClientTreeViewNodeProcessingModeEventArgs = BootstrapClientTreeViewNodeProcessingModeEventArgs;
 dx.BootstrapClientTreeViewNodeClickEventArgs = BootstrapClientTreeViewNodeClickEventArgs;
 dx.BootstrapClientTreeViewNodeEventArgs = BootstrapClientTreeViewNodeEventArgs;
 dx.BootstrapClientTreeViewNodeCancelEventArgs = BootstrapClientTreeViewNodeCancelEventArgs;
})(dx || (dx = {}));

(function () {
var PopupUtils = {
 NotSetAlignIndicator: "NotSet",
 InnerAlignIndicator: "Sides",
 OutsideLeftAlignIndicator: "OutsideLeft",
 LeftSidesAlignIndicator: "LeftSides",
 RightSidesAlignIndicator: "RightSides",
 OutsideRightAlignIndicator: "OutsideRight",
 CenterAlignIndicator: "Center",
 AboveAlignIndicator: "Above",
 TopSidesAlignIndicator: "TopSides",
 MiddleAlignIndicator: "Middle",
 BottomSidesAlignIndicator: "BottomSides",
 BelowAlignIndicator: "Below",
 WindowCenterAlignIndicator: "WindowCenter",
 LeftAlignIndicator: "Left",
 RightAlignIndicator: "Right",
 TopAlignIndicator: "Top",
 BottomAlignIndicator: "Bottom",
 WindowLeftAlignIndicator: "WindowLeft",
 WindowRightAlignIndicator: "WindowRight",
 WindowTopAlignIndicator: "WindowTop",
 WindowBottomAlignIndicator: "WindowBottom",
 IsAlignNotSet: function (align) {
  return align == PopupUtils.NotSetAlignIndicator;
 },
 IsInnerAlign: function (align) {
  return align.indexOf(PopupUtils.InnerAlignIndicator) != -1;
 },
 IsRightSidesAlign: function(align) {
  return align == PopupUtils.RightSidesAlignIndicator;
 },
 IsOutsideRightAlign: function(align) {
  return align == PopupUtils.OutsideRightAlignIndicator;
 },
 IsCenterAlign: function(align) {
  return align == PopupUtils.CenterAlignIndicator;
 },
 FindPopupElementById: function (id) {
  if(id == "")
   return null;
  var popupElement = ASPx.GetElementById(id);
  if(!ASPx.IsExistsElement(popupElement)) {
   var idParts = id.split("_");
   var uniqueId = idParts.join("$");
   popupElement = ASPx.GetElementById(uniqueId);
  }
  return popupElement;
 },
 FindEventSourceParentByTestFunc: function (evt, testFunc) {
  return ASPx.GetParent(ASPx.Evt.GetEventSource(evt), testFunc);
 },
 PreventContextMenu: function (evt) {
  ASPx.Evt.PreventEventAndBubble(evt);
  if(ASPx.Browser.WebKitFamily)
   evt.returnValue = false;
 },
 GetDocumentClientWidthForPopup: function() {
  return ASPx.Browser.WebKitTouchUI ? document.body.offsetWidth : ASPx.GetDocumentClientWidth();
 },
 GetDocumentClientHeightForPopup: function() {
  return ASPx.Browser.WebKitTouchUI ? document.body.offsetHeight : ASPx.GetDocumentClientHeight();
 },
 AdjustPositionToClientScreen: function (element, pos, rtl, isX) {
  var min = isX ? ASPx.GetDocumentScrollLeft() : ASPx.GetDocumentScrollTop(),
   max = min + (isX ? ASPx.GetDocumentClientWidth() : ASPx.GetDocumentClientHeight());
  max -= (isX ? element.offsetWidth : element.offsetHeight);
  if(rtl && isX) {
   if(pos < min) pos = min;
   if(pos > max) pos = max;
  } else {
   if(pos > max) pos = max;
   if(pos < min) pos = min;
  }
  return pos;
 },
 GetPopupAbsoluteX: function(element, popupElement, hAlign, hOffset, x, left, rtl, isPopupFullCorrectionOn, showPopupInsideScreenBounds) {
  return PopupUtils.getPopupAbsolutePos(element, popupElement, hAlign, hOffset, x, left, rtl, isPopupFullCorrectionOn, false, false, true, showPopupInsideScreenBounds);
 },
 GetPopupAbsoluteY: function(element, popupElement, vAlign, vOffset, y, top, isPopupFullCorrectionOn, ignoreAlignWithoutScrollReserve, ignorePopupElementBorders, showPopupInsideScreenBounds) {
  return PopupUtils.getPopupAbsolutePos(element, popupElement, vAlign, vOffset, y, top, false, isPopupFullCorrectionOn, ignoreAlignWithoutScrollReserve, ignorePopupElementBorders, false, showPopupInsideScreenBounds);
 },
 getPopupAbsolutePos: function(element, popupElement, align, offset, startPos, startPosInit, rtl, isPopupFullCorrectionOn, ignoreAlignWithoutScrollReserve, ignorePopupElementBorders, isHorizontal, showPopupInsideScreenBounds) {
  var calculator = getPositionCalculator();
  calculator.applyParams(element, popupElement, align, offset, startPos, startPosInit, rtl, isPopupFullCorrectionOn, ignoreAlignWithoutScrollReserve, ignorePopupElementBorders, isHorizontal, showPopupInsideScreenBounds);
  var position = calculator.getPopupAbsolutePos();
  calculator.disposeState();
  return position;
 },
 RemoveFocus: function (parent) {
  var div = document.createElement('div');
  div.tabIndex = "-1";
  PopupUtils.ConcealDivElement(div);
  parent.appendChild(div);
  if(ASPx.IsFocusable(div))
   div.focus();
  ASPx.RemoveElement(div);
 },
 ConcealDivElement: function (div) {
  div.style.position = "absolute";
  div.style.left = 0;
  div.style.top = 0;
  if(ASPx.Browser.WebKitFamily) {
   div.style.opacity = 0;
   div.style.width = 1;
   div.style.height = 1;
  } else {
   div.style.border = 0;
   div.style.width = 0;
   div.style.height = 0;
  }
 },
 InitAnimationProperties: function(element, onAnimStopCallString) {
  element.popuping = true;
  element.onAnimStopCallString = onAnimStopCallString;
 },
 InitAnimationDiv: function (element, x, y, onAnimStopCallString, skipSizeInit) {
  PopupUtils.InitAnimationProperties(element, onAnimStopCallString);
  PopupUtils.InitAnimationDivCore(element);
  if(!skipSizeInit) {
   ASPx.SetStyles(element, { width: "", height: "" });
   ASPx.SetStyles(element, { width: element.offsetWidth, height: element.offsetHeight });
  }
  ASPx.SetStyles(element, { left: x, top: y });
 },
 InitAnimationDivCore: function (element) {
  ASPx.SetStyles(element, {
   overflow: "hidden",
   position: "absolute"
  });
 },
 StartSlideAnimation: function (animationDivElement, element, iframeElement, duration, preventChangingWidth, preventChangingHeight) {
  if(iframeElement) {
   var endLeft = ASPx.PxToInt(iframeElement.style.left);
   var endTop = ASPx.PxToInt(iframeElement.style.top);
   var startLeft = ASPx.PxToInt(element.style.left) < 0 ? endLeft : animationDivElement.offsetLeft + animationDivElement.offsetWidth;
   var startTop = ASPx.PxToInt(element.style.top) < 0 ? endTop : animationDivElement.offsetTop + animationDivElement.offsetHeight;
   var properties = {
    left: { from: startLeft, to: endLeft, unit: "px" },
    top: { from: startTop, to: endTop, unit: "px" }
   };
   if(!preventChangingWidth)
    properties.width = { to: element.offsetWidth, unit: "px" };
   if(!preventChangingHeight)
    properties.height = { to: element.offsetHeight, unit: "px" };
   ASPx.AnimationHelper.createMultipleAnimationTransition(iframeElement, {
    duration: duration
   }).Start(properties);
  }
  ASPx.AnimationHelper.createMultipleAnimationTransition(element, {
   duration: duration,
   onComplete: function () { PopupUtils.AnimationFinished(animationDivElement, element); }
  }).Start({
   left: { to: 0, unit: "px" },
   top: { to: 0, unit: "px" }
  });
 },
 AnimationFinished: function (animationDivElement, element) {
  if(PopupUtils.StopAnimation(animationDivElement, element) && ASPx.IsExists(animationDivElement.onAnimStopCallString) &&
   animationDivElement.onAnimStopCallString !== "") {
   window.setTimeout(animationDivElement.onAnimStopCallString, 0);
  }
 },
 StopAnimation: function (animationDivElement, element) {
  if(animationDivElement.popuping) {
   ASPx.AnimationHelper.cancelAnimation(element);
   animationDivElement.popuping = false;
   animationDivElement.style.overflow = "visible";
   return true;
  }
  return false;
 },
 GetAnimationHorizontalDirection: function (popupPosition, horizontalAlign, verticalAlign, rtl) {
  if(PopupUtils.IsInnerAlign(horizontalAlign)
   && !PopupUtils.IsInnerAlign(verticalAlign)
   && !PopupUtils.IsAlignNotSet(verticalAlign))
   return 0;
  var toTheLeft = (horizontalAlign == PopupUtils.OutsideLeftAlignIndicator || horizontalAlign == PopupUtils.RightSidesAlignIndicator || (horizontalAlign == PopupUtils.NotSetAlignIndicator && rtl)) ^ popupPosition.isInverted;
  return toTheLeft ? 1 : -1;
 },
 GetAnimationVerticalDirection: function (popupPosition, horizontalAlign, verticalAlign) {
  if(PopupUtils.IsInnerAlign(verticalAlign)
   && !PopupUtils.IsInnerAlign(horizontalAlign)
   && !PopupUtils.IsAlignNotSet(horizontalAlign))
   return 0;
  var toTheTop = (verticalAlign == PopupUtils.AboveAlignIndicator || verticalAlign == PopupUtils.BottomSidesAlignIndicator) ^ popupPosition.isInverted;
  return toTheTop ? 1 : -1;
 },
 IsVerticalScrollExists: function () {
  var scrollIsNotHidden = ASPx.GetCurrentStyle(document.body).overflowY !== "hidden" && ASPx.GetCurrentStyle(document.documentElement).overflowY !== "hidden";
  return (scrollIsNotHidden && ASPx.GetDocumentHeight() > ASPx.GetDocumentClientHeight());
 },
 CoordinatesInDocumentRect: function (x, y) {
  var docScrollLeft = ASPx.GetDocumentScrollLeft();
  var docScrollTop = ASPx.GetDocumentScrollTop();
  return (x > docScrollLeft && y > docScrollTop &&
   x < ASPx.GetDocumentClientWidth() + docScrollLeft &&
   y < ASPx.GetDocumentClientHeight() + docScrollTop);
 },
 GetElementZIndexArray: function (element) {
  var currentElement = element;
  var zIndexesArray = [0];
  while(currentElement && currentElement.tagName != "BODY") {
   if(currentElement.style) {
    if(typeof (currentElement.style.zIndex) != "undefined" && currentElement.style.zIndex != "")
     zIndexesArray.unshift(currentElement.style.zIndex);
   }
   currentElement = currentElement.parentNode;
  }
  return zIndexesArray;
 },
 IsHigher: function (higherZIndexArrat, zIndexArray) {
  if(zIndexArray == null) return true;
  var count = (higherZIndexArrat.length >= zIndexArray.length) ? higherZIndexArrat.length : zIndexArray.length;
  for(var i = 0; i < count; i++)
   if(typeof (higherZIndexArrat[i]) != "undefined" && typeof (zIndexArray[i]) != "undefined") {
    var higherZIndexArrayCurrentElement = parseInt(higherZIndexArrat[i].toString());
    var zIndexArrayCurrentElement = parseInt(zIndexArray[i].toString());
    if(higherZIndexArrayCurrentElement != zIndexArrayCurrentElement)
     return higherZIndexArrayCurrentElement > zIndexArrayCurrentElement;
   } else return typeof (zIndexArray[i]) == "undefined";
  return true;
 },
 TestIsPopupElement: function (element) {
  return !!element.DXPopupElementControl;
 },
 adjustViewportScrollWrapper: function(wrapper, wrapperScroll, windowElement) {
  var document = wrapper.ownerDocument;
  var window = document.defaultView || document.parentWindow;
  var isWindowElementDisplayed = ASPx.IsElementDisplayed(windowElement);
  if(!isWindowElementDisplayed) {
   wrapper.style.cssText = "";
   wrapperScroll.style.cssText = "";
   return;
  }
  var windowRect = windowElement.getBoundingClientRect();
  var yAxis = this.calculateViewPortScrollDataByAxis(wrapper.style.top, windowRect.top, windowElement.offsetHeight, window.innerHeight, wrapper.scrollTop);
  var xAxis = this.calculateViewPortScrollDataByAxis(wrapper.style.left, windowRect.left, windowElement.offsetWidth, window.innerWidth, wrapper.scrollLeft);
  this.prepareViewPortScrollData(xAxis, yAxis);
  ASPx.SetStyles(windowElement, {
   top: yAxis.windowOffset,
   left: xAxis.windowOffset
  });
  ASPx.SetStyles(wrapper, {
   width: xAxis.wrapperSize,
   height: yAxis.wrapperSize,
   position: "absolute",
   overflow: ASPx.Browser.MobileUI ? "scroll" : "auto",
   zIndex: windowElement.style.zIndex
  });
  ASPx.SetAbsoluteX(wrapper, ASPx.GetDocumentScrollLeft());
  ASPx.SetAbsoluteY(wrapper, ASPx.GetDocumentScrollTop());
  ASPx.SetStyles(wrapperScroll, {
   width: xAxis.wrapperScrollSize,
   height: yAxis.wrapperScrollSize,
   position: "absolute",
   overflow: "hidden"
  });
  wrapper.scrollLeft = xAxis.scrollSize;
  wrapper.scrollTop = yAxis.scrollSize;
 },
 calculateViewPortScrollDataByAxis: function(wrapperOffsetStyle, windowOffset, windowSize, viewPortSize, scrollSize) {
  var isWindowOffsetNegative = windowOffset < 0;
  windowOffset = isWindowOffsetNegative ? 0 : windowOffset;
  var wrapperScrollSize = Math.max(viewPortSize + Math.abs(Math.min(0, windowOffset)), windowSize + Math.abs(windowOffset));
  return {
   windowOffset: isWindowOffsetNegative ? 0 : windowOffset,
   wrapperSize: viewPortSize,
   wrapperScrollSize: wrapperScrollSize,
   scrollSize: isWindowOffsetNegative ? scrollSize + Math.abs(windowOffset) : 0,
   hasScroll: wrapperScrollSize > viewPortSize
  };
 },
 prepareViewPortScrollData: function(xAxis, yAxis) {
  var scrollBarSize = ASPx.GetVerticalScrollBarWidth();
  if(yAxis.hasScroll && !xAxis.hasScroll) {
   xAxis.wrapperScrollSize = Math.min(xAxis.wrapperSize - scrollBarSize, xAxis.wrapperScrollSize);
  } else if(xAxis.hasScroll && !yAxis.hasScroll) {
   yAxis.wrapperScrollSize = Math.min(yAxis.wrapperSize - scrollBarSize, yAxis.wrapperScrollSize);
  } else if(yAxis.hasScroll && xAxis.hasScroll) {
   yAxis.wrapperScrollSize -= scrollBarSize;
   xAxis.wrapperScrollSize -= scrollBarSize;
  }
 }
};
PopupUtils.OverControl = {
 GetPopupElementByEvt: function (evt) {
  return PopupUtils.FindEventSourceParentByTestFunc(evt, PopupUtils.TestIsPopupElement);
 },
 OnMouseEvent: function (evt, mouseOver) {
  var popupElement = PopupUtils.OverControl.GetPopupElementByEvt(evt);
  if(mouseOver)
   popupElement.DXPopupElementControl.OnPopupElementMouseOver(evt, popupElement);
  else
   popupElement.DXPopupElementControl.OnPopupElementMouseOut(evt, popupElement);
 },
 OnMouseOut: function (evt) {
  PopupUtils.OverControl.OnMouseEvent(evt, false);
 },
 OnMouseOver: function (evt) {
  PopupUtils.OverControl.OnMouseEvent(evt, true);
 }
};
PopupUtils.BodyScrollHelper = (function () {
 var windowScrollLock = {},
  windowScroll = {},
  hideScrollbarsClassName = "dxpc-hideScrollbars",
  savedHtmlOverflow = "";
 function lockWindowScroll(windowId) {
  windowScrollLock[windowId] = true;
 }
 function unlockWindowScroll(windowId) {
  delete windowScrollLock[windowId];
 }
 function isLocked(windowId) {
  return !!windowScrollLock[windowId];
 }
 function isAnyWindowScrollLocked() {
  for(var key in windowScrollLock)
   if (windowScrollLock.hasOwnProperty(key) && windowScrollLock[key] === true)
    return true;
  return false;
 }
 function replaceVerticalScrollByPadding() {
  var currentBodyStyle = ASPx.GetCurrentStyle(document.body),
   paddingWidth = ASPx.GetVerticalScrollBarWidth() + ASPx.PxToInt(currentBodyStyle.paddingRight);
  ASPx.Attr.ChangeStyleAttribute(document.body, "padding-right", paddingWidth + "px");
 }
 function needToChangeOverflowUsingStyle() {
  return ASPx.Browser.IE && ASPx.Browser.Version >= 11;
 }
 function changeOverflow() {
  if(needToChangeOverflowUsingStyle()) {
   savedHtmlOverflow = document.documentElement.style.overflow;
   document.documentElement.style.overflow = "hidden";
  }
  else
   ASPx.Attr.ChangeStyleAttribute(document.documentElement, "overflow", "hidden");
  if(ASPx.GetCurrentStyle(document.body).overflowY === "scroll")
   ASPx.Attr.ChangeStyleAttribute(document.body, "overflow", "hidden");
  resetOverflowCache();
 }
 function restoreOverflow() {
  if(needToChangeOverflowUsingStyle()) {
   document.documentElement.style.overflow = savedHtmlOverflow;
   savedHtmlOverflow = "";
  }
  else
   ASPx.Attr.RestoreStyleAttribute(document.documentElement, "overflow");
  ASPx.Attr.RestoreStyleAttribute(document.body, "overflow");
  resetOverflowCache();
 }
 function resetOverflowCache() {
  ASPx.verticalScrollIsNotHidden = null;
  ASPx.horizontalScrollIsNotHidden = null;
 }
 function saveScrollPosition(windowId) {
  windowScroll[windowId] = {
   x: window.pageXOffset,
   y: window.pageYOffset
  };
 }
 function restoreScrollPosition(windowId) {
  var currentWindowScroll = windowScroll[windowId];
  if(!!currentWindowScroll)
   window.scrollTo(currentWindowScroll.x, currentWindowScroll.y);
 }
 function restoreBodyScroll(windowId) {
  unlockWindowScroll(windowId);
  if(isAnyWindowScrollLocked())
   return;
  if(ASPx.Browser.IE) {
   ASPx.Attr.RestoreAttribute(document.body, "scroll");
   restoreOverflow();
   restoreScrollPosition(windowId);
  } else if(ASPx.Browser.WebKitTouchUI) {
   ASPx.Attr.RestoreStyleAttribute(document.body, "position");
   ASPx.Attr.RestoreStyleAttribute(document.body, "height");
   ASPx.Attr.RestoreStyleAttribute(document.body, "margin");
   ASPx.RemoveClassNameFromElement(document.documentElement, hideScrollbarsClassName);
   ASPx.Attr.RestoreStyleAttribute(document.body, "overflow");
   restoreScrollPosition(windowId);
  } else {
   restoreOverflow();
   restoreScrollPosition(windowId);
  }
  if(ASPx.Browser.Chrome)
   var dummy = document.documentElement.scrollTop;
  ASPx.Attr.RestoreStyleAttribute(document.body, "padding-right");
  ASPx.Attr.RestoreStyleAttribute(document.body, "height");
  ASPx.Attr.RestoreStyleAttribute(document.body, "width");
 }
 return {
  RestoreIfLocked: function(windowId) {
   if(isLocked(windowId))
    restoreBodyScroll(windowId);
  },
  HideBodyScroll: function(windowId) {
   if(isAnyWindowScrollLocked()) {
    lockWindowScroll(windowId);
    return;
   }
   lockWindowScroll(windowId);
   if(PopupUtils.IsVerticalScrollExists())
    replaceVerticalScrollByPadding();
   if(ASPx.Browser.IE) {
    saveScrollPosition(windowId);
    ASPx.Attr.ChangeAttribute(document.body, "scroll", "no");
    changeOverflow();
   } else if(ASPx.Browser.WebKitTouchUI) {
    saveScrollPosition(windowId);
    ASPx.Attr.ChangeStyleAttribute(document.body, "overflow", "hidden");
    ASPx.Attr.ChangeStyleAttribute(document.body, "position", "relative");
    ASPx.Attr.ChangeStyleAttribute(document.body, "height", "100%");
    ASPx.Attr.ChangeStyleAttribute(document.body, "margin", "0");
    ASPx.AddClassNameToElement(document.documentElement, hideScrollbarsClassName);
   } else {
    saveScrollPosition(windowId);
    changeOverflow();
    var documentHeight = ASPx.GetDocumentHeight();
    var documentWidth = ASPx.GetDocumentWidth();
    if(window.pageYOffset > 0 && ASPx.PxToInt(window.getComputedStyle(document.body, null)) != documentHeight)
     ASPx.Attr.ChangeStyleAttribute(document.body, "height", documentHeight + "px");
    if(window.pageXOffset > 0 && ASPx.PxToInt(window.getComputedStyle(document.body, null)) != documentWidth)
     ASPx.Attr.ChangeStyleAttribute(document.body, "width", documentWidth + "px");
   }
  },
  RestoreBodyScroll: restoreBodyScroll
 };
})();
var PositionAlignConsts = {
 NOT_SET: 0,
 OUTSIDE_START: 1,
 NEAR_BOUND_START: 2,
 INNER_START: 3,
 CENTER: 4,
 INNER_END: 5,
 NEAR_BOUND_END: 6,
 OUTSIDE_END: 7,
 WINDOW_CENTER: 8,
 WINDOW_START: 9,
 WINDOW_END: 10
};
var AlignIndicatorTable = {};
var PositionCalculator = ASPx.CreateClass(null, {
 constructor: function() {
  this.element = null;
  this.popupElement = null;
  this.align = 0;
  this.offset = 0;
  this.startPos = 0;
  this.startPosInit = 0;
  this.rtl = false;
  this.isPopupFullCorrectionOn = false;
  this.isHorizontal = true;
  this.size = 0;
  this.bodySize = 0;
  this.actualBodySize = 0;
  this.elementStartPos = 0;
  this.scrollStartPos = 0;
  this.isInverted = false;
  this.popupElementSize = 0;
  this.boundStartPos = 0;
  this.boundEndPos = 0;
  this.innerBoundStartPos = 0;
  this.innerBoundEndPos = 0;
  this.isMoreFreeSpaceLeft = false;
  this.nearBoundOverlapRate = 0.25;
  this.functionsTable = {};
  this.initializeFunctionsTable();
 },
 applyParams: function(element, popupElement, align, offset, startPos, startPosInit, rtl, isPopupFullCorrectionOn, ignoreAlignWithoutScrollReserve, ignorePopupElementBorders, isHorizontal, showPopupInsideScreenBounds) {
  this.isHorizontal = isHorizontal;
  this.element = element;
  this.popupElement = popupElement;
  this.align = this.getAlignValueFromIndicator(align);
  this.offset = offset;
  this.startPos = startPos;
  this.startPosInit = startPosInit;
  this.rtl = rtl;
  this.isPopupFullCorrectionOn = isPopupFullCorrectionOn;
  this.ignoreAlignWithoutScrollReserve = ignoreAlignWithoutScrollReserve;
  this.ignorePopupElementBorders = ignorePopupElementBorders;
  this.showPopupInsideScreenBounds = showPopupInsideScreenBounds;
  this.calculateParams();
 },
 disposeState: function() {
  this.element = null;
  this.popupElement = null;
 },
 getPopupAbsolutePos: function() {
  if(this.isWindowAlign()) {
   var showAtPos = this.startPos != ASPx.InvalidPosition && !this.popupElement;
   if(showAtPos)
    this.align = PositionAlignConsts.NOT_SET;
   else
    return this.getWindowAlignPos();
  }
  if(this.popupElement)
   this.calculatePopupElement();
  else
   this.align = PositionAlignConsts.NOT_SET;
  return this.getPopupAbsolutePosCore();
 },
 initializeFunctionsTable: function() {
  var table = this.functionsTable;
  table[PositionAlignConsts.NOT_SET] = this.calculateNotSet;
  table[PositionAlignConsts.OUTSIDE_START] = this.calculateOutsideStart;
  table[PositionAlignConsts.INNER_START] = this.calculateInnerStart;
  table[PositionAlignConsts.CENTER] = this.calculateCenter;
  table[PositionAlignConsts.INNER_END] = this.calculateInnerEnd;
  table[PositionAlignConsts.OUTSIDE_END] = this.calculateOutsideEnd;
  table[PositionAlignConsts.NEAR_BOUND_START] = this.calculateNearBoundStart;
  table[PositionAlignConsts.NEAR_BOUND_END] = this.calculateNearBoundEnd;
  table[PositionAlignConsts.WINDOW_CENTER] = this.calculateWindowCenter;
  table[PositionAlignConsts.WINDOW_START] = this.calculateWindowStart;
  table[PositionAlignConsts.WINDOW_END] = this.calculateWindowEnd;
 },
 calculateParams: function() {
  this.size = this.getElementSize();
  if(this.isHorizontal) {
   this.bodySize = ASPx.GetDocumentClientWidth();
   this.elementStartPos = ASPx.GetAbsoluteX(this.popupElement) + this.getBorderCorrection();
   this.scrollStartPos = ASPx.GetDocumentScrollLeft();
  }
  else {
   this.bodySize = ASPx.GetDocumentClientHeight();
   this.elementStartPos = ASPx.GetAbsoluteY(this.popupElement) + this.getBorderCorrection();
   this.scrollStartPos = ASPx.GetDocumentScrollTop();
  }
 },
 getBorderCorrection: function() {
  if(!this.ignorePopupElementBorders)
   return 0;
  var style = getComputedStyle(this.popupElement);
  return ASPx.PxToInt(this.isHorizontal ? style.borderLeftWidth : style.borderTopWidth);
 },
 isWindowAlign: function() {
  return this.align == PositionAlignConsts.WINDOW_CENTER || this.align == PositionAlignConsts.WINDOW_START ||
   this.align == PositionAlignConsts.WINDOW_END;
 },
 getWindowAlignPos: function() {
  this.actualBodySize = ASPx.Browser.WebKitTouchUI ? this.getWindowInnerSize() : this.bodySize;
  return this.getPopupAbsolutePosCore();
 },
 getPopupAbsolutePosCore: function() {
  var calculationFunc = this.functionsTable[this.align];
  calculationFunc.call(this);
  return new ASPx.PopupPosition(this.startPos, this.isInverted);
 },
 calculateWindowCenter: function() {
  this.startPos = Math.max(Math.ceil(this.actualBodySize / 2 - this.size / 2), 0) + this.scrollStartPos + this.offset;
 },
 calculateWindowStart: function() {
  this.startPos = this.scrollStartPos + this.offset;
 },
 calculateWindowEnd: function() {
  this.startPos = this.scrollStartPos + this.actualBodySize - this.size + this.offset;
 },
 calculatePopupElement: function() {
  this.popupElementSize = this.getPopupElementSize();
  this.boundStartPos = this.elementStartPos - this.size;
  this.boundEndPos = this.elementStartPos + this.popupElementSize;
  this.innerBoundStartPos = this.elementStartPos;
  this.innerBoundEndPos = this.elementStartPos + this.popupElementSize - this.size;
  var hasLeftScrollReserve = this.boundStartPos >= 0;
  this.isMoreFreeSpaceLeft = (this.bodySize - (this.boundEndPos + this.size) < this.boundStartPos - 2 * this.scrollStartPos) && (!this.ignoreAlignWithoutScrollReserve || hasLeftScrollReserve);
 },
 calculateOutsideStart: function() {
  this.isInverted = this.isPopupFullCorrectionOn && (!(this.boundStartPos - this.scrollStartPos > 0 || this.isMoreFreeSpaceLeft));
  if(this.isInverted)
   this.startPos = this.boundEndPos - this.offset;
  else
   this.startPos = this.boundStartPos + this.offset;
 },
 calculateInnerStart: function() {
  this.startPos = this.innerBoundStartPos + this.offset;
  if(this.isPopupFullCorrectionOn)
   this.startPos = PopupUtils.AdjustPositionToClientScreen(this.element, this.startPos, this.rtl, this.isHorizontal);
 },
 calculateCenter: function() {
  this.startPos = this.elementStartPos + Math.round((this.popupElementSize - this.size) / 2) + this.offset;
  if(this.showPopupInsideScreenBounds) {
   if(this.startPos < 0)
    this.startPos = 0;
   if(this.startPos + this.size > this.bodySize)
    this.startPos = this.bodySize - this.size;
  }
 },
 calculateInnerEnd: function() {
  this.startPos = this.innerBoundEndPos + this.offset;
  if(this.isPopupFullCorrectionOn)
   this.startPos = PopupUtils.AdjustPositionToClientScreen(this.element, this.startPos, this.rtl, this.isHorizontal);
 },
 calculateOutsideEnd: function() {
  this.isInverted = this.isPopupFullCorrectionOn && (!(this.boundEndPos + this.size < this.bodySize + this.scrollStartPos || !this.isMoreFreeSpaceLeft));
  if(this.isInverted)
   this.startPos = this.boundStartPos - this.offset;
  else
   this.startPos = this.boundEndPos + this.offset;
 },
 calculateNotSet: function() {
  if(this.rtl)
   this.calculateNotSetRightToLeft();
  else
   this.calculateNotSetLeftToRight();
 },
 calculateNotSetLeftToRight: function() {
  if(!ASPx.IsValidPosition(this.startPos)) {
   if(this.popupElement)
    this.startPos = this.elementStartPos;
   else if(this.offset)
    this.startPos = 0;
   else
    this.startPos = this.startPosInit;
  }
  this.isInverted = this.isPopupFullCorrectionOn && (this.startPos - this.scrollStartPos + this.size > this.bodySize && this.startPos - this.scrollStartPos > this.bodySize / 2);
  if(this.isInverted)
   this.startPos = this.startPos - this.size - this.offset;
  else
   this.startPos = this.startPos + this.offset;
 },
 calculateNotSetRightToLeft: function() {
  if(!ASPx.IsValidPosition(this.startPos)) {
   if(this.popupElement)
    this.startPos = this.innerBoundEndPos;
   else if(this.offset)
    this.startPos = 0;
   else
    this.startPos = this.startPosInit;
  }
  else
   this.startPos -= this.size;
  this.isInverted = this.isPopupFullCorrectionOn && (this.startPos < this.scrollStartPos && this.startPos - this.scrollStartPos < this.bodySize / 2);
  if(this.isInverted)
   this.startPos = this.startPos + this.size + this.offset;
  else
   this.startPos = this.startPos - this.offset;
 },
 calculateNearBoundStart: function() {
  this.startPos = this.boundStartPos + this.offset + this.size * this.nearBoundOverlapRate;
  if(this.isPopupFullCorrectionOn)
   this.startPos = PopupUtils.AdjustPositionToClientScreen(this.element, this.startPos, this.rtl, this.isHorizontal);
 },
 calculateNearBoundEnd: function() {
  this.startPos = this.boundEndPos + this.offset - this.size * this.nearBoundOverlapRate;
  if(this.isPopupFullCorrectionOn)
   this.startPos = PopupUtils.AdjustPositionToClientScreen(this.element, this.startPos, this.rtl, this.isHorizontal);
 },
 getAlignValueFromIndicator: function(alignIndicator) {
  var alignValue = AlignIndicatorTable[alignIndicator];
  if(alignValue === undefined)
   throw "Incorrect align indicator.";
  return alignValue;
 },
 getElementSize: function() {
  return this.getCustomElementSize(this.element, false);
 },
 getPopupElementSize: function() {
  return this.getCustomElementSize(this.popupElement, this.ignorePopupElementBorders);
 },
 getCustomElementSize: function(customElement, ignoreBorders) {
  if(ignoreBorders) {
   return this.isHorizontal ? ASPx.GetClearClientWidth(customElement) : ASPx.GetClearClientHeight(customElement);
  }
  return this.isHorizontal ? ASPx.GetElementOffsetWidth(customElement) : ASPx.GetElementOffsetHeight(customElement);
 },
 getWindowInnerSize: function() {
  return this.isHorizontal ? window.innerWidth : window.innerHeight;
 }
});
var positionCalculator = null;
function getPositionCalculator() {
 if(positionCalculator == null)
  positionCalculator = new PositionCalculator();
 return positionCalculator;
}
function initializeAlignIndicatorTable() {
 AlignIndicatorTable[PopupUtils.NotSetAlignIndicator] = PositionAlignConsts.NOT_SET;
 AlignIndicatorTable[PopupUtils.OutsideLeftAlignIndicator] = PositionAlignConsts.OUTSIDE_START;
 AlignIndicatorTable[PopupUtils.AboveAlignIndicator] = PositionAlignConsts.OUTSIDE_START;
 AlignIndicatorTable[PopupUtils.LeftAlignIndicator] = PositionAlignConsts.NEAR_BOUND_START;
 AlignIndicatorTable[PopupUtils.TopAlignIndicator] = PositionAlignConsts.NEAR_BOUND_START;
 AlignIndicatorTable[PopupUtils.LeftSidesAlignIndicator] = PositionAlignConsts.INNER_START;
 AlignIndicatorTable[PopupUtils.TopSidesAlignIndicator] = PositionAlignConsts.INNER_START;
 AlignIndicatorTable[PopupUtils.CenterAlignIndicator] = PositionAlignConsts.CENTER;
 AlignIndicatorTable[PopupUtils.MiddleAlignIndicator] = PositionAlignConsts.CENTER;
 AlignIndicatorTable[PopupUtils.RightSidesAlignIndicator] = PositionAlignConsts.INNER_END;
 AlignIndicatorTable[PopupUtils.BottomSidesAlignIndicator] = PositionAlignConsts.INNER_END;
 AlignIndicatorTable[PopupUtils.RightAlignIndicator] = PositionAlignConsts.NEAR_BOUND_END;
 AlignIndicatorTable[PopupUtils.BottomAlignIndicator] = PositionAlignConsts.NEAR_BOUND_END;
 AlignIndicatorTable[PopupUtils.OutsideRightAlignIndicator] = PositionAlignConsts.OUTSIDE_END;
 AlignIndicatorTable[PopupUtils.BelowAlignIndicator] = PositionAlignConsts.OUTSIDE_END;
 AlignIndicatorTable[PopupUtils.WindowCenterAlignIndicator] = PositionAlignConsts.WINDOW_CENTER;
 AlignIndicatorTable[PopupUtils.WindowLeftAlignIndicator] = PositionAlignConsts.WINDOW_START;
 AlignIndicatorTable[PopupUtils.WindowTopAlignIndicator] = PositionAlignConsts.WINDOW_START;
 AlignIndicatorTable[PopupUtils.WindowRightAlignIndicator] = PositionAlignConsts.WINDOW_END;
 AlignIndicatorTable[PopupUtils.WindowBottomAlignIndicator] = PositionAlignConsts.WINDOW_END;
}
initializeAlignIndicatorTable();
ASPx.PopupPosition = function(position, isInverted) {
 this.position = position;
 this.isInverted = isInverted;
};
ASPx.PopupSize = function(width, height) {
 this.width = width;
 this.height = height;
};
ASPx.PopupUtils = PopupUtils;
ASPx.PositionCalculator = PositionCalculator;
})();
(function(){
 var ScrollingManager = ASPx.CreateClass(null, {
  constructor: function(owner, options) {
   this.owner = owner;
   this.scrollableArea = options.scrollableArea;
   this.orientation = options.orientation;
   this.animationDelay = 1;
   this.animationStep = 2;
   this.animationOffset = 5;
   this.animationAcceleration = 0;
   this.scrollSessionInterval = 10;
   this.stopScrolling = true;
   this.busy = false;
   this.currentAcceleration = 0;
   this.startPos = 0;
   this.onBeforeScrolling = options.onBeforeScrolling;
   this.onAfterScrolling = options.onAfterScrolling;
   this.emulationMode = options.forseEmulation === true || !ASPx.Browser.TouchUI;
   this.useMarginForPosition = options.useMarginForPosition;
   this.handleMouseWheel = !!options.handleMouseWheel;
   this.Initialize();
  },
  Initialize: function(){
   this.setParentNodeOverflow();
   if(this.emulationMode) {
    this.wrapper = new ScrollingManager.scrollWrapper(this.scrollableArea, this.useMarginForPosition);
   } else {
    this.wrapper = new ScrollingManager.scrollWrapperTouchUI(this.scrollableArea, function(direction){
     if(this.onAfterScrolling)
      this.onAfterScrolling(this, direction);
    }.aspxBind(this));
   }
   if(this.handleMouseWheel)
    ASPx.Evt.AttachEventToElement(this.scrollableArea, ASPx.Evt.GetMouseWheelEventName(), this.onMouseWheel.aspxBind(this));
  },
  onMouseWheel: function(e) {
   ASPx.Evt.PreventEvent(e);
   var delta = ASPx.Evt.GetWheelDelta(e);
   if(ASPx.Browser.Firefox)
    delta = delta / 0.03;
   this.DoScrollSessionToOffset(-delta);
  },
  setParentNodeOverflow: function() {
   if(ASPx.Browser.MSTouchUI){
    this.scrollableArea.parentNode.style.overflow = "auto";
    this.scrollableArea.parentNode.style["-ms-overflow-style"] = "-ms-autohiding-scrollbar";
   }
  },
  GetScrolledAreaPosition: function() {
   return this.wrapper.GetScrollLeft() * this.orientation[0]
    + this.wrapper.GetScrollTop() * this.orientation[1];
  },
  SetScrolledAreaPosition: function(pos) {
   this.wrapper.SetScrollLeft(pos * this.orientation[0]);
   this.wrapper.SetScrollTop(pos * this.orientation[1]);
  },
  PrepareForScrollAnimation: function() {
   if(!this.scrollableArea)
    return;
   this.currentAcceleration = 0;
   this.startPos = this.GetScrolledAreaPosition();
   this.busy = false;
  },
  GetAnimationStep: function(dir) {
   var step = dir * (this.animationStep + this.currentAcceleration);
   var newPos = this.GetScrolledAreaPosition() + step;
   var requiredPos = this.startPos + dir * this.animationOffset;
   if((dir == 1 && newPos >= requiredPos) || (dir == -1 && newPos <= requiredPos)) {
    step = requiredPos - this.GetScrolledAreaPosition();
   }
   return step;
  },
  DoScrollSessionToOffset: function(offset) {
   var newScrollPos = this.GetScrolledAreaPosition() - offset;
   this.stopScrolling = false;
   if(this.onBeforeScrolling)
    this.onBeforeScrolling(this, offset);
   if(this.stopScrolling) return;
   newScrollPos = Math.min(newScrollPos, 0);
   this.SetScrolledAreaPosition(newScrollPos);
   if(this.onAfterScrolling)
    this.onAfterScrolling(this, offset);
  },
  DoScrollSessionAnimation: function(direction) {
   if(!this.scrollableArea)
    return;
   this.SetScrolledAreaPosition(this.GetScrolledAreaPosition() + this.GetAnimationStep(direction));
   var self = this;
   if(!this.ShouldStopScrollSessionAnimation()) {
    this.busy = true;
    this.currentAcceleration += this.animationAcceleration;
    window.setTimeout(function() { self.DoScrollSessionAnimation(direction); }, this.animationDelay);
   } else {
    this.busy = false;
    if(this.onAfterScrolling)
     this.onAfterScrolling(this, -direction);
    this.currentAcceleration = 0;
    window.setTimeout(function() { self.DoScroll(direction); }, this.scrollSessionInterval);
   }
  },
  ShouldStopScrollSessionAnimation: function() {
   return (Math.abs(this.GetScrolledAreaPosition() - this.startPos) >= Math.abs(this.animationOffset));
  },
  DoScroll: function(direction) {
   if(!this.scrollableArea)
    return;
   if(!this.busy && !this.stopScrolling) {
    if(this.onBeforeScrolling)
     this.onBeforeScrolling(this, -direction);
    if(this.stopScrolling) return;
    this.PrepareForScrollAnimation();
    this.DoScrollSessionAnimation(direction);
   }
  },
  StartScrolling: function(direction, delay, step) {
   this.stopScrolling = false;
   this.animationDelay = delay;
   this.animationStep = step;
   this.DoScroll(-direction);
  },
  StopScrolling: function() {
   this.stopScrolling = true;
  },
  IsStopped: function() {
   return this.stopScrolling;
  },
  IsInProgress: function() {
   return this.busy;
  }
 });
 var MouseScrollingManager = ASPx.CreateClass(ScrollingManager, {
  constructor: function(owner, options) {
   this.mouseEventsElement = options.mouseEventsElement;
   this.preventOuterScroll = options.preventOuterScroll;
   this.enableMouseScrollInternal = true;
   this.constructor.prototype.constructor.call(this, owner, options);
  },
  Initialize: function() {
   ASPx.ScrollingManager.prototype.Initialize.call(this);
   this.initializeMouseScroll();
  },
  initializeMouseScroll: function() {
   this.mouseDown = false;
   this.vx = 0;
   this.prevX = 0;
   this.scrollTime = null;
   this.mouseScrollAcceleration = 0.7;
   this.mouseScrollTimeStep = 30;
   ASPx.Evt.AttachEventToElement(this.mouseEventsElement, ASPx.TouchUIHelper.touchMouseDownEventName, this.startMouseScroll.aspxBind(this));
  },
  scrollToOffset: function(mouseOffset) {
   var newOffset = this.GetScrolledAreaPosition() - mouseOffset;
   if(this.getValidNewScrollOffset)
    newOffset = this.getValidNewScrollOffset(newOffset);
   this.SetScrolledAreaPosition(newOffset);
  },
  preventTextSelectionAndOuterDivScrollOnScroll: function(e) {
   if(this.preventOuterScroll)
    ASPx.Evt.PreventEvent(e);
   ASPx.Selection.Clear();
  },
  mouseScroll: function(e) {
   if(!this.mouseDown) return;
   this.preventTextSelectionAndOuterDivScrollOnScroll(e);
   var x = ASPx.Evt.GetEventX(e),
    dx = this.prevX - x,
    dt = new Date() - this.scrollTime;
   if(dt < 1) dt = 1;
   this.vx = dx / dt;
   this.scrollToOffset(dx);
   this.prevX = x;
   this.scrollTime = new Date();
  },
  startMouseScroll: function(e) {
   if(!this.enableMouseScrollInternal) return;
   this.detachMouseEvents();
   this.mouseMoveHandler = this.mouseScroll.aspxBind(this);
   this.mouseUpHandler = this.stopMouseScroll.aspxBind(this);
   ASPx.Evt.AttachEventToElement(document, ASPx.TouchUIHelper.touchMouseMoveEventName, this.mouseMoveHandler);
   ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseUpEventName, this.mouseUpHandler);
   this.mouseDown = true;
   window.clearTimeout(this.inertialStopTimerId);
   this.prevX = ASPx.Evt.GetEventX(e);
   this.scrollTime = new Date();
  },
  detachMouseEvents: function() {
   ASPx.Evt.DetachEventFromElement(document, ASPx.TouchUIHelper.touchMouseMoveEventName, this.mouseMoveHandler);
   ASPx.Evt.DetachEventFromDocument(ASPx.TouchUIHelper.touchMouseUpEventName, this.mouseUpHandler);
  },
  stopMouseScroll: function() {
   this.detachMouseEvents();
   this.mouseDown = false;
   this.inertialStopTimerId = window.setTimeout(function() {
    this.vx *= this.mouseScrollAcceleration;
    if(Math.abs(this.vx) < 0.1) {
     this.vx = 0;
     if(this.onAfterScrolling)
      this.onAfterScrolling(this);
     return;
    }
    var dx = Math.ceil(this.vx * this.mouseScrollTimeStep);
    this.scrollToOffset(dx);
    this.stopMouseScroll();
   }.aspxBind(this), this.mouseScrollTimeStep);
  }
 });
 ScrollingManager.scrollWrapper = function(scrollableArea, useMarginForPosition) {
  this.scrollableArea = scrollableArea;
  this.useMarginForPosition = useMarginForPosition;
  this.Initialize();
 };
 ScrollingManager.scrollWrapper.prototype = {
  Initialize: function() {
   if(this.useMarginForPosition) {
    this.leftScrollProperty = "margin-left";
    this.topScrollProperty = "margin-top";
   } else {
    this.scrollableArea.style.position = "relative";
    this.scrollableArea.parentNode.style.position = "relative";
    this.leftScrollProperty = "left";
    this.topScrollProperty = "top";
   }
  },
  GetScrollLeft: function() { return ASPx.PxToFloat(this.scrollableArea.style[this.leftScrollProperty]); },
  GetScrollTop: function() { return ASPx.PxToFloat(this.scrollableArea.style[this.topScrollProperty]); },
  SetScrollLeft: function(value) {
   this.scrollableArea.style[this.leftScrollProperty] = value + "px";
  },
  SetScrollTop: function(value) {
   this.scrollableArea.style[this.topScrollProperty] = value + "px";
  }
 };
 ScrollingManager.scrollWrapperTouchUI = function(scrollableArea, onScroll){
  this.scrollableArea = scrollableArea;
  this.scrollTimerId = -1;
  this.onScroll = onScroll;
  this.Initialize(onScroll);
 };
 ScrollingManager.scrollWrapperTouchUI.prototype = {
  Initialize: function(){
   var div = this.scrollableArea.parentNode;
   var timeout = ASPx.Browser.MSTouchUI ? 500 : 1000;
   var nativeScrollSupported = ASPx.TouchUIHelper.nativeScrollingSupported();
   this.onScrollCore = function(){
     ASPx.Timer.ClearTimer(this.scrollTimerId);
     if(this.onScrollLocked) return;
     this.scrollTimerId = window.setTimeout(this.onScrollByTimer, timeout);
    }.aspxBind(this);
   this.onScrollByTimer = function(){
     if(this.onScrollLocked) return;
     var direction = this.lastScrollTop < div.scrollTop ? 1 : -1;
     this.lastScrollTop = div.scrollTop;
     this.onScrollLocked = true;
     this.onScroll(direction);
     this.onScrollLocked = false;
    }.aspxBind(this);
   this.lastScrollTop = div.scrollTop;
   var onscroll = nativeScrollSupported ? this.onScrollCore : this.onScrollByTimer;
   ASPx.Evt.AttachEventToElement(div, "scroll", onscroll);
   if(ASPx.Browser.WebKitTouchUI)
    this.scrollExtender = ASPx.TouchUIHelper.MakeScrollable(div, {showHorizontalScrollbar: false});
  },
  GetScrollLeft: function(){ return -this.scrollableArea.parentNode.scrollLeft; },
  GetScrollTop:  function(){ return -this.scrollableArea.parentNode.scrollTop; },
  SetScrollLeft: function(value){
   this.onScrollLocked = true;
   this.scrollableArea.parentNode.scrollLeft = -value;
   this.onScrollLocked = false;
  },
  SetScrollTop:  function(value){
   this.onScrollLocked = true;
   this.scrollableArea.parentNode.scrollTop  = -value;
   this.onScrollLocked = false;
  }
 };
 ASPx.ScrollingManager = ScrollingManager;
 ASPx.MouseScrollingManager = MouseScrollingManager;
})();
(function() {
var Constants = {
 MIIdSuffix: "_DXI",
 MMIdSuffix: "_DXM",
 SBIdSuffix: "_DXSB",
 SBUIdEnd: "_U",
 SBDIdEnd: "_D",
 ATSIdSuffix: "_ATS",
 SampleCssClassNameForImageElement: "SAMPLE_CSS_CLASS",
 ImagePostfix: "Img",
 PopupImagePostfix: "PImg",
 ItemPopoutElementPostfix: "P",
 ItemContentElementPostfix: "T"
};
var SLIDE_DURATION_VALUE = 300;
var SIDE_MENU_ZINDEX_VALUE = 10000;
var MENU_PREFIX_CLASS_NAME = 'dxm';
var SLIDE_PANEL_EXPANDED_CLASS_NAME = MENU_PREFIX_CLASS_NAME + '-expanded';
var BREAD_CRUMBS_CLASS_NAME = MENU_PREFIX_CLASS_NAME + '-bread-crumbs';
var OVERLAY_PANEL_CLASS_NAME = MENU_PREFIX_CLASS_NAME + '-overlay';
var BURGER_CLASS_NAME = MENU_PREFIX_CLASS_NAME + '-side-menu-button';
var BACK_ICON_CLASS_NAME = MENU_PREFIX_CLASS_NAME + '-back-icon';
var NO_MAIN_POP_OUT_CLASS_NAME = MENU_PREFIX_CLASS_NAME + '-no-main-popout';
var TEMPORARY_VISIBILITY_CLASS_NAME = MENU_PREFIX_CLASS_NAME + '-temp-visibility';
var SIDE_MENU_CLASS_NAME = MENU_PREFIX_CLASS_NAME + '-side-menu-mode';
var PRE_HOVERED_ELEMENT_CLASS_NAME = MENU_PREFIX_CLASS_NAME + '-pre-hovered';
var PRE_SELECTED_ELEMENT_CLASS_NAME = MENU_PREFIX_CLASS_NAME + '-pre-selected';
var MenuItemInfo = ASPx.CreateClass(null, {
 constructor: function(menu, indexPath) {
  var itemElement = menu.GetItemElement(indexPath);
  this.clientHeight = itemElement.clientHeight;
  this.clientWidth = itemElement.clientWidth;
  this.clientTop = ASPx.GetClientTop(itemElement);
  this.clientLeft = ASPx.GetClientLeft(itemElement);
  this.offsetHeight = itemElement.offsetHeight;
  this.offsetWidth = itemElement.offsetWidth;
  this.offsetTop = 0;
  this.offsetLeft = 0;
 }
});
var MenuCssClasses = {};
MenuCssClasses.Prefix = "dxm-";
MenuCssClasses.Menu = "dxmLite";
MenuCssClasses.BorderCorrector = "dxmBrdCor";
MenuCssClasses.Disabled = MenuCssClasses.Prefix + "disabled";
MenuCssClasses.MainMenu = MenuCssClasses.Prefix + "main";
MenuCssClasses.PopupMenu = MenuCssClasses.Prefix + "popup";
MenuCssClasses.ItemTemplate = MenuCssClasses.Prefix + "tmpl";
MenuCssClasses.HorizontalMenu = MenuCssClasses.Prefix + "horizontal";
MenuCssClasses.VerticalMenu = MenuCssClasses.Prefix + "vertical";
MenuCssClasses.NoWrapMenu = MenuCssClasses.Prefix + "noWrap";
MenuCssClasses.AutoWidthMenu = MenuCssClasses.Prefix + "autoWidth";
MenuCssClasses.CalculateMenu = MenuCssClasses.Prefix + "calc";
MenuCssClasses.DX = "dx";
MenuCssClasses.Separator = MenuCssClasses.Prefix + "separator";
MenuCssClasses.Spacing = MenuCssClasses.Prefix + "spacing";
MenuCssClasses.AlignSpacing = MenuCssClasses.Prefix + "alignSpacing";
MenuCssClasses.Gutter = MenuCssClasses.Prefix + "gutter";
MenuCssClasses.WithoutImages = MenuCssClasses.Prefix + "noImages";
MenuCssClasses.Item = MenuCssClasses.Prefix + "item";
MenuCssClasses.ItemHovered = MenuCssClasses.Prefix + "hovered";
MenuCssClasses.ItemSelected = MenuCssClasses.Prefix + "selected";
MenuCssClasses.ItemChecked = MenuCssClasses.Prefix + "checked";
MenuCssClasses.ItemWithoutImage = MenuCssClasses.Prefix + "noImage";
MenuCssClasses.ItemWithSubMenu = MenuCssClasses.Prefix + "subMenu";
MenuCssClasses.ItemDropDownMode = MenuCssClasses.Prefix + "dropDownMode";
MenuCssClasses.ItemWithoutSubMenu = MenuCssClasses.Prefix + "noSubMenu";
MenuCssClasses.AdaptiveMenuItem = MenuCssClasses.Prefix + "ami";
MenuCssClasses.AdaptiveMenuItemSpacing = MenuCssClasses.Prefix + "amis";
MenuCssClasses.AdaptiveMenu = MenuCssClasses.Prefix + "am";
MenuCssClasses.AdaptiveMenuHiddenElement = MenuCssClasses.Prefix + "amhe";
MenuCssClasses.ContentContainer = MenuCssClasses.Prefix + "content";
MenuCssClasses.ContentContainerWithVerticalAlignment = MenuCssClasses.Prefix + "valign";
MenuCssClasses.Image = MenuCssClasses.Prefix + "image";
MenuCssClasses.PopOutContainer = MenuCssClasses.Prefix + "popOut";
MenuCssClasses.PopOutImage = MenuCssClasses.Prefix + "pImage";
MenuCssClasses.ImageLeft = MenuCssClasses.Prefix + "image-l";
MenuCssClasses.ImageRight = MenuCssClasses.Prefix + "image-r";
MenuCssClasses.ImageTop = MenuCssClasses.Prefix + "image-t";
MenuCssClasses.ImageBottom = MenuCssClasses.Prefix + "image-b";
MenuCssClasses.ScrollArea = MenuCssClasses.Prefix + "scrollArea";
MenuCssClasses.ScrollUpButton = MenuCssClasses.Prefix + "scrollUpBtn";
MenuCssClasses.ScrollDownButton = MenuCssClasses.Prefix + "scrollDownBtn";
MenuCssClasses.ItemClearElement = MenuCssClasses.DX + "-clear";
MenuCssClasses.ItemTextElement = MenuCssClasses.Prefix + "contentText";
MenuCssClasses.SmallImage = MenuCssClasses.DX + "-small-image";
var MenuRenderHelper = ASPx.CreateClass(null, {
 constructor: function(menu) {
  this.menu = menu;
  this.itemLinkMode = "ContentBounds";
  this.elementsToHide = [];
 },
 InlineInitializeElements: function() {
  if(!this.menu.isPopupMenu)
   this.InlineInitializeMainMenuElements(this.menu.GetMainElement());
  else
   this.InlineInitializePopupMenuElements(this.menu.GetMainElement());
  var popupMenuElements = this.GetPopupMenuElements(this.menu.GetMainElement());
  for(var i = 0; i < popupMenuElements.length; i++) {
   if(popupMenuElements[i] == this.menu.GetMainElement()) continue;
   this.InlineInitializePopupMenuElements(popupMenuElements[i]);
  }
 },
 InlineInitializeSubMenuElements: function(parentItemIndexPath) {
  var popupMenuElements = this.GetPopupMenuElements(this.menu.GetMainElement());
  for(var i = 0; i < popupMenuElements.length; i++) {
   if(popupMenuElements[i].id.indexOf(Constants.MMIdSuffix + parentItemIndexPath + "_") > 0)
    this.InlineInitializePopupMenuElements(popupMenuElements[i]);
  }
 },
 InlineInitializeScrollElements: function(indexPath, menuElement) {
  var scrollArea = ASPx.GetNodeByClassName(menuElement, MenuCssClasses.ScrollArea);
  if(scrollArea) scrollArea.id = this.menu.GetScrollAreaId(indexPath);
  this.InitializeScrollButton(menuElement, MenuCssClasses.ScrollUpButton, this.menu.GetScrollUpButtonId(indexPath));
  this.InitializeScrollButton(menuElement, MenuCssClasses.ScrollDownButton, this.menu.GetScrollDownButtonId(indexPath));
 },
 InitializeScrollButton: function(menuElement, buttonClassName, id) {
  var scrollButton = ASPx.GetNodeByClassName(menuElement, buttonClassName);
  if(!scrollButton) return;
  scrollButton.id = id;
  if(this.menu.NeedCreateItemsOnClientSide()) {
   ASPx.GetStateController().AddHoverItem(id, ["dxm-scrollBtnHovered"], [""]);
   ASPx.GetStateController().AddPressedItem(id, ["dxm-scrollBtnPressed"], [""]);
  }
 },
 InlineInitializeMainMenuElements: function(menuElement) {
  this.menu.CheckElementsCache(menuElement);
  var contentElement = this.GetContentElement(menuElement);
  if(contentElement.className.indexOf("dxm-ti") > 1)
   this.itemLinkMode = "TextAndImage";
  else if(contentElement.className.indexOf("dxm-t") > -1)
   this.itemLinkMode = "TextOnly";
  var itemElements = this.GetItemElements(menuElement);
  for(var i = 0; i < itemElements.length; i++)
   this.InlineInitializeItemElement(itemElements[i], "", i);
  this.InlineInitializeScrollElements("", menuElement);
 },
 InlineInitializePopupMenuElements: function(parentElement) {
  parentElement.style.position = "absolute";
  var indexPath = this.GetSubMenuIndexPathByMenuParentElement(parentElement);
  var borderCorrectorElement = ASPx.GetNodeByClassName(parentElement, MenuCssClasses.BorderCorrector);
  if(borderCorrectorElement != null) {
   borderCorrectorElement.id = this.menu.GetMenuBorderCorrectorElementId(indexPath);
   borderCorrectorElement.style.position = "absolute";
   parentElement.removeChild(borderCorrectorElement);
   parentElement.parentNode.appendChild(borderCorrectorElement);
  }
  this.InlineInitializePopupMenuMenuElement(parentElement, indexPath);
 },
 GetSubMenuIndexPathByMenuParentElement: function(element){
  return this.menu.GetMenuIndexPathById(element.id);
 },
 InlineInitializePopupMenuMenuElement: function(parentElement, indexPath) {
  var menuElement = ASPx.GetNodeByClassName(parentElement, MenuCssClasses.PopupMenu);
  menuElement.id = this.menu.GetMenuMainElementId(indexPath);
  this.InlineInitializePopupMenuContentElements(parentElement, menuElement, indexPath);
 },
 InlineInitializePopupMenuContentElements: function(parentElement, menuElement, indexPath) {
  this.menu.CheckElementsCache(menuElement);
  var contentElement = this.GetContentElement(menuElement);
  if(contentElement != null) {
   var itemElements = this.GetItemElements(menuElement);
   var parentIndexPath = parentElement == this.menu.GetMainElement() ? "" : indexPath;
   for(var i = 0; i < itemElements.length; i++) {
    var itemElementId = itemElements[i].id;
    if(itemElementId && aspxGetMenuCollection().GetMenu(itemElementId) != this.menu)
     continue;
    this.InlineInitializeItemElement(itemElements[i], parentIndexPath, i);
   }
  }
  this.InlineInitializeScrollElements(indexPath, menuElement);
 },
 HasSubMenuTemplate: function(menuElement) {
  var contentElement = this.GetContentElement(menuElement);
  return contentElement && (contentElement.tagName != "UL" || !ASPx.GetNodesByPartialClassName(contentElement, MenuCssClasses.ContentContainer).length);
 },
 InlineInitializeItemElement: function(itemElement, parentIndexPath, visibleIndex) {
  function getItemIndex(visibleIndex) {
   var itemData = parentItemData[Math.max(visibleIndex, 0)];
   return itemData.constructor == Array
    ? itemData[0]
    : itemData;
  }
  var parentItemData = this.menu.renderData[parentIndexPath],
   prepareItemOnClick = parentItemData[visibleIndex].constructor == Array,
   indexPathPrefix = parentIndexPath + (parentIndexPath != "" ? ASPx.ItemIndexSeparator : ""),
   indexPath = indexPathPrefix + getItemIndex(visibleIndex);
  itemElement.id = this.menu.GetItemElementId(indexPath);
  if(this.canAssignAccessibilityEventsToChildrenLinks())
   ASPx.AssignAccessibilityEventsToChildrenLinks(itemElement, true);
  if(this.canContainSeparators()) {
   var separatorElement = itemElement.previousSibling;
   if(separatorElement && separatorElement.className) {
    if(ASPx.ElementContainsCssClass(separatorElement, MenuCssClasses.Spacing))
     separatorElement.id = this.menu.GetItemIndentElementId(indexPath);
    else if(ASPx.ElementContainsCssClass(separatorElement, MenuCssClasses.Separator))
     separatorElement.id = this.menu.GetItemSeparatorElementId(indexPath);
   }
  }
  var contentElement = this.GetItemContentElement(itemElement);
  if(contentElement != null) {
   contentElement.id = this.menu.GetItemContentElementId(indexPath);
   if (this.canContainImageElement()) {
    var imageElement = ASPx.GetNodeByClassName(contentElement, MenuCssClasses.Image);
    if(imageElement == null) {
     var hyperLinkElement = ASPx.GetNodeByClassName(contentElement, MenuCssClasses.DX);
     if(hyperLinkElement != null)
      imageElement = ASPx.GetNodeByClassName(hyperLinkElement, MenuCssClasses.Image);
    }
    if(imageElement != null)
     imageElement.id = this.menu.GetItemImageId(indexPath);
   }
  }
  else
   prepareItemOnClick = false;
  this.InlineInitializeItemPopOutElement(itemElement, indexPath);
  if(prepareItemOnClick)
   this.InlineInitializeItemOnClick(itemElement, indexPath);
  if(ASPx.ElementContainsCssClass(itemElement, MenuCssClasses.ItemSelected))
   this.menu.serverSideSelectedItemPath = indexPath;
 },
 canAssignAccessibilityEventsToChildrenLinks: function () { return true; },
 canContainSeparators: function () { return true; },
 canContainImageElement: function () { return true; },
 InlineInitializeItemPopOutElement: function(itemElement, indexPath) {
  var popOutElement = this.GetItemPopOutElement(itemElement);
  if(popOutElement != null) {
   popOutElement.id = this.menu.GetItemPopOutElementId(indexPath);
   var popOutImageElement = ASPx.GetNodeByClassName(popOutElement, MenuCssClasses.PopOutImage);
   if(popOutImageElement != null)
    popOutImageElement.id = this.menu.GetItemPopOutImageId(indexPath);
  }
 },
 InlineInitializeItemOnClick: function(itemElement, indexPath) {
  var name = this.menu.name;
  var onclick = this.GetItemOnClick(name, itemElement, indexPath);
  if(this.menu.IsDropDownItem(indexPath)) {
   var contentElement = this.menu.GetItemContentElement(indexPath);
   var dropDownElement = this.menu.GetItemPopOutElement(indexPath);
   var dropDownOnclick = this.GetItemDropdownOnClick(name, itemElement, indexPath);
   this.AssignItemOnClickToElement(contentElement, this.itemLinkMode, onclick);
   this.AssignItemOnClickToElement(dropDownElement, this.itemLinkMode, dropDownOnclick);
  }
  else
   this.AssignItemOnClickToElement(itemElement, this.itemLinkMode, onclick);
 },
 AssignItemOnClickToElement: function(element, itemLinkMode, method) {
  switch(itemLinkMode){
   case "ContentBounds":
    this.AssignItemOnClickToElementCore(element, method);
    break;
   case "TextOnly":
    var textElement = ASPx.GetNodeByTagName(element, "A");
    if(!textElement)
     textElement = ASPx.GetNodeByTagName(element, "SPAN");
    if(textElement)
     this.AssignItemOnClickToElementCore(textElement, method);
    break;
   case "TextAndImage":
    var linkElement = ASPx.GetNodeByTagName(element, "A");
    if(linkElement)
     this.AssignItemOnClickToElementCore(linkElement, method);
    else{
     var textElement = ASPx.GetNodeByTagName(element, "SPAN");
     if(textElement)
      this.AssignItemOnClickToElementCore(textElement, method);
     var imageElement = ASPx.GetNodeByTagName(element, "IMG");
     if(imageElement)
      this.AssignItemOnClickToElementCore(imageElement, method);
    }
    break;
  }
 },
 AssignItemOnClickToElementCore: function(element, method) {
  ASPx.Evt.AttachEventToElement(element, "click", method);
 },
 GetItemOnClick: function(name, itemElement, indexPath) {
  var menu = this.menu;
  var sendPostBackHandler = function() {
   menu.SendPostBack("CLICK:" + indexPath);
  };
  var itemClickHandler = function(e) {
   ASPx.MIClick(e, name, indexPath);
  };
  var itemLink = this.GetItemLinkElement(itemElement);
  var handler = menu.autoPostBack && !menu.IsClientSideEventsAssigned() && (!itemLink || itemLink.href === "")
   ? sendPostBackHandler
   : itemClickHandler;
  return function(e) {
   if(!itemElement.clientDisabled)
    handler(e);
  };
 },
 GetItemDropdownOnClick: function(name, itemElement, indexPath) {
  return function(e) {
   if(!itemElement.clientDisabled)
    ASPx.MIDDClick(e, name, indexPath);
  };
 },
 ChangeItemEnabledAttributes: function(itemElement, enabled, accessibilityCompliant) {
  if(!itemElement) return;
  itemElement.clientDisabled = !enabled;
  ASPx.Attr.ChangeStyleAttributesMethod(enabled)(itemElement, "cursor");
  var hyperLink = this.GetItemLinkElement(itemElement);
  if(hyperLink)
   this.ChangeItemLinkEnabledAttributes(hyperLink, itemElement, enabled, accessibilityCompliant);
 },
 ChangeItemLinkEnabledAttributes: function(hyperLink, itemElement, enabled, accessibilityCompliant) {
  if(accessibilityCompliant) {
   var action = enabled ? ASPx.Attr.RemoveAttribute : ASPx.Attr.SetAttribute;
   action(hyperLink, "aria-disabled", "true");
  }
  ASPx.Attr.ChangeAttributesMethod(enabled)(hyperLink, "href");
  if(accessibilityCompliant && !enabled && itemElement.enabled)
   hyperLink.href = ASPx.AccessibilityEmptyUrl;
 },
 GetPopupMenuElements: function(menuElement) {
  return ASPx.GetChildNodesByTagName(menuElement.parentNode, "DIV");
 },
 GetContentElement: function(menuElement) {
  return ASPx.CacheHelper.GetCachedElement(this, "contentElement",
   function() {
    var contentElement = ASPx.GetNodeByTagName(menuElement, "DIV", 0);
    if(contentElement && contentElement.className == MenuCssClasses.DX && contentElement.parentNode == menuElement)
     return contentElement;
    contentElement = ASPx.GetNodeByTagName(menuElement, "UL", 0);
    if(contentElement)
     return contentElement;
    return ASPx.GetNodeByTagName(menuElement, "TABLE", 0);
   }, menuElement);
 },
 GetItemElements: function(menuElement) {
  return ASPx.CacheHelper.GetCachedElements(this, "itemElements",
   function() {
    var contentElement = this.GetContentElement(menuElement);
    return contentElement ? ASPx.GetNodesByClassName(contentElement, MenuCssClasses.Item) : null;
   }, menuElement);
 },
 GetSpacingElements: function(menuElement) {
  return ASPx.CacheHelper.GetCachedElements(this, "spacingElements",
   function() {
    var contentElement = this.GetContentElement(menuElement);
    return contentElement ? ASPx.GetNodesByClassName(contentElement, MenuCssClasses.Spacing) : null;
   }, menuElement);
 },
 GetAlignSpacingElements: function(menuElement) {
  return ASPx.CacheHelper.GetCachedElements(this, "alignSpacingElements",
   function() {
    var contentElement = this.GetContentElement(menuElement);
    return contentElement ? ASPx.GetNodesByClassName(contentElement, MenuCssClasses.AlignSpacing) : null;
   }, menuElement);
 },
 GetSeparatorElements: function(menuElement) {
  return ASPx.CacheHelper.GetCachedElements(this, "separatorElements",
   function() {
    var contentElement = this.GetContentElement(menuElement);
    return contentElement ? ASPx.GetNodesByClassName(contentElement, MenuCssClasses.Separator) : null;
   }, menuElement);
 },
 GetItemContentElement: function(itemElement) {
  return ASPx.CacheHelper.GetCachedElement(this, "contentElement",
   function() {
    return ASPx.GetNodeByClassName(itemElement, MenuCssClasses.ContentContainer);
   }, itemElement);
 },
 GetItemPopOutElement: function(itemElement) {
  return ASPx.CacheHelper.GetCachedElement(this, "popOutElement",
   function() {
    return ASPx.GetNodeByClassName(itemElement, MenuCssClasses.PopOutContainer);
   }, itemElement);
 },
 GetAdaptiveMenuItemElement: function(menuElement) {
  return ASPx.CacheHelper.GetCachedElement(this, "adaptiveMenuItemElement",
   function() {
    var contentElement = this.GetContentElement(menuElement);
    return contentElement ? ASPx.GetNodeByClassName(contentElement, this.menu.getAdaptiveMenuItemCssClass()) : null;
   }, menuElement);
 },
 GetAdaptiveMenuItemSpacingElement: function(menuElement) {
  return ASPx.CacheHelper.GetCachedElement(this, "adaptiveMenuItemSpacingElement",
   function() {
    var contentElement = this.GetContentElement(menuElement);
    return contentElement ? ASPx.GetNodeByClassName(contentElement, this.menu.getAdaptiveMenuItemSpacingCssClass()) : null;
   }, menuElement);
 },
 GetAdaptiveMenuElement: function(menuElement) {
  return ASPx.CacheHelper.GetCachedElement(this, "adaptiveMenuElement",
   function() {
    var adaptiveItemElement = this.GetAdaptiveMenuItemElement(menuElement);
    if(adaptiveItemElement){
     var adaptiveItemIndexPath = this.menu.GetIndexPathById(adaptiveItemElement.id);
     var adaptiveMenuParentElement = this.menu.GetMenuElement(adaptiveItemIndexPath);
     if(adaptiveMenuParentElement)
      return this.menu.GetMenuMainElement(adaptiveMenuParentElement);
    }
    return null;
   }, menuElement);
 },
 GetAdaptiveMenuContentElement: function(menuElement) {
  return ASPx.CacheHelper.GetCachedElement(this, "adaptiveMenuContentElement",
   function() {
    var adaptiveMenuElement = this.GetAdaptiveMenuElement(menuElement);
    return adaptiveMenuElement ? this.GetContentElement(adaptiveMenuElement) : null;
   }, menuElement);
 },
 GetItemLinkElement: function(itemElement) {
  return ASPx.GetNodeByTagName(itemElement, "A", 0);
 },
 CalculateMenuControl: function(menuElement, recalculate) {
  if(menuElement.offsetWidth === 0) return;
  this.PrecalculateMenuPopOuts(menuElement);
  var isVertical = this.menu.IsVertical("");
  var isAutoWidth = ASPx.ElementContainsCssClass(menuElement, MenuCssClasses.AutoWidthMenu);
  var isNoWrap = ASPx.ElementContainsCssClass(menuElement, MenuCssClasses.NoWrapMenu);
  var contentElement = this.GetContentElement(menuElement);
  if(this.menu.enableAdaptivity)
   this.CalculateAdaptiveMainMenu(menuElement, contentElement, isVertical, isAutoWidth, isNoWrap, recalculate);
  else
   this.CalculateMainMenu(menuElement, contentElement, isVertical, isAutoWidth, isNoWrap, recalculate);
 },
 CalculateMainMenu: function(menuElement, contentElement, isVertical, isAutoWidth, isNoWrap, recalculate) {
  var itemElements = this.GetItemElements(menuElement);
  this.PrecalculateMenuItems(menuElement, itemElements, recalculate);
  this.CalculateMenuItemsAutoWidth(menuElement, itemElements, isVertical, isAutoWidth);
  this.CalculateMinSize(menuElement, contentElement, itemElements, isVertical, isAutoWidth, isNoWrap, recalculate);
  this.CalculateMenuItems(menuElement, contentElement, itemElements, isVertical, recalculate);
  this.CalculateSeparatorsAndSpacers(menuElement, itemElements, contentElement, isVertical);
 },
 PrecalculateMenuPopOuts: function(menuElement) {
  if(menuElement.popOutsPreCalculated) return;
  var elements = this.GetItemElements(menuElement);
  for(var i = 0; i < elements.length; i++) {
   var popOutElement = this.GetItemPopOutElement(elements[i]);
   if (popOutElement)
    popOutElement.style.display = "block";
  }
  menuElement.popOutsPreCalculated = true;
 },
 PrecalculateMenuItems: function(menuElement, itemElements, recalculate) {
  if(!recalculate) return;
  for(var i = 0; i < itemElements.length; i++) {
   var itemContentElement = this.GetItemContentElement(itemElements[i]);
   if(!itemContentElement || itemContentElement.offsetWidth === 0) continue;
   ASPx.SetElementFloat(itemContentElement, "");
   ASPx.Attr.RestoreStyleAttribute(itemContentElement, "padding-left");
   ASPx.Attr.RestoreStyleAttribute(itemContentElement, "padding-right");
     this.ReCalculateMenuItemContent(itemElements[i], itemContentElement);
  }
 },
 ReCalculateMenuItemContent: function(itemElement, itemContentElement) {
  for(var j = 0; j < itemElement.childNodes.length; j++) {
   var child = itemElement.childNodes[j];
   if(!child.offsetWidth) continue;
   if(child !== itemContentElement) {
    if(ASPx.Browser.IE && ASPx.Browser.Version == 8)
     ASPx.Attr.RestoreStyleAttribute(child, "margin");
    else{
     ASPx.Attr.RestoreStyleAttribute(child, "margin-top");
     ASPx.Attr.RestoreStyleAttribute(child, "margin-bottom");
    }
   }
  }
 },
 CalculateMenuItemsAutoWidth: function(menuElement, itemElements, isVertical, isAutoWidth) {
  if(!isAutoWidth) return;
  for(var i = 0; i < itemElements.length; i++)
   ASPx.Attr.RestoreStyleAttribute(itemElements[i], "width");
  if(!isVertical) {
   var autoWidthItemCount = 0;
   var adaptiveItemCssClass = this.menu.getAdaptiveMenuItemCssClass();
   for(var i = 0; i < itemElements.length; i++) {
    if(ASPx.GetElementDisplay(itemElements[i]) && !ASPx.ElementHasCssClass(itemElements[i], adaptiveItemCssClass))
     autoWidthItemCount++;
   }
   for(var i = 0; i < itemElements.length; i++) {
    if(autoWidthItemCount > 0 && !ASPx.ElementHasCssClass(itemElements[i], adaptiveItemCssClass) && (itemElements[i].style.width === "" || itemElements[i].autoWidth)) {
     ASPx.Attr.ChangeStyleAttribute(itemElements[i], "width", (100 / autoWidthItemCount) + "%");
     itemElements[i].autoWidth = true;
    }
   }
  }
 },
 CalculateMenuItems: function(menuElement, contentElement, itemElements, isVertical, recalculate) {
  if(contentElement.itemsCalculated && recalculate)
   contentElement.itemsCalculated = false;
  if(menuElement.offsetWidth === 0) return;
  if(contentElement.style.margin === "0px auto")
   ASPx.SetStyles(contentElement, { float: "none" });
  var menuWidth = ASPx.GetCurrentStyle(menuElement).width;
  var menuRequireItemCorrection = isVertical && menuWidth;
  this.ApplyItemsVerticalAlignment(menuElement, itemElements);
  for(var i = 0; i < itemElements.length; i++) {
   if(!itemElements[i].style.width && !menuRequireItemCorrection) continue;
   if(ASPx.IsPercentageSize(itemElements[i].style.width) && contentElement.style.width === "")
    contentElement.style.width = "100%";
   var itemContentElement = this.GetItemContentElement(itemElements[i]);
   if(!itemContentElement || itemContentElement.offsetWidth === 0) continue;
   if(!contentElement.itemsCalculated) {
    ASPx.Attr.RestoreStyleAttribute(itemContentElement, "padding-left");
    ASPx.Attr.RestoreStyleAttribute(itemContentElement, "padding-right");
    ASPx.SetElementFloat(itemContentElement, "none");
    var itemContentCurrentStyle = ASPx.GetCurrentStyle(itemContentElement);
    if(!isVertical || (itemContentCurrentStyle.textAlign != "center" && menuWidth)) {
     var originalPaddingLeft = parseInt(itemContentCurrentStyle.paddingLeft);
     var originalPaddingRight = parseInt(itemContentCurrentStyle.paddingRight);
     var leftChildrenWidth = 0, rightChildrenWidth = 0;
     for(var j = 0; j < itemElements[i].childNodes.length; j++) {
      var child = itemElements[i].childNodes[j];
      if(!child.offsetWidth) continue;
      if(child !== itemContentElement) {
       if(ASPx.GetElementFloat(child) === "right")
        rightChildrenWidth += child.offsetWidth + ASPx.GetLeftRightMargins(child);
       else if(ASPx.GetElementFloat(child) === "left")
        leftChildrenWidth += child.offsetWidth + ASPx.GetLeftRightMargins(child);
      }
     }
     if(leftChildrenWidth > 0 || rightChildrenWidth > 0){
      ASPx.Attr.ChangeStyleAttribute(itemContentElement, "padding-left", (leftChildrenWidth + originalPaddingLeft) + "px");
      ASPx.Attr.ChangeStyleAttribute(itemContentElement, "padding-right", (rightChildrenWidth + originalPaddingRight) + "px");
     }
    }
   }
   ASPx.AdjustWrappedTextInContainer(itemContentElement);
   this.CalculateMenuItemContent(itemElements[i], itemContentElement);
  }
  contentElement.itemsCalculated = true;
 },
 ApplyItemsVerticalAlignment: function(menuElement, itemElements) {
  var menuAlignmentInProgressClassName = "miva";
  ASPx.AddClassNameToElement(menuElement, menuAlignmentInProgressClassName);
  if(!ASPx.IsExists(itemElements))
   itemElements = this.GetItemElements(menuElement);
  for(var i = 0; i < itemElements.length; i++) {
   var itemContentElement = this.GetItemContentElement(itemElements[i]);
   if(itemContentElement && itemContentElement.offsetWidth !== 0 && itemContentElement.style.verticalAlign) {
    this.CalculateItemContentLineHeight(itemElements[i], itemContentElement);
    ASPx.RemoveClassNameFromElement(itemContentElement, MenuCssClasses.ContentContainerWithVerticalAlignment);
   }
  }
  ASPx.RemoveClassNameFromElement(menuElement, menuAlignmentInProgressClassName);
 },
 CalculateItemContentLineHeight: function(itemElement, itemContentElement) {
  var lineHeight = 0;
  var maxHeight = itemElement.getBoundingClientRect().height - this.GetBordersAndPaddingSummaryHeight(itemElement);
  if(itemContentElement && itemContentElement.offsetHeight != maxHeight)
   lineHeight = maxHeight - this.GetBordersAndPaddingSummaryHeight(itemContentElement);
  if(lineHeight > 0) {
   var link = this.GetItemLinkElement(itemElement);
   if(link)
    ASPx.SetStyles(link, { lineHeight: lineHeight }, false);
   else
    ASPx.SetStyles(itemContentElement, { lineHeight: lineHeight }, false);
  }
 },
 GetBordersAndPaddingSummaryHeight: function(element) {
  var elementStyle = getComputedStyle(element);
  return ASPx.GetVerticalBordersWidth(element, elementStyle) + ASPx.PxToFloat(elementStyle.paddingTop) + ASPx.PxToFloat(elementStyle.paddingBottom);
 },
 CalculateMenuItemContent: function(itemElement, itemContentElement) {
  var itemContentFound = false;
  for(var j = 0; j < itemElement.childNodes.length; j++) {
   var child = itemElement.childNodes[j];
   if(!child.offsetWidth) continue;
   var contentHeight = itemContentElement.offsetHeight;
   if(child !== itemContentElement) {
    if(itemContentFound){
     if(ASPx.Browser.IE && ASPx.Browser.Version == 8)
      ASPx.Attr.ChangeStyleAttribute(child, "margin", "-" + contentHeight + "px 0 0");
     else
      ASPx.Attr.ChangeStyleAttribute(child, "margin-top", "-" + contentHeight + "px");
    }
    else{
     if(ASPx.Browser.IE && ASPx.Browser.Version == 8)
      ASPx.Attr.ChangeStyleAttribute(child, "margin", "0 0 -" + contentHeight + "px");
     else
      ASPx.Attr.ChangeStyleAttribute(child, "margin-bottom", "-" + contentHeight + "px");
    }
   }
   else
    itemContentFound = true;
  }
 },
 CalculateSubMenu: function(parentElement, recalculate) {
  var menuElement = this.menu.GetMenuMainElement(parentElement);
  var contentElement = this.GetContentElement(menuElement);
  if(!parentElement.isSubMenuCalculated || recalculate) {
   menuElement.style.width = "";
   menuElement.style.display = "table";
   menuElement.style.borderSpacing = "0px";
   parentElement.isSubMenuCalculated = true;
   if(contentElement.tagName === "UL") {
    if(contentElement.offsetWidth > 0) {
     if(ASPx.Browser.IE && ASPx.ElementHasCssClass(menuElement, this.menu.getAdaptiveMenuCssClass()))
      menuElement.style.width = "0px";
     menuElement.style.width = contentElement.offsetWidth + "px";
     menuElement.style.display = "";
     if(ASPx.IsPercentageSize(contentElement.style.width))
      contentElement.style.width = menuElement.style.width;
    }
    else
     parentElement.isSubMenuCalculated = false;
   }
  }
  this.CalculateSubMenuItems(menuElement, contentElement, recalculate);
 },
 CalculateSubMenuItems: function(menuElement, contentElement, recalculate) {
  var itemElements = this.GetItemElements(menuElement);
  this.PrecalculateMenuItems(menuElement, itemElements, recalculate);
  this.CalculateMenuItems(menuElement, contentElement, itemElements, true, recalculate);
 },
 ResetMinSize: function() {
  var menuElement = this.menu.GetMainElement();
  if(!menuElement.isMinSizeCalculated || this.menu.isVertical) return;
  var itemElements = this.GetItemElements(menuElement);
  var contentElement = this.GetContentElement(menuElement);
  if(!!contentElement.adaptiveInfo)
   itemElements = itemElements.concat(contentElement.adaptiveInfo.elements);
  for(var i = 0; i < itemElements.length; i++)
   this.ResetItemMinSize(itemElements[i]);
  menuElement.isMinSizeCalculated = false;
 },
 ResetItemMinSize: function(itemElement) {
  itemElement.style.minWidth = "";
  itemElement.isMinSizeCalculated = false;
 },
 CalculateMinSize: function(menuElement, contentElement, itemElements, isVertical, isAutoWidth, isNoWrap, recalculate) {
  if(menuElement.isMinSizeCalculated && !recalculate) return;
  if(isVertical) {
   menuElement.style.minWidth = "";
   if(!this.menu.IsSidePanelExpanded()) {
    ASPx.Attr.ChangeStyleAttribute(contentElement, "width", "1px");
    for(var i = 0; i < itemElements.length; i++) {
     var itemContentElement = this.GetItemContentElement(itemElements[i]);
     if(!itemContentElement || itemElements[i].offsetWidth === 0) continue;
     this.CalculateItemMinSize(itemElements[i], recalculate);
    }
    ASPx.Attr.RestoreStyleAttribute(contentElement, "width");
   }
  }
  else {
   ASPx.RemoveClassNameFromElement(menuElement, MenuCssClasses.NoWrapMenu);
   ASPx.RemoveClassNameFromElement(menuElement, MenuCssClasses.AutoWidthMenu);
   if(isAutoWidth || isNoWrap)
    menuElement.style.minWidth = "";
   ASPx.Attr.ChangeStyleAttribute(menuElement, "width", "1px");
   for(var i = 0; i < itemElements.length; i++) {
    var itemContentElement = this.GetItemContentElement(itemElements[i]);
    if((!itemContentElement || itemElements[i].offsetWidth === 0) && !ASPx.ElementHasCssClass(itemElements[i], MenuCssClasses.ItemTemplate)) continue;
    var textContainer = ASPx.GetNodeByTagName(itemContentElement, "SPAN", 0);
    if(textContainer && ASPx.GetCurrentStyle(textContainer).whiteSpace !== "nowrap")
     ASPx.AdjustWrappedTextInContainer(itemContentElement);
    this.CalculateItemMinSize(itemElements[i], recalculate);
   }
   if(isAutoWidth)
    ASPx.AddClassNameToElement(menuElement, MenuCssClasses.AutoWidthMenu);
   if(isNoWrap)
    ASPx.AddClassNameToElement(menuElement, MenuCssClasses.NoWrapMenu);
   if(isAutoWidth || isNoWrap)
    menuElement.style.minWidth = (contentElement.offsetWidth + ASPx.GetLeftRightBordersAndPaddingsSummaryValue(menuElement)) + "px";
   ASPx.Attr.RestoreStyleAttribute(menuElement, "width");
  }
  menuElement.isMinSizeCalculated = true;
 },
 CalculateItemMinSize: function(itemElement, recalculate) {
  if(itemElement.isMinSizeCalculated && !recalculate) return;
  var sizeCorrection = ASPx.Browser.HardwareAcceleration ? 1 : 0;
  itemElement.style.minWidth = "";
  var childrenWidth = 0;
  if(ASPx.ElementHasCssClass(itemElement, MenuCssClasses.ItemTemplate)) {
   ASPx.Attr.ChangeStyleAttribute(itemElement, "display", "table");
   childrenWidth += itemElement.clientWidth + sizeCorrection;
   ASPx.Attr.RestoreStyleAttribute(itemElement, "display");
   if(ASPx.Browser.Edge && ASPx.Browser.MajorVersion >= 16)
    var dummy = itemElement.clientWidth;
  }
  else {
   for(var j = 0; j < itemElement.childNodes.length; j++) {
    var child = itemElement.childNodes[j];
    if(!child.offsetWidth) continue;
    var float = ASPx.GetElementFloat(child);
    if(float === "none") {
     childrenWidth = child.offsetWidth;
     break;
    }
    else
     childrenWidth += child.offsetWidth + sizeCorrection;
   }
  }
  itemElement.style.minWidth = childrenWidth + "px";
  itemElement.isMinSizeCalculated = true;
 },
 CalculateSeparatorsAndSpacers: function(menuElement, itemElements, contentElement, isVertical, isAutoWidth, isNoWrap) {
  var spacerElements = this.GetSpacingElements(menuElement);
  var spacerAndSeparatorElements = spacerElements.concat(this.GetSeparatorElements(menuElement));
  for(var i = 0; i < spacerAndSeparatorElements.length; i++) {
   ASPx.Attr.RestoreStyleAttribute(spacerAndSeparatorElements[i], "height");
   if(ASPx.Browser.Edge) {
    var savedDisplay = spacerAndSeparatorElements[i].style.display;
    spacerAndSeparatorElements[i].style.display = "none";
    var temp = spacerAndSeparatorElements[i].offsetHeight;
    spacerAndSeparatorElements[i].style.display = savedDisplay;
   }
  }
  if(!isVertical && itemElements) {
   var menuHeight = 0;
   if(!isAutoWidth && !isNoWrap) {
    for(var i=0; i < itemElements.length; i++) {
     var newHeight = itemElements[i].getBoundingClientRect().height;
     if(newHeight > menuHeight)
      menuHeight = newHeight;
    }
   }
   for(var i = 0; i < spacerAndSeparatorElements.length; i++){
    var separatorHeight = menuHeight - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(spacerAndSeparatorElements[i]) - ASPx.GetTopBottomMargins(spacerAndSeparatorElements[i]);
    ASPx.Attr.ChangeStyleAttribute(spacerAndSeparatorElements[i], "height", separatorHeight + "px");
   }
   for(var i = 0; i < spacerElements.length; i++){
    if(!ASPx.ElementContainsCssClass(spacerElements[i], this.menu.getAdaptiveMenuItemSpacingCssClass()))
     spacerElements[i].style.minWidth = spacerElements[i].style.width;
   }
   this.calculateAlignSpacings(menuElement, contentElement);
  }
 },
 calculateAlignSpacings: function(menuElement, contentElement) {
  var separatorElements = this.GetAlignSpacingElements(menuElement),
   separatorsCount = separatorElements.length;
  if(separatorsCount === 0) return;
  ASPx.Data.ForEach(separatorElements, function(separator) {
   separator.style.width = "0";
  });
  var unit = this.menu.enableAdaptivity ? "%" : "px";
  var width = this.menu.enableAdaptivity ? 100 / separatorsCount :
   (ASPx.GetClearClientWidth(menuElement) - contentElement.offsetWidth) / separatorsCount;
  ASPx.Data.ForEach(separatorElements, function(separator) {
   separator.style.width = width + unit;
  });
  if(!this.menu.enableAdaptivity)
   separatorElements[0].style.width = (width - 1) + unit;
 },
 CalculateAdaptiveMainMenu: function(menuElement, contentElement, isVertical, isAutoWidth, isNoWrap, recalculate) {
  var adaptiveItemElement = this.GetAdaptiveMenuItemElement(menuElement);
  if(!adaptiveItemElement) return;
  var adaptiveItemSpacing = this.GetAdaptiveMenuItemSpacingElement(menuElement);
  if(adaptiveItemSpacing) adaptiveItemSpacing.style.width = "";
  var adaptiveMenuElement = this.GetAdaptiveMenuElement(menuElement);
  if(!adaptiveMenuElement) return;
  var adaptiveMenuContentElement = this.GetAdaptiveMenuContentElement(menuElement);
  if(!contentElement.adaptiveInfo)
   this.InitAdaptiveInfo(contentElement);
  var wasAdaptivity = contentElement.adaptiveInfo.hasAdaptivity;
  if(wasAdaptivity) {
   var previousSibling = this.GetAdaptiveItemElementPreviousSibling(adaptiveItemSpacing || adaptiveItemElement);
   this.RestoreAdaptiveItems(previousSibling, contentElement, isVertical);
  }
  if(!isVertical) {
   ASPx.SetElementDisplay(adaptiveItemElement, true);
   if(adaptiveItemSpacing) ASPx.SetElementDisplay(adaptiveItemSpacing, true);
   ASPx.AddClassNameToElement(menuElement, MenuCssClasses.CalculateMenu);
   ASPx.RemoveClassNameFromElement(menuElement, MenuCssClasses.NoWrapMenu);
   menuElement.style.minWidth = "";
   var adaptiveItemWidth = adaptiveItemElement.offsetWidth;
   if(isAutoWidth) {
    ASPx.Attr.ChangeStyleAttribute(contentElement, "display", "none");
    ASPx.Attr.ChangeStyleAttribute(menuElement, "min-width", "");
   }
   var menuWidth = menuElement.offsetWidth - ASPx.GetLeftRightBordersAndPaddingsSummaryValue(menuElement) - adaptiveItemWidth;
   if(isAutoWidth) {
    ASPx.Attr.RestoreStyleAttribute(contentElement, "display");
    ASPx.Attr.RestoreStyleAttribute(menuElement, "min-width");
   }
   var additionalWidth = adaptiveItemWidth;
   if(adaptiveItemSpacing) {
    menuWidth -= adaptiveItemSpacing.offsetWidth;
    additionalWidth += adaptiveItemSpacing.offsetWidth;
   }
   var hasAdaptivity = this.HideAdaptiveItems(menuWidth, additionalWidth, contentElement, adaptiveMenuContentElement);
   contentElement.adaptiveInfo.hasAdaptivity = hasAdaptivity;
   this.SetAdaptiveItemElementVisibility(adaptiveItemElement, adaptiveItemSpacing, hasAdaptivity);
   contentElement.style.width = hasAdaptivity ? "100%" : "";
   if(hasAdaptivity){
    ASPx.CacheHelper.DropCache(adaptiveMenuElement);
    this.CalculateSubMenu(adaptiveMenuElement, true);
    this.CalculateSeparatorsAndSpacers(adaptiveMenuElement, null, adaptiveMenuContentElement, true);
   }
   if(isNoWrap) {
    ASPx.AddClassNameToElement(menuElement, MenuCssClasses.NoWrapMenu);
    if(adaptiveItemSpacing) adaptiveItemSpacing.style.width = hasAdaptivity ? "100%" : "";
   }
   ASPx.RemoveClassNameFromElement(menuElement, MenuCssClasses.CalculateMenu);
  }
  else {
   this.SetAdaptiveItemElementVisibility(adaptiveItemElement, adaptiveItemSpacing, false);
  }
  if(wasAdaptivity || contentElement.adaptiveInfo.hasAdaptivity)
   ASPx.CacheHelper.DropCache(menuElement);
  this.CalculateMainMenu(menuElement, contentElement, isVertical, isAutoWidth, isNoWrap, wasAdaptivity || contentElement.adaptiveInfo.hasAdaptivity || recalculate);
 },
 InitAdaptiveInfo: function(contentElement) {
  if(contentElement.adaptiveInfo) return;
  contentElement.adaptiveInfo = { };
  contentElement.adaptiveInfo.elements = this.CreateAdaptiveElementsArray(contentElement);
  contentElement.adaptiveInfo.hasAdaptivity = false;
 },
 GetAdaptiveItemElementByIndex: function(adaptiveInfo, index) {
  return adaptiveInfo.elements[index];
 },
 GetAdaptiveItemElementParent: function(adaptiveInfo, index) {
  return undefined;
 },
 GetAdaptiveItemElementPreviousSibling: function(defaultPreviousSibling) {
  return defaultPreviousSibling;
 },
 RestoreAdaptiveItems: function(previousSibling, contentElement, isVertical) {
  this.SetLastSeparatorsVisible(true, contentElement);
  for(var i = 0; i < contentElement.adaptiveInfo.elements.length; i++) {
   var element = this.GetAdaptiveItemElementByIndex(contentElement.adaptiveInfo, i);
   if(ASPx.Browser.IE)
    ASPx.RemoveElement(element);
   var isReplacedIndent = !element.parent;
   if(isReplacedIndent)
    ASPx.RemoveElement(ASPx.GetElementById(element.id));
   var itemParentElement = this.GetAdaptiveItemElementParent(contentElement.adaptiveInfo, i) || contentElement;
   itemParentElement.insertBefore(element, previousSibling);
   ASPx.Attr.RestoreStyleAttribute(element, "width");
   if(!isVertical)
    this.SetItemItemPopOutImageHorizontal(element);
   if(ASPx.ElementContainsCssClass(element, MenuCssClasses.Separator) || ASPx.ElementContainsCssClass(element, MenuCssClasses.Spacing))
    ASPx.RemoveClassNameFromElement(element, MenuCssClasses.AdaptiveMenuHiddenElement);
  }
  if(this.menu.GetRootItem()) {
   for(var i = this.elementsToHide.length - 1; i >= 0; i--) {
    if(!this.elementsToHide[i]) continue;
    var indexPath = this.elementsToHide[i].indexPath;
    if(this.menu.GetItemByIndexPath(indexPath).GetVisible())
     this.menu.UpdateItemCssClasses(indexPath, true);
    this.elementsToHide[i] = null;
   }
  }
  this.elementsToHide = [];
 },
 SetLastSeparatorsVisible: function(isVisible, contentElement) {
  var elements = ASPx.GetChildElementNodes(contentElement);
  for(var i = 0; i < elements.length; i++) {
   var element = elements[i];
   if(ASPx.ElementContainsCssClass(element, MenuCssClasses.Separator) || ASPx.ElementContainsCssClass(element, MenuCssClasses.Spacing))
    ASPx.RemoveClassNameFromElement(element, MenuCssClasses.AdaptiveMenuHiddenElement);
   else
    break;
  }
 },
 CreateAdaptiveElementsArray: function(contentElement) {
  var result = [];
  var elements = ASPx.GetChildElementNodes(contentElement);
  for(var i = 0; i < elements.length; i++) {
   if(this.CheckElementIsAdaptive(elements[i]))
    result.push(elements[i]);
  }
  return result;
 },
 SetItemItemPopOutImageHorizontal: function(element) {
  var popOutElements = ASPx.GetNodesByPartialClassName(element, "dxWeb_mVerticalPopOut");
  for(var i = 0; i < popOutElements.length; i++)
   popOutElements[i].className = popOutElements[i].className.replace("Vertical", "Horizontal");
 },
 CheckElementIsAdaptive: function(element) {
  return !ASPx.ElementHasCssClass(element, this.menu.getAdaptiveMenuItemCssClass()) && !ASPx.ElementHasCssClass(element, this.menu.getAdaptiveMenuItemSpacingCssClass());
 },
 CheckAdaptiveItemsWidth: function(contentElement, menuWidth, additionalWidth) {
  var itemsWidth = 0;
  var elements = ASPx.GetChildElementNodes(contentElement);
  for(var i = 0; i < elements.length; i++) {
   var element = elements[i];
   if(this.CheckElementIsAdaptive(element) && element.offsetWidth > 0)
    itemsWidth += this.GetAdaptiveElementWidth(element);
   if(itemsWidth > menuWidth + additionalWidth)
    return false;
  }
  return true;
 },
 GetAdaptiveElementWidth: function(element) {
  return element.style.minWidth !== "" ? parseInt(element.style.minWidth) + ASPx.GetHorizontalBordersWidth(element) : element.offsetWidth;
 },
 HideAdaptiveItems: function(menuWidth, additionalWidth, contentElement, adaptiveMenuContentElement) {
  if(this.CheckAdaptiveItemsWidth(contentElement, menuWidth, additionalWidth))
   return false;
  this.elementsToHide = [];
  var elementsToHide = this.elementsToHide;
  var adaptiveItemSpacingCssClass = this.menu.getAdaptiveMenuItemSpacingCssClass();
  var addToHide = function(index, indexPath, itemElement, separatorElement, indentElement, insteadSeparatorElement) {
   if(!itemElement) return;
   if(separatorElement && ASPx.ElementHasCssClass(separatorElement, adaptiveItemSpacingCssClass))
    separatorElement = null;
   if(indentElement && ASPx.ElementHasCssClass(indentElement, adaptiveItemSpacingCssClass))
    indentElement = null;
   elementsToHide[index] = { indexPath: indexPath, itemElement: itemElement, separatorElement: separatorElement, indentElement: indentElement, insteadSeparatorElement: insteadSeparatorElement };
   ASPx.Attr.ChangeStyleAttribute(itemElement, "display", "none");
   if(separatorElement) {
    var elementForHide = insteadSeparatorElement || separatorElement;
    ASPx.Attr.ChangeStyleAttribute(elementForHide, "display", "none");
   }
   if(indentElement)
    ASPx.Attr.ChangeStyleAttribute(indentElement, "display", "none");
  };
  for(var i = 0; i < this.menu.adaptiveItemsOrder.length; i++){
   var indexPath = this.menu.adaptiveItemsOrder[i],
    index = parseInt(indexPath, 10),
    itemToKeepSeparator = this.menu.GetRootItem() ? this.GetItemForKeepSeparator(index) : null,
    insteadSeparatorElement = itemToKeepSeparator ? this.menu.GetItemIndentElement(itemToKeepSeparator.indexPath) : null;
   addToHide(index, indexPath, this.menu.GetItemElement(indexPath), this.menu.GetItemSeparatorElement(indexPath), this.menu.GetItemIndentElement(indexPath), insteadSeparatorElement);
   var actualAdditionalWidth = this.NeedShowAdaptiveItemForHiddenElements(elementsToHide) ? 0 : additionalWidth;
   if(this.CheckAdaptiveItemsWidth(contentElement, menuWidth, actualAdditionalWidth))
    break;
  }
  var hasImages = false;
  for(var i = 0; i < elementsToHide.length; i++) {
   if(!elementsToHide[i]) continue;
   ASPx.Attr.RestoreStyleAttribute(elementsToHide[i].itemElement, "display");
   if(elementsToHide[i].separatorElement) {
    var elementForRestore = elementsToHide[i].insteadSeparatorElement || elementsToHide[i].separatorElement;
    ASPx.Attr.RestoreStyleAttribute(elementForRestore, "display");
   }
   if(elementsToHide[i].indentElement)
    ASPx.Attr.RestoreStyleAttribute(elementsToHide[i].indentElement, "display");
   this.menu.UpdateItemCssClasses(elementsToHide[i].indexPath, false);
   if(elementsToHide[i].separatorElement) {
    if(this.menu.GetRootItem())
     this.KeepSeparatorInRoot(i);
    adaptiveMenuContentElement.appendChild(elementsToHide[i].separatorElement);
   }
   else if(this.menu.GetRootItem())
    this.InsertSeparatorInAdaptiveMenu(i, elementsToHide[i].indexPath);
   if(elementsToHide[i].indentElement)
    adaptiveMenuContentElement.appendChild(elementsToHide[i].indentElement);
   adaptiveMenuContentElement.appendChild(elementsToHide[i].itemElement);
   this.PrepareHiddenAdaptiveItemElement(elementsToHide[i].itemElement);
   if(ASPx.GetNodeByClassName(elementsToHide[i].itemElement, "dxm-image"))
    hasImages = true;
  }
  for(var i = 0; i < elementsToHide.length; i++) {
   if(!elementsToHide[i]) continue;
   if(elementsToHide[i].separatorElement)
    ASPx.AddClassNameToElement(elementsToHide[i].separatorElement, MenuCssClasses.AdaptiveMenuHiddenElement);
   if(elementsToHide[i].indentElement)
    ASPx.AddClassNameToElement(elementsToHide[i].indentElement, MenuCssClasses.AdaptiveMenuHiddenElement);
   break;
  }
  this.SetLastSeparatorsVisible(false, contentElement);
  this.PrepareAdaptiveMenuContentElement(adaptiveMenuContentElement, hasImages);
  return elementsToHide.length > 0;
 },
 PrepareHiddenAdaptiveItemElement: function(itemElement) {
  ASPx.Attr.ChangeStyleAttribute(itemElement, "width", "auto");
  this.SetItemPopOutImageVertical(itemElement);
 },
 PrepareAdaptiveMenuContentElement: function(contentElement, hasImages) {
  if(hasImages)
   ASPx.RemoveClassNameFromElement(contentElement, MenuCssClasses.WithoutImages);
  else
   ASPx.AddClassNameToElement(contentElement, MenuCssClasses.WithoutImages);
 },
 SetAdaptiveItemElementVisibility: function(adaptiveItemElement, adaptiveItemSpacing, visible) {
  ASPx.SetElementDisplay(adaptiveItemElement, visible);
  if(adaptiveItemSpacing)
   ASPx.SetElementDisplay(adaptiveItemSpacing, visible);
 },
 NeedShowAdaptiveItemForHiddenElements: function(elementsToHide) {
  return true;
 },
 KeepSeparatorInRoot: function(index) {
  var nextItemInGroup = this.GetItemForKeepSeparator(index);
  if(nextItemInGroup) {
   var separatorElement = this.elementsToHide[index].separatorElement;
   this.ReplaceIndentElement(nextItemInGroup.indexPath, separatorElement);
  }
 },
 InsertSeparatorInAdaptiveMenu: function(index, indexPath) {
  var itemWithSeparator = this.GetItemWithSeparatorForAdaptiveMenu(index);
  if(itemWithSeparator) {
   var separatorElement = this.menu.GetItemSeparatorElement(itemWithSeparator.indexPath);
   if(!separatorElement) return;
   this.elementsToHide[index].indentElement = this.ReplaceIndentElement(indexPath, separatorElement);
  }
 },
 ReplaceIndentElement: function(indexPath, separatorElement) {
  var itemElement = this.menu.GetItemElement(indexPath),
   itemIndent = this.menu.GetItemIndentElement(indexPath),
   newIndentElement = separatorElement.cloneNode(true),
   parentNode = itemElement.parentNode;
  newIndentElement.id = this.menu.GetItemIndentElementId(indexPath);
  if(itemIndent)
   itemIndent.parentNode.removeChild(itemIndent);
  parentNode.insertBefore(newIndentElement, itemElement);
  return newIndentElement;
 },
 GetItemForKeepSeparator: function(index) {
  var rootItem = this.menu.GetRootItem(),
   nextItemInGroup = this.menu.GetNextVisibleItemInGroup(rootItem, index, true);
  if(nextItemInGroup && this.IsItemInAdaptiveMenu(nextItemInGroup.index)) {
   while(nextItemInGroup && this.IsItemInAdaptiveMenu(nextItemInGroup.index))
    nextItemInGroup = this.menu.GetNextVisibleItemInGroup(rootItem, nextItemInGroup.index, true);
  }
  return nextItemInGroup;
 },
 GetItemWithSeparatorForAdaptiveMenu: function(index) {
  var rootItem = this.menu.GetRootItem(),
   prevItemInGroup = this.menu.GetPrevVisibleItemInGroup(rootItem, index);
  if(prevItemInGroup && !this.IsItemInAdaptiveMenu(prevItemInGroup.index) && !this.menu.IsItemBeginsGroup(prevItemInGroup)) {
   while(prevItemInGroup && !this.IsItemInAdaptiveMenu(prevItemInGroup.index) && !this.menu.IsItemBeginsGroup(prevItemInGroup))
    prevItemInGroup = this.menu.GetPrevVisibleItemInGroup(rootItem, prevItemInGroup.index);
  }
  return prevItemInGroup && !this.IsItemInAdaptiveMenu(prevItemInGroup.index) ? prevItemInGroup : null;
 },
 IsItemInAdaptiveMenu: function(index) {
  return this.elementsToHide.length >= index ? !!this.elementsToHide[index] : false;
 },
 SetItemPopOutImageVertical: function(element) {
  var popOutElements = ASPx.GetNodesByPartialClassName(element, "dxWeb_mHorizontalPopOut");
  for(var i = 0; i < popOutElements.length; i++)
   popOutElements[i].className = popOutElements[i].className.replace("Horizontal", "Vertical");
 },
 ChangeItemsPopOutImages: function(menuElement, isVertical) {
  var itemElements = this.GetItemElements(menuElement);
  for(var i = 0; i < itemElements.length; i++){
   if(isVertical)
    this.SetItemPopOutImageVertical(itemElements[i]);
   else
    this.SetItemItemPopOutImageHorizontal(itemElements[i]);
  }
 },
 ChangeOrientaion: function(menuElement, isVertical) {
  var oldCssSelector = isVertical ? MenuCssClasses.HorizontalMenu : MenuCssClasses.VerticalMenu;
  var newCssSelector = isVertical ? MenuCssClasses.VerticalMenu : MenuCssClasses.HorizontalMenu;
  menuElement.className = menuElement.className.replace(oldCssSelector, newCssSelector);
  this.ChangeItemsPopOutImages(menuElement, isVertical);
  this.CalculateMenuControl(menuElement, true);
  this.ChangeItemsPopOutImages(menuElement, isVertical);
 }
});
var MenuScrollingManager = ASPx.CreateClass(ASPx.ScrollingManager, {
 constructor: function(menuScrollHelper) {
  this.constructor.prototype.constructor.call(this, menuScrollHelper, {
   scrollableArea: menuScrollHelper.scrollingAreaElement,
   orientation: [0, 1],
   onBeforeScrolling: function(manager, direction) {
    manager.owner.OnBeforeScrolling(direction);
   },
   onAfterScrolling: function(manager, direction) {
    manager.owner.OnAfterScrolling(direction);
   },
   forseEmulation: false,
   useMarginForPosition: true,
   handleMouseWheel: menuScrollHelper.handleMouseWheel
  });
 },
 setParentNodeOverflow: function() {
  if(ASPx.Browser.MSTouchUI) {
   this.scrollableArea.parentNode.style.overflow = "auto";
   this.scrollableArea.parentNode.style["-ms-overflow-style"] = "none";
  }
 }
});
var MenuScrollHelper = ASPx.CreateClass(null, {
 constructor: function(menu, indexPath) {
  this.menu = menu;
  this.indexPath = indexPath;
  this.scrollingAreaElement = null;
  this.manager = null;
  this.initialized = false;
  this.visibleItems = [];
  this.itemsHeight = 0;
  this.scrollHeight = 0;
  this.scrollUpButtonHeight = 0;
  this.scrollDownButtonHeight = 0;
  this.scrollAreaHeight = null;
  this.scrollUpButtonVisible = false;
  this.scrollDownButtonVisible = false;
  this.handleMouseWheel = true;
 },
 Initialize: function() {
  if(this.initialized && !this.menu.NeedCreateItemsOnClientSide()) return;
  this.scrollingAreaElement = this.menu.GetScrollContentItemsContainer(this.indexPath);
  this.manager = new MenuScrollingManager(this);
  this.ShowScrollButtons();
  var scrollUpButton = this.menu.GetScrollUpButtonElement(this.indexPath);
  if(scrollUpButton) {
   this.scrollUpButtonHeight = this.GetScrollButtonHeight(scrollUpButton);
   ASPx.Selection.SetElementSelectionEnabled(scrollUpButton, false);
  }
  var scrollDownButton = this.menu.GetScrollDownButtonElement(this.indexPath);
  if(scrollDownButton) {
   this.scrollDownButtonHeight = this.GetScrollButtonHeight(scrollDownButton);
   ASPx.Selection.SetElementSelectionEnabled(scrollDownButton, false);
  }
  if(ASPx.Browser.WebKitTouchUI) {
   var preventDefault = function(event) { event.preventDefault(); };
   ASPx.Evt.AttachEventToElement(scrollUpButton, "touchstart", preventDefault);
   ASPx.Evt.AttachEventToElement(scrollDownButton, "touchstart", preventDefault);
  }
  this.HideScrollButtons();
  this.initialized = true;
 },
 GetScrollButtonHeight: function(button) {
  var style = ASPx.GetCurrentStyle(button);
  return button.offsetHeight + ASPx.PxToInt(style.marginTop) + ASPx.PxToInt(style.marginBottom);
 },
 FillVisibleItemsList: function() {
  var index = 0;
  this.visibleItems = [];
  while(true) {
   var childIndexPath = (this.indexPath != "" ? this.indexPath + ASPx.ItemIndexSeparator : "") + index;
   var itemElement = this.menu.GetItemElement(childIndexPath);
   if(itemElement == null)
    break;
   if(ASPx.GetElementDisplay(itemElement))
    this.visibleItems.push(itemElement);
   index++;
  }
 },
 CanCalculate: function() {
  return this.scrollingAreaElement && ASPx.IsElementDisplayed(this.scrollingAreaElement);
 },
 Calculate: function(scrollHeight) {
  if(!this.CanCalculate()) return;
  this.FillVisibleItemsList();
  this.itemsHeight = 0;
  this.scrollHeight = scrollHeight;
  var itemsContainer = this.menu.GetScrollContentItemsContainer(this.indexPath);
  if(itemsContainer) this.itemsHeight = itemsContainer.offsetHeight;
  this.SetPosition(0);
  this.CalculateScrollingElements(-1);
 },
 GetPosition: function() {
  return -this.manager.GetScrolledAreaPosition();
 },
 SetPosition: function(pos) {
  this.manager.SetScrolledAreaPosition(-pos);
 },
 CalculateScrollingElements: function(direction) {
  if(this.itemsHeight <= this.scrollHeight) {
   this.scrollUpButtonVisible = false;
   this.scrollDownButtonVisible = false;
   this.scrollAreaHeight = null;
   this.SetPosition(0);
  }
  else {
   var scrollTop = this.GetPosition();
   this.scrollAreaHeight = this.scrollHeight;
   if(direction > 0) {
    var showScrollUpButton = !this.scrollUpButtonVisible;
    this.scrollUpButtonVisible = true;
    this.scrollAreaHeight -= this.scrollUpButtonHeight;
    this.scrollDownButtonVisible = this.itemsHeight - this.scrollAreaHeight - scrollTop > this.scrollDownButtonHeight;
    if(this.scrollDownButtonVisible) {
     this.scrollAreaHeight -= this.scrollDownButtonHeight;
     if(showScrollUpButton)
      this.SetPosition(this.GetPosition() + this.scrollUpButtonHeight);
    }
    else {
     this.SetPosition(this.itemsHeight - this.scrollAreaHeight);
    }
   }
   else {
    this.scrollDownButtonVisible = true;
    this.scrollAreaHeight -= this.scrollDownButtonHeight;
    this.scrollUpButtonVisible = scrollTop > this.scrollUpButtonHeight;
    if(this.scrollUpButtonVisible)
     this.scrollAreaHeight -= this.scrollUpButtonHeight;
    else
     this.SetPosition(0);
   }
   if(this.scrollAreaHeight < 1) this.scrollAreaHeight = 1;
  }
  this.UpdateScrollingElements();
 },
 UpdateScrollingElements: function() {
  this.UpdateScrollAreaHeight();
  this.UpdateScrollButtonsVisibility();
 },
 UpdateScrollAreaHeight: function() {
  var scrollAreaElement = this.menu.GetScrollAreaElement(this.indexPath);
  if(scrollAreaElement)
   scrollAreaElement.style.height = (this.scrollAreaHeight) ? (this.scrollAreaHeight + "px") : "";
 },
 UpdateScrollButtonsVisibility: function() {
  var scrollUpButton = this.menu.GetScrollUpButtonElement(this.indexPath);
  if(scrollUpButton) ASPx.SetElementDisplay(scrollUpButton, this.scrollUpButtonVisible);
  var scrollDownButton = this.menu.GetScrollDownButtonElement(this.indexPath);
  if(scrollDownButton) ASPx.SetElementDisplay(scrollDownButton, this.scrollDownButtonVisible);
 },
 ChangeScrollButtonsVisibility: function(visible) {
  this.scrollUpButtonVisible = visible;
  this.scrollDownButtonVisible = visible;
  this.UpdateScrollButtonsVisibility();
 },
 ShowScrollButtons: function() {
  this.ChangeScrollButtonsVisibility(true);
 },
 HideScrollButtons: function() {
  this.ChangeScrollButtonsVisibility(false);
 },
 ResetScrolling: function() {
  if(!this.initialized)
   return;
  this.HideScrollButtons();
  this.SetPosition(0);
  this.scrollAreaHeight = null;
  this.UpdateScrollAreaHeight();
 },
 GetScrollAreaHeight: function() {
  var scrollAreaElement = this.menu.GetScrollAreaElement(this.indexPath);
  if(scrollAreaElement)
   return scrollAreaElement.offsetHeight;
  return 0;
 },
 OnAfterScrolling: function(direction) {
  this.CalculateScrollingElements(direction);
 },
 OnBeforeScrolling: function(direction) {
  var scrollButton = (direction > 0) ? this.menu.GetScrollDownButtonElement(this.indexPath) :
   this.menu.GetScrollUpButtonElement(this.indexPath);
  if(!scrollButton || !ASPx.GetElementDisplay(scrollButton))
   this.manager.StopScrolling();
 },
 StartScrolling: function(direction, delay, step) {
  this.manager.StartScrolling(direction, delay, step);
 },
 StopScrolling: function() {
  this.manager.StopScrolling();
 }
});
MenuScrollHelper.GetMenuByScrollButtonId = function(id) {
 var menuName = aspxGetMenuCollection().GetMenuNameBySuffixes(id, [Constants.SBIdSuffix]);
 return aspxGetMenuCollection().Get(menuName);
};
var ASPxClientMenuBase = ASPx.CreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.renderData = null;
  this.renderHelper = this.CreateRenderHelper();
  this.sampleItemsFlags = {
   TextOnly: 0,
   SubItems: 1,
   Image: 2,
   NavigateUrl: 4,
   DropDownMode: 8,
   CheckBox: 16,
   ImageClassName: 32,
   Svg: 64
  };
  this.rootMenuSample = null;
  this.dropElementsCache = false;
  this.allowSelectItem = false;
  this.allowCheckItems = false;
  this.allowMultipleCallbacks = false;
  this.appearAfter = 300;
  this.slideAnimationDuration = 60;
  this.disappearAfter = 500;
  this.enableAnimation = true;
  this.enableAdaptivity = false;
  this.adaptiveItemsOrder = [];
  this.enableSubMenuFullWidth = false;
  this.checkedItems = [];
  this.isVertical = true;
  this.itemCheckedGroups = [];
  this.itemCheckedGroups.groupNames = {};
  this.lockHoverEvents = false;
  this.popupToLeft = false;
  this.popupCount = 0;
  this.rootItem = null;
  this.showSubMenus = false;
  this.savedCallbackHoverItem = null;
  this.savedCallbackHoverElement = null;
  this.selectedItemIndexPath = "";
  this.checkedState = null;
  this.scrollInfo = [];
  this.scrollHelpers = {};
  this.scrollVertOffset = 1;
  this.keyboardHelper = null;
  this.isContextMenu = false;
  this.accessibleFocusElement = null;
  this.rootSubMenuFIXOffset = 0;
  this.rootSubMenuFIYOffset = 0;
  this.rootSubMenuLIXOffset = 0;
  this.rootSubMenuLIYOffset = 0;
  this.rootSubMenuXOffset = 0;
  this.rootSubMenuYOffset = 0;
  this.subMenuFIXOffset = 0;
  this.subMenuFIYOffset = 0;
  this.subMenuLIXOffset = 0;
  this.subMenuLIYOffset = 0;
  this.subMenuXOffset = 0;
  this.subMenuYOffset = 0;
  this.maxHorizontalOverlap = -3;
  this.sizingConfig.allowSetHeight = false;
  this.ItemClick = new ASPxClientEvent();
  this.ItemMouseOver = new ASPxClientEvent();
  this.ItemMouseOut = new ASPxClientEvent();
  this.PopUp = new ASPxClientEvent();
  this.CloseUp = new ASPxClientEvent();
  aspxGetMenuCollection().Add(this);
 },
 SetData: function(data) {
  if(data.items)
   this.CreateItems(data.items);
 },
 InlineInitialize: function() {
  ASPxClientControl.prototype.InlineInitialize.call(this);
  if(!this.NeedCreateItemsOnClientSide())
   this.renderHelper.InlineInitializeElements();
  else
   this.renderHelper.InlineInitializeScrollElements("", this.GetMainElement());
  this.InitializeInternal(true);
  if(this.IsCallbacksEnabled()) {
   this.showSubMenus = this.GetLoadingPanelElement() != null;
   this.CreateCallback("DXMENUCONTENT");
  }
  else
   this.showSubMenus = true;
  this.popupToLeft = this.rtl;
 },
 InitializeInternal: function(inline) {
  if(!this.NeedCreateItemsOnClientSide()) {
   this.InitializeCheckedItems();
   this.InitializeSelectedItem();
  }
  this.InitializeEnabledAndVisible(!inline || !this.IsCallbacksEnabled());
  if(!this.IsCallbacksEnabled())
   this.InitializeScrollableMenus();
  this.InitializeKeyboardHelper();
 },
 InitializeEnabledAndVisible: function(recursive) {
  if(this.rootItem == null) return;
  for(var i = 0; i < this.rootItem.items.length; i++)
   this.rootItem.items[i].InitializeEnabledAndVisible(recursive);
 },
 InitializeScrollableMenus: function() {
  var info = eval(this.scrollInfo);
  this.scrollHelpers = {};
  for(var i = 0; i < info.length; i++)
   this.InitializeScrollableMenu(info[i]);
 },
 InitializeScrollableMenu: function(indexPath) {
  if(!this.scrollHelpers[indexPath])
   this.scrollHelpers[indexPath] = new MenuScrollHelper(this, indexPath);
 },
 GetScrollHelper: function(indexPath) {
  var scrollsEnabledOnServer = this.scrollInfo.length > 0;
  if(this.NeedCreateItemsOnClientSide() && scrollsEnabledOnServer)
   this.InitializeScrollableMenu(indexPath);
  return this.scrollHelpers[indexPath];
 },
 InitializeKeyboardHelper: function() {
  this.keyboardHelper = new ASPxMenuKeyboardHelper(this);
 },
 InitializeMenuSamples: function() {
  this.rootMenuSample = this.GetSampleNode(this.samples.root);
  this.samples.spacing = this.GetSampleNode(this.samples.spacing);
  this.samples.separator = this.GetSampleNode(this.samples.separator);
  this.InitializeItemsSamples(this.samples.rootItems);
  if(this.samples.submenu) {
   this.samples.submenu = this.GetSampleNode(this.samples.submenu);
   this.InitializeItemsSamples(this.samples.submenuItems);
  }
 },
 InitializeItemsSamples: function(itemsSamples) {
  for(var sampleProperty in itemsSamples) {
   if(itemsSamples.hasOwnProperty(sampleProperty)) {
    itemsSamples[sampleProperty] = itemsSamples[sampleProperty].replace(/DXFAKE/, "");
    itemsSamples[sampleProperty] = this.GetSampleNode(itemsSamples[sampleProperty]);
   }
  }
 },
 CheckElementsCache: function(menuElement){
  if(this.dropElementsCache) {
   ASPx.CacheHelper.DropCache(menuElement);
   this.dropElementsCache = false;
  }
 },
 NeedCreateItemsOnClientSide: function() {
  return false;
 },
 IsClientSideEventsAssigned: function() {
  return !this.ItemClick.IsEmpty()
   || !this.ItemMouseOver.IsEmpty()
   || !this.ItemMouseOut.IsEmpty()
   || !this.PopUp.IsEmpty()
   || !this.CloseUp.IsEmpty()
   || !this.Init.IsEmpty();
 },
 IsCallbacksEnabled: function() {
  return ASPx.IsFunction(this.callBack);
 },
 ShouldHideExistingLoadingElements: function() {
  return false;
 },
 CreateRenderHelper: function(){
  return new MenuRenderHelper(this);
 },
 IsSidePanelExpanded: function() {
  return false;
 },
 GetMenuElementId: function(indexPath) {
  return this.name + Constants.MMIdSuffix + indexPath + "_";
 },
 GetMenuMainElementId: function(indexPath) {
  return this.name + "_DXME" + indexPath + "_";
 },
 GetMenuBorderCorrectorElementId: function(indexPath) {
  return this.name + "_DXMBC" + indexPath + "_";
 },
 GetMenuIFrameElementId: function(indexPath) {
  return this.name + "_DXMIF" + this.GetMenuLevel(indexPath);
 },
 GetScrollAreaId: function(indexPath) {
  return this.name + "_DXSA" + indexPath;
 },
 GetMenuTemplateContainerID: function(indexPath) {
  return this.name + "_MTCNT" + indexPath;
 },
 GetItemTemplateContainerID: function(indexPath) {
  return this.name + "_ITCNT" + indexPath;
 },
 GetScrollUpButtonId: function(indexPath) {
  return this.name + Constants.SBIdSuffix + indexPath + Constants.SBUIdEnd;
 },
 GetScrollDownButtonId: function(indexPath) {
  return this.name + Constants.SBIdSuffix + indexPath + Constants.SBDIdEnd;
 },
 GetItemElementId: function(indexPath) {
  return this.name + Constants.MIIdSuffix + indexPath + "_";
 },
 GetItemContentElementId: function(indexPath) {
  return this.GetItemElementId(indexPath) + Constants.ItemContentElementPostfix;
 },
 GetItemPopOutElementId: function(indexPath) {
  return this.GetItemElementId(indexPath) + Constants.ItemPopoutElementPostfix;
 },
 GetItemImageId: function(indexPath) {
  return this.GetItemElementId(indexPath) + Constants.ImagePostfix;
 },
 GetItemPopOutImageId: function(indexPath) {
  return this.GetItemElementId(indexPath) + Constants.PopupImagePostfix;
 },
 GetItemIndentElementId: function(indexPath) {
  return this.GetItemElementId(indexPath) + "II";
 },
 GetItemSeparatorElementId: function(indexPath) {
  return this.GetItemElementId(indexPath) + "IS";
 },
 GetMenuElement: function (indexPath) {
  if(indexPath == "")
   return this.GetMainElement();
  return ASPx.CacheHelper.GetCachedElementById(this, this.GetMenuElementId(indexPath));
 },
 GetMenuIFrameElement: function(indexPath) {
  var elementId = this.GetMenuIFrameElementId(indexPath);
  var element = ASPx.GetElementById(elementId);
  if(!element && this.renderIFrameForPopupElements)
   return this.CreateIFrameElement(elementId);
  return element;
 },
 CreateIFrameElement: function(elementId) {
  var element = document.createElement("IFRAME");
  ASPx.Attr.SetAttribute(element, "id", elementId);
  ASPx.Attr.SetAttribute(element, "src", "javascript:false");
  ASPx.Attr.SetAttribute(element, "scrolling", "no");
  ASPx.Attr.SetAttribute(element, "frameborder", "0");
  if(this.accessibilityCompliant)
   ASPx.Attr.SetAttribute(element, "title", ASPx.AccessibilitySR.AccessibilityIFrameTitle);
  element.style.position = "absolute";
  element.style.display = "none";
  element.style.zIndex = "19997";
  element.style.filter = "progid:DXImageTransform.Microsoft.Alpha(Style=0, Opacity=0)";
  ASPx.InsertElementAfter(element, this.GetMainElement());
  return element;
 },
 GetMenuBorderCorrectorElement: function(indexPath) {
  return ASPx.CacheHelper.GetCachedElementById(this, this.GetMenuBorderCorrectorElementId(indexPath));
 },
 GetMenuMainElement: function(element) {
  var indexPath = this.GetIndexPathById(element.id, true);
  return ASPx.CacheHelper.GetCachedElement(this, "menuMainElement" + indexPath,
   function() {
    var shadowTable = ASPx.GetElementById(this.GetMenuMainElementId(indexPath));
    return shadowTable != null ? shadowTable : element;
   });
 },
 GetScrollAreaElement: function(indexPath) {
  return ASPx.CacheHelper.GetCachedElementById(this, this.GetScrollAreaId(indexPath));
 },
 GetScrollContentItemsContainer: function(indexPath) {
  return ASPx.CacheHelper.GetCachedElement(this, "scrollContentItemsContainer" + indexPath,
   function() {
    return ASPx.GetNodeByTagName(this.GetScrollAreaElement(indexPath), "UL", 0);
   });
 },
 GetScrollUpButtonElement: function(indexPath) {
  return ASPx.CacheHelper.GetCachedElementById(this, this.GetScrollUpButtonId(indexPath));
 },
 GetScrollDownButtonElement: function(indexPath) {
  return ASPx.CacheHelper.GetCachedElementById(this, this.GetScrollDownButtonId(indexPath));
 },
 GetItemElement: function(indexPath) {
  return ASPx.CacheHelper.GetCachedElementById(this, this.GetItemElementId(indexPath));
 },
 GetItemTemplateElement: function(indexPath) {
  return this.GetItemTextTemplateContainer(indexPath);
 },
 GetItemTemplateContainer: function(indexPath) {
  return this.GetItemElement(indexPath);
 },
 GetItemTextTemplateContainer: function(indexPath) {
  return this.GetItemContentElement(indexPath);
 },
 GetItemContentElement: function(indexPath) {
  return ASPx.CacheHelper.GetCachedElementById(this, this.GetItemContentElementId(indexPath));
 },
 GetItemPopOutElement: function(indexPath) {
  return ASPx.CacheHelper.GetCachedElementById(this, this.GetItemPopOutElementId(indexPath));
 },
 GetPopOutElements: function() {
  return ASPx.GetNodesByClassName(this.GetMainElement().parentNode, "dxm-popOut");
 },
 GetPopOutImages: function() {
  return ASPx.GetNodesByClassName(this.GetMainElement().parentNode, "dxm-pImage");
 },
 GetSubMenuXPosition: function(indexPath, isVertical) {
  var itemElement = this.GetItemElement(indexPath);
  var pos = ASPx.GetAbsoluteX(itemElement) + (isVertical ? itemElement.clientWidth + itemElement.clientLeft : 0);
  if(ASPx.Browser.WebKitFamily && !this.IsParentElementPositionStatic(indexPath))
   pos -= document.body.offsetLeft;
  return pos;
 },
 GetSubMenuYPosition: function(indexPath, isVertical) {
  var position = 0;
  var element = this.GetItemElement(indexPath);
  if(element != null) {
   if(isVertical) {
    position = ASPx.GetAbsoluteY(element);
   }
   else {
    if(ASPx.Browser.Opera && ASPx.Browser.Version >= 9 || ASPx.Browser.AndroidDefaultBrowser)
     position = ASPx.GetAbsoluteY(element) + element.offsetHeight - ASPx.GetClientTop(element);
    else
     position = ASPx.GetAbsoluteY(element) + element.clientHeight + ASPx.GetClientTop(element);
   }
  }
  if(ASPx.Browser.WebKitFamily && !this.IsParentElementPositionStatic(indexPath))
   position -= document.body.offsetTop;
  return position;
 },
 GetClientSubMenuXPosition: function(element, x, indexPath, isVertical) {
  var docClientWidth = ASPx.GetDocumentClientWidth();
  if(isVertical)
   return this.GetClientSubMenuXPositionVerticalCore(element, x, indexPath, isVertical, docClientWidth);
  return this.GetClientSubMenuXPositionHorizontalCore(element, x, indexPath, isVertical, docClientWidth);
 },
 GetClientSubMenuXPositionVerticalCore: function(element, x, indexPath, isVertical, docClientWidth) {
  var itemInfo = new MenuItemInfo(this, indexPath);
  var itemWidth = itemInfo.clientWidth;
  var subMenuWidth = this.GetMenuMainElement(element).offsetWidth;
  var left = x - ASPx.GetDocumentScrollLeft();
  var right = left + subMenuWidth;
  var toLeftX = x - subMenuWidth - itemWidth;
  var toLeftLeft = left - subMenuWidth - itemWidth;
  if(this.IsCorrectionDisableMethodRequired(indexPath))
   return this.GetCorrectionDisabledResult(x, toLeftX);
  if(this.popupToLeft) {
   if(toLeftLeft > this.maxHorizontalOverlap)
    return toLeftX;
   if(docClientWidth - right > this.maxHorizontalOverlap || !this.rtl) {
    this.popupToLeft = false;
    return x;
   }
   return ASPx.InvalidPosition;
  }
  else {
   if(docClientWidth - right > this.maxHorizontalOverlap)
    return x;
   if(toLeftLeft > this.maxHorizontalOverlap || this.rtl) {
    this.popupToLeft = true;
    return toLeftX;
   }
   return ASPx.InvalidPosition;
  }
 },
 GetClientSubMenuXPositionHorizontalCore: function(element, x, indexPath, isVertical, docClientWidth) {
  var itemInfo = new MenuItemInfo(this, indexPath);
  var itemOffsetWidth = itemInfo.offsetWidth;
  var subMenuWidth = this.GetMenuMainElement(element).offsetWidth;
  var left = x - ASPx.GetDocumentScrollLeft();
  if(this.popupToLeft) {
   var rtlX = left - subMenuWidth + itemOffsetWidth;
   return rtlX < 0 ? 0 : rtlX;
  }
  else {
   if(docClientWidth - (left + subMenuWidth) < 0) {
    x = docClientWidth - subMenuWidth;
    if(x < 0)
     x = 0;
    return x;
   }
   return x;
  }
 },
 GetClientSubMenuYPosition: function(element, y, indexPath, isVertical) {
  var itemInfo = new MenuItemInfo(this, indexPath);
  var itemHeight = itemInfo.offsetHeight;
  var subMenuHeight = this.GetMenuMainElement(element).offsetHeight;
  var menuItemTop = y - ASPx.GetDocumentScrollTop();
  var subMenuBottom = menuItemTop + subMenuHeight;
  var docClientHeight = ASPx.GetDocumentClientHeight();
  var clientSubMenuYPos = y;
  if(isVertical) {
   var notEnoughSpaceToShowDown = subMenuBottom > docClientHeight;
   var menuItemBottom = menuItemTop + itemHeight;
   if(menuItemBottom > docClientHeight) {
    menuItemBottom = docClientHeight;
    itemHeight = menuItemBottom - menuItemTop;
   }
   var notEnoughSpaceToShowUp = menuItemBottom < subMenuHeight;
   var subMenuIsFitToDisplayFrames = docClientHeight >= subMenuHeight;
   if(!subMenuIsFitToDisplayFrames) clientSubMenuYPos = y - menuItemTop;
   else if(notEnoughSpaceToShowDown) {
    if(notEnoughSpaceToShowUp) {
     var docClientBottom = ASPx.GetDocumentScrollTop() + docClientHeight;
     clientSubMenuYPos = docClientBottom - subMenuHeight;
    } else
     clientSubMenuYPos = y + itemHeight - subMenuHeight;
   }
  }
  else {
   if(this.IsHorizontalSubmenuNeedInversion(subMenuBottom, docClientHeight, menuItemTop, subMenuHeight, itemHeight))
    clientSubMenuYPos = y - subMenuHeight - itemHeight;
  }
  return clientSubMenuYPos;
 },
 IsHorizontalSubmenuNeedInversion: function(subMenuBottom, docClientHeight, menuItemTop, subMenuHeight, itemHeight) {
  return subMenuBottom > docClientHeight && menuItemTop - subMenuHeight - itemHeight > docClientHeight - subMenuBottom;
 },
 IsCorrectionDisableMethodRequired: function(indexPath) {
  return false;
 },
 HasChildren: function(indexPath) {
  return (this.GetMenuElement(indexPath) != null);
 },
 IsVertical: function(indexPath) {
  return true;
 },
 IsRootItem: function(indexPath) {
  return this.GetMenuLevel(indexPath) <= 1;
 },
 IsParentElementPositionStatic: function(indexPath) {
  return this.IsRootItem(indexPath);
 },
 GetItemIndexPath: function(indexes) {
  return aspxGetMenuCollection().GetItemIndexPath(indexes);
 },
 GetItemIndexes: function(indexPath) {
  return aspxGetMenuCollection().GetItemIndexes(indexPath);
 },
 GetItemIndexPathById: function(id) {
  return aspxGetMenuCollection().GetIndexPathById(id, Constants.MIIdSuffix);
 },
 GetMenuIndexPathById: function(id) {
  return aspxGetMenuCollection().GetIndexPathById(id, Constants.MMIdSuffix);
 },
 GetScrollButtonIndexPathById: function(id) {
  return aspxGetMenuCollection().GetIndexPathById(id, Constants.SBIdSuffix);
 },
 GetIndexPathById: function(id, checkMenu) {
  var indexPath = this.GetItemIndexPathById(id);
  if(indexPath == "" && checkMenu)
   indexPath = this.GetMenuIndexPathById(id);
  return indexPath;
 },
 GetMenuLevelInternal: function(indexPath) {
  if(indexPath == "")
   return 0;
  else {
   var indexes = this.GetItemIndexes(indexPath);
   return indexes.length;
  }
 },
 GetMenuLevel: function(indexPath) {
  var level = this.GetMenuLevelInternal(indexPath);
  if(this.IsAdaptiveMenuItem(indexPath))
   level ++;
  return level;
 },
 IsAdaptiveMenuItem: function(indexPath){
  var level = this.GetMenuLevelInternal(indexPath);
  while(level > 1){
   indexPath = this.GetParentIndexPath(indexPath);
   level = this.GetMenuLevelInternal(indexPath);
  }
  var itemElement = this.GetItemElement(indexPath);
  if(itemElement && ASPx.GetParentByClassName(itemElement, this.getAdaptiveMenuCssClass()))
   return true;
  return false;
 },
 IsAdaptiveItem: function(indexPath){
  var itemElement = this.GetItemElement(indexPath);
  if(itemElement && ASPx.ElementContainsCssClass(itemElement, this.getAdaptiveMenuItemCssClass()))
   return true;
  return false;
 },
 GetParentIndexPath: function(indexPath) {
  var indexes = this.GetItemIndexes(indexPath);
  indexes.length--;
  return (indexes.length > 0) ? this.GetItemIndexPath(indexes) : "";
 },
 IsLastElement: function(element) {
  return element && (!element.nextSibling || !element.nextSibling.tagName);
 },
 IsLastItem: function(indexPath) {
  var itemElement = this.GetItemElement(indexPath);
  return this.IsLastElement(itemElement);
 },
 IsFirstElement: function(element) {
  return element && (!element.previousSibling || !element.previousSibling.tagName);
 },
 IsFirstItem: function(indexPath) {
  var itemElement = this.GetItemElement(indexPath);
  return this.IsFirstElement(itemElement);
 },
 IsItemElement: function(element) {
  return ASPx.ElementContainsCssClass(element, MenuCssClasses.Item);
 },
 GetPreviousItem: function(itemPath, isItemNameUsed) {
  var indexPath = itemPath;
  if(isItemNameUsed) {
   var indexPath = this.GetMenuIndexPathById(itemPath);
   if(indexPath == "")
    indexPath = this.GetItemIndexPathById(itemPath);
  }
  var currentItem = this.GetItemByIndexPath(indexPath),
   previousItem = null;
  if(currentItem) {
   for(var i = currentItem.index - 1; i >= 0 && previousItem === null; i--) {
    if(currentItem.parent.items[i].GetVisible())
     previousItem = currentItem.parent.items[i];
   }
  }
  return previousItem;
 },
 GetClientSubMenuPos: function(element, indexPath, pos, isVertical, isXPos) {
  if(!ASPx.IsValidPosition(pos)) {
   pos = isXPos ? this.GetSubMenuXPosition(indexPath, isVertical) : this.GetSubMenuYPosition(indexPath, isVertical);
  }
  var clientPos = isXPos ? this.GetClientSubMenuXPosition(element, pos, indexPath, isVertical) : this.GetClientSubMenuYPosition(element, pos, indexPath, isVertical);
  var isInverted = pos != clientPos;
  if(clientPos !== ASPx.InvalidPosition){
   var offset = isXPos ? this.GetSubMenuXOffset(indexPath) : this.GetSubMenuYOffset(indexPath);
   clientPos += isInverted ? -offset : offset;
   clientPos -= ASPx.GetPositionElementOffset(this.GetMenuElement(indexPath), isXPos);
  }
  return new ASPx.PopupPosition(clientPos, isInverted);
 },
 GetSubMenuXOffset: function(indexPath) {
  if(indexPath == "")
   return 0;
  else if(this.IsRootItem(indexPath)) {
   if(this.IsFirstItem(indexPath))
    return this.rootSubMenuFIXOffset;
   else if(this.IsLastItem(indexPath))
    return this.rootSubMenuLIXOffset;
   else
    return this.rootSubMenuXOffset;
  }
  else {
   if(this.IsFirstItem(indexPath))
    return this.subMenuFIXOffset;
   else if(this.IsLastItem(indexPath))
    return this.subMenuLIXOffset;
   else
    return this.subMenuXOffset;
  }
 },
 GetSubMenuYOffset: function(indexPath) {
  if(indexPath == "")
   return 0;
  else if(this.IsRootItem(indexPath)) {
   if(this.IsFirstItem(indexPath))
    return this.rootSubMenuFIYOffset;
   else if(this.IsLastItem(indexPath))
    return this.rootSubMenuLIYOffset;
   else
    return this.rootSubMenuYOffset;
  }
  else {
   if(this.IsFirstItem(indexPath))
    return this.subMenuFIYOffset;
   else if(this.IsLastItem(indexPath))
    return this.subMenuLIYOffset;
   else
    return this.subMenuYOffset;
  }
 },
 CalculateSubMenuPosition: function(element, x, y, indexPath, enableAnimation) {
  var isVertical = this.IsVertical(indexPath);
  var horizontalPopupPosition = this.GetClientSubMenuPos(element, indexPath, x, isVertical, true);
  if(horizontalPopupPosition.position === ASPx.InvalidPosition) {
   isVertical = !isVertical;
   horizontalPopupPosition = this.GetClientSubMenuPos(element, indexPath, x, isVertical, true);
  }
  var verticalPopupPosition = this.GetClientSubMenuPos(element, indexPath, y, isVertical, false);
  var clientX = horizontalPopupPosition.position;
  var clientY = verticalPopupPosition.position;
  var toTheLeft = horizontalPopupPosition.isInverted;
  var toTheTop = verticalPopupPosition.isInverted;
  clientY += this.GetScrollingCorrection(element, indexPath, clientY);
  verticalPopupPosition.position = clientY;
  var parentElement = this.GetItemContentElement(indexPath);
  var prevParentPos = ASPx.GetAbsoluteX(parentElement);
  ASPx.SetStyles(element, {
   left: clientX, top: clientY
  });
  if(ASPx.Browser.IE && ASPx.IsElementRightToLeft(document.body)) {
   ASPx.SetElementDisplay(element, false);
   ASPx.SetElementDisplay(element, true);
  }
  clientX += ASPx.GetAbsoluteX(parentElement) - prevParentPos;
  if(enableAnimation) {
   this.StartAnimation(element, indexPath, horizontalPopupPosition, verticalPopupPosition, isVertical);
  }
  else {
   ASPx.SetStyles(element, { left: clientX, top: clientY });
   ASPx.SetElementVisibility(element, true);
   if(this.enableSubMenuFullWidth)
    this.ApplySubMenuFullWidth(element);
   this.DoShowPopupMenuIFrame(element, clientX, clientY, ASPx.InvalidDimension, ASPx.InvalidDimension, indexPath);
   this.DoShowPopupMenuBorderCorrector(element, clientX, clientY, indexPath, toTheLeft, toTheTop);
  }
 },
 StartScrolling: function(buttonId, delay, step) {
  var indexPath = this.GetScrollButtonIndexPathById(buttonId);
  var level = this.GetMenuLevel(indexPath);
  aspxGetMenuCollection().DoHidePopupMenus(null, level, this.name, false, "");
  var direction = (buttonId.lastIndexOf(Constants.SBDIdEnd) == buttonId.length - Constants.SBDIdEnd.length) ? 1 : -1;
  var scrollHelper = this.GetScrollHelper(indexPath);
  if(scrollHelper) scrollHelper.StartScrolling(direction, delay, step);
 },
 StopScrolling: function(buttonId) {
  var indexPath = this.GetScrollButtonIndexPathById(buttonId);
  var scrollHelper = this.GetScrollHelper(indexPath);
  if(scrollHelper) scrollHelper.StopScrolling();
 },
 ClearAppearTimer: function() {
  aspxGetMenuCollection().ClearAppearTimer();
 },
 ClearDisappearTimer: function() {
  aspxGetMenuCollection().ClearDisappearTimer();
 },
 IsAppearTimerActive: function() {
  return aspxGetMenuCollection().IsAppearTimerActive();
 },
 IsDisappearTimerActive: function() {
  return aspxGetMenuCollection().IsDisappearTimerActive();
 },
 IsAdaptiveItemAnimationActive: function() {
  return this.inSubmenuShowAnimation;
 },
 GetAppearAfter: function(indexPath) {
  return this.appearAfter;
 },
 SetAppearTimer: function(indexPath, preventSubMenu) {
  aspxGetMenuCollection().SetAppearTimer(this.name, indexPath, this.GetAppearAfter(indexPath), preventSubMenu);
 },
 GetDisappearAfter: function() {
  return this.disappearAfter;
 },
 SetDisappearTimer: function() {
  aspxGetMenuCollection().SetDisappearTimer(this.name, this.GetDisappearAfter());
 },
 IsDropDownItem: function(indexPath) {
  return ASPx.ElementContainsCssClass(this.GetItemElement(indexPath), MenuCssClasses.ItemDropDownMode);
 },
 DoItemClick: function(indexPath, hasItemLink, htmlEvent) {
  aspxGetMenuCollection().LockMenusVisibility();
  var processOnServer = this.RaiseItemClick(indexPath, htmlEvent);
  if(processOnServer && !hasItemLink) {
   if(ASPx.Browser.IE || ASPx.Browser.Edge) {
    var activeElement = document.activeElement;
    if(activeElement)
     activeElement.blur();
   }
   this.SendPostBack("CLICK:" + indexPath);
  }
  else {
   this.ClearDisappearTimer();
   this.ClearAppearTimer();
   if(this.CanCloseSubMenuOnClick(indexPath) && (!this.HasChildren(indexPath) || this.IsDropDownItem(indexPath)))
    aspxGetMenuCollection().DoHidePopupMenus(null, -1, this.name, false, "");
   else if(this.IsItemEnabled(indexPath) && !this.IsDropDownItem(indexPath))
    this.ShowSubMenu(indexPath);
  }
  aspxGetMenuCollection().UnlockMenusVisibility();
 },
 CanCloseSubMenuOnClick: function(indexPath) {
  return true;
 },
 HasContent: function(mainCell) {
  for(var i = 0; i < mainCell.childNodes.length; i++)
   if(mainCell.childNodes[i].tagName)
    return true;
  return false;
 },
 DoShowPopupMenu: function(element, x, y, indexPath) {
  var parent = this.GetItemByIndexPath(indexPath);
  var menuElement = this.GetMenuMainElement(element);
  var popupMenuHasVisibleContent = menuElement && (this.renderHelper.HasSubMenuTemplate(menuElement) ||
   ASPx.ElementContainsCssClass(menuElement, this.getAdaptiveMenuCssClass())) ||
   parent && this.HasVisibleItems(parent);
  if(popupMenuHasVisibleContent === false)
   return;
  if(element && this.IsCallbacksEnabled())
   this.ShowLoadingPanelInMenu(element);
  if(ASPx.GetElementVisibility(element))
   ASPx.SetStyles(element, { left: ASPx.InvalidPosition, top: ASPx.InvalidPosition });
  ASPx.SetElementDisplay(element, true);
  if(parent) {
   for(var i = 0; i < parent.GetItemCount() ; i++) {
    var item = parent.GetItem(i);
    this.SetPopOutElementVisible(item.indexPath, this.HasVisibleItems(item));
   }
  }
  this.renderHelper.CalculateSubMenu(element, false);
  if(this.popupCount == 0) this.popupToLeft = this.rtl;
  this.RaisePopUp(indexPath);
  this.CalculateSubMenuPosition(element, x, y, indexPath, this.enableAnimation);
  aspxGetMenuCollection().RegisterVisiblePopupMenu(this.name, element.id);
  this.popupCount++;
  ASPx.GetControlCollection().AdjustControls(element);
  this.CorrectVerticalAlignment(ASPx.AdjustHeight, this.GetPopOutElements, "PopOut");
  this.CorrectVerticalAlignment(ASPx.AdjustVerticalMargins, this.GetPopOutImages, "PopOutImg");
 },
 ShowLoadingPanelInMenu: function(element) {
  var lpParent = this.GetMenuMainElement(element);
  if(lpParent && !this.HasContent(lpParent))
   this.CreateLoadingPanelInsideContainer(lpParent);
 },
 GetScrollSubMenuYCorrection: function(element, scrollHelper, clientY) {
  var absoluteClientY = clientY + ASPx.GetPositionElementOffset(element);
  var excessTop = this.GetScrollExcessTop(absoluteClientY);
  var excessBottom = this.GetScrollExcessBottom(element, absoluteClientY);
  var correction = 0;
  if(excessTop > 0)
   correction += excessTop + this.scrollVertOffset;
  if(excessBottom > 0 && (absoluteClientY + correction == ASPx.GetDocumentScrollTop())) {
   excessBottom += this.scrollVertOffset;
   correction += this.scrollVertOffset;
  }
  this.PrepareScrolling(element, scrollHelper, excessTop, excessBottom);
  return correction;
 },
 GetScrollExcessTop: function(clientY) {
  return ASPx.GetDocumentScrollTop() - clientY;
 },
 GetScrollExcessBottom: function(element, clientY) {
  ASPx.SetElementDisplay(element, false);
  var docHeight = ASPx.GetDocumentClientHeight();
  ASPx.SetElementDisplay(element, true);
  return clientY + element.offsetHeight - ASPx.GetDocumentScrollTop() - docHeight;
 },
 PrepareScrolling: function(element, scrollHelper, excessTop, excessBottom) {
  scrollHelper.Initialize();
  var corrector = element.offsetHeight - scrollHelper.GetScrollAreaHeight() + this.scrollVertOffset;
  if(excessTop > 0)
   scrollHelper.Calculate(element.offsetHeight - excessTop - corrector);
  if(excessBottom > 0)
   scrollHelper.Calculate(element.offsetHeight - excessBottom - corrector);
 },
 ApplySubMenuFullWidth: function(element) {
  ASPx.SetStyles(element, { left: 0, right: 0, width: "auto" });
  var menuElement = this.GetMenuMainElement(element);
  ASPx.SetStyles(menuElement, { width: "100%", "box-sizing": "border-box" });
  var templateElement = ASPx.GetChildByClassName(menuElement, "dx");
  if(templateElement) ASPx.SetStyles(templateElement, { width: "100%" });
 },
 DoShowPopupMenuIFrame: function(element, x, y, width, height, indexPath) {
  if(!this.renderIFrameForPopupElements) return;
  var iFrame = element.overflowElement;
  if(!iFrame) {
   iFrame = this.GetMenuIFrameElement(indexPath);
   element.overflowElement = iFrame;
  }
  if(iFrame) {
   var menuElement = this.GetMenuMainElement(element);
   if(width < 0)
    width = menuElement.offsetWidth;
   if(height < 0)
    height = menuElement.offsetHeight;
   ASPx.SetStyles(iFrame, {
    width: width, height: height,
    left: x, top: y, display: ""
   });
  }
 },
 DoShowPopupMenuBorderCorrector: function(element, x, y, indexPath, toTheLeft, toTheTop) {
  var borderCorrectorElement = this.GetMenuBorderCorrectorElement(indexPath);
  if(borderCorrectorElement) {
   var params = this.GetPopupMenuBorderCorrectorPositionAndSize(element, x, y, indexPath, toTheLeft, toTheTop);
   var itemCell = this.GetItemContentElement(indexPath);
   var popOutImageCell = this.GetItemPopOutElement(indexPath);
   if(ASPx.Browser.IE && ASPx.Browser.MajorVersion == 9) {
    var isVertical = this.IsVertical(indexPath);
    var itemBoundCoord = itemCell.getBoundingClientRect()[isVertical ? 'bottom' : 'right'];
    var itemBorderWidth = ASPx.PxToInt(ASPx.GetCurrentStyle(itemCell)[isVertical ? 'borderBottomWidth' : 'borderRightWidth']);
    if(popOutImageCell != null) {
     var popOutImageBoundCoord = popOutImageCell.getBoundingClientRect()[isVertical ? 'bottom' : 'right'];
     if(popOutImageBoundCoord > itemBoundCoord) {
      itemBoundCoord = popOutImageBoundCoord;
      itemBorderWidth = ASPx.PxToInt(ASPx.GetCurrentStyle(popOutImageCell)[isVertical ? 'borderBottomWidth' : 'borderRightWidth']);
     }
    }
    var menu = this.GetMainElement();
    itemBoundCoord -= Math.min(menu.getBoundingClientRect()[isVertical ? 'top' : 'left'], ASPx.GetPositionElementOffset(menu, !isVertical));
    if(isVertical) {
     var bottomsDifference = this.GetItemElement(indexPath).getBoundingClientRect().bottom -
      this.GetMenuElement(indexPath).getBoundingClientRect().bottom;
     itemBoundCoord -= bottomsDifference > 0 && bottomsDifference;
    }
    var borderCorrectorBoundCoord = isVertical ? params.top + params.height : params.left + params.width;
    if(itemBoundCoord - borderCorrectorBoundCoord != itemBorderWidth) {
     borderCorrectorBoundCoord = itemBoundCoord - itemBorderWidth;
     if(isVertical)
      params.height = borderCorrectorBoundCoord - params.top;
     else
      params.width = borderCorrectorBoundCoord - params.left;
    }
   }
   ASPx.SetStyles(borderCorrectorElement, {
    width: params.width, height: params.height,
    left: params.left, top: params.top,
    display: "", visibility: "visible"
   });
   element.borderCorrectorElement = borderCorrectorElement;
  }
 },
 GetPopupMenuBorderCorrectorPositionAndSize: function(element, x, y, indexPath, toTheLeft, toTheTop) {
  var result = {};
  var itemInfo = new MenuItemInfo(this, indexPath);
  var menuXOffset = ASPx.GetClientLeft(this.GetMenuMainElement(element));
  var menuYOffset = ASPx.GetClientTop(this.GetMenuMainElement(element));
  var menuElement = this.GetMenuMainElement(element);
  var menuClientWidth = menuElement.clientWidth;
  var menuClientHeight = menuElement.clientHeight;
  if(this.IsVertical(indexPath)) {
   var commonClientHeight = itemInfo.clientHeight < menuClientHeight
    ? itemInfo.clientHeight
    : menuClientHeight;
   result.width = menuXOffset;
   result.height = commonClientHeight + itemInfo.clientTop - menuYOffset;
   result.left = x;
   if(toTheLeft)
    result.left += menuClientWidth + menuXOffset;
   result.top = y + menuYOffset;
   if(toTheTop)
    result.top += menuClientHeight - result.height;
  }
  else {
   var itemWidth = itemInfo.clientWidth;
   if(this.IsDropDownItem(indexPath))
    itemWidth = this.GetItemContentElement(indexPath).clientWidth;
   var commonClientWidth = itemWidth < menuClientWidth
    ? itemWidth
    : menuClientWidth;
   result.width = commonClientWidth + itemInfo.clientLeft - menuXOffset;
   result.height = menuYOffset;
   result.left = x + menuXOffset;
   if(toTheLeft)
    result.left += menuClientWidth - result.width;
   result.top = y;
   if(toTheTop)
    result.top += menuClientHeight + menuYOffset;
  }
  return result;
 },
 DoHidePopupMenu: function(evt, element) {
  this.DoHidePopupMenuBorderCorrector(element);
  this.DoHidePopupMenuIFrame(element);
  var menuElement = this.GetMenuMainElement(element);
  ASPx.PopupUtils.StopAnimation(element, menuElement);
  ASPx.SetElementVisibility(element, false);
  ASPx.SetElementDisplay(element, false);
  this.CancelSubMenuItemHoverItem(element);
  aspxGetMenuCollection().UnregisterVisiblePopupMenu(this.name, element.id);
  this.popupCount--;
  var indexPath = this.GetIndexPathById(element.id, true);
  this.DoResetScrolling(element, indexPath);
  this.RaiseCloseUp(indexPath);
 },
 DoResetScrolling: function(element, indexPath) {
  var scrollHelper = this.GetScrollHelper(indexPath);
  if(scrollHelper) {
   element.style.height = "";
   scrollHelper.ResetScrolling();
  }
 },
 DoHidePopupMenuIFrame: function(element) {
  if(!this.renderIFrameForPopupElements) return;
  var iFrame = element.overflowElement;
  if(iFrame)
   ASPx.SetElementDisplay(iFrame, false);
 },
 DoHidePopupMenuBorderCorrector: function(element) {
  var borderCorrectorElement = element.borderCorrectorElement;
  if(borderCorrectorElement) {
   ASPx.SetElementVisibility(borderCorrectorElement, false);
   ASPx.SetElementDisplay(borderCorrectorElement, false);
   element.borderCorrectorElement = null;
  }
 },
 MarkPrecedingItem: function(currentItemName, className, isItemNameUsed) {
  this.MarkPrecedingItemCore(currentItemName, className, true, isItemNameUsed);
 },
 UnmarkPrecedingItem: function(currentItemName, className, isItemNameUsed) {
  this.MarkPrecedingItemCore(currentItemName, className, false, isItemNameUsed);
 },
 MarkPrecedingItemCore: function(currentItemName, className, addClass, isItemNameUsed) {
  var previousItem = this.GetPreviousItem(currentItemName, isItemNameUsed);
  if(previousItem) {
   var element = this.GetItemElement(previousItem.indexPath);
   if(addClass)
    ASPx.AddClassNameToElement(element, className);
   else
    ASPx.RemoveClassNameFromElement(element, className);
  }
 },
 SetHoverElement: function(element) {
  if(!this.IsStateControllerEnabled()) return;
  this.lockHoverEvents = true;
  ASPx.GetStateController().SetCurrentHoverElementBySrcElement(element);
  this.lockHoverEvents = false;
 },
 ApplySubMenuItemHoverItem: function(element, hoverItem, hoverElement) {
  if(!element.hoverItem && ASPx.GetElementDisplay(element)) {
   var newHoverItem = hoverItem.Clone();
   element.hoverItem = newHoverItem;
   element.hoverElement = hoverElement;
   newHoverItem.Apply(hoverElement);
  }
 },
 CancelSubMenuItemHoverItem: function(element) {
  if(element.hoverItem) {
   element.hoverItem.Cancel(element.hoverElement);
   element.hoverItem = null;
   element.hoverElement = null;
  }
 },
 ShowSubMenu: function(indexPath) {
  var element = this.GetMenuElement(indexPath);
  if(element != null) {
   var level = this.GetMenuLevel(indexPath);
   aspxGetMenuCollection().DoHidePopupMenus(null, level - 1, this.name, false, this.getExceptIdsForShowSubMenu(indexPath, element.id));
   if(!this.isSubMenuElementVisible(element) && this.IsItemEnabled(indexPath))
    this.DoShowPopupMenu(element, ASPx.InvalidPosition, ASPx.InvalidPosition, indexPath);
  }
  this.ClearAppearTimer();
 },
 getExceptIdsForShowSubMenu: function (itemIndexPath, exceptId) {
  return [exceptId];
 },
 isSubMenuElementVisible: function(subMenuElement) {
  return ASPx.GetElementDisplay(subMenuElement);
 },
 SelectItem: function(indexPath) {
  if(!this.IsStateControllerEnabled()) return;
  var element = this.GetItemContentElement(indexPath);
  if(element != null) {
   ASPx.GetStateController().SelectElementBySrcElement(element);
   if(this.sideMenuModeOn)
    this.MarkPrecedingItem(indexPath, PRE_SELECTED_ELEMENT_CLASS_NAME, false);
  }
 },
 DeselectItem: function(indexPath) {
  if(!this.IsStateControllerEnabled()) return;
  var element = this.GetItemContentElement(indexPath);
  if(element != null) {
   var hoverItem = null;
   var hoverElement = null;
   var menuElement = this.GetMenuElement(indexPath);
   if(menuElement && menuElement.hoverItem) {
    hoverItem = menuElement.hoverItem;
    hoverElement = menuElement.hoverElement;
    this.CancelSubMenuItemHoverItem(menuElement);
   }
   ASPx.GetStateController().DeselectElementBySrcElement(element);
   if(menuElement != null && hoverItem != null)
    this.ApplySubMenuItemHoverItem(menuElement, hoverItem, hoverElement);
   if(this.sideMenuModeOn)
    this.UnmarkPrecedingItem(indexPath, PRE_SELECTED_ELEMENT_CLASS_NAME, false);
  }
 },
 InitializeSelectedItem: function() {
  if(!this.allowSelectItem && !this.HasServerSideSelectedItem()) return;
  this.SelectItem(this.GetSelectedItemIndexPath());
  this.InitializeServerSideSelectedItem();
 },
 InitializeServerSideSelectedItem: function() {
  if(!this.allowSelectItem && this.sideMenuModeOn && this.HasServerSideSelectedItem())
   this.MarkPrecedingItem(this.serverSideSelectedItemPath, PRE_SELECTED_ELEMENT_CLASS_NAME, false);
 },
 HasServerSideSelectedItem: function() {
  return typeof (this.serverSideSelectedItemPath) !== "undefined";
 },
 GetSelectedItemIndexPath: function() {
  return this.selectedItemIndexPath;
 },
 SetSelectedItemInternal: function(indexPath, modifyHotTrackSelection) {
  if(modifyHotTrackSelection)
   this.SetHoverElement(null);
  this.DeselectItem(this.selectedItemIndexPath);
  this.selectedItemIndexPath = indexPath;
  var item = this.GetItemByIndexPath(indexPath);
  if(item == null || item.GetEnabled())
   this.SelectItem(this.selectedItemIndexPath);
  if(modifyHotTrackSelection) {
   var element = this.GetItemContentElement(indexPath);
   if(element != null)
    this.SetHoverElement(element);
  }
 },
 InitializeCheckedItems: function() {
  if(!this.allowCheckItems) return;
  var indexPathes = this.checkedState.split(";");
  for(var i = 0; i < indexPathes.length; i++) {
   if(indexPathes[i] != "") {
    this.checkedItems.push(indexPathes[i]);
    this.SelectItem(indexPathes[i]);
   }
  }
 },
 ChangeCheckedItem: function(indexPath) {
  this.SetHoverElement(null);
  var itemsGroup = this.GetItemsGroup(indexPath);
  if(itemsGroup != null) {
   if(itemsGroup.length > 1) {
    if(!this.IsCheckedItem(indexPath)) {
     for(var i = 0; i < itemsGroup.length; i++) {
      if(itemsGroup[i] == indexPath) continue;
      if(this.IsCheckedItem(itemsGroup[i])) {
       ASPx.Data.ArrayRemove(this.checkedItems, itemsGroup[i]);
       this.DeselectItem(itemsGroup[i]);
      }
     }
     this.SelectItem(indexPath);
     this.checkedItems.push(indexPath);
    }
   }
   else {
    if(this.IsCheckedItem(indexPath)) {
     ASPx.Data.ArrayRemove(this.checkedItems, indexPath);
     this.DeselectItem(indexPath);
    }
    else {
     this.SelectItem(indexPath);
     this.checkedItems.push(indexPath);
    }
   }
  }
  var element = this.GetItemContentElement(indexPath);
  if(element != null)
   this.SetHoverElement(element);
 },
 GetItemsGroup: function(indexPath) {
  for(var i = 0; i < this.itemCheckedGroups.length; i++) {
   if(ASPx.Data.ArrayIndexOf(this.itemCheckedGroups[i], indexPath) > -1)
    return this.itemCheckedGroups[i];
  }
  return null;
 },
 IsCheckedItem: function(indexPath) {
  return ASPx.Data.ArrayIndexOf(this.checkedItems, indexPath) > -1;
 },
 UpdateStateObject: function(){
  this.UpdateStateObjectWithObject({ selectedItemIndexPath: this.selectedItemIndexPath, checkedState: this.GetCheckedState() });
 },
 GetCheckedState: function() {
  var state = "";
  for(var i = 0; i < this.checkedItems.length; i++) {
   state += this.GetCheckedItemInfo(this.checkedItems[i]);
   if(i < this.checkedItems.length - 1)
    state += ";";
  }
  return state;
 },
 GetCheckedItemInfo: function(itemIndexPath) {
  return itemIndexPath;
 },
 GetAnimationVerticalDirection: function(indexPath, popupPosition, isVertical) {
  var verticalDirection = (this.IsRootItem(indexPath) && !isVertical) ? -1 : 0;
  if(popupPosition.isInverted) verticalDirection *= -1;
  return verticalDirection;
 },
 GetAnimationHorizontalDirection: function(indexPath, popupPosition, isVertical) {
  var horizontalDirection = (this.IsRootItem(indexPath) && !isVertical) ? 0 : -1;
  if(popupPosition.isInverted) horizontalDirection *= -1;
  return horizontalDirection;
 },
 skipPopupMenuSizeInit: function() {
  return false;
 },
 StartAnimation: function(animationDivElement, indexPath, horizontalPopupPosition, verticalPopupPosition, isVertical) {
  this.inSubmenuShowAnimation = true;
  var element = this.GetMenuMainElement(animationDivElement);
  var clientX = horizontalPopupPosition.position;
  var clientY = verticalPopupPosition.position;
  ASPx.PopupUtils.InitAnimationDiv(animationDivElement, clientX, clientY, this.OnAnimationFinished.aspxBind(this), this.skipPopupMenuSizeInit());
  var verticalDirection = this.GetAnimationVerticalDirection(indexPath, verticalPopupPosition, isVertical);
  var horizontalDirection = this.GetAnimationHorizontalDirection(indexPath, horizontalPopupPosition, isVertical);
  var yPos = verticalDirection * element.offsetHeight;
  var xPos = horizontalDirection * element.offsetWidth;
  ASPx.SetStyles(element, { left: xPos, top: yPos });
  ASPx.SetElementVisibility(animationDivElement, true);
  if(this.enableSubMenuFullWidth)
   this.ApplySubMenuFullWidth(animationDivElement);
  this.DoShowPopupMenuIFrame(animationDivElement, clientX, clientY, 0, 0, indexPath);
  this.DoShowPopupMenuBorderCorrector(animationDivElement, clientX, clientY, indexPath,
   horizontalPopupPosition.isInverted, verticalPopupPosition.isInverted);
  ASPx.PopupUtils.StartSlideAnimation(animationDivElement, element, this.GetMenuIFrameElement(indexPath), this.slideAnimationDuration, this.enableSubMenuFullWidth, false);
 },
 OnAnimationFinished: function() {
  window.setTimeout(function() { this.inSubmenuShowAnimation = false; }.aspxBind(this), 100);
 },
 OnItemClick: function(indexPath, evt) {
  var sourceElement = ASPx.Evt.GetEventSource(evt);
  var clickedLinkElement = ASPx.GetParentByTagName(sourceElement, "A");
  var isLinkClicked = (clickedLinkElement != null && clickedLinkElement.href != ASPx.AccessibilityEmptyUrl);
  var element = this.GetItemContentElement(indexPath);
  var linkElement = (element != null) ? (element.tagName === "A" ? element : ASPx.GetNodeByTagName(element, "A", 0)) : null;
  if(linkElement != null && linkElement.href == ASPx.AccessibilityEmptyUrl)
   linkElement = null;
  if(this.allowSelectItem)
   this.SetSelectedItemInternal(indexPath, true);
  if(this.allowCheckItems || this.canCheckItem(element))
   this.ChangeCheckedItem(indexPath);
  this.DoItemClick(indexPath, isLinkClicked || (linkElement != null), evt);
  if(!isLinkClicked && linkElement != null && !(ASPx.Browser.WebKitTouchUI && this.HasChildren(indexPath)))
   ASPx.Url.NavigateByLink(linkElement);
 },
 canCheckItem: function (itemElement) {
  return false;
 },
 OnItemDropDownClick: function(indexPath, evt) {
  if(this.IsItemEnabled(indexPath)) {
   if(this.IsAdaptiveItem(indexPath))
    this.toggleAdaptiveSubmenu(indexPath);
   else
    this.keyboardHelper.ShowSubMenuAccessible(indexPath);
  }
 },
 toggleAdaptiveSubmenu: function(indexPath) {
  var element = this.GetMenuElement(indexPath);
  if(ASPx.GetElementDisplay(element) && !this.IsAdaptiveItemAnimationActive())
   this.DoHidePopupMenu(null, element);
  else
   this.keyboardHelper.ShowSubMenuAccessible(indexPath);
 },
 AfterItemOverAllowed: function(hoverItem) {
  return hoverItem.name != "" && !this.lockHoverEvents;
 },
 OnAfterItemOver: function(hoverItem, hoverElement) {
  if(!this.AfterItemOverAllowed(hoverItem)) return;
  if(!this.showSubMenus) {
   this.savedCallbackHoverItem = hoverItem;
   this.savedCallbackHoverElement = hoverElement;
   return;
  }
  this.ClearDisappearTimer();
  this.ClearAppearTimer();
  var indexPath = this.GetMenuIndexPathById(hoverItem.name);
  if(indexPath == "") {
   indexPath = this.GetItemIndexPathById(hoverItem.name);
   var canShowSubMenu = true;
   if(this.IsDropDownItem(indexPath)) {
    var popOutImageElement = this.GetItemPopOutElement(indexPath);
    if(popOutImageElement != null && popOutImageElement != hoverElement) {
     hoverItem.needRefreshBetweenElements = true;
     canShowSubMenu = false;
    }
   }
   var preventSubMenu = !(canShowSubMenu && hoverItem.enabled && hoverItem.kind == ASPx.HoverItemKind);
   this.SetAppearTimer(indexPath, preventSubMenu);
   this.RaiseItemMouseOver(indexPath);
  }
 },
 OnBeforeItemOver: function(hoverItem, hoverElement) {
  if(ASPx.Browser.NetscapeFamily && ASPx.IsExists(hoverElement.offsetParent) &&
    hoverElement.offsetParent.style.borderCollapse == "collapse") {
   hoverElement.offsetParent.style.borderCollapse = "separate";
   hoverElement.offsetParent.style.borderCollapse = "collapse";
  }
  var indexPath = this.GetItemIndexPathById(hoverItem.name);
  var element = this.GetMenuElement(indexPath);
  if(element) this.CancelSubMenuItemHoverItem(element);
 },
 OnItemOverTimer: function(indexPath, preventSubMenu) {
  var element = this.GetMenuElement(indexPath);
  if(element == null || preventSubMenu) {
   var level = this.GetMenuLevel(indexPath);
   aspxGetMenuCollection().DoHidePopupMenus(null, level - 1, this.name, false, this.getExceptIdsForItemOverTimer(indexPath));
  }
  if(this.IsAppearTimerActive() && !preventSubMenu) {
   this.ClearAppearTimer();
   if(this.GetItemContentElement(indexPath) != null || this.GetItemPopOutElement(indexPath) != null) {
    this.ShowSubMenu(indexPath);
   }
  }
 },
 getExceptIdsForItemOverTimer: function(indexPath) {
  var result = [];
  aspxGetMenuCollection().ForEachControl(function(menu) {
   var isPopupMenu = ASPx.IsExists(menu.popupAction) && ASPx.IsExists(menu.closeAction);
   if(isPopupMenu && menu.closeAction === "OuterMouseClick")
    result.push(menu.GetMainElementId());
  }, this);
  return result;
 },
 OnBeforeItemDisabled: function(disabledItem, disabledElement) {
  this.ClearAppearTimer();
  var indexPath = this.GetItemIndexPathById(disabledElement.id);
  if(indexPath != "") {
   var element = this.GetMenuElement(indexPath);
   if(element != null) this.DoHidePopupMenu(null, element);
  }
 },
 OnAfterItemOut: function(hoverItem, hoverElement, newHoverElement) {
  if(!this.showSubMenus) {
   this.savedCallbackHoverItem = null;
   this.savedCallbackHoverElement = null;
  }
  if(hoverItem.name == "" || this.lockHoverEvents) return;
  if(hoverItem.IsChildElement(newHoverElement)) return;
  var indexPath = this.GetItemIndexPathById(hoverItem.name);
  var element = this.GetMenuElement(indexPath);
  this.ClearDisappearTimer();
  this.ClearAppearTimer();
  if(element == null || !ASPx.GetIsParent(element, newHoverElement))
   this.SetDisappearTimer();
  if(element != null)
   this.ApplySubMenuItemHoverItem(element, hoverItem, hoverElement);
  if(indexPath != "")
   this.RaiseItemMouseOut(indexPath);
 },
 OnItemOutTimer: function() {
  if(this.IsDisappearTimerActive()) {
   this.ClearDisappearTimer();
   if(aspxGetMenuCollection().CheckFocusedElement())
    this.SetDisappearTimer();
   else
    this.OnHideByItemOut();
  }
 },
 OnHideByItemOut: function() {
  aspxGetMenuCollection().DoHidePopupMenus(null, 0, this.name, true, "");
 },
 TryFocusItem: function(itemIndex) {
  var item = this.GetItem(itemIndex);
  if(item.GetVisible() && item.GetEnabled()) {
   this.FocusItemByIndexPath(item.GetIndexPath());
   return true;
  }
  return false;
 },
 Focus: function() {
  if(this.rootItem != null) {
   for(var i = 0; i < this.GetItemCount() ; i++) {
    if(this.TryFocusItem(i))
     return true;
   }
  }
  else
   this.keyboardHelper.FocusNextItem("-1");
 },
 FocusLastItem: function() {
  if(this.rootItem != null) {
   for(var i = this.GetItemCount() - 1; i >= 0; i--) {
    if(this.TryFocusItem(i))
     return true;
   }
  }
  else
   this.keyboardHelper.FocusPrevItem(this.GetItemCount() - 1);
 },
 FocusItemByIndexPath: function(indexPath) {
  this.keyboardHelper.FocusItemByIndexPath(indexPath);
 },
 OnFocusedItemKeyDown: function(evt, focusedItem) {
  this.keyboardHelper.OnFocusedItemKeyDown(evt, focusedItem);
 },
 ProcessLostFocus: function(evt) {
  if(!this.isContextMenu || !this.accessibilityCompliant) return;
  if(this.accessibleFocusElement)
   this.accessibleFocusElement.focus();
  this.Hide();
  if(evt)
   ASPx.Evt.PreventEventAndBubble(evt);
 },
 OnCallback: function(result) {
  ASPx.InitializeScripts();
  this.InitializeScrollableMenus();
  for (var indexPath in result) {
   if(result.hasOwnProperty(indexPath)) {
    var menuElement = this.GetMenuElement(indexPath);
    if(menuElement) {
     var menuResult = result[indexPath];
     if(aspxGetMenuCollection().IsSubMenuVisible(menuElement.id))
      this.ShowPopupSubMenuAfterCallback(menuElement, menuResult);
     else
      this.SetSubMenuInnerHtml(menuElement, menuResult);
    }
   }
  }
  this.ClearVerticalAlignedElementsCache();
  this.CorrectVerticalAlignment(ASPx.AdjustHeight, this.GetPopOutElements, "PopOut");
  this.CorrectVerticalAlignment(ASPx.AdjustVerticalMargins, this.GetPopOutImages, "PopOutImg");
  this.InitializeInternal(false);
  if(!this.showSubMenus) {
   this.showSubMenus = true;
   if(this.savedCallbackHoverItem != null && this.savedCallbackHoverElement != null)
    this.OnAfterItemOver(this.savedCallbackHoverItem, this.savedCallbackHoverElement);
   this.savedCallbackHoverItem = null;
   this.savedCallbackHoverElement = null;
  }
 },
 SetSubMenuInnerHtml: function(menuElement, html) {
  ASPx.SetInnerHtml(this.GetMenuMainElement(menuElement), html);
  this.dropElementsCache = true;
  this.renderHelper.InlineInitializePopupMenuMenuElement(menuElement, this.GetIndexPathById(menuElement.id, true));
  this.renderHelper.CalculateSubMenu(menuElement, true);
 },
 ShowPopupSubMenuAfterCallback: function(element, callbackResult) {
  var indexPath = this.GetIndexPathById(element.id, true);
  var currentX = ASPx.PxToInt(element.style.left);
  var currentY = ASPx.PxToInt(element.style.top);
  var showedToTheTop = this.ShowedToTheTop(element, indexPath);
  var showedToTheLeft = this.ShowedToTheLeft(element, indexPath);
  ASPx.SetStyles(element, {
   left: ASPx.InvalidPosition, top: ASPx.InvalidPosition
  });
  this.SetSubMenuInnerHtml(element, callbackResult);
  var vertPos = this.GetClientSubMenuPos(element, indexPath, ASPx.InvalidPosition, this.IsVertical(indexPath), false);
  var clientY = vertPos.position;
  var toTheTop = vertPos.isInverted;
  if(!this.IsVertical(indexPath) && showedToTheTop != toTheTop) {
   clientY = currentY;
   toTheTop = showedToTheTop;
  }
  clientY += this.GetScrollingCorrection(element, indexPath, clientY);
  ASPx.SetStyles(element, { left: currentX, top: clientY });
  if(this.enableSubMenuFullWidth)
   this.ApplySubMenuFullWidth(element);
  this.DoShowPopupMenuIFrame(element, currentX, clientY, ASPx.InvalidDimension, ASPx.InvalidDimension, indexPath);
  this.DoShowPopupMenuBorderCorrector(element, currentX, clientY, indexPath, showedToTheLeft, toTheTop);
  ASPx.GetControlCollection().AdjustControls(element);
 },
 GetScrollingCorrection: function(element, indexPath, clientY) {
  var scrollHelper = this.GetScrollHelper(indexPath);
  if(scrollHelper) {
   var yClientCorrection = this.GetScrollSubMenuYCorrection(element, scrollHelper, clientY);
   if(yClientCorrection > 0)
    return yClientCorrection;
  }
  return 0;
 },
 ShowedToTheTop: function(element, indexPath) {
  var currentY = ASPx.PxToInt(element.style.top);
  var parentBottomY = this.GetSubMenuYPosition(indexPath, this.IsVertical(indexPath));
  return currentY < parentBottomY;
 },
 ShowedToTheLeft: function(element, indexPath) {
  var currentX = ASPx.PxToInt(element.style.left);
  var parentX = this.GetSubMenuXPosition(indexPath, this.IsVertical(indexPath));
  return currentX < parentX;
 },
 CreateItems: function(items) {
  if (items.length == 0)
   return;
  if(this.NeedCreateItemsOnClientSide())
   this.CreateClientItems(items);
  else
   this.CreateServerItems(items);
 },
 AddItem: function(item) {
  this.CreateClientItems([item]);
 },
 CreateClientItems: function(items) {
  this.PreInitializeClientMenuItems();
  this.rootItem.CreateItems(items);
  this.RenderItems(this.rootItem.items);
  this.InitializeClientItems();
 },
 CreateServerItems: function(items) {
  this.CreateRootItemIfRequired();
  this.rootItem.CreateItems(items);
 },
 PreInitializeClientMenuItems: function() {
  if(!this.rootMenuSample)
   this.InitializeMenuSamples();
  this.CreateRootItemIfRequired();
  if(!this.renderData)
   this.CreateRenderData();
 },
 InitializeClientItems: function() {
  this.dropElementsCache = true;
  this.renderHelper.InlineInitializeElements();
  this.ApplyItemsProperties(this.rootItem.items);
  this.InitializeEnabledAndVisible(true);
  if(this.isPopupMenu)
   this.renderHelper.CalculateSubMenu(this.GetMainElement(), true);
  else
   this.renderHelper.CalculateMenuControl(this.GetMainElement(), true);
 },
 ApplyItemsProperties: function(items) {
  var itemsCount = items.length;
  if(itemsCount == 0)
   return;
  for(var i = 0; i < itemsCount; i++) {
   var item = items[i];
   this.ApplyItemProperties(item);
   this.ApplyItemsProperties(item.items);
  }
 },
 ApplyItemProperties: function(item) {
  var indexPath = item.GetIndexPath();
  if(item.imageUrl)
   this.SetItemImageUrl(indexPath, item.imageUrl);
  if(item.imageClassName) {
   this.AddItemImageClassName(indexPath, item.imageClassName);
   this.AddItemAdditionalImageClassName(indexPath, item.imageClassName);
  }
  if(item.navigateUrl)
   this.SetItemNavigateUrl(indexPath, item.navigateUrl, item.target);
  if(item.tooltip != "")
   this.SetItemTooltip(indexPath, item.tooltip);
  var textNode = this.FindTextNode(indexPath);
  if(textNode)
   textNode.parentNode.innerHTML = this.HtmlEncode(item.text);
  this.SetItemChecked(indexPath, item.checked);
  if(item.textTemplate)
   this.SetItemTextTemplate(indexPath, item.textTemplate);
 },
 ProcessItemGroupName: function(item, groupName) {
  if(this.allowSelectItem || !groupName)
   return;
  this.allowCheckItems = true;
  var groupNames = this.itemCheckedGroups.groupNames;
  if(groupNames[groupName])
   groupNames[groupName].push(item.indexPath);
  else {
   groupNames[groupName] = [item.indexPath];
   this.itemCheckedGroups.push(groupNames[groupName]);
  }
  item.checkedGroup = groupNames[groupName];
 },
 CreateRootItemIfRequired: function() {
  if(!this.rootItem) {
   var itemType = this.GetClientItemType();
   this.rootItem = new itemType(this, null, 0, "");
  }
 },
 ClearRootMenuElement: function() {
  var wrapperElement = this.GetMainElement().parentNode;
  wrapperElement.innerHTML = "";
  wrapperElement.appendChild(this.rootMenuSample.cloneNode(true));
  this.renderHelper.InlineInitializeScrollElements("", this.GetMainElement());
 },
 NeedAppendToRenderData: function(item) {
  return this.NeedCreateItemsOnClientSide() && item.visible || typeof(item.visible) == "undefined";
 },
 ClearItems: function() {
  this.PreInitializeClientMenuItems();
  this.ClearRootMenuElement();
  this.ClearRenderData();
  this.rootItem.items = [];
  this.checkedItems = [];
 },
 GetSampleNode: function(sampleHtml) {
  return ASPx.CreateHtmlElementFromString(sampleHtml);
 },
 GetParentItem: function(rootItemIndexPath) {
  if(!rootItemIndexPath)
   return this.rootItem;
  return this.GetItemByIndexPath(rootItemIndexPath);
 },
 RenderItems: function(items) {
  for(var i=0; i < items.length; i++) {
   var item = items[i];
   this.RenderItemIfRequired(item);
   this.RenderItems(item.items);
  }
 },
 RenderItemIfRequired: function(item) {
  if(!this.GetItemElement(item.indexPath)) {
   var isRootItem = !this.GetItemElement(item.parent.indexPath);
   var rootMenuElement = this.GetOrRenderRootItem(item, isRootItem);
   this.RenderItemInternal(rootMenuElement, item, isRootItem);
   this.ApplyStylesToRenderItem(item, isRootItem);
  }
 },
 ApplyStylesToRenderItem: function(item, isRootItem) {
  var styles = JSON.parse(JSON.stringify(isRootItem ? this.samples.itemsStyles : this.samples.subitemsStyles));
  var hoverStyle = styles.hover;
  var disabledStyle = styles.disable;
  var selectedStyle = styles.select;
  var checkedStyle = styles.check;
  var itemElementId = this.GetItemElementId(item.indexPath);
  if(item.styles && item.styles.ho) {
   var itemHover = item.styles.ho;
   if(!!itemHover.style)
    hoverStyle.cssTexts[0] = itemHover.style;
   if(!!itemHover.cssClass)
    hoverStyle.classNames[0] += " " + itemHover.cssClass;
  }
  if(item.styles && item.styles.st) {
   var itemElement = this.GetItemElement(item.indexPath);
   var style = item.styles.st;
   itemElement.setAttribute("style", style.style);
   if(!!style.cssClass)
    ASPx.AddClassNameToElement(itemElement, style.cssClass);
  }
  ASPx.GetStateController().AddHoverItem(itemElementId, hoverStyle.classNames || [MenuCssClasses.ItemHovered], hoverStyle.cssTexts || [""], hoverStyle.postfixes || [""], item.imageHottrackSrc ? [item.imageHottrackSrc] : null, [Constants.ImagePostfix, Constants.PopupImagePostfix], false);
  ASPx.GetStateController().AddDisabledItem(itemElementId, disabledStyle.classNames || [MenuCssClasses.Disabled], disabledStyle.cssTexts || [""], disabledStyle.postfixes || [""], null, null, false);
  if(selectedStyle && this.allowSelectItem)
   ASPx.GetStateController().AddSelectedItem(itemElementId, selectedStyle.classNames || [MenuCssClasses.ItemSelected], selectedStyle.cssTexts || [""], selectedStyle.postfixes || [""], null, null, false);
  else if (checkedStyle && this.allowCheckItems && item.checkedGroup.length) {
   var checkedClassName = null;
   if(!item.imageClassName)
    checkedClassName = [this.samples.checkedClassName];
   ASPx.GetStateController().AddSelectedItem(itemElementId, checkedStyle.classNames || [MenuCssClasses.ItemChecked], checkedStyle.cssTexts || [""], checkedStyle.postfixes || [""], checkedClassName, ['Img'], false);
  }
 },
 GetOrRenderRootItem: function(item, isRootItem) {
  if(!isRootItem) {
   var rootMenuElement = this.GetMenuElement(item.parent.indexPath);
   return rootMenuElement ? rootMenuElement : this.RenderSubMenuItem(item.parent.indexPath);
  } else
   return this.GetMenuElement("");
 },
 RenderItemInternal: function(rootItem, item, isRootItem) {
  var contentElement = this.renderHelper.GetContentElement(rootItem);
  var element = this.CreateItemElement(item, isRootItem);
  this.RenderSeparatorElementIfRequired(contentElement, item);
  this.RenderSpaceElementIfRequired(contentElement, item);
  contentElement.appendChild(element);
 },
 RenderSeparatorElementIfRequired: function(rootItem, item) {
  if(item.beginGroup && item.index > 0) {
   var separatorElement = this.CreateSeparatorElement(item.indexPath);
   rootItem.appendChild(separatorElement);
  }
 },
 RenderSpaceElementIfRequired: function(rootItem, item) {
  if(!item.beginGroup && item.index > 0 && rootItem.childNodes.length > 0) {
   if(this.samples.spacing) {
    var spacingElement = this.CreateSpacingElement(item.indexPath);
    rootItem.appendChild(spacingElement);
   }
  }
 },
 RenderSubMenuItem: function(indexPath) {
  var subMenuElement = this.CreateSubMenuElement(indexPath);
  this.GetMainElement().parentElement.appendChild(subMenuElement);
  return subMenuElement;
 },
 HasSeparatorOnCurrentPosition: function(itemElements, position) {
  return itemElements[position - 1 > 0 ? position - 1 : 0].className.indexOf(MenuCssClasses.Separator) > -1;
 },
 CreateItemElement: function(item, isRootItem) {
  var itemSample = isRootItem ? this.GetRootItemSample(item) : this.GetSubitemSample(item);
  var itemElement = itemSample.cloneNode(true);
  itemElement.id = this.GetItemElementId(item.indexPath);
  return itemElement;
 },
 GetRootItemSample: function(item) {
  return this.GetItemSample(this.samples.rootItems, item);
 },
 GetSubitemSample: function(item) {
  return this.GetItemSample(this.samples.submenuItems, item);
 },
 GetItemSample: function(samples, item) {
  var key = this.sampleItemsFlags.TextOnly;
  if(item.items.length > 0)
   key = key | this.sampleItemsFlags.SubItems;
  if(item.imageUrl)
   key = key | this.sampleItemsFlags.Image;
  if(item.navigateUrl)
   key = key | this.sampleItemsFlags.NavigateUrl;
  if(item.dropDownMode)
   key = key | this.sampleItemsFlags.DropDownMode;
  if(item.checkedGroup.length)
   key = key | this.sampleItemsFlags.CheckBox;
  if(item.imageClassName)
   key = key | this.sampleItemsFlags.ImageClassName;
  if(item.isSvg)
   key = key | this.sampleItemsFlags.Svg;
  return samples[key];
 },
 CreateSpacingElement: function(indexPath) {
  var item = this.samples.spacing.cloneNode();
  item.id = this.GetItemIndentElementId(indexPath);
  return item;
 },
 CreateSeparatorElement: function(indexPath) {
  var item = this.samples.separator.cloneNode(true);
  item.id = this.GetItemSeparatorElementId(indexPath);
  return item;
 },
 CreateSubMenuElement: function(indexPath) {
  var subMenu = this.samples.submenu.cloneNode(true);
  subMenu.id =  this.name + Constants.MMIdSuffix + indexPath + "_";
  return subMenu;
 },
 AppendToRenderData: function(rootItemIndexPath, index) {
  if(rootItemIndexPath) {
   if(!this.renderData[rootItemIndexPath])
    this.renderData[rootItemIndexPath] = [[index]];
   this.renderData[rootItemIndexPath][index] = [index];
  } else {
   this.renderData[""].push([[index]]);
  }
 },
 CreateRenderData: function() {
  this.renderData = {"" : []};
 },
 ClearRenderData: function() {
  this.renderData = null;
 },
 GetClientItemType: function() {
  return ASPxClientMenuItem;
 },
 GetItemByIndexPath: function(indexPath) {
  var item = this.rootItem;
  if(indexPath != "" && item != null) {
   var indexes = this.GetItemIndexes(indexPath);
   for(var i = 0; i < indexes.length; i++)
    item = item.GetItem(indexes[i]);
  }
  return item;
 },
 GetLinkElementByIndexPath: function(indexPath) {
  var itemElement = this.GetItemElement(indexPath);
  return this.renderHelper.GetItemLinkElement(itemElement);
 },
 SetItemChecked: function(indexPath, checked) {
  var itemsGroup = this.GetItemsGroup(indexPath);
  if(itemsGroup != null) {
   if(!checked && this.IsCheckedItem(indexPath)) {
    ASPx.Data.ArrayRemove(this.checkedItems, indexPath);
    this.DeselectItem(indexPath);
   }
   else if(checked && !this.IsCheckedItem(indexPath)) {
    if(itemsGroup.length > 1) {
     for(var i = 0; i < itemsGroup.length; i++) {
      if(itemsGroup[i] == indexPath) continue;
      if(this.IsCheckedItem(itemsGroup[i])) {
       ASPx.Data.ArrayRemove(this.checkedItems, itemsGroup[i]);
       this.DeselectItem(itemsGroup[i]);
      }
     }
    }
    this.SelectItem(indexPath);
    this.checkedItems.push(indexPath);
   }
   if(this.accessibilityCompliant) {
    var link = this.GetLinkElementByIndexPath(indexPath);
    if(link)
     ASPx.Attr.SetAttribute(link, "aria-checked", checked ? "true" : "false");
   }
  }
 },
 ChangeItemEnabledAttributes: function(indexPath, enabled) {
  this.renderHelper.ChangeItemEnabledAttributes(this.GetItemElement(indexPath), enabled, this.accessibilityCompliant);
 },
 IsItemEnabled: function(indexPath) {
  var item = this.GetItemByIndexPath(indexPath);
  return (item != null) ? item.GetEnabled() : true;
 },
 SetItemEnabled: function(indexPath, enabled, initialization) {
  if(indexPath == "" || !this.GetItemByIndexPath(indexPath).enabled) return;
  if(!enabled) {
   if(this.GetSelectedItemIndexPath() == indexPath)
    this.DeselectItem(indexPath);
  }
  if(!initialization || !enabled)
   this.ChangeItemEnabledStateItems(indexPath, enabled);
  this.ChangeItemEnabledAttributes(indexPath, enabled);
  if(enabled) {
   if(this.GetSelectedItemIndexPath() == indexPath)
    this.SelectItem(indexPath);
  }
 },
 ChangeItemEnabledStateItems: function(indexPath, enabled) {
  if(!this.IsStateControllerEnabled()) return;
  this.UpdateHoverableItems(indexPath, enabled);
  var element = this.GetItemElement(indexPath);
  if(element)
   ASPx.GetStateController().SetElementEnabled(element, enabled);
 },
 UpdateHoverableItems: function(indexPath, enabled) {
  var menuItemElement = this.GetItemElement(indexPath);
  if(menuItemElement) {
   var postfixes = ["", Constants.ItemPopoutElementPostfix, Constants.ItemContentElementPostfix];
   for(var i = 0; i < postfixes.length; i++) {
    var element = ASPx.CacheHelper.GetCachedElementById(this, this.GetItemElementId(indexPath) + postfixes[i]);
    if(element) {
     if(enabled) {
      var hoverItem = element.savedHoverItem;
      if(hoverItem)
       ASPx.GetStateController().AddHoverItem(hoverItem.name, hoverItem.classNames, hoverItem.cssTexts, hoverItem.postfixes, hoverItem.imageObjs, hoverItem.imagePostfixes, hoverItem.disableApplyingStyleToLink);
     }
     else {
      element.savedHoverItem = ASPx.GetStateController().GetHoverItem(element);
     }
    }
   }
   ASPx.GetStateController().ClearElementCacheInContainer(menuItemElement);
   if(!enabled)
    ASPx.GetStateController().RemoveItem(ASPx.GetStateController().hoverItems, this.GetItemElementId(indexPath), postfixes);
  }
 },
 GetItemImageUrl: function(indexPath) {
  var image = this.GetItemImage(indexPath);
  if(image)
   return image.src;
  return "";
 },
 SetItemImageUrl: function(indexPath, url) {
  var image = this.GetItemImage(indexPath);
  if(image)
   image.src = url;
 },
 AddItemImageClassName: function(indexPath, className) {
  var image = this.GetItemImage(indexPath);
  if(image) {
   var accessibilityElement = image.parentNode;
   if(accessibilityElement.tagName == "SPAN")
    ASPx.AddClassNameToElement(accessibilityElement, className);
   else
    ASPx.AddClassNameToElement(image, className);
  }
  else {
   var svgElement = this.getSvgElement(indexPath);
   if(svgElement) {
    ASPx.AddClassNameToElement(svgElement, className);
    var useElement = ASPx.GetNodeByTagName(svgElement, "use", 0);
    useElement.setAttributeNS('http://www.w3.org/1999/xlink', 'href', "#" + className);
   }
  }
 },
 AddItemAdditionalImageClassName: function(indexPath) {
 },
 getSvgElement: function(indexPath) {
  var element = this.GetItemContentElement(indexPath);
  if(element != null) {
   var svgElement = ASPx.GetNodeByTagName(element, "svg", 0);
   if(svgElement != null) {
    return svgElement;
   }
  }
 },
 GetItemImage: function(indexPath) {
  var element = this.GetItemContentElement(indexPath);
  if(element != null) {
   var img = ASPx.GetNodeByTagName(element, "IMG", 0);
   if(img != null)
    return img;
  }
 },
 GetItemNavigateUrl: function(indexPath) {
  var element = this.GetItemContentElement(indexPath);
  if(element != null && element.tagName === "A")
   return ASPx.Attr.GetAttribute(element, "savedhref") || element.href;
  if(element != null) {
   var link = ASPx.GetNodeByTagName(element, "A", 0);
   if(link != null)
    return ASPx.Attr.GetAttribute(link, "savedhref") || link.href;
  }
  return "";
 },
 SetUrl: function(link, url, target) {
  if(link != null) {
   if(ASPx.Attr.IsExistsAttribute(link, "savedhref"))
    ASPx.Attr.SetAttribute(link, "savedhref", url);
   else if(ASPx.Attr.IsExistsAttribute(link, "href"))
    link.href = url;
   if(!!target)
    link.target = target;
  }
 },
 SetItemNavigateUrl: function(indexPath, url, target) {
  var element = this.GetItemContentElement(indexPath);
  if(element != null) {
   if(element.tagName === "A")
    this.SetUrl(element, url, target);
   else {
    this.SetUrl(ASPx.GetNodeByTagName(element, "A", 0), url, target);
    this.SetUrl(ASPx.GetNodeByTagName(element, "A", 1), url, target);
   }
  }
 },
 FindTextNode: function(indexPath) {
  var contentElement = this.GetItemContentElement(indexPath);
  if(contentElement) {
   var link = this.GetLinkElementByIndexPath(indexPath);
   if(link)
    return ASPx.GetNormalizedTextNode(link);
   var textElement = this.GetContentTextElement(contentElement);
   if(textElement)
    return ASPx.GetNormalizedTextNode(textElement);
   return ASPx.GetNormalizedTextNode(contentElement);
  }
  return null;
 },
 GetContentTextElement: function(contentElement) {
  return ASPx.GetChildByClassName(contentElement, MenuCssClasses.ItemTextElement, 0);
 },
 GetItemText: function(indexPath) {
  var textNode = this.FindTextNode(indexPath);
  return textNode
   ? ASPx.Str.Trim(textNode.nodeValue)
   : "";
 },
 SetItemText: function(indexPath, text) {
  var textNode = this.FindTextNode(indexPath);
  if(textNode) {
   textNode.nodeValue = text;
   var menuElement = this.GetMenuElement(this.GetParentIndexPath(indexPath));
   if(menuElement && (!this.IsRootItem(indexPath) || this.isPopupMenu))
    this.renderHelper.CalculateSubMenu(menuElement, true);
   if(this.IsRootItem(indexPath) && !this.isPopupMenu) {
    var itemElement = this.GetItemElement(indexPath);
    if(itemElement)
     this.renderHelper.CalculateItemMinSize(itemElement, true);
   }
   this.AdjustControl();
  }
 },
 SetItemTextTemplate: function(indexPath, textTemplate) {
  var contentElement = this.GetItemContentElement(indexPath);
  var textElement = this.GetContentTextElement(contentElement);
  if(textElement) {
   var container = document.createElement("DIV");
   container.innerHTML = textTemplate;
   contentElement.replaceChild(container.firstChild, textElement);
  }
 },
 SetItemTooltip: function(indexPath, tooltip) {
  var itemElement = this.GetItemElement(indexPath);
  if(itemElement && tooltip)
   itemElement.title = tooltip;
 },
 SetItemVisible: function(indexPath, visible, initialization) {
  var item = this.GetItemByIndexPath(indexPath);
  if(indexPath == "" || !item.visible) return;
  if(visible && initialization) return;
  var element = this.GetItemElement(indexPath);
  if(element != null)
   this.SetElementDisplay(element, visible);
  this.SetIndentsVisiblility(indexPath);
  var parentIndexPath = this.GetParentIndexPath(indexPath);
  if(this.isPopupMenu && this.inPopUpHandler)
   this.postponeSetItemVisible(parentIndexPath);
  else
   this.SetSeparatorsVisiblility(parentIndexPath);
  if(!this.IsItemInAdaptiveMenu(item))
   this.UpdateItemCssClasses(indexPath, visible);
  var parent = this.GetItemByIndexPath(indexPath).parent;
  var parentHasVisibleItems = this.HasVisibleItems(parent);
  if(this.IsRootItem(indexPath) && !this.isPopupMenu) {
   if(this.clientVisible)
    this.SetElementDisplay(this.GetMainElement(), parentHasVisibleItems);
  }
  else
   this.SetPopOutElementVisible(parent.indexPath, parentHasVisibleItems);
  if(this.GetMenuLevel(parentIndexPath) !== 0 || this.isPopupMenu && !this.inPopUpHandler)
   this.calculateSubMenuByIndexPath(parentIndexPath);
  if(this.IsRootItem(indexPath) && !this.isPopupMenu)
   this.renderHelper.CalculateMenuControl(this.GetMainElement(), true);
 },
 SetElementDisplay: function (element, visible) {
  ASPx.SetElementDisplay(element, visible);
 },
 prepareSideMenuCssClasses: function(addClass) {
  if(this.sideMenuModeOn) {
   this.MarkPrecedingItemCore(this.GetSelectedItemIndexPath(), PRE_SELECTED_ELEMENT_CLASS_NAME, addClass, false);
   if(this.hoverItemName)
    this.MarkPrecedingItemCore(this.hoverItemName, PRE_HOVERED_ELEMENT_CLASS_NAME, addClass, true);
  }
 },
 calculateSubMenuByIndexPath: function(indexPath) {
  var menuElement = this.GetMenuElement(indexPath);
  if(menuElement)
   this.renderHelper.CalculateSubMenu(menuElement, true);
 },
 postponeSetItemVisible: function(indexPath) {
  if(!this.postponedIndexPath)
   this.postponedIndexPath = [];
  for(var i = 0; i < this.postponedIndexPath.length; i++) {
   if(this.postponedIndexPath[i] === indexPath)
    return;
  }
  this.postponedIndexPath.push(indexPath);
 },
 postponedSetItemVisible: function() {
  if(!!this.postponedIndexPath && this.postponedIndexPath.length > 0)
   ASPx.Data.ForEach(this.postponedIndexPath, function(indexPath) {
    this.SetSeparatorsVisiblility(indexPath);
    this.calculateSubMenuByIndexPath(indexPath);
   }.aspxBind(this));
  this.postponedIndexPath = [];
 },
 SetIndentsVisiblility: function(indexPath) {
  var parent = this.GetItemByIndexPath(indexPath).parent;
  for(var i = 0; i < parent.GetItemCount(); i++) {
   var item = parent.GetItem(i);
   var separatorVisible = this.HasPrevVisibleItems(parent, i) && item.GetVisible();
   var element = this.GetItemIndentElement(item.GetIndexPath());
   if(element != null) ASPx.SetElementDisplay(element, separatorVisible);
  }
 },
 SetSeparatorsVisiblility: function(indexPath) {
  var parent = this.GetItemByIndexPath(indexPath);
  for(var i = 0; i < parent.GetItemCount(); i++) {
   var item = parent.GetItem(i);
   var separatorVisible = this.HasPrevVisibleItems(parent, i) && (item.GetVisible() || this.HasNextVisibleItemInGroup(parent, i));
   var element = this.GetItemSeparatorElement(item.GetIndexPath());
   if(element != null) ASPx.SetElementDisplay(element, separatorVisible);
  }
 },
 UpdateItemCssClasses: function(indexPath, visible) {
 },
 SetPopOutElementVisible: function(indexPath, visible) {
  var popOutElement = this.GetItemPopOutElement(indexPath);
  if(popOutElement)
   popOutElement.style.display = visible ? 'block' : 'none';
 },
 GetPrevVisibleItemInGroup: function(parent, index, skipItemsInAdaptiveMenu) {
  if(this.IsItemBeginsGroup(parent.GetItem(index)))
   return null;
  for(var i = index - 1; i >= 0; i--) {
   var item = parent.GetItem(i);
   if(item.GetVisible() && !this.IsAdaptiveItem(item.indexPath) && (!skipItemsInAdaptiveMenu || !this.IsItemInAdaptiveMenu(item)))
    return item;
   if(this.IsItemBeginsGroup(item))
    return null;
  }
  return null;
 },
 GetNextVisibleItemInGroup: function(parent, index, skipItemsInAdaptiveMenu) {
  for(var i = index + 1; i < parent.GetItemCount(); i++) {
   var item = parent.GetItem(i);
   if(this.IsItemBeginsGroup(item))
    return null;
   if(item.GetVisible() && !this.IsAdaptiveItem(item.indexPath) && (!skipItemsInAdaptiveMenu || !this.IsItemInAdaptiveMenu(item)))
    return item;
  }
  return null;
 },
 HasNextVisibleItemInGroup: function(parent, index, skipItemsInAdaptiveMenu) {
  return !!this.GetNextVisibleItemInGroup(parent, index, skipItemsInAdaptiveMenu);
 },
 IsItemBeginsGroup: function(item) {
  var itemSeparator = this.GetItemSeparatorElement(item.GetIndexPath());
  return itemSeparator && ASPx.ElementContainsCssClass(itemSeparator, this.getSeparatorCssClass());
 },
 getSeparatorCssClass: function() {
  return MenuCssClasses.Separator;
 },
 getAdaptiveMenuItemCssClass: function() {
  return MenuCssClasses.AdaptiveMenuItem;
 },
 getAdaptiveMenuItemSpacingCssClass: function() {
  return MenuCssClasses.AdaptiveMenuItemSpacing;
 },
 getAdaptiveMenuCssClass: function() {
  return MenuCssClasses.AdaptiveMenu;
 },
 IsItemInAdaptiveMenu: function(item) {
  return this.enableAdaptivity ? this.renderHelper.IsItemInAdaptiveMenu(item.index) : false;
 },
 HasVisibleItems: function(parent) {
  for(var i = 0; i < parent.GetItemCount() ; i++) {
   if(parent.GetItem(i).GetVisible())
    return true;
  }
  return false;
 },
 HasNextVisibleItems: function(parent, index, skipItemsInAdaptiveMenu) {
  for(var i = index + 1; i < parent.GetItemCount() ; i++) {
   var item = parent.GetItem(i);
   if(item.GetVisible() && (!skipItemsInAdaptiveMenu || !this.IsItemInAdaptiveMenu(item)))
    return true;
  }
  return false;
 },
 HasPrevVisibleItems: function(parent, index, skipItemsInAdaptiveMenu) {
  for(var i = index - 1; i >= 0; i--) {
   var item = parent.GetItem(i);
   if(item.GetVisible() && (!skipItemsInAdaptiveMenu || !this.IsItemInAdaptiveMenu(item)))
    return true;
  }
  return false;
 },
 NeedCollapseControlCore: function() {
  return this.enableAdaptivity || ASPxClientControl.prototype.NeedCollapseControlCore.call(this);
 },
 GetItemIndentElement: function(indexPath) {
  return ASPx.GetElementById(this.GetItemIndentElementId(indexPath));
 },
 GetItemSeparatorElement: function(indexPath) {
  return ASPx.GetElementById(this.GetItemSeparatorElementId(indexPath));
 },
 CreateItemClickEventArgs: function(processOnServer, item, htmlElement, htmlEvent) {
  return new ASPxClientMenuItemClickEventArgs(processOnServer, item, htmlElement, htmlEvent);
 },
 CreateItemMouseEventArgs: function(item, htmlElement) {
  return new ASPxClientMenuItemMouseEventArgs(item, htmlElement);
 },
 CreateItemEventArgs: function(item) {
  return new ASPxClientMenuItemEventArgs(item);
 },
 RaiseItemClick: function(indexPath, htmlEvent) {
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned("ItemClick");
  if(!this.ItemClick.IsEmpty()) {
   var item = this.GetItemByIndexPath(indexPath);
   var htmlElement = this.GetItemElement(indexPath);
   var args = this.CreateItemClickEventArgs(processOnServer, item, htmlElement, htmlEvent);
   this.ItemClick.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseItemMouseOver: function(indexPath) {
  if(!this.ItemMouseOver.IsEmpty()) {
   var item = this.GetItemByIndexPath(indexPath);
   var htmlElement = this.GetItemContentElement(indexPath);
   var args = this.CreateItemMouseEventArgs(item, htmlElement);
   this.ItemMouseOver.FireEvent(this, args);
  }
 },
 RaiseItemMouseOut: function(indexPath) {
  if(!this.ItemMouseOut.IsEmpty()) {
   var item = this.GetItemByIndexPath(indexPath);
   var htmlElement = this.GetItemContentElement(indexPath);
   var args = this.CreateItemMouseEventArgs(item, htmlElement);
   this.ItemMouseOut.FireEvent(this, args);
  }
 },
 RaisePopUp: function(indexPath) {
  var item = this.GetItemByIndexPath(indexPath);
  if(!this.PopUp.IsEmpty()) {
   var args = this.CreateItemEventArgs(item);
   this.inPopUpHandler = true;
   this.PopUp.FireEvent(this, args);
   this.inPopUpHandler = false;
   this.postponedSetItemVisible();
  }
 },
 RaiseCloseUp: function(indexPath) {
  var item = this.GetItemByIndexPath(indexPath);
  if(!this.CloseUp.IsEmpty()) {
   var args = this.CreateItemEventArgs(item);
   this.CloseUp.FireEvent(this, args);
  }
 },
 SetEnabled: function(enabled) {
  for(var i = this.GetItemCount() - 1; i >= 0; i--) {
   var item = this.GetItem(i);
   item.SetEnabled(enabled);
  }
 },
 SetVisible: function(visible) {
  ASPxClientControl.prototype.SetVisible.call(this, visible);
  if(visible && !this.HasVisibleItems(this))
   ASPx.SetElementDisplay(this.GetMainElement(), false);
 },
 GetItemCount: function() {
  return (this.rootItem != null) ? this.rootItem.GetItemCount() : 0;
 },
 GetItem: function(index) {
  return (this.rootItem != null) ? this.rootItem.GetItem(index) : null;
 },
 GetItemByName: function(name) {
  return (this.rootItem != null) ? this.rootItem.GetItemByName(name) : null;
 },
 GetSelectedItem: function() {
  var indexPath = this.GetSelectedItemIndexPath();
  if(indexPath != "")
   return this.GetItemByIndexPath(indexPath);
  return null;
 },
 SetSelectedItem: function(item) {
  var indexPath = (item != null) ? item.GetIndexPath() : "";
  this.SetSelectedItemInternal(indexPath, false);
 },
 GetRootItem: function() {
  return this.rootItem;
 }
});
ASPxClientMenuBase.GetMenuCollection = function() {
 return aspxGetMenuCollection();
};
var ASPxMenuKeyboardHelper = ASPx.CreateClass(null, {
 constructor: function(menu) {
  this.menu = menu;
  this.accessibilityCompliant = menu.accessibilityCompliant;
  this.isContextMenu = menu.isContextMenu;
  this.rtl = menu.rtl;
 },
 OnFocusedItemKeyDown: function(evt, focusedItem) {
  var indexPath = this.menu.GetItemIndexPathById(focusedItem.name);
  if(!this.IsAllowedItemAction(evt, focusedItem.enabled, indexPath))
   ASPx.Evt.PreventEventAndBubble(evt);
  else
   this.OnFocusedItemKeyDownInternal(evt, indexPath);
 },
 OnFocusedItemKeyDownInternal: function(evt, indexPath) {
  if(!indexPath)
   return;
  var keyKode = ASPx.Evt.GetKeyCode(evt);
  switch (keyKode) {
   case ASPx.Key.Tab:
    this.OnTab(indexPath, evt);
    break;
   case ASPx.Key.Down:
    this.OnArrowDown(indexPath, evt);
    break;
   case ASPx.Key.Up:
    this.OnArrowUp(indexPath, evt);
    break;
   case ASPx.Key.Left:
    if(this.rtl)
     this.OnArrowRight(indexPath, evt);
    else
     this.OnArrowLeft(indexPath, evt);
    break;
   case ASPx.Key.Right:
    if(this.rtl)
     this.OnArrowLeft(indexPath, evt);
    else
     this.OnArrowRight(indexPath, evt);
    break;
   case ASPx.Key.Esc:
    this.OnEscape(indexPath, evt);
    break;
   case ASPx.Key.Space: break;
   case ASPx.Key.Enter: break;
   case ASPx.Key.Shift: break;
   case ASPx.Key.Alt: break;
   case ASPx.Key.Ctrl: break;
   default:
    ASPx.Evt.PreventEventAndBubble(evt);
    break;
  }
 },
 OnTab: function(indexPath, evt) {
  var isRootItem = this.IsRootItem(indexPath);
  if(isRootItem && !this.accessibilityCompliant) return;
  if(this.IsLostFocus(indexPath, evt))
   this.menu.ProcessLostFocus(evt);
  else
   this.ProcessTab(indexPath, evt);
 },
 ProcessTab: function(indexPath, evt) {
  if(this.IsRootItem(indexPath))
   this.FocusRootItem(indexPath, evt);
  else
   this.FocusSubmenuItem(indexPath, evt);
 },
 OnArrowDown: function(indexPath, evt) {
  if(this.menu.IsVertical(indexPath))
   this.FocusNextItem(indexPath);
  else
   this.ShowSubMenuAccessible(indexPath);
  ASPx.Evt.PreventEventAndBubble(evt);
 },
 OnArrowUp: function(indexPath, evt) {
  if(this.menu.IsVertical(indexPath))
   this.FocusPrevItem(indexPath);
  else
   this.ShowSubMenuAccessible(indexPath);
  ASPx.Evt.PreventEventAndBubble(evt);
 },
 OnArrowLeft: function(indexPath, evt) {
  var isVertical = this.menu.IsVertical(indexPath);
  if(isVertical) {
   var isRootItem = this.IsRootItem(indexPath);
   if(isRootItem)
    this.FocusPrevItem(indexPath);
   else
    this.FocusItemByIndexPathAccessible(this.GetLeftParentIndexPath(indexPath));
  } else
   this.FocusPrevItem(indexPath);
  ASPx.Evt.PreventEventAndBubble(evt);
 },
 OnArrowRight: function(indexPath, evt) {
  var isVertical = this.menu.IsVertical(indexPath);
  if(isVertical) {
   var hasChildren = this.menu.HasChildren(indexPath);
   if(hasChildren)
    this.ShowSubMenuAccessible(indexPath);
   else
    this.FocusItemByIndexPathAccessible(this.GetRightRootParentIndexPath(indexPath));
  }
  else
   this.FocusNextItem(indexPath);
  ASPx.Evt.PreventEventAndBubble(evt);
 },
 OnEscape: function(indexPath, evt) {
  var needPreventEvent = true;
  if(this.IsRootItem(indexPath)) {
   aspxGetMenuCollection().DoHidePopupMenus(null, -1, this.name, false, "");
   this.menu.ProcessLostFocus(evt);
  }
  else {
   var parentIndexPath = this.menu.GetParentIndexPath(indexPath);
   this.FocusItemByIndexPathAccessible(parentIndexPath);
   var element = this.menu.GetMenuElement(parentIndexPath);
   if(element != null)
    this.menu.DoHidePopupMenu(null, element);
   else
    needPreventEvent = false;
  }
  if(needPreventEvent)
   ASPx.Evt.PreventEventAndBubble(evt);
 },
 IsLostFocus: function(indexPath, evt) {
  var keyCode = ASPx.Evt.GetKeyCode(evt);
  var isRootItem = this.IsRootItem(indexPath);
  if(keyCode !== ASPx.Key.Tab || !isRootItem)
   return false;
  var canPrevItemGetFocus = evt.shiftKey && this.GetPrevSiblingIndexPath(indexPath);
  var canNextItemGetFocus = !evt.shiftKey && this.GetNextSiblingIndexPath(indexPath);
  return !canPrevItemGetFocus && !canNextItemGetFocus;
 },
 FocusRootItem: function(indexPath, evt) {
  if(evt.shiftKey)
   this.FocusPrevItem(indexPath, evt);
  else
   this.FocusNextItem(indexPath, evt);
  var isFocusElementChanged = ASPx.Evt.GetEventSource(evt) !== document.activeElement;
  if(isFocusElementChanged)
   ASPx.Evt.PreventEventAndBubble(evt);
 },
 FocusSubmenuItem: function(indexPath, evt) {
  if(evt.shiftKey)
   this.FocusPreviousSubmenuItem(indexPath, evt);
  else
   this.FocusNextSubmenuItem(indexPath, evt);
 },
 FocusPreviousSubmenuItem: function(indexPath, evt) {
  if(!this.GetPrevSiblingIndexPath(indexPath)) {
   var parentIndexPath = this.menu.GetParentIndexPath(indexPath);
   this.FocusItemByIndexPathAccessible(parentIndexPath);
  } else
   this.FocusPrevItem(indexPath);
  ASPx.Evt.PreventEventAndBubble(evt);
 },
 FocusNextSubmenuItem: function(indexPath, evt) {
  var nextIndexPath = this.GetNextIndexPath(indexPath);
  if(nextIndexPath) {
   var isLevelChanged = this.IsLevelChanged(indexPath, nextIndexPath);
   this.FocusItemCore(nextIndexPath, isLevelChanged);
   ASPx.Evt.PreventEventAndBubble(evt);
  } else
   this.menu.ProcessLostFocus(evt);
 },
 GetNextIndexPath: function(indexPath) {
  var result = this.GetNextSiblingIndexPath(indexPath);
  if(!result) {
   var parentIndexPath = this.menu.GetParentIndexPath(indexPath);
   if(parentIndexPath)
    result = this.GetNextIndexPath(parentIndexPath);
  }
  return result;
 },
 GetRightRootParentIndexPath: function(indexPath) {
  var parentIndexPath = this.GetParentRootIndexPath(indexPath);
  return this.GetNextFocusableItemIndexPath(parentIndexPath);
 },
 GetLeftParentIndexPath: function(indexPath) {
  var parentIndexPath = this.menu.GetParentIndexPath(indexPath);
  if(!this.menu.IsVertical(parentIndexPath))
   parentIndexPath = this.GetPrevFocusableItemIndexPath(parentIndexPath);
  return parentIndexPath;
 },
 GetParentRootIndexPath: function(indexPath) {
  while(!this.IsRootItem(indexPath))
   indexPath = this.menu.GetParentIndexPath(indexPath);
  return indexPath;
 },
 ShowSubMenuAccessible: function(indexPath) {
  var newIndexPath = this.GetFirstChildIndexPath(indexPath),
   element = this.menu.GetMenuElement(indexPath);
  if(element && !this.menu.isSubMenuElementVisible(element))
   this.menu.ShowSubMenu(indexPath);
  if(!!newIndexPath)
   this.FocusItemByIndexPathAccessible(newIndexPath);
 },
 FocusItemByIndexPathAccessible: function(indexPath) {
  this.FocusItemCore(indexPath, true);
 },
 IsAllowedItemAction: function(evt, isEnabled, indexPath) {
  var isVertical = this.menu.IsVertical(indexPath);
  return !this.accessibilityCompliant ||
      isEnabled ||
      this.IsAllowedFocusMoving(evt) ||
      this.IsAllowedHorizontalFocusMoving(evt, isVertical) ||
      this.IsAllowedVerticalFocusMoving(evt, isVertical);
 },
 IsAllowedFocusMoving: function(evt) {
  return evt.keyCode == ASPx.Key.Tab || evt.keyCode == ASPx.Key.Esc;
 },
 IsAllowedHorizontalFocusMoving: function(evt, isVertical) {
  return !isVertical && (evt.keyCode == ASPx.Key.Left || evt.keyCode == ASPx.Key.Right);
 },
 IsAllowedVerticalFocusMoving: function(evt, isVertical) {
  return isVertical && (evt.keyCode == ASPx.Key.Up || evt.keyCode == ASPx.Key.Down);
 },
 FocusItemByIndexPath: function(indexPath) {
  var link = this.menu.GetLinkElementByIndexPath(indexPath);
  if(link != null) {
   if(this.accessibilityCompliant && !link.href)
    link.href = ASPx.AccessibilityEmptyUrl;
   ASPx.SetFocus(link);
  } else
   this.FocusTemplateItemActionElement(indexPath);
 },
 FocusTemplateItemActionElement: function(indexPath) {
  var element = this.menu.GetItemElement(indexPath);
  var focusableElement = ASPx.FindFirstChildActionElement(element);
  if(focusableElement)
   ASPx.SetFocus(focusableElement);
  else {
   var parentIndexPath = this.menu.GetParentIndexPath(indexPath);
   this.tryFocusColorPickerByIndexPath(parentIndexPath);
  }
 },
 tryFocusColorPickerByIndexPath: function(indexPath) {
  var colorPicker = this.getColorPickerByIndexPath(indexPath);
  if(colorPicker)
   colorPicker.Focus();
 },
 getColorPickerByIndexPath: function(indexPath) {
  var menuItem = this.menu.GetItemByIndexPath(indexPath);
  return menuItem.colorPicker;
 },
 PronounceItemDescription: function(indexPath) {
  var link = this.menu.GetLinkElementByIndexPath(indexPath);
  var span = ASPx.GetNodeByTagName(link, "SPAN", 0);
  if(!link) return;
  if(!!span && !span.id) {
   var spanID = this.GetAccessibilityTextSpanID(indexPath);
   span.id = spanID;
   ASPx.Attr.SetAttribute(link, "aria-describedby", spanID);
  }
  ASPx.Attr.SetAttribute(link, "aria-label", this.GetAccessibilityItemDescription(indexPath));
 },
 RemoveAccessibilityDescription: function(indexPath) {
  var link = this.menu.GetLinkElementByIndexPath(indexPath);
  if(link && ASPx.Attr.GetAttribute(link, "aria-label"))
   ASPx.Attr.RemoveAttribute(link, "aria-label");
 },
 GetAccessibilityTextSpanID: function(indexPath) {
  return this.name + Constants.ATSIdSuffix + indexPath;
 },
 GetAccessibilityItemDescription: function(indexPath) {
  var descriptionParts = [];
  descriptionParts.push(this.menu.IsVertical(indexPath) ? ASPx.AccessibilitySR.MenuVerticalText : ASPx.AccessibilitySR.MenuHorizontalText);
  descriptionParts.push(this.IsRootItem(indexPath) ? ASPx.AccessibilitySR.MenuBarText : ASPx.AccessibilitySR.MenuText);
  descriptionParts.push(this.menu.GetMenuLevel(indexPath));
  descriptionParts.push(ASPx.AccessibilitySR.MenuLevelText);
  return descriptionParts.join(' ');
 },
 FocusNextItem: function(indexPath) {
  var newIndexPath = this.GetNextFocusableItemIndexPath(indexPath);
  if(newIndexPath)
   this.FocusItemCore(newIndexPath, false);
 },
 FocusPrevItem: function(indexPath) {
  var newIndexPath = this.GetPrevFocusableItemIndexPath(indexPath);
  if(newIndexPath)
   this.FocusItemCore(newIndexPath, false);
 },
 FocusItemCore: function(indexPath, needDescription) {
  if(this.accessibilityCompliant) {
   if(needDescription)
    this.PronounceItemDescription(indexPath);
   else
    this.RemoveAccessibilityDescription(indexPath);
  }
  this.FocusItemByIndexPath(indexPath);
 },
 GetNextFocusableItemIndexPath: function(indexPath) {
  var newIndexPath = this.GetNextSiblingIndexPath(indexPath);
  if(newIndexPath == null)
   newIndexPath = this.GetFirstSiblingIndexPath(indexPath);
  if(indexPath != newIndexPath)
   return newIndexPath;
 },
 GetPrevFocusableItemIndexPath: function(indexPath) {
  var newIndexPath = this.GetPrevSiblingIndexPath(indexPath);
  if(newIndexPath == null)
   newIndexPath = this.GetLastSiblingIndexPath(indexPath);
  if(indexPath != newIndexPath)
   return newIndexPath;
 },
 GetFirstChildIndexPath: function(indexPath) {
  var indexes = this.menu.GetItemIndexes(indexPath);
  indexes[indexes.length] = 0;
  var newIndexPath = this.menu.GetItemIndexPath(indexes);
  return this.GetFirstSiblingIndexPath(newIndexPath);
 },
 GetFirstSiblingIndexPath: function(indexPath) {
  var indexes = this.menu.GetItemIndexes(indexPath);
  var i = 0;
  while(true) {
   indexes[indexes.length - 1] = i;
   var newIndexPath = this.menu.GetItemIndexPath(indexes);
   if(!this.IsItemExist(newIndexPath))
    return null;
   if(this.IsFocusableItem(newIndexPath))
    return newIndexPath;
   i++;
  }
  return null;
 },
 GetLastSiblingIndexPath: function(indexPath) {
  var indexes = this.menu.GetItemIndexes(indexPath);
  var parentItem = this.menu.GetItemByIndexPath(this.menu.GetParentIndexPath(indexPath));
  var i = parentItem ? parentItem.GetItemCount() - 1 : 0;
  while(true) {
   indexes[indexes.length - 1] = i;
   var newIndexPath = this.menu.GetItemIndexPath(indexes);
   if(!this.IsItemExist(newIndexPath))
    return null;
   if(this.IsFocusableItem(newIndexPath))
    return newIndexPath;
   i--;
  }
  return null;
 },
 GetNextSiblingIndexPath: function(indexPath) {
  if(this.menu.IsLastItem(indexPath)) return null;
  var indexes = this.menu.GetItemIndexes(indexPath);
  var i = indexes[indexes.length - 1] + 1;
  while(true) {
   indexes[indexes.length - 1] = i;
   var newIndexPath = this.menu.GetItemIndexPath(indexes);
   if(!this.IsItemExist(newIndexPath))
    return null;
   if(this.IsFocusableItem(newIndexPath))
    return newIndexPath;
   i++;
  }
  return null;
 },
 GetPrevSiblingIndexPath: function(indexPath) {
  if(this.menu.IsFirstItem(indexPath)) return null;
  var indexes = this.menu.GetItemIndexes(indexPath);
  var i = indexes[indexes.length - 1] - 1;
  while(true) {
   indexes[indexes.length - 1] = i;
   var newIndexPath = this.menu.GetItemIndexPath(indexes);
   if(!this.IsItemExist(newIndexPath))
    return null;
   if(this.IsFocusableItem(newIndexPath))
    return newIndexPath;
   i--;
  }
  return null;
 },
 IsItemExist: function(indexPath) {
  return !!this.menu.GetItemByIndexPath(indexPath);
 },
 IsItemVisible: function(indexPath) {
  var item = this.menu.GetItemByIndexPath(indexPath);
  return item ? item.GetVisible() : false;
 },
 IsFocusableItem: function(indexPath) {
  return this.IsItemVisible(indexPath) && (this.menu.IsItemEnabled(indexPath) || this.IsItemAccessibleEnabled(indexPath));
 },
 IsRootItem: function(indexPath) {
  return this.menu.IsRootItem(indexPath);
 },
 IsItemAccessibleEnabled: function(indexPath) {
  var item = this.menu.GetItemByIndexPath(indexPath);
  return this.accessibilityCompliant && item && item.enabled;
 },
 IsLevelChanged: function(firstIndexPath, secondIndexPath) {
  return this.menu.GetMenuLevel(firstIndexPath) !== this.menu.GetMenuLevel(secondIndexPath);
 }
});
var ASPxClientMenuCollection = ASPx.CreateClass(ASPxClientControlCollection, {
 constructor: function() {
  this.constructor.prototype.constructor.call(this);
  this.appearTimerID = -1;
  this.disappearTimerID = -1;
  this.currentShowingPopupMenuName = null;
  this.visibleSubMenusMenuName = "";
  this.visibleSubMenuIds = [];
  this.overXPos = -1;
  this.overYPos = -1;
 },
 GetCollectionType: function(){
  return "Menu";
 },
 Remove: function(element) {
  if(element.name === this.visibleSubMenusMenuName) {
   this.visibleSubMenusMenuName = "";
   this.visibleSubMenuIds = [ ];
  }
  ASPxClientControlCollection.prototype.Remove.call(this, element);
 },
 RegisterVisiblePopupMenu: function(name, id) {
  this.visibleSubMenuIds.push(id);
  this.visibleSubMenusMenuName = name;
 },
 UnregisterVisiblePopupMenu: function(name, id) {
  ASPx.Data.ArrayRemove(this.visibleSubMenuIds, id);
  if(this.visibleSubMenuIds.length == 0)
   this.visibleSubMenusMenuName = "";
 },
 IsSubMenuVisible: function(subMenuId) {
  for(var i = 0; i < this.visibleSubMenuIds.length; i++) {
   if(this.visibleSubMenuIds[i] == subMenuId)
    return true;
  }
  return false;
 },
 GetMenu: function(id) {
  return this.Get(this.GetMenuName(id));
 },
 GetMenuName: function(id) {
  return this.GetMenuNameBySuffixes(id, [Constants.MMIdSuffix, Constants.MIIdSuffix]);
 },
 GetMenuNameBySuffixes: function(id, idSuffixes) {
  for(var i = 0; i < idSuffixes.length; i++) {
   var pos = id.lastIndexOf(idSuffixes[i]);
   if(pos > -1)
    return id.substring(0, pos);
  }
  return id;
 },
 ClearCurrentShowingPopupMenuName: function() {
  this.SetCurrentShowingPopupMenuName(null);
 },
 SetCurrentShowingPopupMenuName: function(value) {
  this.currentShowingPopupMenuName = value;
 },
 NowPopupMenuIsShowing: function() {
  return this.currentShowingPopupMenuName != null;
 },
 GetMenuLevelById: function(id) {
  var indexPath = this.GetIndexPathById(id, Constants.MMIdSuffix);
  var menu = this.GetMenu(id);
  return menu.GetMenuLevel(indexPath);
 },
 GetIndexPathById: function(id, idSuffix) {
  var pos = id.lastIndexOf(idSuffix);
  if(pos > -1) {
   id = id.substring(pos + idSuffix.length);
   pos = id.lastIndexOf("_");
   if(pos > -1)
    return id.substring(0, pos);
  }
  return "";
 },
 GetItemIndexPath: function(indexes) {
  var indexPath = "";
  for(var i = 0; i < indexes.length; i++) {
   indexPath += indexes[i];
   if(i < indexes.length - 1)
    indexPath += ASPx.ItemIndexSeparator;
  }
  return indexPath;
 },
 GetItemIndexes: function(indexPath) {
  var indexes = indexPath.split(ASPx.ItemIndexSeparator);
  for(var i = 0; i < indexes.length; i++)
   indexes[i] = parseInt(indexes[i]);
  return indexes;
 },
 ClearAppearTimer: function() {
  this.appearTimerID = ASPx.Timer.ClearTimer(this.appearTimerID);
 },
 ClearDisappearTimer: function() {
  this.disappearTimerID = ASPx.Timer.ClearTimer(this.disappearTimerID);
 },
 IsAppearTimerActive: function() {
  return this.appearTimerID > -1;
 },
 IsDisappearTimerActive: function() {
  return this.disappearTimerID > -1;
 },
 SetAppearTimer: function(name, indexPath, timeout, preventSubMenu) {
  var menu = aspxGetMenuCollection().Get(name);
  if(menu && !menu.sideMenuModeOn)
   this.appearTimerID = window.setTimeout(function() {
    var menu = aspxGetMenuCollection().Get(name);
    if(menu != null) menu.OnItemOverTimer(indexPath, preventSubMenu);
   }, timeout);
 },
 SetDisappearTimer: function(name, timeout) {
  var menu = aspxGetMenuCollection().Get(name);
  if(menu && !menu.sideMenuModeOn)
   this.disappearTimerID = window.setTimeout(function() {
    var menu = aspxGetMenuCollection().Get(name);
    if(menu != null)
     menu.OnItemOutTimer();
   }, timeout);
 },
 GetMouseDownMenuLevel: function(evt) {
  var srcElement = ASPx.Evt.GetEventSource(evt);
  for(var i = this.visibleSubMenuIds.length - 1; i >= 0; i--) {
   var element = ASPx.GetParentById(srcElement, this.visibleSubMenuIds[i]);
   if(element != null)
    return this.GetMenuLevelById(this.visibleSubMenuIds[i]) + 1;
  }
  if(this.visibleSubMenusMenuName != "") {
   var element = ASPx.GetParentById(srcElement, this.visibleSubMenusMenuName);
   if(element != null) return 1;
  }
  if(ASPx.GetParentByClassName(srcElement, MenuCssClasses.AdaptiveMenuItem))
   return 1;
  return -1;
 },
 CheckFocusedElement: function() {
  var isValid = false;
  try {
   var activeElement = document.activeElement;
   if(activeElement != null) {
    for(var i = 0; i < this.visibleSubMenuIds.length; i++) {
     var menuElement = ASPx.GetElementById(this.visibleSubMenuIds[i]);
     if(menuElement != null && ASPx.GetIsParent(menuElement, activeElement)) {
      var tagName = activeElement.tagName;
      if(tagName != "A" ||
         !ASPx.ElementHasCssClass(activeElement, MenuCssClasses.ContentContainer) ||
         this.GetMenu(this.visibleSubMenusMenuName).accessibilityCompliant)
          isValid = true;
      break;
     }
    }
   }
  } catch (e) {
  }
  return isValid;
 },
 LockMenusVisibility: function() {
  this.visibilityLocked = true;
  this.visibilityLockedIds = [];
  for(var i = this.visibleSubMenuIds.length - 1; i >= 0 ; i--)
   this.visibilityLockedIds.push(this.visibleSubMenuIds[i]);
 },
 UnlockMenusVisibility: function() {
  this.visibilityLocked = false;
  this.visibilityLockedIds = [];
 },
 CanHideSubMenu: function(subMenuId) {
  return !this.visibilityLocked || this.visibilityLocked && this.visibilityLockedIds.indexOf(subMenuId) > -1;
 },
 DoHidePopupMenus: function(evt, level, name, leavePopups, exceptIds) {
  exceptIds = typeof exceptIds === 'string' ? [exceptIds] : (exceptIds || []);
  for(var i = this.visibleSubMenuIds.length - 1; i >= 0 ; i--) {
   var subMenuId = this.visibleSubMenuIds[i];
   if(this.CanHideSubMenu(subMenuId)) {
    var menu = this.GetMenu(subMenuId);
    if(menu != null && !menu.sideMenuModeOn) {
     var menuLevel = this.GetMenuLevelById(subMenuId);
     if((!leavePopups || menuLevel > 0) && ASPx.Data.ArrayIndexOf(exceptIds, subMenuId) === -1) {
      if(menuLevel > level || (menu.name != name && name != "")) {
       var element = ASPx.GetElementById(subMenuId);
       if(element != null)
        menu.DoHidePopupMenu(evt, element);
      }
     }
    }
   }
  }
 },
 DoShowAtCurrentPos: function(name, indexPath) {
  var pc = this.Get(name);
  var element = pc.GetMainElement();
  if(pc != null && !ASPx.GetElementDisplay(element))
   pc.DoShowPopupMenu(element, this.overXPos, this.overYPos, indexPath);
 },
 SaveCurrentMouseOverPos: function(evt, popupElement) {
  if(!this.NowPopupMenuIsShowing()) return;
  var currentShowingPopupMenu = this.Get(this.currentShowingPopupMenuName);
  if(currentShowingPopupMenu.popupElement == popupElement)
   if(!currentShowingPopupMenu.IsMenuVisible()) {
    this.overXPos = ASPx.Evt.GetEventX(evt);
    this.overYPos = ASPx.Evt.GetEventY(evt);
   }
 },
 OnMouseDown: function(evt) {
  var menuLevel = this.GetMouseDownMenuLevel(evt);
  this.DoHidePopupMenus(evt, menuLevel, "", false, "");
  if (ASPx.Browser.TouchUI && menuLevel == -1)
   ASPx.SetHoverState(null);
 },
 RecalculateAll: function() {
  var visibleSubMenusLength = this.visibleSubMenuIds.length;
  for(var i = 0; i < visibleSubMenusLength; i++) {
   var menu = this.GetMenu(this.visibleSubMenuIds[i]);
   if(menu != null) {
    var element = ASPx.GetElementById(this.visibleSubMenuIds[i]);
    if(element != null) {
     var indexPath = this.GetIndexPathById(this.visibleSubMenuIds[i], Constants.MMIdSuffix);
     menu.CalculateSubMenuPosition(element, ASPx.InvalidPosition, ASPx.InvalidPosition, indexPath, false);
    }
   }
  }
 },
 HideAll: function() {
  this.DoHidePopupMenus(null, -1, "", false, "");
 },
 IsAnyMenuVisible: function() {
  return this.visibleSubMenuIds.length != 0;
 }
});
var menuCollection = null;
function aspxGetMenuCollection() {
 if(menuCollection == null)
  menuCollection = new ASPxClientMenuCollection();
 return menuCollection;
}
var ASPxClientMenuItem = ASPx.CreateClass(null, {
 constructor: function(menu, parent, index, name) {
  this.menu = menu;
  this.parent = parent;
  this.index = index;
  this.name = name;
  this.indexPath = "";
  this.text = "";
  this.imageUrl = "";
  this.imageClassName = "";
  this.tooltip = "";
  this.target = "";
  this.beginGroup = false;
  this.dropDownMode = false;
  if(parent) {
   this.indexPath = this.CreateItemIndexPath(parent);
  }
  this.enabled = true;
  this.clientEnabled = true;
  this.visible = true;
  this.clientVisible = true;
  this.items = [];
  this.colorPicker = null;
  this.checkedGroup = [];
  this.checked = false;
 },
 CreateItemIndexPath: function(parent) {
  return parent.indexPath ? parent.indexPath + ASPx.ItemIndexSeparator + this.index.toString() : this.index.toString();
 },
 ClearRenderedChildItems: function() {
  if(this.items.length > 0) {
   var parentNode = this.menu.GetItemElement(this.items[0].indexPath).parentNode;
   parentNode.innerHTML = "";
   this.items = [];
  }
 },
 CreateItems: function(itemsProperties) {
  for(var i = 0, len = itemsProperties.length; i < len; i++) {
   var itemProperties = itemsProperties[i],
    item = this.CreateItemInternal(itemProperties);
   if(itemProperties.items && itemProperties.items.length > 0)
    item.CreateItems(itemProperties.items);
  }
 },
 CreateItemInternal: function(itemProperties) {
  var itemName = itemProperties.name || "";
  var index = this.items.length;
  var itemType = this.menu.GetClientItemType();
  var item = new itemType(this.menu, this, index, itemName);
  if(ASPx.IsExists(itemProperties.text))
   item.text = itemProperties.text;
  if(ASPx.IsExists(itemProperties.imageUrl))
   item.imageUrl = itemProperties.imageUrl;
  if(ASPx.IsExists(itemProperties.imageHottrackSrc))
   item.imageHottrackSrc = itemProperties.imageHottrackSrc;
  if(ASPx.IsExists(itemProperties.imageClassName))
   item.imageClassName = itemProperties.imageClassName;
  if(ASPx.IsExists(itemProperties.navigateUrl))
   item.navigateUrl = itemProperties.navigateUrl;
  if(ASPx.IsExists(itemProperties.beginGroup))
   item.beginGroup = itemProperties.beginGroup;
  if(ASPx.IsExists(itemProperties.enabled) && !this.menu.NeedCreateItemsOnClientSide())
   item.enabled = itemProperties.enabled;
  if((ASPx.IsExists(itemProperties.clientEnabled) && !itemProperties.clientEnabled) || (ASPx.IsExists(itemProperties.enabled) && !itemProperties.enabled))
   item.clientEnabled = false;
  if(ASPx.IsExists(itemProperties.visible))
   item.visible = itemProperties.visible;
  if(ASPx.IsExists(itemProperties.clientVisible))
   item.clientVisible = itemProperties.clientVisible;
  if(ASPx.IsExists(itemProperties.groupName)) {
   this.menu.ProcessItemGroupName(item, itemProperties.groupName);
   item.checked = !!itemProperties.checked;
  }
  if(ASPx.IsExists(itemProperties.tooltip))
   item.tooltip = itemProperties.tooltip;
  if(ASPx.IsExists(itemProperties.target))
   item.target = itemProperties.target;
  if(ASPx.IsExists(itemProperties.dropDownMode))
   item.dropDownMode = itemProperties.dropDownMode;
  if(ASPx.IsExists(itemProperties.textTemplate))
   item.textTemplate = itemProperties.textTemplate;
  if(ASPx.IsExists(itemProperties.styles))
   item.styles = itemProperties.styles;
  if(ASPx.IsExists(itemProperties.isSvg))
   item.isSvg = itemProperties.isSvg;
  if(this.menu.NeedAppendToRenderData(item))
   this.menu.AppendToRenderData(this.indexPath, index);
  this.items.push(item);
  return item;
 },
 GetIndexPath: function() {
  return this.indexPath;
 },
 GetItemCount: function() {
  return this.items.length;
 },
 GetItem: function(index) {
  return (0 <= index && index < this.items.length) ? this.items[index] : null;
 },
 GetItemByName: function(name) {
  for(var i = 0; i < this.items.length; i++)
   if(this.items[i].name == name) return this.items[i];
  for(var i = 0; i < this.items.length; i++) {
   var item = this.items[i].GetItemByName(name);
   if(item != null) return item;
  }
  return null;
 },
 GetChecked: function() {
  var indexPath = this.GetIndexPath();
  return this.menu.IsCheckedItem(indexPath);
 },
 SetChecked: function(value) {
  var indexPath = this.GetIndexPath();
  this.menu.SetItemChecked(indexPath, value);
 },
 GetEnabled: function() {
  return this.enabled && this.clientEnabled;
 },
 SetEnabled: function(value) {
  if(this.clientEnabled != value) {
   this.clientEnabled = value;
   this.menu.SetItemEnabled(this.GetIndexPath(), value, false);
  }
 },
 GetImage: function() {
  return this.menu.GetItemImage(this.GetIndexPath());
 },
 GetImageUrl: function() {
  return this.menu.GetItemImageUrl(this.GetIndexPath());
 },
 SetImageUrl: function(value) {
  var indexPath = this.GetIndexPath();
  this.menu.SetItemImageUrl(indexPath, value);
 },
 GetNavigateUrl: function() {
  var indexPath = this.GetIndexPath();
  return this.menu.GetItemNavigateUrl(indexPath);
 },
 SetNavigateUrl: function(value) {
  var indexPath = this.GetIndexPath();
  this.menu.SetItemNavigateUrl(indexPath, value);
 },
 GetText: function() {
  var indexPath = this.GetIndexPath();
  return this.menu.GetItemText(indexPath);
 },
 SetText: function(value) {
  var indexPath = this.GetIndexPath();
  this.menu.SetItemText(indexPath, value);
 },
 GetVisible: function() {
  return this.visible && this.clientVisible;
 },
 SetVisible: function(value) {
  if(this.clientVisible != value) {
   this.setClientVisibleInternal(value);
   this.menu.SetItemVisible(this.GetIndexPath(), value, false);
  }
 },
 InitializeEnabledAndVisible: function(recursive) {
  this.menu.SetItemEnabled(this.GetIndexPath(), this.clientEnabled, true);
  this.menu.SetItemVisible(this.GetIndexPath(), this.clientVisible, true);
  if(recursive) {
   for(var i = 0; i < this.items.length; i++)
    this.items[i].InitializeEnabledAndVisible(recursive);
  }
 },
 setClientVisibleInternal: function(value) {
  this.menu.prepareSideMenuCssClasses(false);
  this.clientVisible = value;
  this.menu.prepareSideMenuCssClasses(true);
 },
 GetOwnProperties: function() {
  return {
   menuItem: this,
   focusableElement: this.GetFocusableElement()
  };
 },
 GetFocusableElement: function() {
  return this.menu.GetLinkElementByIndexPath(this.indexPath);
 }
});
var subMenuStack = function() {
 this.stack = [];
 this.hasItems = function() {
  return this.stack.length > 1;
 };
 this.count = function() {
  return this.stack.length;
 };
 this.last = function() {
  return this.stack[this.stack.length - 1].element;
 };
 this.push = function(element, text) {
  this.stack.push({element: element, text: text});
 };
 this.pop = function() {
  return this.stack.pop().element;
 };
 this.text = function() {
  return this.stack[this.stack.length - 1].text;
 };
};
var appearPanelAction = ASPx.CreateClass({
 constructor: function(menu) {
  this.menu = menu;
  this.expanded = false;
  this.cashedHtmlOverflow = '';
  this.bodyLeftMargin = 0;
  this.clearWidth = 0;
  this.animationInProgress = false;
  this.panel = this.menu.GetMainElement().parentNode;
  this.burgerButton = this.createBurgerButton();
  this.overlayPanel = this.createOverlayElement();
  this.afterCollapsePanel = new ASPxClientEvent();
  ASPx.Evt.AttachEventToElement(this.burgerButton, 'click', function() { this.toggleExpanded(); }.bind(this), true);
  ASPx.Evt.AttachEventToElement(this.overlayPanel, 'click', function() { this.toggleExpanded(); }.bind(this), true);
 },
 get isLeftPosition() {
  return this.menu.position == 'left';
 },
 createBurgerButton: function() {
  var button = document.createElement('DIV');
  button.className = BURGER_CLASS_NAME;
  if(!!this.menu.hamburgerClass)
   ASPx.AddClassNameToElement(button, this.menu.hamburgerClass);
  var line = document.createElement('DIV');
  button.appendChild(line);
  this.panel.parentNode.appendChild(button);
  return button;
 },
 createOverlayElement: function() {
  var panel = document.createElement('DIV');
  panel.className = OVERLAY_PANEL_CLASS_NAME;
  this.panel.parentNode.appendChild(panel);
  return panel;
 },
 toggleExpanded: function() {
  this.setExpanded(!this.getExpanded());
 },
 getExpanded: function() {
  return this.expanded;
 },
 setExpanded: function(value) {
  if(this.expanded != value && !this.isAnimationInProgress()) {
   this.expanded = value;
   this.setExpandedCore();
  }
 },
 setExpandedCore: function() {
  if(this.expanded) {
   this.prepareForAnimateIn();
   this.animateIn();
  }
  else
   this.animateOut();
 },
 collapse: function() {
  this.expanded = false;
  this.rollbackAfterAnimateOut();
 },
 isAnimationInProgress: function() {
  return !!this.animationInProgress;
 },
 prepareForAnimateIn: function() {
  this.prepareDocument();
  this.prepareOverlayPanel();
  this.prepareSlidePanel();
 },
 prepareDocument: function() {
  this.cashedHtmlOverflow = document.documentElement.style.overflow;
  document.documentElement.style.overflow = 'hidden';
 },
 prepareOverlayPanel: function() {
  ASPx.SetStyles(this.overlayPanel, {
   opacity: '0',
   zIndex: SIDE_MENU_ZINDEX_VALUE,
   display: 'block'
  });
  ASPx.SetStyles(this.overlayPanel, {
   marginLeft: -ASPx.GetAbsoluteX(this.overlayPanel),
   marginTop: -ASPx.GetAbsoluteY(this.overlayPanel),
  });
 },
 prepareSlidePanel: function() {
  ASPx.SetStyles(this.panel, { display: 'block', width: '100%', zIndex: SIDE_MENU_ZINDEX_VALUE + 1 });
  this.menu.AdjustControl();
  var size = this.menu.calculateMaxSize();
  this.clearWidth = size.width;
  var width = size.width;
  var overflowY = '';
  if(size.height > window.innerHeight) {
   overflowY = 'scroll';
   width = size.width + ASPx.GetVerticalScrollBarWidth();
  }
  ASPx.SetStyles(this.panel, {
   className: this.panel.className + ' ' + SLIDE_PANEL_EXPANDED_CLASS_NAME,
   overflowY: overflowY,
   width: width
  });
 },
 createTransition: function(element, obj) {
  return transition = ASPx.AnimationHelper.createAnimationTransition(element, {
   property: obj.property, unit: obj.unit, duration: SLIDE_DURATION_VALUE, transition: ASPx.AnimationConstants.Transitions.POW_EASE_OUT, onComplete: obj.onComplete
  });
 },
 getInTransitions: function() {
  var arr = [];
  arr.push({
   trans: this.createTransition(this.panel, { property: this.isLeftPosition ? 'left' : 'right', unit: 'px' }),
   start: -this.panel.offsetWidth,
   end: 0
  });
  arr.push({
   trans: this.createTransition(this.overlayPanel, {
    property: 'opacity',
    onComplete: function() {
     this.animationInProgress = false;
    }.aspxBind(this)
   }),
   start: 0,
   end: 100
  });
  return arr;
 },
 getOutTransitions: function() {
  var arr = [];
  arr.push({
   trans: this.createTransition(this.panel, { property: this.isLeftPosition ? 'left' : 'right', unit: 'px' }),
   start: 0,
   end: -this.panel.offsetWidth
  });
  arr.push({
   trans: this.createTransition(this.overlayPanel, {
    property: 'opacity',
    onComplete: function() {
     window.setTimeout(function() {
      this.rollbackAfterAnimateOut();
      this.animationInProgress = false;
     }.aspxBind(this), 0);
    }.aspxBind(this)
   }),
   start: 100,
   end: 0
  });
  return arr;
 },
 animateIn: function() {
  this.animate(this.getInTransitions());
 },
 animateOut: function() {
  this.animate(this.getOutTransitions());
 },
 animate: function(transitions) {
  this.animationInProgress = true;
  for(var i = 0, obj; obj = transitions[i]; i++)
   obj.trans.Start(obj.start, obj.end);
 },
 resetPanelStyle: function() {
  ASPx.SetStyles(this.panel, {
   className: this.panel.className.replace(SLIDE_PANEL_EXPANDED_CLASS_NAME, ''),
   left: '', width: '', display: '', zIndex: ''
  });
 },
 resetOverlayPanelStyle: function() {
  ASPx.SetStyles(this.overlayPanel, {
   display: '',
   zIndex: '',
   marginLeft: 0,
   marginTop: 0
  });
 },
 rollbackAfterAnimateOut: function() {
  this.resetPanelStyle();
  this.resetOverlayPanelStyle();
  document.documentElement.style.overflow = this.cashedHtmlOverflow;
  this.afterCollapsePanel.FireEvent();
 }
});
var appearPanelWithShiftBodyAction = ASPx.CreateClass(appearPanelAction, {
 constructor: function(menu) {
  this.cashedBodyMargin = '';
  this.cashedBodyWidth = '';
  this.constructor.prototype.constructor.call(this, menu);
 },
 getInTransitions: function() {
  var arr = appearPanelAction.prototype.getInTransitions.call(this);
  arr.push({
   trans: this.createTransition(document.body, { property: 'marginLeft', unit: 'px' }),
   start: this.bodyLeftMargin,
   end: (this.isLeftPosition ? 1 : -1) * (this.bodyLeftMargin + this.panel.offsetWidth)
  });
  return arr;
 },
 getOutTransitions: function() {
  var arr = appearPanelAction.prototype.getOutTransitions.call(this);
  arr.push({
   trans: this.createTransition(document.body, { property: 'marginLeft', unit: 'px' }),
   start: (this.isLeftPosition ? 1 : -1) * (this.bodyLeftMargin + this.panel.offsetWidth),
   end: this.bodyLeftMargin
  });
  return arr;
 },
 prepareForAnimateIn: function() {
  this.bodyLeftMargin = ASPx.PxToInt(ASPx.GetCurrentStyle(document.body).marginLeft);
  this.cashedBodyWidth = document.body.style.width;
  this.cashedBodyMargin = document.body.style.marginLeft;
  document.body.style.width = document.body.offsetWidth + 'px';
  appearPanelAction.prototype.prepareForAnimateIn.call(this);
 },
 rollbackAfterAnimateOut: function() {
  document.body.style.width = this.cashedBodyWidth;
  document.body.style.marginLeft = this.cashedBodyMargin;
  appearPanelAction.prototype.rollbackAfterAnimateOut.call(this);
 }
});
var ASPxClientMenu = ASPx.CreateClass(ASPxClientMenuBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isVertical = false;
  this.orientationChanged = false;
  this.firstSubMenuDirection = "Auto";
  this.enableSideMenu = false;
  this.sideMenuWindowInnerWidth = ASPx.MaxMobileWindowWidth;
  this.enableCollapseToIcons = false;
  this.collapseToIconsWindowInnerWidth = ASPx.MaxMobileWindowWidth;
  this.showPopOutImages = false;
  this.sideMenuModeOn = false;
  this.iconsViewModeOn = false;
  this.position = 'left';
  this.expandMode = 0;
  this.direction = this.position == 'left' ? 1 : -1;
  this.appearAction = null;
  this.subMenuStack = null;
  this.breadCrumb = null;
 },
 InlineInitialize: function() {
  var mainElement = this.GetMainElement();
  if(this.enableSideMenu) {
   mainElement.parentNode.className += ' dxm-' + this.position;
   this.subMenuStack = new subMenuStack();
   this.subMenuStack.push(this.GetMainElement());
   this.appearAction = this.createAppearAction();
   this.breadCrumb = this.createBreadCrumbs();
   this.updateBreadCrumbsText('TEMP');
   this.switchMenuView(true);
  }
  this.switchBetweenTextAndIcons();
  this.renderHelper.ApplyItemsVerticalAlignment(mainElement);
  ASPxClientMenuBase.prototype.InlineInitialize.call(this);
 },
 BrowserWindowResizeSubscriber: function() {
  return ASPxClientMenuBase.prototype.BrowserWindowResizeSubscriber.call(this) || this.enableSideMenu || this.enableCollapseToIcons;
 },
 SetData: function(data){
  ASPxClientMenuBase.prototype.SetData.call(this, data);
  if(data.adaptiveModeData)
   this.SetAdaptiveMode(data.adaptiveModeData);
 },
 IsVertical: function(indexPath) {
  return this.isVertical || !this.IsRootItem(indexPath) || this.IsAdaptiveMenuItem(indexPath);
 },
 IsSidePanelExpanded: function() {
  return this.enableSideMenu && this.appearAction.getExpanded();
 },
 IsCorrectionDisableMethodRequired: function(indexPath) {
  return (indexPath.indexOf("i") == -1) && (this.firstSubMenuDirection == "RightOrBottom" || this.firstSubMenuDirection == "LeftOrTop");
 },
 SetAdaptiveMode: function(data) {
  this.enableAdaptivity = true;
  if(ASPx.Ident.IsArray(data))
   this.adaptiveItemsOrder = data;
  else
   for(var i = data - 1; i >= 0; i--)
    this.adaptiveItemsOrder.push(i.toString());
 },
 OnBrowserWindowResize: function(e) {
  if(e && e.virtualKeyboardShownOnAndroid) return;
  this.switchMenuView();
  this.switchBetweenTextAndIcons();
  this.AdjustControl();
 },
 AdjustControlCore: function() {
  this.CorrectVerticalAlignment(ASPx.ClearHeight, this.GetPopOutElements, "PopOut", true);
  this.CorrectVerticalAlignment(ASPx.ClearVerticalMargins, this.GetPopOutImages, "PopOutImg", true);
  if(this.orientationChanged){
   this.renderHelper.ChangeOrientaion(this.GetMainElement(), this.isVertical);
   this.orientationChanged = false;
  }
  else
   this.renderHelper.CalculateMenuControl(this.GetMainElement());
  this.CorrectVerticalAlignment(ASPx.AdjustHeight, this.GetPopOutElements, "PopOut", true);
  this.CorrectVerticalAlignment(ASPx.AdjustVerticalMargins, this.GetPopOutImages, "PopOutImg", true);
 },
 GetCorrectionDisabledResult: function(x, toLeftX) {
  switch (this.firstSubMenuDirection) {
   case "RightOrBottom": {
    this.popupToLeft = false;
    return x;
   }
   case "LeftOrTop": {
    this.popupToLeft = true;
    return toLeftX;
   }
  }
 },
 IsHorizontalSubmenuNeedInversion: function(subMenuBottom, docClientHeight, menuItemTop, subMenuHeight, itemHeight) {
  if(this.firstSubMenuDirection == "Auto")
   return ASPxClientMenuBase.prototype.IsHorizontalSubmenuNeedInversion.call(this, subMenuBottom, docClientHeight, menuItemTop, subMenuHeight, itemHeight);
  return this.firstSubMenuDirection == "LeftOrTop";
 },
 createAppearAction: function() {
  var appearAction = this.expandMode == 0 ? new appearPanelWithShiftBodyAction(this) : new appearPanelAction(this);
  appearAction.afterCollapsePanel.AddHandler(function() {
   while(this.subMenuStack.hasItems())
    this.performBack(true);
   ASPx.SetStyles(this.subMenuStack.last(), { left: '', opacity: '', display: '' });
   ASPx.RemoveElement(this.breadCrumb);
  }.aspxBind(this));
  return appearAction;
 },
 createBreadCrumbs: function() {
  var element = document.createElement('DIV');
  element.className = BREAD_CRUMBS_CLASS_NAME;
  ASPx.Evt.AttachEventToElement(element, 'click', function() { this.performBack(); }.bind(this), true);
  var breadCrumbsBackImage = document.createElement('IMG');
  breadCrumbsBackImage.src = ASPx.EmptyImageUrl;
  breadCrumbsBackImage.className = BACK_ICON_CLASS_NAME;
  element.appendChild(breadCrumbsBackImage);
  var breadCrumbsTitle = document.createElement('SPAN');
  element.appendChild(breadCrumbsTitle);
  return element;
 },
 updateBreadCrumbsText: function() {
  var text = this.subMenuStack.text();
  if(text)
   this.breadCrumb.children[1].innerHTML = this.subMenuStack.text();
 },
 calculateMaxSize: function() {
  var mainElement = this.GetMainElement();
  var cachedWidth = mainElement.style.width;
  mainElement.style.width = '';
  var size = { width: mainElement.offsetWidth, height: mainElement.offsetHeight };
  this.foreachSubMenus(function(item, element) {
   if(!element) return;
   element.className += ' ' + TEMPORARY_VISIBILITY_CLASS_NAME;
   if(element.offsetWidth > size.width)
    size.width = element.offsetWidth;
   if(element.offsetHeight > size.height)
    size.height = element.offsetHeight;
   element.className = element.className.replace(' ' + TEMPORARY_VISIBILITY_CLASS_NAME, '');
  }.bind(this));
  mainElement.style.width = cachedWidth;
  return size;
 },
 foreachSubMenus: function(menuItem, callback) {
  if(arguments.length == 1) {
   callback = menuItem;
   menuItem = this.GetRootItem();
  }
  for(var i = 0, item; item = menuItem.items[i]; i++)
   this.foreachSubMenus(item, callback);
  if(menuItem.indexPath && menuItem.items.length)
   callback(menuItem, this.GetMenuElement(menuItem.indexPath));
 },
 switchMenuView: function(force) {
  if(this.enableSideMenu) {
   aspxGetMenuCollection().DoHidePopupMenus(null, 0, this.name, true, "");
   var prevSideMenuOn = this.sideMenuModeOn;
   this.sideMenuModeOn = window.innerWidth < this.sideMenuWindowInnerWidth;
   if(this.sideMenuModeOn != prevSideMenuOn || force)
    this.switchMenuViewCore();
  }
 },
 switchBetweenTextAndIcons: function() {
  if(this.enableCollapseToIcons) {
   var newIconsViewModeOn = window.innerWidth <= this.collapseToIconsWindowInnerWidth;
   if(this.iconsViewModeOn != newIconsViewModeOn)
    this.ToggleRootItemsCollapsed();
  }
 },
 ToggleRootItemsCollapsed: function() {
  this.iconsViewModeOn = !this.iconsViewModeOn;
  ASPx.ToggleClassNameToElement(this.GetMainElement(), "dxm-onlyIcons", this.iconsViewModeOn);
  if(this.isInitialized) {
   this.renderHelper.ResetMinSize();
   this.renderHelper.CalculateMenuControl(this.GetMainElement(), true);
  }
 },
 switchMenuViewCore: function() {
  if(this.sideMenuModeOn)
   this.switchToSideMenuView();
  else
   this.switchToDefaultMenuView();
 },
 switchToSideMenuView: function() {
  this.SetOrientation('Vertical');
  this.switchSideMenuClass();
  if(!this.showPopOutImages) {
   var mainElement = this.GetMainElement();
   this.replacePopupOutImages(MenuCssClasses.ItemWithoutSubMenu, MenuCssClasses.ItemWithSubMenu);
   mainElement.className = mainElement.className.replace(NO_MAIN_POP_OUT_CLASS_NAME, '');
  }
 },
 switchToDefaultMenuView: function() {
  if(!this.showPopOutImages) {
   var mainElement = this.GetMainElement();
   this.replacePopupOutImages(MenuCssClasses.ItemWithSubMenu, MenuCssClasses.ItemWithoutSubMenu);
   if(mainElement.className.indexOf(NO_MAIN_POP_OUT_CLASS_NAME) == -1)
    mainElement.className += ' ' + NO_MAIN_POP_OUT_CLASS_NAME;
  }
  this.SetOrientation('Horizontal');
  this.switchSideMenuClass();
  this.appearAction.collapse();
 },
 switchSideMenuClass: function() {
  var rootElement = this.GetMainElement().parentNode.parentNode;
  if(this.sideMenuModeOn) {
   if(rootElement.className.indexOf(SIDE_MENU_CLASS_NAME) == -1)
    rootElement.className += ' ' + SIDE_MENU_CLASS_NAME;
  }
  else
   rootElement.className = rootElement.className.replace(' ' + SIDE_MENU_CLASS_NAME, '');
 },
 replacePopupOutImages: function(firstClass, secondClass) {
  var elements = this.renderHelper.GetItemElements(this.GetMainElement());
  for(var i = 0, item = null; item = elements[i]; i++) {
   if(item.className.indexOf(firstClass))
    item.className = item.className.replace(firstClass, secondClass);
  }
 },
 CalculateSubMenuPosition: function(element, x, y, indexPath, enableAnimation) {
  if(this.sideMenuModeOn)
   this.performForward(indexPath);
  else
   ASPxClientMenuBase.prototype.CalculateSubMenuPosition.call(this, element, x, y, indexPath, enableAnimation);
 },
 startPanelAnimation: function(element, props, onComplete) {
  ASPx.AnimationHelper.createMultipleAnimationTransition(element, {
   duration: SLIDE_DURATION_VALUE,
   transition: ASPx.AnimationConstants.Transitions.POW_EASE_OUT,
   onComplete: onComplete
  }).Start(props);
 },
 changeBreadCrumbsParent: function(parent) {
  if(this.subMenuStack.count() == 1 && !parent.querySelector('.' + BREAD_CRUMBS_CLASS_NAME))
   parent.appendChild(this.breadCrumb);
 },
 performForward: function(indexPath) {
  var element = this.GetMenuElement(indexPath);
  if(element != null) {
   var currentSubMenu = this.subMenuStack.last();
   var currentSubMenuWidth = currentSubMenu.offsetWidth;
   var nextSubMenu = this.GetMenuElement(indexPath);
   this.setSubMenuVisible(nextSubMenu);
   this.changeBreadCrumbsParent(nextSubMenu);
   this.subMenuStack.push(nextSubMenu, this.GetItemByIndexPath(indexPath).GetText());
   this.updateBreadCrumbsText();
   this.setSubMenuSize(indexPath, nextSubMenu);
   this.startPanelAnimation(currentSubMenu, {
    left: { from: 0, to: this.direction * -(currentSubMenuWidth / 3), unit: "px" },
    opacity: { from: 1, to: 0 }
   }, function(el) { el.style.display = 'none'; el.style.opacity = ''; });
   window.setTimeout(function() {
    this.startPanelAnimation(nextSubMenu, {
     left: { from: this.direction * currentSubMenuWidth, to: 0, unit: "px" },
     opacity: { from: 0, to: 1 }
    }, function(element) { this.onNextSubmenuAnimationEnd(element); }.bind(this));
   }.bind(this), SLIDE_DURATION_VALUE / 3);
  }
 },
 setSubMenuVisible: function(subMenu) {
  ASPx.SetStyles(subMenu, {
   top: '', display: '', visibility: '', opacity: 0
  });
 },
 setSubMenuSize: function(indexPath, subMenu) {
  var menuElement = this.GetMenuElement(indexPath);
  menuElement.style.width = this.appearAction.clearWidth + 'px';
  subMenu.children[0].style.top = this.breadCrumb.offsetHeight + 'px';
 },
 onNextSubmenuAnimationEnd: function(element) {
  if(element.children.length > 1)
   element.parentNode.appendChild(this.breadCrumb);
 },
 performBack: function(skipAnimation) {
  if(this.subMenuStack.hasItems()) {
   var currentSubMenu = this.subMenuStack.pop();
   var prevSubMenu = this.subMenuStack.last();
   if(skipAnimation)
    this.performBackWithoutAnimation(currentSubMenu, prevSubMenu);
   else
    this.performBackWithAnimation(currentSubMenu, prevSubMenu);
  }
 },
 performBackWithoutAnimation: function(currentSubMenu, prevSubMenu) {
  this.DoHidePopupMenu(null, currentSubMenu);
 },
 performBackWithAnimation: function(currentSubMenu, prevSubMenu) {
  this.updateBreadCrumbsText();
  this.changeBreadCrumbsParent(currentSubMenu);
  var width = currentSubMenu.offsetWidth;
  prevSubMenu.style.opacity = '0';
  prevSubMenu.style.display = '';
  this.startPanelAnimation(currentSubMenu, {
   left: { from: 0, to: this.direction * (width / 3), unit: "px" },
   opacity: { from: 1, to: 0 }
  }, function(el) { el.style.opacity = ''; el.style.display = 'none'; this.DoHidePopupMenu(null, el); }.bind(this));
  window.setTimeout(function() {
   this.startPanelAnimation(prevSubMenu, {
    left: { from: this.direction * -width, to: 0, unit: "px" },
    opacity: { from: 0, to: 1 }
   });
  }.bind(this), SLIDE_DURATION_VALUE / 3);
 },
 GetOrientation: function() {
  return this.isVertical ? "Vertical" : "Horizontal";
 },
 SetOrientation: function(orientation) {
  var isVertical = orientation === "Vertical";
  if(this.isVertical !== isVertical){
   this.isVertical = isVertical;
   this.orientationChanged = true;
   this.ResetControlAdjustment();
   this.AdjustControl();
  }
 },
 ToggleSideMenu: function() {
  if(this.sideMenuModeOn)
   this.appearAction.toggleExpanded();
 }
});
ASPx.Ident.scripts.ASPxClientMenu = true;
ASPxClientMenu.Cast = ASPxClientControl.Cast;
var ASPxClientMenuExt = ASPx.CreateClass(ASPxClientMenu, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
 },
 NeedCreateItemsOnClientSide: function() {
  return true;
 }
});
var ASPxClientMenuItemEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(item) {
  this.constructor.prototype.constructor.call(this);
  this.item = item;
 }
});
var ASPxClientMenuItemMouseEventArgs = ASPx.CreateClass(ASPxClientMenuItemEventArgs, {
 constructor: function(item, htmlElement) {
  this.constructor.prototype.constructor.call(this, item);
  this.htmlElement = htmlElement;
 }
});
var ASPxClientMenuItemClickEventArgs = ASPx.CreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(processOnServer, item, htmlElement, htmlEvent) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.item = item;
  this.htmlElement = htmlElement;
  this.htmlEvent = htmlEvent;
 }
});
ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseDownEventName, function(evt) {
 return aspxGetMenuCollection().OnMouseDown(evt);
});
function aspxAMIMOver(source, args) {
 var menu = aspxGetMenuCollection().GetMenu(args.item.name);
 if(menu != null) menu.OnAfterItemOver(args.item, args.element);
}
function aspxBMIMOver(source, args) {
 var menu = aspxGetMenuCollection().GetMenu(args.item.name);
 if(menu != null) menu.OnBeforeItemOver(args.item, args.element);
}
function aspxAMIMOut(source, args) {
 var menu = aspxGetMenuCollection().GetMenu(args.item.name);
 if(menu != null) menu.OnAfterItemOut(args.item, args.element, args.toElement);
}
function aspxMSBOver(source, args) {
 var menu = MenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
 if(menu != null) menu.ClearDisappearTimer();
}
ASPx.AddAfterSetFocusedState(aspxAMIMOver);
ASPx.AddAfterClearFocusedState(aspxAMIMOut);
ASPx.AddAfterSetHoverState(aspxAMIMOver);
ASPx.AddAfterClearHoverState(aspxAMIMOut);
ASPx.AddBeforeSetFocusedState(aspxBMIMOver);
ASPx.AddBeforeSetHoverState(aspxBMIMOver);
ASPx.AddAfterSetHoverState(aspxMSBOver);
ASPx.AddAfterSetPressedState(aspxMSBOver);
ASPx.AddBeforeDisabled(function(source, args) {
 var menu = aspxGetMenuCollection().GetMenu(args.item.name);
 if(menu != null)
  menu.OnBeforeItemDisabled(args.item, args.element);
});
ASPx.AddFocusedItemKeyDown(function(source, args) {
 var menu = aspxGetMenuCollection().GetMenu(args.item.name);
 if(menu != null)
  menu.OnFocusedItemKeyDown(args.htmlEvent, args.item);
});
ASPx.AddAfterClearHoverState(function(source, args) {
 var menu = MenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
 if(menu != null) menu.SetDisappearTimer();
});
ASPx.AddAfterSetPressedState(function(source, args) {
 var menu = MenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
 if(menu) menu.StartScrolling(args.element.id, 1, 4);
});
ASPx.AddAfterClearPressedState(function(source, args) {
 var menu = MenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
 if(menu) menu.StopScrolling(args.element.id);
});
if(!ASPx.Browser.TouchUI) {
 ASPx.AddAfterSetHoverState(function(source, args) {
  var menu = MenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
  if(menu) menu.StartScrolling(args.element.id, 15, 1);
  if(!menu)
   menu = aspxGetMenuCollection().GetMenu(args.item.name);
  if(menu && menu.sideMenuModeOn && menu.IsItemElement(args.element)) {
   menu.hoverItemName = args.item.name;
   menu.MarkPrecedingItem(args.item.name, PRE_HOVERED_ELEMENT_CLASS_NAME, true);
  }
 });
 ASPx.AddAfterClearHoverState(function(source, args) {
  var menu = MenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
  if(menu) menu.StopScrolling(args.element.id);
  if(!menu)
   menu = aspxGetMenuCollection().GetMenu(args.item.name);
  if(menu && menu.sideMenuModeOn && menu.IsItemElement(args.element)) {
   menu.hoverItemName = null;
   menu.UnmarkPrecedingItem(args.item.name, PRE_HOVERED_ELEMENT_CLASS_NAME, true);
  }
 });
}
ASPx.MIClick = function(evt, name, indexPath) {
 if(ASPx.TouchUIHelper.isMouseEventFromScrolling) return;
 var menu = aspxGetMenuCollection().Get(name);
 if(menu != null) menu.OnItemClick(indexPath, evt);
};
ASPx.MIDDClick = function(evt, name, indexPath) {
 var menu = aspxGetMenuCollection().Get(name);
 if(menu != null) menu.OnItemDropDownClick(indexPath, evt);
 if(!ASPx.Browser.NetscapeFamily)
  evt.cancelBubble = true;
};
ASPx.GetMenuCollection = aspxGetMenuCollection;
ASPx.MenuRenderHelper = MenuRenderHelper;
ASPx.MenuItemClasses = MenuCssClasses;
window.ASPxClientMenuBase = ASPxClientMenuBase;
window.ASPxClientMenuCollection = ASPxClientMenuCollection;
window.ASPxClientMenuItem = ASPxClientMenuItem;
window.ASPxClientMenu = ASPxClientMenu;
window.ASPxClientMenuExt = ASPxClientMenuExt;
window.ASPxClientMenuItemEventArgs = ASPxClientMenuItemEventArgs;
window.ASPxClientMenuItemMouseEventArgs = ASPxClientMenuItemMouseEventArgs;
window.ASPxClientMenuItemClickEventArgs = ASPxClientMenuItemClickEventArgs;
})();

(function(dx) {
 var NAVBAR_CLASS = "nav navbar-nav dxbs-navbar",
  ITEM_IMAGE_CLASS = "image",
  ITEM_TEXT_CLASS = "text",
  ITEM_POPOUT_CLASS = "popout",
  SUBMENU_TEMPLATE_CLASS = "dxbs-submenu";
 var BootstrapMenuRenderHelper = ASPx.CreateClass(ASPx.MenuRenderHelper, {
  constructor: function(menu) {
   this.constructor.prototype.constructor.call(this, menu);
  },
  InlineInitializeElements: function() {
   ASPx.MenuRenderHelper.prototype.InlineInitializeElements.call(this);
   if(this.menu.IsStateControllerEnabled())
    this.InitializeStateControllerItems();
  },
  InitializeStateControllerItems: function() {
   if(!this.menu.enabled) return;
   var itemPostfixes = ['', 'T'];
   var disabledItemPostfixes = ['', 'T', 'P'];
   var itemActiveRootStyles = this.IsStateControllerItemOnRootItemElement() ? ['active'] : ['', 'active'];
   var itemActiveStyles = ASPx.BootstrapCore.IsBootstrap3 ? ['active'] : ['', 'active'];
   var itemDisabledRootStyles = this.IsStateControllerItemOnRootItemElement() ? ['disabled'] : ['', 'disabled'];
   var itemDisabledStyles = ASPx.BootstrapCore.IsBootstrap3 ? ['disabled'] : ['', 'disabled'];
   var itemCheckedStyles = ['checked'];
   var itemSuffixes = [];
   var menuSuffixes = [];
   for(var key in this.menu.renderData) {
    if(!this.menu.renderData.hasOwnProperty(key)) continue;
    var rootIndexPath = key;
    var rootItemData = this.menu.renderData[key];
    if(rootIndexPath !== "") {
     itemSuffixes.push("DXI" + rootIndexPath + "_");
     menuSuffixes.push("DXME" + rootIndexPath + "_");
    }
    for(var subKey in rootItemData) {
     if(!rootItemData.hasOwnProperty(subKey)) continue;
     var itemData = rootItemData[subKey];
     var indexPath = ASPx.Ident.IsArray(itemData) ? itemData[0] : itemData;
     if(rootIndexPath !== "")
      indexPath = rootIndexPath + "i" + indexPath;
     var itemSuffix = "DXI" + indexPath + "_";
     if(!ASPx.Data.ArrayContains(itemSuffixes, itemSuffix))
      itemSuffixes.push(itemSuffix);
    }
   }
   ASPx.BootstrapCore.AddStateItems(function() {
    var menu = this.menu;
    ASPx.AddHoverItems(this.menu.name, [[[''], [''], itemSuffixes, ['', 'P']], [[''], [''], menuSuffixes, ['']]], true);
    if(this.menu.allowSelectItem) {
     ASPx.AddSelectedItems(this.menu.name, [[itemActiveRootStyles, [''], itemSuffixes.filter(function(indexPath) { return menu.IsRootItem(indexPath); }), itemPostfixes]], true);
     ASPx.AddSelectedItems(this.menu.name, [[itemActiveStyles, [''], itemSuffixes.filter(function(indexPath) { return !menu.IsRootItem(indexPath); }), itemPostfixes]], true);
    }
    else {
     ASPx.AddSelectedItems(menu.name, [[this.menu.isPopupMenu ? itemCheckedStyles : itemActiveRootStyles, [''], itemSuffixes.filter(function(indexPath) { return menu.IsRootItem(indexPath); }), itemPostfixes]], true);
     ASPx.AddSelectedItems(menu.name, [[itemCheckedStyles, [''], itemSuffixes.filter(function(indexPath) { return !menu.IsRootItem(indexPath); }), itemPostfixes]], true);
    }
    ASPx.AddDisabledItems(this.menu.name, [[itemDisabledRootStyles, [''], itemSuffixes.filter(function(indexPath){ return menu.IsRootItem(indexPath); }), disabledItemPostfixes]], true);
    ASPx.AddDisabledItems(this.menu.name, [[itemDisabledStyles, [''], itemSuffixes.filter(function(indexPath) { return !menu.IsRootItem(indexPath); }), disabledItemPostfixes]], true);
    var menuElements = this.GetPopupMenuElements(menu.GetMainElement());
    var menuElementsSuffixes = [];
    for(var i = 0; i < menuElements.length; i++)
     menuElementsSuffixes.push(menuElements[i].id.replace(menu.name + "_", ""));
    ASPx.AddHoverItems(menu.name, [[[''], [''], menuElementsSuffixes, ['']], [[''], [''], [], ['']]], true);
   }.aspxBind(this));
  },
  IsStateControllerItemOnRootItemElement: function() {
   return ASPx.BootstrapCore.IsBootstrap3;
  },
  HasSubMenuTemplate: function(menuElement) {
   var contentElement = this.GetContentElement(menuElement);
   return (contentElement && contentElement.tagName !== "UL") || (menuElement && ASPx.ElementHasCssClass(menuElement, SUBMENU_TEMPLATE_CLASS));
  },
  GetSubMenuIndexPathByMenuParentElement: function(element) {
   return this.menu.GetItemIndexPathById(element.parentNode.id);
  },
  InlineInitializePopupMenuElements: function(parentElement) {
   var indexPath = this.GetSubMenuIndexPathByMenuParentElement(parentElement);
   this.InlineInitializePopupMenuMenuElement(parentElement, indexPath);
  },
  InlineInitializePopupMenuMenuElement: function(parentElement, indexPath) {
   if(indexPath !== "")
    parentElement.id = this.menu.GetMenuElementId(indexPath);
   this.InlineInitializePopupMenuContentElements(parentElement, parentElement, indexPath);
  },
  InlineInitializeItemElement: function(itemElement, parentIndexPath, visibleIndex) {
   ASPx.MenuRenderHelper.prototype.InlineInitializeItemElement.call(this, itemElement, parentIndexPath, visibleIndex);
   if(!this.IsItemDisabled(itemElement)) {
    var itemLink = ASPx.GetChildByTagName(itemElement, "A");
    if(itemLink && itemLink.href === "")
     itemLink.href = ASPx.AccessibilityEmptyUrl;
   }
   var links = ASPx.GetNodesByTagName(itemElement, "A");
   for(var i = 0; i < links.length; i++)
    this.attachAccessibilityEventsToLink(links[i]);
  },
  InlineInitializeItemPopOutElement: function(itemElement, indexPath) { },
  AssignItemOnClickToElement: function(element, itemLinkMode, method) {
   if(element && element.tagName !== "A")
    element = ASPx.GetNodeByTagName(element, "A");
   ASPx.MenuRenderHelper.prototype.AssignItemOnClickToElement.call(this, element, itemLinkMode, method);
  },
  IsItemDisabled: function(itemElement) {
   var element = ASPx.BootstrapCore.IsBootstrap3 ? itemElement : this.GetItemContentElement(itemElement);
   return ASPx.ElementContainsCssClass(element, "disabled");
  },
  SetItemIconCssClass: function(itemElement, iconCssClass) {
   var iconElement = this.GetItemIconElement(itemElement);
   if(iconElement)
    ASPx.SetClassName(iconElement, ITEM_IMAGE_CLASS + (iconCssClass ? " " + iconCssClass : ""));
  },
  GetItemIconCssClass: function(itemElement) {
   var iconElement = this.GetItemIconElement(itemElement);
   var regEx = new RegExp("(?:^|\\s)" + ITEM_IMAGE_CLASS + "(?!\\S)");
   return iconElement ? ASPx.Str.Trim(ASPx.GetClassName(iconElement).replace(regEx, "")) : "";
  },
  ChangeItemLinkEnabledAttributes: function(hyperLink, itemElement, enabled, accessibilityCompliant) {
   ASPx.MenuRenderHelper.prototype.ChangeItemLinkEnabledAttributes.call(this, hyperLink, itemElement, enabled, accessibilityCompliant);
   if(!ASPx.BootstrapCore.IsBootstrap3) {
    var action = enabled ? ASPx.Attr.RemoveAttribute : ASPx.Attr.SetAttribute;
    action(hyperLink, "tabIndex", "-1");
   }
  },
  convertToNavBar: function(menuElement) {
   ASPx.RemoveClassNameFromElement(menuElement, ASPx.BootstrapCssSelectors.DropDownMenu);
   ASPx.AddClassNameToElement(menuElement, NAVBAR_CLASS);
   var itemElements = ASPx.GetChildNodesByTagName(menuElement, "LI");
   for(var i = 0; i < itemElements.length; i++) {
    ASPx.AddClassNameToElement(itemElements[i], ASPx.BootstrapCssSelectors.NavItem);
    var linkElement = ASPx.GetChildByTagName(itemElements[i], "A");
    if(linkElement) {
     ASPx.RemoveClassNameFromElement(linkElement, ASPx.BootstrapCssSelectors.DropDownMenuItem);
     ASPx.AddClassNameToElement(linkElement, ASPx.BootstrapCssSelectors.NavLink);
    }
   }
  },
  convertToMenu: function(menuElement) {
   ASPx.AddClassNameToElement(menuElement, ASPx.BootstrapCssSelectors.DropDownMenu);
   ASPx.RemoveClassNameFromElement(menuElement, NAVBAR_CLASS);
   var itemElements = ASPx.GetChildNodesByTagName(menuElement, "LI");
   for(var i = 0; i < itemElements.length; i++) {
    ASPx.RemoveClassNameFromElement(itemElements[i], ASPx.BootstrapCssSelectors.NavItem);
    var linkElement = ASPx.GetChildByTagName(itemElements[i], "A");
    if(linkElement) {
     ASPx.AddClassNameToElement(linkElement, ASPx.BootstrapCssSelectors.DropDownMenuItem);
     ASPx.RemoveClassNameFromElement(linkElement, ASPx.BootstrapCssSelectors.NavLink);
    }
   }
  },
  PrepareElementScrolling: function(element, excessTop, excessBottom) {
   if(excessTop > 0 || excessBottom > 0) {
    element.style.overflowY = "auto";
    element.style.overflowX = "hidden";
    var height = element.offsetHeight;
    if(excessTop > 0)
     height -= excessTop;
    if(excessBottom > 0)
     height -= excessBottom;
    element.style.height = (height - 8) + "px";
   }
  },
  ResetElementScrolling: function(element) {
   element.style.height = "auto";
   element.style.overflowX = "visible";
   element.style.overflowY = "visible";
  },
  createScrollableMenusContainer: function(className) {
   var container = document.createElement("DIV");
   ASPx.SetClassName(container, className);
   return container;
  },
  GetContentElement: function(menuElement) {
   return ASPx.CacheHelper.GetCachedElement(this, "contentElement",
    function() {
     if(menuElement.tagName === "UL")
      return menuElement;
     var contentElement = ASPx.GetNodeByTagName(menuElement, "UL");
     if(contentElement)
      return contentElement;
     return ASPx.GetNodeByTagName(menuElement, "DIV");
    }, menuElement);
  },
  GetItemElements: function(menuElement) {
   return ASPx.CacheHelper.GetCachedElements(this, "itemElements",
    function() {
     var contentElement = menuElement && !ASPx.ElementHasCssClass(menuElement, SUBMENU_TEMPLATE_CLASS) ? this.GetContentElement(menuElement) : null;
     return contentElement ? ASPx.GetChildNodesByQuerySelector(contentElement, "li:not(.separator):not(." + ASPx.BootstrapCssSelectors.Divider + ")") : [];
    }, menuElement);
  },
  GetPopupMenuElements: function(menuElement) {
   return ASPx.CacheHelper.GetCachedElements(this, "popupMenuElements",
    function() {
     var contentElement = this.GetContentElement(menuElement);
     return contentElement ? ASPx.GetNodesByClassName(contentElement, "dxbs-dm") : null;
    }, menuElement);
  },
  GetItemContentElement: function(itemElement) {
   return ASPx.CacheHelper.GetCachedElement(this, "contentElement",
    function() {
     return ASPx.GetChildByTagName(itemElement, "A");
    }, itemElement);
  },
  GetItemPopOutElement: function(itemElement) {
   return ASPx.CacheHelper.GetCachedElement(this, "popOutElement",
    function() {
     return ASPx.GetNodeByClassName(itemElement, ITEM_POPOUT_CLASS);
    }, itemElement);
  },
  GetItemIconElement: function(itemElement) {
   return ASPx.CacheHelper.GetCachedElement(this, "iconElement",
    function() {
     var imageNodes = ASPx.GetNodesByClassName(itemElement, ITEM_IMAGE_CLASS);
     return imageNodes[imageNodes.length - 1];
    }, itemElement);
  },
  getEventSyncObject: function() {
   if(!this.menu.getEventContainers)
    this.menu.getEventContainers = function() { return this.getEventContainersCore(); }.aspxBind(this.menu);
   return this.menu;
  },
  CalculateMenuControl: function(menuElement, recalculate) {
  },
  CalculateSubMenu: function(parentElement, recalculate) {
  },
  PrecalculateMenuPopOuts: function(menuElement) {
  },
  ApplyItemsVerticalAlignment: function() { },
  AssignItemOnClickToElementCore: function(element, handler) {
   ASPx.BootstrapEventManager.attachEventToElement(this.getEventSyncObject(), element, "click", handler);
  },
  attachAccessibilityEventsToLink: function(link) {
  }
 });
 var BootstrapClientMenuItem = ASPx.CreateClass(ASPxClientMenuItem, {
  constructor: function(menu, parent, index, name) {
   this.constructor.prototype.constructor.call(this, menu, parent, index, name);
  },
  GetFirstVisibleChild: function () {
   for (var i = 0; i < this.GetItemCount(); i++) {
    var child = this.GetItem(i);
    if (child.GetVisible())
     return child;
   }
   return null;
  },
  GetBadgeText: function() {
   var indexPath = this.GetIndexPath();
   return this.menu.GetItemBadgeText(indexPath);
  },
  SetBadgeText: function(text) {
   var indexPath = this.GetIndexPath();
   this.menu.SetItemBadgeText(indexPath, text);
  },
  GetBadgeIconCssClass: function() {
   var indexPath = this.GetIndexPath();
   return this.menu.GetItemBadgeIconCssClass(indexPath);
  },
  SetBadgeIconCssClass: function(cssClass) {
   var indexPath = this.GetIndexPath();
   this.menu.SetItemBadgeIconCssClass(indexPath, cssClass);
  },
  GetIconCssClass: function() {
   var indexPath = this.GetIndexPath();
   return this.menu.GetItemIconCssClass(indexPath);
  },
  SetIconCssClass: function(cssClass) {
   var indexPath = this.GetIndexPath();
   this.menu.SetItemIconCssClass(indexPath, cssClass);
  }
 });
 var BootstrapClientMenu = ASPx.CreateClass(ASPxClientMenu, {
  constructor: function(name) {
   this.constructor.prototype.constructor.call(this, name);
  },
  InlineInitialize: function() {
   ASPxClientMenu.prototype.InlineInitialize.call(this);
   this.enableAnimation = false;
  },
  CreateRenderHelper: function() {
   return new BootstrapMenuRenderHelper(this);
  },
  RenderSubMenuItem: function(indexPath) {
   var subMenuElement = this.CreateSubMenuElement(indexPath);
   var itemElement = this.GetItemElement(indexPath);
   if(itemElement) {
    var sampleList = ASPx.GetChildByTagName(itemElement, "UL");
    if(sampleList) itemElement.removeChild(sampleList);
    itemElement.appendChild(subMenuElement);
   }
   return subMenuElement;
  },
  GetMenuMainElement: function(element) {
   var indexPath = this.GetIndexPathById(element.id, true);
   return this.GetMenuElement(indexPath);
  },
  GetMenuListElement: function(indexPath) {
   var element = this.GetMenuElement(indexPath);
   if(element && element.tagName !== "UL")
    return ASPx.GetChildByTagName(element, "UL");
   return element;
  },
  GetItemSeparatorElement: function(indexPath) {
   var el = this.GetItemElement(indexPath);
   var separator = el && el.previousElementSibling;
   return separator && ASPx.ElementHasCssClass(separator, "separator") ? separator : null;
  },
  getSeparatorCssClass: function() {
   return "separator";
  },
  getScrollableMenusContainer: function() {
   if(!this.scrollableMenusContainer) {
    this.scrollableMenusContainer = this.renderHelper.createScrollableMenusContainer("dxbs-menu");
    this.GetMainElement().parentNode.appendChild(this.scrollableMenusContainer);
   }
   return this.scrollableMenusContainer;
  },
  getEventContainersCore: function() {
   var obj = [this.GetMainElement()];
   if(this.enableScrolling)
    obj.push(this.getScrollableMenusContainer());
   return obj;
  },
  DoShowPopupMenu: function(element, x, y, indexPath) {
   if(this.isNavBarModeActivated())
    this.convertMenuToNavBarMode(element);
   if(this.enableScrolling) {
    var menuParent = this.getScrollableMenusContainer();
    if(element.parentNode !== menuParent)
     menuParent.appendChild(element);
   }
   ASPxClientMenu.prototype.DoShowPopupMenu.call(this, element, x, y, indexPath);
   var itemLinkElement = this.GetLinkElementByIndexPath(indexPath);
   ASPx.Attr.Aria.SetExpanded(itemLinkElement, true);
  },
  GetScrollingCorrection: function(element, indexPath, clientY) {
   if(this.enableScrolling) {
    var yClientCorrection = this.GetScrollSubMenuYCorrection(element, null, clientY);
    if(yClientCorrection > 0)
     return yClientCorrection;
   }
   return 0;
  },
  DoHidePopupMenu: function(evt, element) {
   ASPxClientMenu.prototype.DoHidePopupMenu.call(this, evt, element);
   var indexPath = this.GetIndexPathById(element.id, true);
   var itemLinkElement = this.GetLinkElementByIndexPath(indexPath);
   ASPx.Attr.Aria.SetExpanded(itemLinkElement, false);
   if(this.navBarMode)
    this.restoreMenuFromNavBarMode(element);
  },
  DoResetScrolling: function(element, indexPath) {
   if(this.enableScrolling)
    this.renderHelper.ResetElementScrolling(element);
  },
  GetScrollHelper: function(indexPath) {
   return null;
  },
  PrepareScrolling: function(element, scrollHelper, excessTop, excessBottom) {
   if(this.enableScrolling)
    this.renderHelper.PrepareElementScrolling(element, excessTop, excessBottom);
  },
  OnItemClick: function(indexPath, evt) {
   var hideSubMenu = false, preventItemSelection = false;
   var menuElement = this.GetMenuElement(indexPath);
   if(menuElement && this.isNavBarModeActivated()) {
    if(ASPx.GetElementDisplay(menuElement))
     hideSubMenu = true;
    if(ASPx.ElementHasCssClass(ASPx.Evt.GetEventSource(evt), ITEM_POPOUT_CLASS)) {
     ASPx.Evt.PreventEvent(evt);
     preventItemSelection = true;
    }
   }
   if(preventItemSelection)
    this.DoItemClick(indexPath, false, evt);
   else
    ASPxClientMenu.prototype.OnItemClick.call(this, indexPath, evt);
   if(menuElement && hideSubMenu)
    this.DoHidePopupMenu(evt, menuElement);
  },
  CanCloseSubMenuOnClick: function(indexPath) {
   return !this.isNavBarModeActivated();
  },
  GetAppearAfter: function(indexPath) {
   if(this.isNavBarModeActivated())
    return 120000;
   return ASPxClientMenu.prototype.GetAppearAfter.call(this);
  },
  GetDisappearAfter: function() {
   if(this.isNavBarModeActivated())
    return 120000;
   return ASPxClientMenu.prototype.GetDisappearAfter.call(this);
  },
  isNavBarModeActivated: function(){
   if(!this.navBarMode) return false;
   var menuElement = this.GetMenuListElement("");
   if(ASPx.BootstrapCore.IsBootstrap3)
    return ASPx.GetCurrentStyle(menuElement).float === "none";
   return ASPx.GetCurrentStyle(menuElement).flexDirection === "column";
  },
  convertMenuToNavBarMode: function(menuElement){
   if(menuElement.navBarMode) return;
   this.renderHelper.convertToNavBar(menuElement);
   menuElement.navBarMode = true;
  },
  restoreMenuFromNavBarMode: function(menuElement){
   if(!menuElement.navBarMode) return;
   this.renderHelper.convertToMenu(menuElement);
   menuElement.navBarMode = false;
  },
  BrowserWindowResizeSubscriber: function () {
   return this.navBarMode;
  },
  OnBrowserWindowResize: function(e) {
   var isNavBarModeActivated = this.isNavBarModeActivated();
   if(!isNavBarModeActivated && this.savedIsNavBarModeActivated || isNavBarModeActivated && !this.savedIsNavBarModeActivated)
    ASPx.GetMenuCollection().DoHidePopupMenus(null, 0, this.name, true, "");
   this.savedIsNavBarModeActivated = isNavBarModeActivated;
  },
  AdjustControlCore: function() {
  },
  GetClientItemType: function() {
   return BootstrapClientMenuItem;
  },
  GetItemBadgeText: function(indexPath) {
   return ASPx.BootstrapBadgeManager.getBadgeText(this.GetItemContentElement(indexPath));
  },
  SetItemBadgeText: function(indexPath, text) {
   var badgeText = this.HtmlEncode(text);
   var contentElement = this.GetItemContentElement(indexPath);
   var badge = ASPx.BootstrapBadgeManager.findBadge(contentElement);
   if(badge)
    ASPx.BootstrapBadgeManager.setBadgeText(badge, badgeText);
   else
    this.AddBadgeToItemContentElement(contentElement, ASPx.BootstrapBadgeManager.createBadge(badgeText));
  },
  GetItemBadgeIconCssClass: function(indexPath) {
   return ASPx.BootstrapBadgeManager.getBadgeIconCssClass(this.GetItemContentElement(indexPath));
  },
  SetItemBadgeIconCssClass: function(indexPath, cssClass) {
   var contentElement = this.GetItemContentElement(indexPath);
   var badge = ASPx.BootstrapBadgeManager.findBadge(contentElement);
   if(badge)
    ASPx.BootstrapBadgeManager.setBadgeIconCssClass(badge, cssClass);
   else
    this.AddBadgeToItemContentElement(contentElement, ASPx.BootstrapBadgeManager.createBadge("", cssClass));
  },
  AddBadgeToItemContentElement: function(contentElement, badgeElement) {
   var popOutElement = this.renderHelper.GetItemPopOutElement(contentElement);
   if(popOutElement)
    contentElement.insertBefore(badgeElement, popOutElement);
   else
    contentElement.appendChild(badgeElement);
  },
  GetItemIconCssClass: function(indexPath) {
   return this.renderHelper.GetItemIconCssClass(this.GetItemContentElement(indexPath));
  },
  SetItemIconCssClass: function(indexPath, cssClass) {
   this.renderHelper.SetItemIconCssClass(this.GetItemContentElement(indexPath), cssClass);
  },
  CreateItemClickEventArgs: function(processOnServer, item, htmlElement, htmlEvent) {
   return new BootstrapClientMenuItemClickEventArgs(processOnServer, item, htmlElement, htmlEvent);
  },
  CreateItemMouseEventArgs: function(item, htmlElement) {
   return new BootstrapClientMenuItemMouseEventArgs(item, htmlElement);
  },
  CreateItemEventArgs: function(item) {
   return new BootstrapClientMenuItemEventArgs(item);
  },
  GetContentTextElement: function(contentElement) {
   return ASPx.GetChildByClassName(contentElement, ITEM_TEXT_CLASS, 0);
  },
 });
 var BootstrapClientMenuItemEventArgs = ASPx.CreateClass(ASPxClientMenuItemEventArgs, {
  constructor: function(item) {
   this.constructor.prototype.constructor.call(this, item);
  }
 });
 var BootstrapClientMenuItemMouseEventArgs = ASPx.CreateClass(BootstrapClientMenuItemEventArgs, {
  constructor: function(item, htmlElement) {
   this.constructor.prototype.constructor.call(this, item, htmlElement);
  }
 });
 var BootstrapClientMenuItemClickEventArgs = ASPx.CreateClass(ASPxClientMenuItemClickEventArgs, {
  constructor: function(processOnServer, item, htmlElement, htmlEvent) {
   this.constructor.prototype.constructor.call(this, processOnServer, item, htmlElement, htmlEvent);
  }
 });
 ASPx.BootstrapMenuRenderHelper = BootstrapMenuRenderHelper;
 dx.BootstrapClientMenu = BootstrapClientMenu;
 dx.BootstrapClientMenuItem = BootstrapClientMenuItem;
 dx.BootstrapClientMenuItemEventArgs = BootstrapClientMenuItemEventArgs;
 dx.BootstrapClientMenuItemMouseEventArgs = BootstrapClientMenuItemMouseEventArgs;
 dx.BootstrapClientMenuItemClickEventArgs = BootstrapClientMenuItemClickEventArgs;
})(dx || (dx = {}));

(function (dx) {
 var ITEM_IMAGE_CLASS = "image";
 var SHOW_SUBMENU_CLASS = "show";
 var RibbonToolbarCssClasses = {
  Root: "dxbs-r-toolbar"
 };
 var BootstrapToolbarRenderHelper = ASPx.CreateClass(ASPx.BootstrapMenuRenderHelper, {
  InlineInitializeItemPopOutElement: function (itemElement, indexPath) {
   if (this.menu.IsDropDownItem(indexPath)) {
    var popOutElement = this.GetItemPopOutElement(itemElement);
    if(popOutElement)
     popOutElement.id = this.menu.GetItemPopOutElementId(indexPath);
   }
  },
  IsStateControllerItemOnRootItemElement: function(){
   return true;
  },
  GetContentElement: function (menuElement) {
   return ASPx.CacheHelper.GetCachedElement(this, "contentElement", function () {
    if (ASPx.ElementHasCssClass(menuElement, this.getContentElementCssClass()))
     return menuElement;
    return menuElement.querySelector("." + this.getContentElementCssClass()) ||
     ASPx.BootstrapMenuRenderHelper.prototype.GetContentElement.call(this, menuElement);
   }.bind(this), menuElement);
  },
  getContentElementCssClass: function () {
   return ASPx.BootstrapCssSelectors.Toolbar;
  },
  GetItemElements: function(menuElement) {
   return ASPx.CacheHelper.GetCachedElements(this, "itemElements", function() {
    var contentElement = this.GetContentElement(menuElement);
    if(ASPx.ElementHasCssClass(menuElement, this.getContentElementCssClass())) {
     return ASPx.NodeListToArray(contentElement.querySelectorAll(this.getItemSelectors().join(",")), function(el) {
      var parentElement = el.parentNode;
      var adaptiveItemCssClass = this.menu.getAdaptiveMenuItemCssClass();
      var isAdaptiveMenuItem = ASPx.ElementHasCssClass(el, adaptiveItemCssClass);
      var isMenuItem = parentElement.parentNode === menuElement;
      var isCustomMenuItem = ASPx.ElementHasCssClass(el, CUSTOM_ITEM_CLASS) && parentElement === menuElement;
      return isAdaptiveMenuItem || !el.querySelector("." + adaptiveItemCssClass) && (isMenuItem || isCustomMenuItem);
     }.bind(this));
    }
    return ASPx.BootstrapMenuRenderHelper.prototype.GetItemElements.call(this, menuElement);
   }.bind(this), menuElement);
  },
  getItemSelectors: function() {
   return ITEM_SELECTORS;
  },
  GetItemContentElement: function (itemElement) {
   return ASPx.CacheHelper.GetCachedElement(this, "contentElement", function () {
    if (ASPx.ElementHasCssClass(itemElement, ASPx.BootstrapCssSelectors.Button) || ASPx.ElementHasCssClass(itemElement, CUSTOM_ITEM_CLASS))
     return itemElement;
    if (ASPx.ElementHasCssClass(itemElement, ASPx.BootstrapCssSelectors.ButtonGroup) || ASPx.ElementHasCssClass(itemElement, ASPx.BootstrapCssSelectors.ButtonGroupVertical))
     return itemElement.querySelector(DROPDOWN_CONTENTBUTTON_SELECTOR);
    return ASPx.BootstrapMenuRenderHelper.prototype.GetItemContentElement.call(this, itemElement);
   }.bind(this), itemElement);
  },
  GetItemPopOutElement: function (itemElement) {
   return ASPx.CacheHelper.GetCachedElement(this, "popOutElement", function () {
    if (ASPx.ElementHasCssClass(itemElement, ASPx.BootstrapCssSelectors.ButtonGroup) || ASPx.ElementHasCssClass(itemElement, ASPx.BootstrapCssSelectors.ButtonGroupVertical))
     return ASPx.GetNodeByClassName(itemElement, ASPx.BootstrapCssSelectors.DropDownToggle);
    return ASPx.BootstrapMenuRenderHelper.prototype.GetItemPopOutElement(itemElement);
   }, itemElement);
  },
  AssignItemOnClickToElement: function (element, itemLinkMode, method) {
   if (ASPx.ElementHasCssClass(element, ASPx.BootstrapCssSelectors.Button))
    ASPx.MenuRenderHelper.prototype.AssignItemOnClickToElement.call(this, element, itemLinkMode, method);
   else if (ASPx.ElementHasCssClass(element, ASPx.BootstrapCssSelectors.ButtonGroup) || ASPx.ElementHasCssClass(element, ASPx.BootstrapCssSelectors.ButtonGroupVertical))
    ASPx.MenuRenderHelper.prototype.AssignItemOnClickToElement.call(this, element.querySelector(DROPDOWN_CONTENTBUTTON_SELECTOR), itemLinkMode, method);
   else if (!ASPx.ElementHasCssClass(element, CUSTOM_ITEM_CLASS))
    ASPx.BootstrapMenuRenderHelper.prototype.AssignItemOnClickToElement.call(this, element, itemLinkMode, method);
  },
  GetSubMenuIndexPathByMenuParentElement: function (element) {
   if (ASPx.ElementHasCssClass(element.parentNode, ASPx.BootstrapCssSelectors.ButtonGroup) || ASPx.ElementHasCssClass(element.parentNode, ASPx.BootstrapCssSelectors.ButtonGroupVertical)) {
    var btn = element.parentNode.querySelector(DROPDOWN_CONTENTBUTTON_SELECTOR);
    return this.menu.GetItemIndexPathById(btn.id);
   }
   return ASPx.BootstrapMenuRenderHelper.prototype.GetSubMenuIndexPathByMenuParentElement.call(this, element);
  },
  GetItemLinkElement: function(itemElement) {
   return ASPx.GetChildByTagName(itemElement, "A", 0);
  }
 });
 var BootstrapRibbonToolbarDefaultRenderHelper = ASPx.CreateClass(BootstrapToolbarRenderHelper, {
  CalculateItemMinSize: function() { },
  canAssignAccessibilityEventsToChildrenLinks: function () { return false; },
  canContainSeparators: function () { return false; },
  canContainImageElement: function () { return false; },
  InlineInitializeScrollElements: function () {},
  AssignItemOnClickToElementCore: function(element, handler) {
   ASPx.BootstrapEventManager.attachEventToElement(dx.BootstrapClientRibbon.getEventSyncObject(this.menu.GetMainElement(), this), element, "click", handler);
  },
  ChangeItemEnabledAttributes: function(itemElement, enabled, accessibilityCompliant) {
   if(!itemElement) return;
   itemElement.clientDisabled = !enabled;
   var hyperLink = this.GetItemLinkElement(itemElement);
   if(hyperLink)
    this.ChangeItemLinkEnabledAttributes(hyperLink, itemElement, enabled, accessibilityCompliant);
  },
  IsItemDisabled: function (itemElement) {
   if (itemElement.clientDisabled !== undefined)
    return itemElement.clientDisabled;
   return ASPx.ElementContainsCssClass(itemElement, "disabled");
  },
  InlineInitializePopupMenuMenuElement: function(parentElement, indexPath) {
   if(indexPath !== "") {
    if (!parentElement._initializedMenu) {
     parentElement._initializedMenu = true;
     parentElement.id = this.menu.GetMenuElementId(indexPath);
    } else
     return;
   }
   this.InlineInitializePopupMenuContentElements(parentElement, parentElement, indexPath);
  }
 });
 var BootstrapRibbonToolbarRenderHelper = ASPx.CreateClass(BootstrapRibbonToolbarDefaultRenderHelper, {
  getItemSelectors: function () {
   return RIBBON_TOOLBAR_ITEM_SELECTORS;
  },
  getContentElementCssClass: function () {
   return RibbonToolbarCssClasses.Root;
  }
 });
 ASPx.BootstrapToolbarRenderHelper = BootstrapToolbarRenderHelper;
 function isColorItem(el) {
  return !!el && ASPx.Attr.GetAttribute(el, "data-item-type") === "color";
 }
 function getColorBtn(parent) {
  return ASPx.GetChildByClassName(parent, "btn", 0);
 }
 function updateColorAttributes(el, colorValue, color, srcEl) {
  if(srcEl) {
   colorValue = ASPx.Attr.GetAttribute(srcEl, colorValue);
   color = ASPx.Attr.GetAttribute(srcEl, color);
  }
  ASPx.Attr.SetAttribute(el, "data-item-value", colorValue);
  ASPx.Attr.SetAttribute(el, "data-item-color", color);
 }
 var BootstrapClientToolbar = ASPx.CreateClass(dx.BootstrapClientMenu, {
  constructor: function(name) {
   this.constructor.prototype.constructor.call(this, name);
  },
  Initialize: function () {
   dx.BootstrapClientMenu.prototype.Initialize.call(this);
   var colorElements = this.querySelectorAll("[data-item-type='color'] .dxbs-color-nested-table");
   for(var i = 0; i < colorElements.length; i++)
    this.prepareColorNestedTable(colorElements[i]);
  },
  IsEnabledAdaptivity: function() { return false; },
  prepareColorNestedTable: function(colorElement) {
   var parent = ASPx.GetParent(colorElement, isColorItem);
   var btn = getColorBtn(parent);
   var indexPath = this.GetItemIndexPathById(parent.id);
   var relatedItem = this.GetItemByIndexPath(indexPath);
   if(!relatedItem.colorPicker) {
    relatedItem.colorPicker = colorElement.dxControlRef;
    colorElement.dxControlRef.ColorChanged.AddHandler(function(s, e) {
     this.raiseColorItemClick(btn, s, indexPath, e);
    }.aspxBind(this));
   }
  },
  raiseColorItemClick: function(btn, colorNestedControl, indexPath, e) {
   updateColorAttributes(btn, colorNestedControl.GetValue(), colorNestedControl.GetColor());
   this.OnItemClick(indexPath, e);
  },
  canCheckItem: function (itemElement) {
   return this.isToggleButton(itemElement);
  },
  isToggleButton: function (itemElement) {
   return !!itemElement && ASPx.Attr.GetAttribute(itemElement, "data-item-type") == "toggle";
  },
  swapToggleButtonIconsIfNeeded: function (indexPath, currAttr, targetAtt, skipCheck) {
   var itemElement = this.GetItemContentElement(indexPath);
   if (!skipCheck && !this.isToggleButton(itemElement))
    return;
   var iconElement = itemElement.querySelector("[" + targetAtt + "]");
   if (!iconElement)
    return;
   if (!ASPx.Attr.GetAttribute(iconElement, currAttr))
    ASPx.Attr.SetAttribute(iconElement, currAttr, iconElement.className.replace("image ", ""));
   iconElement.className = "image " + ASPx.Attr.GetAttribute(iconElement, targetAtt);
  },
  SelectItem: function (indexPath) {
   dx.BootstrapClientMenu.prototype.SelectItem.call(this, indexPath);
   this.toggleButtonIconsIfNeeded(indexPath, true);
  },
  DeselectItem: function (indexPath) {
   dx.BootstrapClientMenu.prototype.DeselectItem.call(this, indexPath);
   this.toggleButtonIconsIfNeeded(indexPath, false);
  },
  toggleButtonIconsIfNeeded: function(indexPath, condition, skipCheck) {
   this.swapToggleButtonIconsIfNeeded(indexPath, condition ? "data-icon-unchecked" : "data-icon-checked", condition ? "data-icon-checked" : "data-icon-unchecked", skipCheck);
  },
  GetItemsGroup: function (indexPath) {
   var result = dx.BootstrapClientMenu.prototype.GetItemsGroup.call(this, indexPath);
   if ((!result || !result.length) && this.canCheckItem(this.GetItemContentElement(indexPath)))
    result = this.itemCheckedGroups[this.itemCheckedGroups.length] = [indexPath];
   return result;
  },
  CreateRenderHelper: function () {
   return new BootstrapToolbarRenderHelper(this);
  },
  GetItemContentElementId: function (indexPath) {
   if(this.IsRootItem(indexPath)) {
    if(ASPx.ElementHasCssClass(this.GetItemElement(indexPath), ASPx.BootstrapCssSelectors.ButtonGroup) || ASPx.ElementHasCssClass(this.GetItemElement(indexPath), ASPx.BootstrapCssSelectors.ButtonGroupVertical))
     return dx.BootstrapClientMenu.prototype.GetItemContentElementId.call(this, indexPath);
    return this.GetItemElementId(indexPath);
   }
   return dx.BootstrapClientMenu.prototype.GetItemContentElementId.call(this, indexPath);
  },
  GetItemContentElement: function (indexPath) {
   return this.renderHelper.GetItemContentElement(this.GetItemElement(indexPath));
  },
  IsDropDownItem: function (indexPath) {
   var element = this.GetItemElement(indexPath);
   return !!element && ASPx.Attr.GetAttribute(element, "data-toggle") === "toolbar-dropdownmode";
  },
  GetItemPopOutElement: function (indexPath) {
   return this.renderHelper.GetItemPopOutElement(this.GetItemElement(indexPath));
  }
 });
 function memoizateSingleArgMethod(methodName) {
  return (function (baseMethod) {
   return function (arg0) {
    var cache = this.memoizationCache, boundMethod;
    this[methodName] = function (arg0) {
     var key = methodName + arg0;
     return cache[key] === undefined ? cache[key] = boundMethod(arg0) : cache[key];
    };
    boundMethod = baseMethod.bind(this);
    return cache[methodName + arg0] = boundMethod(arg0);
   };
  })(BootstrapClientToolbar.prototype[methodName]);
 }
 function memoizateMethod(methodName, argExpectedCount) {
  if (argExpectedCount === 1)
   return memoizateSingleArgMethod(methodName);
  throw Error('impl!');
 }
 var BootstrapClientRibbonToolbarItem = ASPx.CreateClass(dx.BootstrapClientMenuItem, {
  constructor: function(menu, parent, index, name) {
   this.constructor.prototype.constructor.call(this, menu, parent, index, name);
  }
 });
 var BootstrapClientRibbonToolbarBase = ASPx.CreateClass(BootstrapClientToolbar, {
  constructor: function (name) {
   this.constructor.prototype.constructor.call(this, name);
   this.memoizationCache = {};
  },
  OnBrowserWindowResize: function(e) {},
  AdjustControl: function () {},
  AdjustControlCore: function () {
   ASPxClientMenuBase.GetMenuCollection().DoHidePopupMenus(null, -1, this.name, false, []);
  },
  OnDispose: function () {
   BootstrapClientToolbar.prototype.OnDispose.call(this);
   this.memoizationCache = null;
  },
  IsItemInAdaptiveMenu: function () { return false; },
  SetIndentsVisiblility: function () { },
  SetElementDisplay: function (element, visible) {
   ASPx.DOM.SetStyles(element, { "display": visible ? "" : "none" });
  },
  GetClientItemType: function () {
   return BootstrapClientRibbonToolbarItem;
  },
  IsAdaptiveMenuItem: function () { return false; },
  GetItemContentElementId: memoizateMethod("GetItemContentElementId", 1),
  IsRootItem: memoizateMethod("IsRootItem", 1),
  GetItemIndexPath: memoizateMethod("GetItemIndexPath", 1),
  GetItemIndexPathById: memoizateMethod("GetItemIndexPathById", 1),
  GetMenuIndexPathById: memoizateMethod("GetMenuIndexPathById", 1),
  IsDropDownItem: memoizateMethod("IsDropDownItem", 1),
  CreateRenderHelper: function() {
   return new BootstrapRibbonToolbarDefaultRenderHelper(this);
  },
  DoShowPopupMenu: function(element, x, y, indexPath) {
   var parent = this.GetItemByIndexPath(indexPath);
   var menuElement = this.GetMenuMainElement(element);
   var popupMenuHasVisibleContent = menuElement && (this.renderHelper.HasSubMenuTemplate(menuElement) ||
    ASPx.ElementContainsCssClass(menuElement, this.getAdaptiveMenuCssClass())) ||
    parent && this.HasVisibleItems(parent);
   if(popupMenuHasVisibleContent === false)
    return;
   if(element && this.IsCallbacksEnabled())
    this.ShowLoadingPanelInMenu(element);
   if(this.popupCount == 0) this.popupToLeft = this.rtl;
   this.RaisePopUp(indexPath);
   this.CalculateSubMenuPosition(element, x, y, indexPath, this.enableAnimation);
   ASPxClientMenuBase.GetMenuCollection().RegisterVisiblePopupMenu(this.name, element.id);
   this.popupCount++;
  },
  CalculateSubMenuPosition: function(element, x, y, indexPath, enableAnimation) {
   ASPx.BootstrapDockManager.show(element, element.parentNode, this.IsVertical(indexPath));
  },
  DoHidePopupMenu: function(evt, element) {
   element.isDockedElementHidden = true;
   this.CancelSubMenuItemHoverItem(element);
   ASPxClientMenuBase.GetMenuCollection().UnregisterVisiblePopupMenu(this.name, element.id);
   this.popupCount--;
   this.RaiseCloseUp(this.GetIndexPathById(element.id, true));
   ASPx.BootstrapDockManager.hide(element);
  },
  isSubMenuElementVisible: function(subMenuElement) {
   if(subMenuElement.isDockedElementHidden === true)
    return false;
   return ASPx.ElementHasCssClass(subMenuElement, SHOW_SUBMENU_CLASS);
  }
 });
 var BootstrapClientRibbonToolbar = ASPx.CreateClass(BootstrapClientRibbonToolbarBase, {
  CreateRenderHelper: function () {
   return new BootstrapRibbonToolbarRenderHelper(this);
  }
 });
 var oneLineSubMenuTemplateNode = ASPx.CreateHtmlElementFromString('<div class="modal-content">' +
   '<div class="modal-header"></div>' +
   '<div class="modal-body">' +
    '<div class="dxbs-dropdown-toolbar btn-toolbar dxbs-toolbar" role="toolbar">' +
     '<div class="btn-group-vertical" role="group"></div>' +
    '</div>' +
   '</div>' +
  '</div>');
 function createOneLineSubMenu(title) {
  var result = oneLineSubMenuTemplateNode.cloneNode(true);
  result.querySelector(".modal-header").appendChild(document.createTextNode(title));
  result.contentContainer = result.querySelector(".dxbs-dropdown-toolbar > .btn-group-vertical");
  return result;
 }
 var BootstrapClientRibbonOneLineToolbarRenderHelper = ASPx.CreateClass(BootstrapRibbonToolbarDefaultRenderHelper, {
  InlineInitializeElements: function () {
   BootstrapRibbonToolbarDefaultRenderHelper.prototype.InlineInitializeElements.call(this);
   var buttons = this.menu.querySelectorAll(".dxbs-r-ab");
   for (var i = 0; i < buttons.length; i++) {
    var btn = buttons[i];
    var item = this.menu.GetItemByIndexPath(this.menu.GetItemIndexPathById(btn.id));
    item.iconCssClass = item.GetIconCssClass();
    var title = btn.querySelector(".dropdown-toggle").title;
    btn.querySelector(".dxbs-submenu").appendChild(createOneLineSubMenu(title));
   }
  },
  GetItemIconElement: function(itemElement) {
   return ASPx.CacheHelper.GetCachedElement(this, "iconElement",
    function() {
     return ASPx.GetNodeByClassName(itemElement, ITEM_IMAGE_CLASS + ":not(.preview-image)");
    }, itemElement);
  }
 });
 var BootstrapClientRibbonOneLineToolbar = ASPx.CreateClass(BootstrapClientRibbonToolbarBase, {
  constructor: function(name) {
   this.constructor.prototype.constructor.call(this, name);
   this.ItemLocationChanged = new ASPxClientEvent();
   this.movedRootItems = [];
  },
  CreateRenderHelper: function () {
   return new BootstrapClientRibbonOneLineToolbarRenderHelper(this);
  },
  Initialize: function() {
   BootstrapClientRibbonToolbarBase.prototype.Initialize.call(this);
   var buffer = [];
   var currentGroupEl = null;
   for (var i = 0; i < this.rootItem.items.length; i++) {
    var item = this.rootItem.items[i];
    var itemIndexPath = item.GetIndexPath();
    var itemElement = this.GetItemElement(itemIndexPath);
    if(itemElement && currentGroupEl !== itemElement.parentNode) {
     currentGroupEl = itemElement.parentNode;
     buffer = [{ element: itemElement, item: item }];
    } else if(ASPx.ElementHasCssClass(itemElement, "dxbs-r-ab")) {
     this.initItemElements(buffer, itemElement, item);
     buffer = [];
     currentGroupEl = null;
    } else
     buffer.push({ element: itemElement, item: item });
   }
  },
  initItemElements: function(itemElements, buttonElement, buttonItem) {
   var target = buttonElement.querySelector(".modal-content").contentContainer;
   var isToggleBehavior = ASPx.ElementHasCssClass(buttonElement.parentNode, "dxbs-r-grp-gallery");
   for (var i = 0; i < itemElements.length; i++) {
    if(isToggleBehavior)
     this.initTogglableItemElement(itemElements[i].element, itemElements[i].item, buttonElement, buttonItem, target, i);
    else
     this.initAdaptiveItemElement(itemElements[i].element, itemElements[i].item, buttonElement, buttonItem, target, i);
   }
  },
  initTogglableItemElement: function(itemElement, item, buttonElement, buttonItem, submenuEl, i) {
   itemElement._dxVisible = true;
   itemElement.onHide = function() {
    itemElement._dxVisible = false;
    if(i === 0) {
     this.enterPreviewState(buttonElement.parentNode, buttonItem);
    }
    this.ItemLocationChanged.FireEvent(this, { itemRef: item, location: "toggle-area" });
   }.bind(this);
   itemElement.onShow = function() {
    itemElement._dxVisible = true;
    if(i === 0) {
     this.leavePreviewState(buttonElement.parentNode, buttonItem);
    }
    this.ItemLocationChanged.FireEvent(this, { itemRef: item, location: "main-bar" });
   }.bind(this);
  },
  initAdaptiveItemElement: function(itemElement, item, buttonElement, buttonItem, submenuEl, i) {
   item.containerIndexPath = buttonItem.GetIndexPath();
   var innerSubmenu = itemElement.querySelector(".dxbs-dm");
   itemElement._dxOrder = i;
   function moveTo(container) {
    var offsetElement = null;
    var childElements = ASPx.GetChildElementNodes(container);
    for(var j = 0; j < childElements.length; j++) {
     var el = childElements[j];
     if(el._dxOrder === undefined || (el._dxOrder - 1 >= i)) {
      offsetElement = el;
      break;
     }
    }
    if(offsetElement)
     container.insertBefore(itemElement, offsetElement);
    else
     container.appendChild(itemElement);
   }
   itemElement.onHide = function() {
    this.movedRootItems.push(item.GetIndexPath());
    if(innerSubmenu)
     ASPx.Attr.SetAttribute(innerSubmenu, "data-popup-align", "outside-right top-sides");
    moveTo(submenuEl);
    if (i === 0)
     this.enterPreviewState(buttonElement.parentNode, buttonItem);
   }.bind(this);
   itemElement.onShow = function() {
    ASPx.Data.ArrayRemove(this.movedRootItems, item.GetIndexPath());
    moveTo(buttonElement.parentNode);
    if(innerSubmenu)
     ASPx.Attr.RemoveAttribute(innerSubmenu, "data-popup-align");
    if (i === 0)
     this.leavePreviewState(buttonElement.parentNode, buttonItem);
   }.bind(this);
  },
  isItemMoved: function(indexPath) {
   return this.movedRootItems.indexOf(indexPath) > -1;
  },
  enterPreviewState: function(rootGroupElement, item) {
   ASPx.AddClassNameToElement(this.getImageElement(item), ASPx.BootstrapCssSelectors.HiddenLayout);
   ASPx.RemoveClassNameFromElement(this.getPreviewImageElement(item), ASPx.BootstrapCssSelectors.HiddenLayout);
  },
  leavePreviewState: function(rootGroupElement, item) {
   ASPx.RemoveClassNameFromElement(this.getImageElement(item), ASPx.BootstrapCssSelectors.HiddenLayout);
   ASPx.AddClassNameToElement(this.getPreviewImageElement(item), ASPx.BootstrapCssSelectors.HiddenLayout);
  },
  getImageElement: function(item) {
   var itemElement = item.menu.GetItemElement(item.indexPath);
   return itemElement.querySelector(".image:not(.preview-image)");
  },
  getPreviewImageElement: function(item) {
   var itemElement = item.menu.GetItemElement(item.indexPath);
   return itemElement.querySelector(".preview-image");
  },
  SetDisappearTimer: function() { },
  DoShowPopupMenu: function(element, x, y, indexPath) {
   BootstrapClientRibbonToolbarBase.prototype.DoShowPopupMenu.call(this, element, x, y, indexPath);
   this.toggleSubmenuOwnerActiveClass(this.GetIndexPathById(element.id, true), true);
  },
  DoHidePopupMenu: function(evt, element) {
   BootstrapClientRibbonToolbarBase.prototype.DoHidePopupMenu.call(this, evt, element);
   this.toggleSubmenuOwnerActiveClass(this.GetIndexPathById(element.id, true), false);
  },
  toggleSubmenuOwnerActiveClass: function(indexPath, condition) {
   ASPx.DOM.ChangeDOM(function() {
    ASPx.ToggleClassNameToElement(this.GetItemElement(indexPath), "dxbs-item-hover", condition);
   }.aspxBind(this));
   if(this.IsRootItem(indexPath) && (!this.isItemMoved(indexPath) || !condition)) {
    ASPx.DOM.ChangeDOM(function() {
     ASPx.ToggleClassNameToElement(this.GetItemContentElement(indexPath), "active", condition);
    }.bind(this));
   }
  },
  OnAfterItemOver: function(stateItem, hoverElement) {
   var indexPath = this.GetIndexPathById(hoverElement.id);
   if(!this.IsRootItem(indexPath) || this.isItemMoved(indexPath))
    BootstrapClientRibbonToolbarBase.prototype.OnAfterItemOver.call(this, stateItem, hoverElement);
  },
  OnAfterItemOut: function(stateItem, hoverElement, newHoverElement) {
   var indexPath = this.GetIndexPathById(hoverElement.id);
   if(!this.IsRootItem(indexPath))
    BootstrapClientRibbonToolbarBase.prototype.OnAfterItemOut.call(this, stateItem, hoverElement, newHoverElement);
  },
  getExceptIdsForShowSubMenu: function(indexPath, exceptId) { return this.getExceptMenuIds(indexPath, [exceptId]); },
  getExceptIdsForItemOverTimer: function(indexPath) { return this.getExceptMenuIds(indexPath, []); },
  getExceptMenuIds: function(indexPath, exceptIds) {
   return exceptIds.concat(this.isItemMoved(indexPath) ? [this.GetMenuElementId(this.GetItemByIndexPath(indexPath).containerIndexPath)] : []);
  }
 });
 var CUSTOM_ITEM_CLASS = "dxbs-toolbar-custom";
 var ITEM_SELECTORS = ["." + CUSTOM_ITEM_CLASS, "." + ASPx.BootstrapCssSelectors.Button,
  "." + ASPx.BootstrapCssSelectors.ButtonGroup + " > ." + ASPx.BootstrapCssSelectors.ButtonGroup,
  "." + ASPx.BootstrapCssSelectors.ButtonGroupVertical + " > ." + ASPx.BootstrapCssSelectors.ButtonGroup,
  "." + ASPx.BootstrapCssSelectors.ButtonGroupVertical + " > ." + ASPx.BootstrapCssSelectors.ButtonGroupVertical];
 var DROPDOWN_CONTENTBUTTON_SELECTOR = "." + ASPx.BootstrapCssSelectors.Button + ":first-child";
 var RIBBON_TOOLBAR_ITEM_SELECTORS = ["." + CUSTOM_ITEM_CLASS, "." + ASPx.BootstrapCssSelectors.Button,
  "." + ASPx.BootstrapCssSelectors.ButtonGroup + " > ." + ASPx.BootstrapCssSelectors.ButtonGroup,
  ".dxbs-r-" + ASPx.BootstrapCssSelectors.ButtonGroup + " > ." + ASPx.BootstrapCssSelectors.ButtonGroup,
  ".dxbs-r-" + ASPx.BootstrapCssSelectors.ButtonGroup + " > ." + ASPx.BootstrapCssSelectors.ButtonGroupVertical,
  "." + ASPx.BootstrapCssSelectors.ButtonGroupVertical + " > ." + ASPx.BootstrapCssSelectors.ButtonGroup,
  ".dxbs-r-" + ASPx.BootstrapCssSelectors.ButtonGroupVertical + " > ." + ASPx.BootstrapCssSelectors.ButtonGroup,
  "." + ASPx.BootstrapCssSelectors.ButtonGroupVertical + " > ." + ASPx.BootstrapCssSelectors.ButtonGroupVertical,
  ".dxbs-r-" + ASPx.BootstrapCssSelectors.ButtonGroupVertical + " > ." + ASPx.BootstrapCssSelectors.ButtonGroupVertical];
 dx.BootstrapClientToolbar = BootstrapClientToolbar;
 dx.BootstrapClientRibbonToolbar = BootstrapClientRibbonToolbar;
 dx.BootstrapClientRibbonOneLineToolbar = BootstrapClientRibbonOneLineToolbar;
})(dx || (dx = {}));
var ASPx, dx;
(function(ASPx, dx) {
 var doc = document, domBuffer = doc.createElement("DIV"), domFragment = doc.createDocumentFragment(), eventsHub = ASPx.BootstrapEventManager.EventsHub.clone(ASPx),
  htmlContentCommentPrefix = "dxrb", collectionContentCommentPrefix = "dxrc", nodePlaceholderCommentPrefix = "dxnp", componentLayoutBuilders = {};
 var Components = {
  formatPlaceholderPrefix: "$",
  RegisterComponentLayout: function(name, renderFunc) {
   componentLayoutBuilders[name] = renderFunc;
  }
 };
 function createTextNode(data) {
  return doc.createTextNode(data);
 }
 function instantiate(classType, argListGetter) {
  var result = Object.create(classType.prototype);
  classType.apply(result, argListGetter());
  return result;
 }
 function serialize(container, target, namesList) {
  var hasUpdates = false;
  for(var i = 0; i < namesList.length; i++) {
   var n = namesList[i];
   var serialized = container[n].serialize();
   if(serialized !== undefined) {
    hasUpdates = true;
    target[n] = serialized;
   }
  }
  return hasUpdates;
 }
 function deserialize(container, target, namesList) {
  for(var i = 0; i < namesList.length; i++) {
   var n = namesList[i];
   if(container[n] !== undefined)
    target[n].update(container[n]);
  }
 }
 function getIndexSequence(length) { return length >= 0 ? getIndexSequence(length - 1).concat([length]) : []; }
 Components.Collection = ASPx.CreateClass(null, {
  constructor: function(items, itemCreateFunc) {
   if(!itemCreateFunc)
    throw new Error("Collection should be able to create item");
   this.items = [];
   this.itemCreateFunc = itemCreateFunc;
   this.subscriptions = [];
   this.isLocked = false;
   this.isCollection = true;
   this.subjectsCache = {};
   if (items)
    this.addRange(items);
  },
  subscribe: function(subscription) {
   if(!this.isLocked)
    subscription(this.getChanges(this.items));
   this.subscriptions.push(subscription);
  },
  getChanges: function(addedItems, removedItems) { return { addedItems: addedItems || [], removedItems: removedItems || [] }; },
  forEach: function(action) { this.items.forEach(action); },
  selectMany: function(s) { return this.map(s).reduce(function(r, i) { return r.concat(i.items || i); }, []); },
  reduce: function (f, v) { return this.items.reduce(f); },
  map: function (f) { return this.items.map(f); },
  filter: function(f) { return this.items.filter(f); },
  any: function () { return this.count() > 0; },
  count: function () { return this.items.length; },
  countAsSubject: function () { return this.getMethodAsSubject(this.count); },
  withSorting: function (sortingKeyComposer) { return new Components.SortedCollection(this, sortingKeyComposer); },
  withGrouping: function (groupKeyComposer) { return new Components.GroupedCollection(this, groupKeyComposer); },
  withFilter: function (filter) { return new Components.FilteredCollection(this, filter); },
  withMapping: function (mapFunc) { return new Components.MappedCollection(this, mapFunc); },
  anyAsSubject: function (filter) { return filter ? this.withFilter(filter).anyAsSubject() : this.getMethodAsSubject(this.any); },
  getMethodAsSubject: function (method) {
   if (!this.subjectsCache[method]) {
    var boundMethod = method.bind(this);
    var subject = this.subjectsCache[method] = new Components.Subject(boundMethod());
    this.subscribe(function () { subject.setValue(boundMethod()); });
   }
   return this.subjectsCache[method];
  },
  get: function (index) { return this.items[index]; },
  add: function (item) {
   if (this.addItemCore(item))
    this.raiseChanges([item], []);
  },
  remove: function (item) {
   if (this.removeItemCore(item))
    this.raiseChanges([], [item]);
  },
  addRange: function (items) { this.raiseChanges(items.map(this.addItemCore.bind(this)).filter(function (i) { return !!i; }), []); },
  removeRange: function (items) { this.raiseChanges([], items.map(this.removeItemCore.bind(this)).filter(function (i) { return !!i; })); },
  addItemCore: function (item) { return this.items.indexOf(item) > -1 ? null : (this.items[this.items.length] = item); },
  removeItemCore: function (item) {
   var index = this.items.indexOf(item);
   return index === -1 ? null : this.items.splice(index, 1);
  },
  raiseChanges: function (addedItems, removedItems) {
   var changes = this.getChanges(addedItems, removedItems);
   if(changes.addedItems.length > 0 || changes.removedItems.length > 0)
    this.subscriptions.forEach(function (s) { s(changes); });
  },
  serialize: function() {
   var result = Array(this.items.length), hasChanges = false, indices = getIndexSequence(this.items.length - 1);
   hasChanges = serialize(this.items, result, indices) || hasChanges;
   return hasChanges ? result : undefined;
  },
  update: function(json) {
   var removed = json.length < this.items.length ? this.items.splice(json.length) : [];
   var added = getIndexSequence(Math.max(-1, json.length - this.items.length - 1)).map(function (i) {
    var index = i + this.items.length;
    return this.itemCreateFunc(index, json[index]);
   }.bind(this));
   this.items = this.items.concat(added);
   deserialize(json, this.items, getIndexSequence(this.items.length - 1));
   this.raiseChanges(added, removed);
  },
  lock: function() { this.isLocked = true; },
  unlock: function() { this.isLocked = false; }
 });
 Components.GroupedCollection = ASPx.CreateClass(Components.Collection, {
  constructor: function (sourceCollection, groupKeyComposer) {
   this.constructor.prototype.constructor.call(this, [], function () { });
   this.groupMark = "group" + ASPx.CreateGuid();
   sourceCollection.subscribe(function (changes) {
    this.refreshGroups(sourceCollection.items.concat([]), groupKeyComposer);
   }.bind(this));
  },
  refreshGroups: function (items, groupKeyComposer) {
   if (items.length === 0) {
    this.removeRange(this.items);
    return;
   }
   function createKey(i) { return Components.Statement(groupKeyComposer(i), function () { return ASPx.Data.CollectionToArray(arguments); }); }
   var item = null, key = null, groupIndex = 0, group = this.getGroup(groupIndex++);
   while (item = items.shift() && (key = (item[this.groupMark] || (item[this.groupMark] = createKey(item))))) {
    if (!group.any()) {
     group.groupKey = key.value;
     group.add(item);
    } else {
     if (ASPx.Data.ArraySame(group.value, key.value)) {
     } else {
      group = this.getGroup(groupIndex++);
     }
    }
   }
  },
  getGroup: function (index) {
   var group = this.get(index);
   if (!group) {
    group = new Components.Collection([], function () { });
    this.add(group);
   }
   return group;
  }
 });
 Components.SortedCollection = ASPx.CreateClass(Components.Collection, {
  constructor: function (sourceCollection, sortingKeyComposer) {
   this.constructor.prototype.constructor.call(this, [], function () { });
  }
 });
 Components.MappedCollection = ASPx.CreateClass(Components.Collection, {
  constructor: function (sourceCollection, mapFunc) {
   this.constructor.prototype.constructor.call(this, [], function () { });
  }
 });
 Components.FilteredCollection = ASPx.CreateClass(Components.Collection, {
  constructor: function(sourceCollection, itemFilterConditionGetter) {
   this.constructor.prototype.constructor.call(this, [], function() {});
   this.itemFilterConditionGetter = itemFilterConditionGetter;
   this.filterMark = "filter" + ASPx.CreateGuid();
   sourceCollection.subscribe(function(changes) {
    this.addRange(changes.addedItems);
    this.removeRange(changes.removedItems);
   }.bind(this));
  },
  addItemCore: function(item) {
   if(item[this.filterMark])
    return Components.Collection.prototype.addItemCore.call(this, item);
   item[this.filterMark] = true;
   var filterSubject = this.itemFilterConditionGetter(item);
   filterSubject.subscribeNext(function listener(value) {
    if (!value) {
     this.remove(item);
     filterSubject.unsubscribe(listener);
     delete item[this.filterMark];
    } else
     this.add(item);
   }.bind(this));
   return filterSubject.value ? (this.items[this.items.length] = item) : null;
  }
 });
 Components.Subject = ASPx.CreateClass(null, {
  constructor: function(value, defaultValue) {
   this.value = value;
   this.defaultValue = defaultValue === undefined ? value : defaultValue;
   this.isLocked = false;
   this.subscriptions = [];
  },
  setValue: function(value, isSilentUpdate) {
   isSilentUpdate = isSilentUpdate || false;
   if(this.value !== value) {
    this.value = value;
    this.subscriptions.forEach(function(s) {
     if(!isSilentUpdate || s.trackSilentUpdates)
      s.subscription(value);
    });
   }
  },
  setValueSilently: function (value) { this.setValue(value, true); },
  subscribeNext: function(subscription, trackSilentUpdates) { this.subscriptions.push({ subscription: subscription, trackSilentUpdates: trackSilentUpdates || false }); },
  subscribe: function(subscription, trackSilentUpdates) {
   if(!this.isLocked)
    subscription(this.value);
   this.subscribeNext(subscription, trackSilentUpdates);
  },
  subscribeAny: function(subscription) { this.subscribe(subscription, true); },
  unsubscribe: function(subscription) { ASPx.Data.ArrayRemove(this.subscriptions, this.subscriptions.filter(function (s) { return s.subscription === subscription; })[0]); },
  lock: function() { this.isLocked = true; },
  unlock: function() { this.isLocked = false; },
  update: function(value) {
   this.setValue(value);
   this.defaultValue = value;
  },
  serialize: function() { return this.value === this.defaultValue ? undefined : this.value; }
 });
 Components.ToggleSubject = ASPx.CreateClass(Components.Subject, {
  constructor: function (value, value2) {
   this.value = value;
   this.defaultValue = value;
   this.isLocked = false;
   this.value1 = new Components.Subject(value);
   var v1ANDv2 = Components.Statement([this.value1, value2], function (v1, v2) { return v1 && v2; });
   this.subscriptions = v1ANDv2.subscriptions;
   v1ANDv2.subscribe(Components.Subject.prototype.setValue.bind(this));
  },
  setValue: function (value1, isSilentUpdate) { this.value1.setValue(value1, isSilentUpdate); }
 });
 Components.Proxy = ASPx.CreateClass(Components.Subject, {
  constructor: function(func) {
   this.constructor.prototype.constructor.call(this, func());
   this.func = func;
  },
  setValue: function() {
   throw new Error("Can't set value directly");
  },
  refresh: function() {
   Components.Subject.prototype.setValue.call(this, this.func());
  }
 });
 Components.Trigger = ASPx.CreateClass(Components.Proxy, {
  constructor: function () {
   var value = false;
   this.constructor.prototype.constructor.call(this, function () { return value = !value; });
  }
 });
 var IFragmentResolverOwner = ASPx.CreateClass(null, {
  constructor: function(fragmentResolverOwner) {
   this.fragmentResolverOwners = [];
   if(fragmentResolverOwner)
    this.fragmentResolverOwners.push(fragmentResolverOwner);
  },
  getFragmentResolver: function (typeOfFragment) {
   var owners = this.fragmentResolverOwners || [];
   if(owners.length > 0)
    return owners[owners.length - 1].getFragmentResolver(typeOfFragment);
   return new FragmentResolver(this, typeOfFragment);
  }
 });
 Components.ViewModelBase = ASPx.CreateClass(IFragmentResolverOwner, {
  constructor: function (id) {
   this.id = id;
   this.serializablePropertyNamesList = [];
   this.propertyNamesList = [];
   this.viewModelNamesList = [];
   this.collectionNamesList = [];
   this.proxy("Id", function () { return this.id; }.bind(this));
   this.defineMembers();
  },
  defineMembers: function () { throw new Error("Implement it!"); },
  serialize: function() {
   var result = {}, hasUpdates = false;
   hasUpdates = serialize(this, result, this.serializablePropertyNamesList) || hasUpdates;
   hasUpdates = serialize(this, result, this.viewModelNamesList) || hasUpdates;
   hasUpdates = serialize(this, result, this.collectionNamesList) || hasUpdates;
   return hasUpdates ? result : undefined;
  },
  update: function(json) {
   deserialize(json, this, this.propertyNamesList);
   deserialize(json, this, this.viewModelNamesList);
   deserialize(json, this, this.collectionNamesList);
  },
  viewModel: function(name, vmClass, args) {
   var result = this[name] = instantiate(vmClass, function() { return [name].concat(args); });
   this.viewModelNamesList.push(name);
   return result;
  },
  collection: function(name, itemCreateFunc, items) {
   var result = this[name] = new Components.Collection(items || [], itemCreateFunc);
   this.collectionNamesList.push(name);
   return result;
  },
  toggle: function (name, defaultValue, statement, options) {
   if(!options)
    options = {};
   options.create = function() { return new ASPx.Components.ToggleSubject(defaultValue, statement); };
   return this.property(name, defaultValue, options);
  },
  property: function(name, defaultValue, options) {
   if(this.propertyNamesList.indexOf(name) > -1)
    throw new Error(name + " is already defined");
   if(defaultValue === undefined)
    defaultValue = "";
   if(options && options.sync)
    this.serializablePropertyNamesList.push(name);
   this.propertyNamesList.push(name);
   return this[name] = (options && options.create && options.create()) || new Components.Subject(defaultValue);
  },
  proxy: function(name, getter) { return this[name] = new Components.Proxy(getter); },
  contentProperty: function(name, defaultContent) { return this.property(name, defaultContent, { sync: false }); }
 });
 Components.MultiSubject = function(subjects) {
  var values = Array(subjects.length), canSetValue = false;
  var aggregatedSubject = new Components.Subject(values);
  aggregatedSubject.isMultiSubject = true;
  function updateValue(sbj, index) {
   sbj.subscribe(function(value) {
    values[index] = value;
    if(canSetValue)
     aggregatedSubject.setValue([].concat(values));
   });
  }
  for(var i = 0; i < subjects.length; i++)
   updateValue(subjects[i], i);
  canSetValue = true;
  return aggregatedSubject;
 };
 Components.MultiSubjectText = function(formatStr, subjects) {
  var textSubject = new Components.Subject("");
  Components.MultiSubject(subjects).subscribe(function(values) {
   var text = formatStr;
   for(var i = 0; i < values.length; i++)
    text = text.replace(Components.formatPlaceholderPrefix + i, values[i]);
   text = text.trim();
   textSubject.setValue(text);
  });
  return textSubject;
 };
 var CssClassToggler = ASPx.CreateClass(null, {
  constructor: function (value) {
   this.value = value;
   this.useAsCssClass = false;
   this.appliedCssClasses = [];
   this.conditions = {};
  },
  addFor: function (value, cssClass) {
   this.conditions[value] = cssClass;
   if (this.value === value)
    this.appliedCssClasses.push(cssClass);
  },
  add: function () {
   this.useAsCssClass = true;
   this.appliedCssClasses.push(this.value);
  },
  update: function (value, added, removed) {
   if (this.value === value) {
    if (this.appliedCssClasses.length > 0) {
     this.appliedCssClasses.forEach(function (c) { added.push(c); });
     this.appliedCssClasses = [];
    }
   } else {
    if (this.useAsCssClass) {
     removed.push(this.value);
     added.push(value);
    }
    if (this.conditions[this.value])
     removed.push(this.conditions[this.value]);
    if (this.conditions[value])
     added.push(this.conditions[value]);
    this.value = value;
   }
  }
 });
 var CssClassBuilder = ASPx.CreateClass(null, {
  constructor: function () {
   this.subjects = [];
   this.togglers = [];
  },
  addCssClassFor: function (subj, passValue, cssClass) {
   if (!subj.isCssSubject)
    this.getToggler(subj).addFor(passValue, cssClass);
  },
  addCssClass: function (subj) {
   if (!subj.isCssSubject)
    this.getToggler(subj).add(subj);
   else {
    this.togglers.push(null);
    this.subjects.push(subj);
   }
  },
  getToggler: function (subj) {
   var index = ASPx.Data.ArrayIndexOf(this.subjects, subj);
   if (index === -1) {
    index = this.subjects.length;
    this.subjects[index] = subj;
    this.togglers[index] = new CssClassToggler(subj.value);
   }
   return this.togglers[index];
  },
  createSubject: function () {
   var s = this.subjects; var t = this.togglers;
   this.subjects = []; this.togglers = [];
   return Components.Statement(s, function () {
    var added = [], removed = [];
    for (var i = 0; i < t.length; i++) {
     if (t[i])
      t[i].update(arguments[i], added, removed);
     else {
      added = added.concat(arguments[i].added);
      removed = removed.concat(arguments[i].removed);
     }
    }
    return { added: added, removed: removed };
   });
  }
 });
 Components.CssClassSubject = function (initializer) {
  var builder = new CssClassBuilder();
  initializer(builder);
  var s = builder.createSubject();
  s.isCssSubject = true;
  return s;
 };
 Components.CssClassAttribute = function (strFormat, subjects) {
  for (var i = 0; i < subjects.length; i++)
   strFormat = strFormat.replace("$" + i, "");
  strFormat = strFormat.trim();
  if (strFormat)
   subjects = [new Components.Subject(strFormat)].concat(subjects);
  return Components.CssClassSubject(function (classBuilder) {
   subjects.forEach(classBuilder.addCssClass.bind(classBuilder));
  });
 };
 Components.Statement = function(subjects, statementBody) {
  var statementSubj = new Components.Subject(false);
  Components.MultiSubject(subjects).subscribe(function(values) {
   statementSubj.setValue(statementBody.apply(null, values));
  });
  return statementSubj;
 };
 function canSkipNode(node) { return node.nodeType === Node.TEXT_NODE && !node.data.replace(/[\r\n\s]/gm, ""); }
 function createFragmentsFromDOM(childNodes, fragmentResolverOwner) {
  function createFragment(t) {
   var args = ASPx.Data.CollectionToArray(arguments), resolver = fragmentResolverOwner.getFragmentResolver(args.splice(0, 1)[0]);
   return resolver.resolve.apply(resolver, args);
  }
  var result = [], currFragment = null;
  for(var i = 0; i < childNodes.length; i++) {
   var node = childNodes[i];
   if(canSkipNode(node)) continue;
   if(currFragment === null || !currFragment.tryAddDomRef(node)) {
    if(node.nodeType === Node.ELEMENT_NODE)
     currFragment = createFragment(ElementFragment, node, null, null);
    else if(node.nodeType === Node.TEXT_NODE)
     currFragment = createFragment(TextFragment, node, null);
    else if(node.nodeType === Node.COMMENT_NODE) {
     if(node.data === nodePlaceholderCommentPrefix)
      currFragment = createFragment(PlaceholderFragment, node, null);
     else if(node.data === htmlContentCommentPrefix && !(currFragment instanceof HtmlFragment))
      currFragment = createFragment(HtmlFragment, node, null);
     else if(node.data === collectionContentCommentPrefix && !(currFragment instanceof CollectionFragment))
      currFragment = createFragment(CollectionFragment, node, null, undefined, undefined, undefined);
     else
      continue;
    }
    result.push(currFragment);
   }
  }
  return result;
 }
 function insertAfter(newEl, oldEl) {
  ASPx.InsertElementAfter(newEl, oldEl);
 }
 function replaceElement(newEl, oldEl) {
  insertAfter(newEl, oldEl);
  ASPx.RemoveElement(oldEl);
 }
 function isValidProperty(tagName, propName) {
  tagName = tagName.toLowerCase();
  switch (propName) {
   case "href":
    return tagName == "a";
   case "disabled":
   case "type":
    return tagName == "button" || tagName == "input";
   default:
    return true;
  }
 }
 function updateProperty(element, propName, value) {
  if (isValidProperty(element.tagName, propName)) {
   if (propName === "class")
    ASPx.DOM.SetCssClassName(element, value);
   else
    ASPx.DOM.UpdateAttribute(element, propName, value);
  }
 }
 function prepareScriptBlockToAutoEval(container) {
  var scripts = ASPx.GetNodesByTagName(container, "script");
  if (scripts.length === 0)
   return;
  for (var i = 0; i < scripts.length; i++) {
   var oldScriptBlock = scripts[i];
   var newScriptBlock = doc.createElement("SCRIPT");
   if (oldScriptBlock.src)
    newScriptBlock.src = oldScriptBlock.src;
   else if (oldScriptBlock.innerHTML)
    newScriptBlock.appendChild(createTextNode(oldScriptBlock.innerHTML));
   replaceElement(newScriptBlock, oldScriptBlock);
  }
 }
 function getDomNodes(element) {
  var result = [];
  for(var i = 0; i < element.childNodes.length; i++) {
   if(!canSkipNode(element.childNodes[i]))
    result.push(element.childNodes[i]);
  }
  return result;
 }
 function syncDomWithFragmentNodes(domRefs) {
  var startMarker = domRefs[0];
  if(startMarker.parentNode) {
   for(var i = 1, prevSibling = startMarker; i < domRefs.length - 1; i++ , prevSibling = prevSibling.nextSibling) {
    var domRef = domRefs[i];
    if(domRef !== prevSibling.nextSibling) {
     if(domRefs.indexOf(prevSibling.nextSibling) === -1)
      ASPx.RemoveElement(prevSibling.nextSibling);
     insertAfter(domRef, prevSibling);
    }
   }
  }
 }
 function findComponentMountNode(id, fragmentResolverOwner) {
  var result = null;
  var element = doc.getElementById(id);
  if(!element) {
   var d = nodePlaceholderCommentPrefix + ":" + id;
   var treeWalker =
    doc.createTreeWalker(doc.body, NodeFilter.SHOW_COMMENT, {
     acceptNode: function(n) {
      return n.data === d ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
     }
    }, false);
   treeWalker.nextNode();
   if(treeWalker.currentNode.nodeType === Node.COMMENT_NODE)
    result = fragmentResolverOwner.getFragmentResolver(DetachedComponentContainer).resolve(treeWalker.currentNode);
  } else {
   result = fragmentResolverOwner.getFragmentResolver(AttachedComponentContainer).resolve(element);
  }
  if(!result)
   throw new Error("Unexisting component is requested: id=" + id);
  return result;
 }
 function render(container, path, fragmentTypeResolver, checkFragment, ensureArg, arg0) {
  var getter = function() { return [null, arg0, ensureArg].filter(function(a) { return a !== undefined; }); };
  var f = container.getChildFragment(path);
  function resolve() { return fragmentTypeResolver.resolve.apply(fragmentTypeResolver, getter()); }
  if(f) {
   if(!(f instanceof fragmentTypeResolver.type) || (checkFragment && checkFragment(f)))
    container.replace(f, f = resolve());
   else
    f.ensure(ensureArg);
  } else
   container.appendChildFragment(f = resolve());
  return f;
 }
 var FragmentResolver = ASPx.CreateClass(null, {
  constructor: function(fragmentResolverOwner, type) {
   this.fragmentResolverOwner = fragmentResolverOwner;
   this.type = type;
  },
  resolve: function() {
   var argList = ASPx.Data.CollectionToArray(arguments).concat([this.fragmentResolverOwner]);
   return instantiate(this.type, function() { return argList; });
  }
 });
 var Fragment = ASPx.CreateClass(IFragmentResolverOwner, {
  constructor: function(fragmentResolverOwner) {
   this.constructor.prototype.constructor.call(fragmentResolverOwner);
   Object.defineProperty(this, "childFragments", {
    get: function() {
     if(!this._childFragments) {
      this._childFragments = this.createChildFragments();
      this.prepareCreatedChildFragmentsCollection(this._childFragments);
     }
     return this._childFragments;
    }
   });
   this.domRefs = [];
   this.parentFragment = null;
  },
  tryAddDomRef: function() { throw new Error("Not supported"); },
  createChildFragments: function() { throw new Error("Not supported"); },
  prepareCreatedChildFragmentsCollection: function(collection) { collection.forEach(function(f) { f.parentFragment = this; }.bind(this)); },
  getChildFragment: function(path) { return this.childFragments.length > path ? this.childFragments[path] : null; },
  appendChildFragment: function(fragment) { this.insertFragmentAfter(fragment, this.childFragments[this.childFragments.length - 1]); },
  insertFragmentAfter: function(fragment, anchor) {
   if(fragment.parentFragment)
    fragment.parentFragment.removeChildFragment(fragment);
   fragment.parentFragment = this.getParentFragmentRefForChild();
   this.childFragments.splice(this.childFragments.indexOf(anchor) + 1, 0, fragment);
  },
  replace: function(oldFragment, newFragment) {
   this.childFragments[this.childFragments.indexOf(oldFragment)] = newFragment;
   oldFragment.parentFragment = null;
   newFragment.parentFragment = this.getParentFragmentRefForChild();
   newFragment.refreshDomRefs(oldFragment.domRefs);
  },
  getParentFragmentRefForChild: function() { return this; },
  removeChildFragment: function(fragment) {
   fragment.parentFragment = null;
   this.childFragments.splice(this.childFragments.indexOf(fragment), 1);
  },
  sync: function() { },
  refreshDomRefs: function(oldDomRefs) {}
 });
 var AttachedComponentContainer = ASPx.CreateClass(Fragment, {
  constructor: function(domElement, fragmentResolverOwner) {
   this.constructor.prototype.constructor.call(this, fragmentResolverOwner);
   this.domRefs.push(domElement);
  },
  createChildFragments: function() { return createFragmentsFromDOM(this.domRefs, this); },
  sync: function() { this.childFragments.forEach(function(f) { f.sync(); }); }
 });
 var DetachedComponentContainer = ASPx.CreateClass(Fragment, {
  constructor: function(nodePlaceholderCommentNode, fragmentResolverOwner) {
   this.constructor.prototype.constructor.call(this, fragmentResolverOwner);
   this.nodePlaceholderCommentNode = nodePlaceholderCommentNode;
  },
  createChildFragments: function() { return []; },
  sync: function() {
   this.childFragments.forEach(function(fragment) {
    fragment.sync();
    fragment.domRefs.forEach(function(r) {
     domFragment.appendChild(r);
    });
   });
   replaceElement(domFragment, this.nodePlaceholderCommentNode);
  }
 });
 var IsolatedFragmentContainer = ASPx.CreateClass(Fragment, {
  constructor: function(innerFragment, fragmentResolverOwner) {
   this.constructor.prototype.constructor.call(this, fragmentResolverOwner);
   this.innerFragment = innerFragment;
   this.parentRef = innerFragment.parentFragment;
  },
  createChildFragments: function() { return [this.innerFragment]; },
  prepareCreatedChildFragmentsCollection: function() {},
  replace: function(oldFragment, newFragment) {
   this.childFragments[this.childFragments.indexOf(oldFragment)] = newFragment;
   this.parentRef.replace(oldFragment, newFragment);
  },
  appendChildFragment: function(fragment) {
   this.parentRef.insertFragmentAfter(fragment, this.childFragments[this.childFragments.length - 1]);
   this.childFragments.push(fragment);
  },
  removeChildFragment: function(fragment) {
   Fragment.prototype.removeChildFragment.call(this, fragment);
   this.parentRef.removeChildFragment(fragment);
  }
 });
 var ElementFragment = ASPx.CreateClass(Fragment, {
  constructor: function(domRef, tagName, visibilityProperty, fragmentResolverOwner) {
   this.constructor.prototype.constructor.call(this, fragmentResolverOwner);
   this.tagName = (domRef && domRef.nodeType === Node.ELEMENT_NODE ? domRef.tagName : tagName).toUpperCase();
   this.elementDomRef = domRef && domRef.nodeType === Node.ELEMENT_NODE ? domRef : (this.tagName ? doc.createElement(this.tagName) : null);
   this.placeholderDomRef = domRef && domRef.nodeType === Node.COMMENT_NODE ? domRef : doc.createComment(nodePlaceholderCommentPrefix);
   this.visibilityProperty = visibilityProperty;
   this.properties = {};
   this.locked = false;
   this.domRefs[0] = !visibilityProperty || visibilityProperty.value ? this.elementDomRef : this.placeholderDomRef;
   this.subscribeOnVisibilityChange();
  },
  tryAddDomRef: function() { return false; },
  refreshDomRefs: function(domRefs) {
   var firstRef = domRefs[0];
   if(firstRef) {
    if(firstRef.nodeType === Node.COMMENT_NODE) {
     this.placeholderDomRef = firstRef;
     this.placeholderDomRef.data = nodePlaceholderCommentPrefix;
    } else
     this.elementDomRef = firstRef;
    this.domRefs[0] = firstRef;
   }
  },
  createChildFragments: function() { return createFragmentsFromDOM(this.elementDomRef.childNodes, this); },
  ensure: function(visibilityProperty) {
   this.locked = true;
   if(this.visibilityProperty !== visibilityProperty) {
    this.visibilityProperty = visibilityProperty;
    this.visibilityProperty.lock();
    this.subscribeOnVisibilityChange();
   }
  },
  ensureProperty: function(propName, subject) {
   if(this.properties[propName] !== subject) {
    this.properties[propName] = subject;
    if(this.locked)
     subject.lock();
    subject.subscribe(function(v) {
     updateProperty(this.elementDomRef, propName, v);
    }.bind(this));
   }
  },
  sync: function() {
   if(this.locked) {
    this.locked = false;
    for(var p in this.properties) {
     if(this.properties.hasOwnProperty(p))
      this.properties[p].unlock();
    }
   }
   if(this.visibilityProperty)
    this.visibilityProperty.unlock();
   var domRefs = getDomNodes(this.elementDomRef);
   var childDomRefs = this.childFragments.map(function(f) { f.sync(); return f.domRefs; }).reduce(function(r, c) { return r.concat(c); }, []);
   var length = Math.max(childDomRefs.length, domRefs.length);
   for(var i = 0; i < length; i++) {
    if(!domRefs[i] && childDomRefs[i])
     this.elementDomRef.appendChild(childDomRefs[i]);
    else if(!childDomRefs[i])
     ASPx.RemoveElement(domRefs[i]);
    else if(childDomRefs[i] !== domRefs[i])
     replaceElement(childDomRefs[i], domRefs[i]);
   }
  },
  subscribeOnVisibilityChange: function() {
   if(this.visibilityProperty)
    this.visibilityProperty.subscribe(this.onVisibilityChange.bind(this));
  },
  onVisibilityChange: function(v) {
   var elementToInsert = this.domRefs[0] = (v ? this.elementDomRef : this.placeholderDomRef);
   var elementToRemove = v ? this.placeholderDomRef : this.elementDomRef;
   if(elementToRemove.parentNode)
    replaceElement(elementToInsert, elementToRemove);
  }
 });
 var TextFragment = ASPx.CreateClass(Fragment, {
  constructor: function(domRef, textSubject, fragmentResolverOwner) {
   this.constructor.prototype.constructor.call(this, fragmentResolverOwner);
   this.textSubject = textSubject;
   this.domRefs[0] = domRef || createTextNode("");
   this.subscribeOnTextChange();
  },
  refreshDomRefs: function(domRefs) {
   var textNode = domRefs.filter(function(r) { return r.nodeType === Node.TEXT_NODE; })[0];
   if(textNode)
    this.domRefs[0] = textNode;
  },
  tryAddDomRef: function(node) { return false; },
  ensure: function(textSubject) {
   if(this.textSubject !== textSubject) {
    this.textSubject = textSubject;
    this.textSubject.lock();
    this.subscribeOnTextChange();
   }
  },
  sync: function() {
   if(this.textSubject)
    this.textSubject.unlock();
  },
  subscribeOnTextChange: function() {
   if(this.textSubject) {
    this.textSubject.subscribe(function(t) {
     this.domRefs[0].data = t;
    }.bind(this));
   }
  },
  appendChildFragment: function(fragment) { throw new Error("Not supported"); }
 });
 var HtmlFragment = ASPx.CreateClass(Fragment, {
  constructor: function(domRef, htmlSubject, fragmentResolverOwner) {
   this.constructor.prototype.constructor.call(this, fragmentResolverOwner);
   this.htmlSubject = htmlSubject;
   this.canTryAddDomRef = true;
   this.domRefs.push(domRef || doc.createComment(htmlContentCommentPrefix));
   this.domRefs.push(doc.createComment(htmlContentCommentPrefix));
   this.subscribeOnHtmlChanges();
  },
  tryAddDomRef: function(node) {
   if(!this.canTryAddDomRef) return false;
   if(node.nodeType === Node.COMMENT_NODE && node.data === htmlContentCommentPrefix) {
    this.domRefs[this.domRefs.length - 1] = node;
    return this.canTryAddDomRef = false;
   }
   this.domRefs.splice(this.domRefs.length - 1, 0, node);
   return true;
  },
  ensure: function(htmlSubject) {
   if(!!htmlSubject && this.htmlSubject !== htmlSubject) {
    this.htmlSubject = htmlSubject;
    this.htmlSubject.lock();
    this.subscribeOnHtmlChanges();
   }
  },
  subscribeOnHtmlChanges: function() {
   if(this.htmlSubject) {
    this.htmlSubject.subscribe(function(trustedHtmlString) {
     this.domRefs.splice(1, this.domRefs.length - 2);
     if (trustedHtmlString) {
      domBuffer.innerHTML = trustedHtmlString;
      prepareScriptBlockToAutoEval(domBuffer);
      for (var i = 0; i < domBuffer.childNodes.length; i++)
       this.domRefs.splice(this.domRefs.length - 1, 0, domBuffer.childNodes[i]);
     }
     this.sync();
    }.bind(this));
   }
  },
  sync: function() {
   if(this.htmlSubject)
    this.htmlSubject.unlock();
   syncDomWithFragmentNodes(this.domRefs);
  }
 });
 var CollectionFragment = ASPx.CreateClass(Fragment, {
  constructor: function(domRef, collection, component, callbackFunc, t, fragmentResolverOwner) {
   this.constructor.prototype.constructor.call(this, fragmentResolverOwner);
   this.domRefs.push(domRef || doc.createComment(collectionContentCommentPrefix));
   this.domRefs.push(doc.createComment(collectionContentCommentPrefix));
   this.canTryAddDomRef = true;
   this.collection = collection;
   if(component && callbackFunc)
    this.renderProxy = new ComponentCollectionRenderProxy(component, callbackFunc, t, this);
   else
    this.renderProxy = null;
   this.itemsFragments = [];
   this.subscribeOnCollectionChange();
  },
  createChildFragments: function() { return createFragmentsFromDOM(this.domRefs.slice(1, this.domRefs.length - 1), this); },
  tryAddDomRef: function(node) {
   if(!this.canTryAddDomRef) return false;
   if(node.nodeType === Node.COMMENT_NODE && node.data === collectionContentCommentPrefix) {
    this.domRefs[this.domRefs.length - 1] = node;
    return this.canTryAddDomRef = false;
   }
   this.domRefs.splice(this.domRefs.length - 1, 0, node);
   return true;
  },
  ensure: function(collection, renderProxy) {
   if(this.renderProxy !== renderProxy)
    this.renderProxy = renderProxy;
   if(this.collection !== collection) {
    this.collection = collection;
    this.subscribeOnCollectionChange();
   }
  },
  subscribeOnCollectionChange: function() {
   if(this.collection) {
    var firstSubscribe = true;
    this.collection.subscribe(function(changes) {
     this.renderProxy.renderCollectionItems(changes.addedItems);
     var fragmentsToRemove = changes.removedItems.map(function(item) { return this.itemsFragments[item.id]; }.bind(this));
     if(fragmentsToRemove.length > 0) {
      fragmentsToRemove.forEach(function(fragment) {
       fragment.destroy();
       ASPx.Data.ArrayRemove(this.itemsFragments, fragment);
      }.bind(this));
     }
     if(!firstSubscribe && changes.addedItems.length > 0 || fragmentsToRemove.length > 0)
      this.sync();
     firstSubscribe = false;
    }.bind(this));
   }
  },
  getItemContainer: function (item) {
   var container = this.itemsFragments[item.id];
   if (!container)
    container = this.itemsFragments[item.id] = item.getFragmentResolver(CollectionItemFragment).resolve(this, item);
   return container;
  },
  sync: function() {
   var newDomRefs = [this.domRefs[0]];
   this.itemsFragments.forEach(function(itemFragment) {
    itemFragment.childFragments.forEach(function(f) {
     f.sync();
     f.domRefs.forEach(function(d) {
      newDomRefs.push(d);
     });
    });
   });
   newDomRefs.push(this.domRefs[this.domRefs.length - 1]);
   this.domRefs = newDomRefs;
   syncDomWithFragmentNodes(newDomRefs);
  }
 });
 var CollectionItemFragment = ASPx.CreateClass(Fragment, {
  constructor: function(collectionFragment, item, fragmentResolverOwner) {
   this.constructor.prototype.constructor.call(this, fragmentResolverOwner);
   this.collectionFragment = collectionFragment;
   this.index = item.id;
  },
  destroy: function() {
   this.childFragments = [];
   this.domRefs = [];
   this.collectionFragment = null;
  },
  createChildFragments: function() { return []; },
  getChildFragment: function(path) {
   if(this.childFragments.length > path)
    return this.childFragments[path];
   var fragment = this.collectionFragment.getChildFragment(path);
   if(fragment)
    this.appendChildFragment(fragment);
   return fragment;
  }
 });
 var PlaceholderFragment = ASPx.CreateClass(Fragment, {
  constructor: function(domRef, fragmentResolverOwner) {
   this.constructor.prototype.constructor.call(this, fragmentResolverOwner);
   if(domRef)
    this.domRefs.push(domRef);
  },
  tryAddDomRef: function() { return false; }
 });
 Components.ComponentBase = ASPx.CreateClass(IFragmentResolverOwner, {
  constructor: function(viewModel) {
   this.viewModel = viewModel;
   this.viewModelCache = {};
  },
  getLayoutBuilderName: function() { throw new Error("Not implemented"); },
  getViewModelName: function() { throw new Error("Not implemented"); },
  resolveViewModel: function(name) {
   if(this.getViewModelName() === name)
    return this.viewModel;
   if(!this.viewModelCache[name])
    throw new Error("ViewModel is not declared!");
   return this.viewModelCache[name];
  },
  setViewModel: function(name, viewModel) {
   if(this.getViewModelName() === name)
    throw new Error("Can't set component's viewModel via setViewModel");
   this.viewModelCache[name] = viewModel;
  },
  usingViewModel: function(name, viewModel, callback) {
   if(!viewModel)
    return callback();
   if(this.getViewModelName() === name)
    throw new Error("Can't set component's viewModel via setViewModel");
   var old = this.viewModelCache[name];
   this.viewModelCache[name] = viewModel;
   var canPushFragmentResolverOwner = viewModel instanceof IFragmentResolverOwner;
   if(canPushFragmentResolverOwner)
    this.fragmentResolverOwners.push(viewModel);
   callback();
   if(canPushFragmentResolverOwner)
    this.fragmentResolverOwners.pop();
   this.viewModelCache[name] = old;
  },
  createLayout: function () {
   var container = findComponentMountNode(this.viewModel.Id.value, this);
   this.renderComponent(container, 0, this.getLayoutBuilderName(), []);
   container.sync();
   eventsHub.ensureEventListenersActive();
  },
  renderElement: function (container, tagName, path, visible, renderContentFunc) {
   if (tagName instanceof Components.Subject)
    tagName = tagName.value;
   renderContentFunc.call(this, render(container, path, this.getFragmentResolver(ElementFragment), function(f) { return f.tagName !== tagName.toUpperCase(); }, visible, tagName));
  },
  renderLiteral: function(container, path, format, vmProperties) {
   render(container, path, this.getFragmentResolver(TextFragment), null, Components.MultiSubjectText(format, vmProperties));
  },
  renderContent: function(container, path, property) {
   render(container, path, this.getFragmentResolver(HtmlFragment), null, property);
  },
  renderComponent: function(container, path, componentName, argsList) {
   this.usingViewModel(componentName.replace("Component", "ViewModel"), argsList[0], function() {
    var layoutBuilder = componentLayoutBuilders[componentName];
    var fragmentAtPath = container.getChildFragment(path);
    if(!fragmentAtPath) {
     fragmentAtPath = this.getFragmentResolver(PlaceholderFragment).resolve(null);
     container.appendChildFragment(fragmentAtPath);
    }
    layoutBuilder.call(this, this.getFragmentResolver(IsolatedFragmentContainer).resolve(fragmentAtPath));
   }.bind(this));
  },
  renderCollection: function(container, path, collection, t, callbackFunc) {
   var fragmentAtPath = container.getChildFragment(path);
   if(fragmentAtPath) {
    if(!(fragmentAtPath instanceof CollectionFragment))
     container.replace(fragmentAtPath, this.getFragmentResolver(CollectionFragment).resolve(null, collection, this, callbackFunc, t));
    else
     fragmentAtPath.ensure(collection, new ComponentCollectionRenderProxy(this, callbackFunc, t, fragmentAtPath));
   } else
    container.appendChildFragment(this.getFragmentResolver(CollectionFragment).resolve(null, collection, this, callbackFunc, t));
  },
  updateProperty: function(elementFragment, propertyName, format, vmProperties) {
   elementFragment.ensureProperty(propertyName, Components.MultiSubjectText(format, vmProperties));
  },
  renderSwitch: function(container, path, property, renderMap) {
   var fragmentAtPath = container.getChildFragment(path);
   if(!fragmentAtPath) {
    fragmentAtPath = this.getFragmentResolver(PlaceholderFragment).resolve();
    container.appendChildFragment(fragmentAtPath);
   }
   var conditionContainer = this.getFragmentResolver(IsolatedFragmentContainer).resolve(fragmentAtPath);
   property.subscribe(function(value) {
    var renderFunc = renderMap[value];
    if(renderFunc)
     renderFunc.call(this, conditionContainer);
   }.bind(this));
  }
 });
 var ComponentCollectionRenderProxy = ASPx.CreateClass(null, {
  constructor: function(component, renderFunc, t, container) {
   this.component = component;
   this.renderFunc = renderFunc;
   this.container = container;
   this.item = null;
   this.dependencyName = t;
  },
  renderCollectionItems: function(items) {
   items.forEach(function(item) {
    this.item = item;
    this.component.usingViewModel(this.dependencyName, item, function() {
     this.renderFunc.call(this, item);
    }.bind(this));
   }.bind(this));
  },
  renderElement: function(_, tagName, path, v, f) { this.component.renderElement(this.getContainer(), tagName, path, v, f); },
  renderLiteral: function(_, path, format, vmProperties) { this.component.renderLiteral(this.getContainer(), path, format, vmProperties); },
  renderContent: function(_, path, property) { this.component.renderContent(this.getContainer(), path, property); },
  renderComponent: function(_, path, componentName, argsList) { this.component.renderComponent(this.getContainer(), path, componentName, argsList); },
  renderCollection: function(_, path, collection, t, f) { this.component.renderCollection(this.getContainer(), path, collection, t, f); },
  renderSwitch: function(_, path, property, renderMap) { this.component.renderSwitch(this.getContainer(), path, property, renderMap); },
  getContainer: function() { return this.container.getItemContainer(this.item); },
  getFragmentResolver: function(t) { return (this.item || this.component).getFragmentResolver(t); }
 });
 Components.DOM = {
  FragmentResolver: FragmentResolver,
  ElementFragment: ElementFragment,
  CollectionItemFragment: CollectionItemFragment
 };
 Components.Events = {
  listenClick: eventsHub.getEventListener("click", function () { return doc; }).attach,
  listenMouseOver: eventsHub.getEventListener("mouseover", function () { return doc; }).attach
 };
 ASPx.Components = Components;
})(ASPx || (ASPx = {}), dx || (dx = {}));
var ASPx, dx;
(function(ASPx, dx) {
   ASPx.Components.RegisterComponentLayout("ToolbarItemComponent", function(container0) {
    var viewModel = this.resolveViewModel("ToolbarItemViewModel");
    this.renderSwitch(container0, 0, viewModel.ItemType, {
     "buttonItem": function(container1) {
      this.renderElement(container1, viewModel.ItemTagName, 0, viewModel.IsVisible, function(container2) {
       this.updateProperty(container2, "class", "$0 $1", [viewModel.CssClass, viewModel.RootCssClass]);
       this.updateProperty(container2, "data-item", "$0", [viewModel.Path]);
       this.updateProperty(container2, "disabled", "$0", [viewModel.DisabledAttr]);
       this.updateProperty(container2, "href", "$0", [viewModel.NavigationURL]);
       this.updateProperty(container2, "title", "$0", [viewModel.Title]);
       this.updateProperty(container2, "type", "button", []);
       this.renderElement(container2, "span", 0, viewModel.HasImage, function(container3) {
        this.updateProperty(container3, "class", "image $0", [viewModel.IconCssClass]);
       });
       this.renderElement(container2, "span", 1, viewModel.HasText, function(container3) {
        this.updateProperty(container3, "class", "$0", [viewModel.TextCssClass]);
        this.renderLiteral(container3, 0, "$0", [viewModel.Text]);
       });
       this.renderContent(container2, 2, viewModel.TextTemplate);
       this.renderElement(container2, "span", 3, viewModel.HasBadge, function(container3) {
        this.updateProperty(container3, "class", "badge-secondary badge $0", [viewModel.BadgeCssClass]);
        this.renderElement(container3, "span", 0, viewModel.HasBadgeIcon, function(container4) {
         this.updateProperty(container4, "class", "image $0", [viewModel.BadgeIconCssClass]);
        });
        this.renderElement(container3, "span", 1, viewModel.HasBadgeText, function(container4) {
         this.renderLiteral(container4, 0, "$0", [viewModel.BadgeText]);
        });
       });
      });
     },
     "buttonItemWithSubmenu": function(container1) {
      this.renderElement(container1, "div", 0, viewModel.IsVisible, function(container2) {
       this.updateProperty(container2, "class", "btn-group $0", [viewModel.RootCssClass]);
       this.updateProperty(container2, "data-item", "$0", [viewModel.Path]);
       this.renderElement(container2, viewModel.ItemTagName, 0, null, function(container3) {
        this.updateProperty(container3, "class", "$0", [viewModel.CssClass]);
        this.updateProperty(container3, "disabled", "$0", [viewModel.DisabledAttr]);
        this.updateProperty(container3, "href", "$0", [viewModel.NavigationURL]);
        this.updateProperty(container3, "title", "$0", [viewModel.Title]);
        this.updateProperty(container3, "type", "button", []);
        this.renderElement(container3, "span", 0, viewModel.RenderCheckedIcon, function(container4) {
         this.updateProperty(container4, "aria-hidden", "true", []);
         this.updateProperty(container4, "class", "image dx-accent-color dxbs-check $0", [viewModel.SubItemCheckedIconCssClass]);
        });
        this.renderElement(container3, "span", 1, viewModel.HasImage, function(container4) {
         this.updateProperty(container4, "class", "image $0", [viewModel.IconCssClass]);
        });
        this.renderElement(container3, "span", 2, viewModel.HasText, function(container4) {
         this.updateProperty(container4, "class", "$0", [viewModel.TextCssClass]);
         this.renderLiteral(container4, 0, "$0", [viewModel.Text]);
        });
        this.renderContent(container3, 3, viewModel.TextTemplate);
        this.renderElement(container3, "span", 4, viewModel.HasBadge, function(container4) {
         this.updateProperty(container4, "class", "badge-secondary badge $0", [viewModel.BadgeCssClass]);
         this.renderElement(container4, "span", 0, viewModel.HasBadgeIcon, function(container5) {
          this.updateProperty(container5, "class", "image $0", [viewModel.BadgeIconCssClass]);
         });
         this.renderElement(container4, "span", 1, viewModel.HasBadgeText, function(container5) {
          this.renderLiteral(container5, 0, "$0", [viewModel.BadgeText]);
         });
        });
       });
       this.renderElement(container2, "button", 1, viewModel.HasDropdownButton, function(container3) {
        this.updateProperty(container3, "class", "dxbs-ta-ddb dropdown-toggle dropdown-toggle-split $0", [viewModel.ButtonRenderCssClass]);
        this.updateProperty(container3, "disabled", "$0", [viewModel.DisabledAttr]);
        this.updateProperty(container3, "type", "button", []);
       });
       this.renderElement(container2, "div", 2, viewModel.HasSubmenu, function(container3) {
        this.updateProperty(container3, "class", "dxbs-dm $0", [viewModel.SubMenuCssClass]);
        this.updateProperty(container3, "data-item", "dm$0", [viewModel.Path]);
        this.renderElement(container3, "div", 0, viewModel.HasVisibleItems, function(container4) {
         this.updateProperty(container4, "class", "dropdown-menu dropright", []);
         this.renderElement(container4, "div", 0, viewModel.HasSubmenuHeader, function(container5) {
          this.updateProperty(container5, "class", "dropdown-header", []);
          this.renderElement(container5, "span", 0, null, function(container6) {
           this.updateProperty(container6, "class", "dxbs-ta-shb image $0", [viewModel.SubmenuHeaderBackButtonCssClass]);
          });
          this.renderElement(container5, "span", 1, null, function(container6) {
           this.renderLiteral(container6, 0, "$0", [viewModel.SubmenuHeaderText]);
          });
          this.renderElement(container5, "span", 2, null, function(container6) {
           this.updateProperty(container6, "class", "dxbs-ta-shc image $0", [viewModel.SubmenuHeaderCloseButtonCssClass]);
          });
         });
         this.renderCollection(container4, 1, viewModel.Items, "ToolbarItemViewModel", function(item) {
          this.renderComponent(container4, 0, "ToolbarItemComponent", [item]);
          this.renderElement(container4, "div", 1, item.BeginGroup, function(container5) {
           this.updateProperty(container5, "class", "dropdown-divider", []);
          });
         });
        });
        this.renderContent(container3, 1, viewModel.SubmenuTemplate);
       });
      });
     },
     "customItem": function(container1) {
      this.renderElement(container1, "div", 0, viewModel.IsVisible, function(container2) {
       this.updateProperty(container2, "class", "dxbs-toolbar-custom $0 $1", [viewModel.CssClass, viewModel.RootCssClass]);
       this.updateProperty(container2, "data-item", "$0", [viewModel.Path]);
       this.renderContent(container2, 0, viewModel.ContentTemplate);
      });
     },
     "subItem": function(container1) {
      this.renderElement(container1, "a", 0, viewModel.IsVisible, function(container2) {
       this.updateProperty(container2, "class", "dropdown-item $0 $1", [viewModel.CssClass, viewModel.RootCssClass]);
       this.updateProperty(container2, "data-item", "$0", [viewModel.Path]);
       this.updateProperty(container2, "href", "$0", [viewModel.NavigationURL]);
       this.updateProperty(container2, "title", "$0", [viewModel.Title]);
       this.renderElement(container2, "span", 0, viewModel.RenderCheckedIcon, function(container3) {
        this.updateProperty(container3, "aria-hidden", "true", []);
        this.updateProperty(container3, "class", "image dx-accent-color dxbs-check $0", [viewModel.SubItemCheckedIconCssClass]);
       });
       this.renderElement(container2, "span", 1, viewModel.HasImage, function(container3) {
        this.updateProperty(container3, "class", "image $0", [viewModel.IconCssClass]);
       });
       this.renderElement(container2, "span", 2, viewModel.HasText, function(container3) {
        this.updateProperty(container3, "class", "$0", [viewModel.TextCssClass]);
        this.renderLiteral(container3, 0, "$0", [viewModel.Text]);
       });
       this.renderContent(container2, 3, viewModel.TextTemplate);
      });
     }
    });
   });
})(ASPx || (ASPx = {}), dx || (dx = {}));
var ASPx, dx;
(function(ASPx, dx) {
 var Block = ASPx.CreateClass(null, {
  constructor: function() {
   this.state = null;
   this.isWidthCalculationLocked = false;
  },
  updateStateCore: function(s) {
   if(s !== this.state) {
    this.state = s;
    this.updateState(s);
   }
  },
  updateState: function(state) { },
  getElement: function () { },
  getGlobalRefreshTrigger: function () { }
 });
 var LayoutBlockUpdater = ASPx.CreateClass(null, {
  constructor: function(widthCalculator, triggersResolver) {
   this.widthCalculator = widthCalculator;
   this.triggersResolver = triggersResolver;
  },
  subscribe: function(block, widthSubscriber) {
   var boundWidthCalculator = this.widthCalculator.bind(this);
   function subscribeToRefreshTrigger(trigger) {
    trigger.subscribeNext(function () {
     if (!block.isWidthCalculationLocked)
      ASPx.DOM.CalculateStyles(function () { widthSubscriber(boundWidthCalculator(block)); });
    });
   }
   this.triggersResolver(block).forEach(subscribeToRefreshTrigger);
   subscribeToRefreshTrigger(block.getGlobalRefreshTrigger());
   ASPx.DOM.CalculateStyles(function () { widthSubscriber(boundWidthCalculator(block), true); });
  }
 });
 var LayoutBlock = ASPx.CreateClass(null, {
  constructor: function(layer, block, blockUpdater) {
   this.block = block;
   this.layer = layer;
   this.width = 0;
   blockUpdater.subscribe(block, function(w, isInit) {
    if(w === null)
     w = this.layer.prevLayer.getActualBlocks().filter(function(lb) { return lb.block === block; })[0].width;
    if(w !== this.width) {
     this.width = w;
     if(!isInit) this.layer.requestUpdateLayoutModel();
    }
   }.bind(this));
  },
  getMinWidth: function() { return this.width; },
  getMaxWidth: function() { return this.getMinWidth(); }
 });
 var LayoutDynamicBlock = ASPx.CreateClass(LayoutBlock, {
  getMaxWidth: function(layer) {
   return layer === this.layer ?
    this.layer.prevLayer.getActualBlocks().filter(function(lb) { return lb.block === this.block; }.bind(this))[0].getMinWidth() :
    this.getMinWidth();
  }
 });
 var LayoutStaticBlock = ASPx.CreateClass(LayoutBlock, {});
 var LayoutDefaultBlock = ASPx.CreateClass(LayoutBlock, {});
 var LayoutAdaptivityLayer = ASPx.CreateClass(null, {
  constructor: function(stateName, blockUpdaterGetter, prevLayer) {
   this.stateName = stateName;
   this.nextLayer = null;
   this.prevLayer = prevLayer;
   if(prevLayer)
    prevLayer.nextLayer = this;
   this.layoutBlocks = [];
   this.blockUpdaterGetter = blockUpdaterGetter;
   this.latestRange = null;
  },
  requestUpdateLayoutModel: function() { this.prevLayer.requestUpdateLayoutModel(); },
  isValidWidth: function(w) {
   var r = this.getRange();
   return (!this.nextLayer && r.min > w) || (!this.prevLayer && r.max < w) || (r.min <= w && r.max >= w);
  },
  getRange: function() {
   return this.latestRange = this.getActualBlocks().reduce(function(r, lb) {
    return { min: r.min + lb.getMinWidth(), max: r.max + lb.getMaxWidth(this) };
   }.bind(this), { min: 0, max: 0 });
  },
  getActualBlocks: function() {
   if(!this.prevLayer)
    return this.layoutBlocks;
   return this.prevLayer
    .getActualBlocks()
    .map(function(lb1) {
     return this.layoutBlocks.filter(function(lb2) { return lb2.block === lb1.block; })[0] || lb1;
    }.bind(this));
  },
  activate: function(width) {
   this.layoutBlocks.forEach(function(lb) { lb.block.updateStateCore(this.stateName); }.bind(this));
  },
  addBlock: function(block) {
   var blockUpdater = this.blockUpdaterGetter(block);
   if(blockUpdater) this.layoutBlocks.push(this.createBlock(block, blockUpdater));
  },
  removeBlock: function(block) {
  },
  createBlock: function(block, blockUpdater) { }
 });
 var DefaultAdaptivityLayer = ASPx.CreateClass(LayoutAdaptivityLayer, {
  constructor: function(stateName, blockUpdaterGetter, layoutModel) {
   this.constructor.prototype.constructor.call(this, stateName, blockUpdaterGetter, null);
   this.layoutModel = layoutModel;
  },
  requestUpdateLayoutModel: function() { this.layoutModel.updateLayout(); },
  createBlock: function(block, blockUpdater) { return new LayoutDefaultBlock(this, block, blockUpdater); }
 });
 var SequentialAdaptivityLayer = ASPx.CreateClass(LayoutAdaptivityLayer, {
  activate: function(width) {
   var currentBlocks = this.getActualBlocks();
   var maxWidth = this.latestRange.max;
   var stateName = this.stateName;
   for(var i = currentBlocks.length - 1; i >= 0; i--) {
    var lBlock = currentBlocks[i];
    if(maxWidth > width) {
     var delta = lBlock.getMaxWidth(this) - lBlock.getMinWidth();
     maxWidth -= delta;
     if(maxWidth <= width) {
      lBlock.block.updateStateCore(stateName);
      stateName = this.prevLayer.stateName;
      continue;
     }
    }
    lBlock.block.updateStateCore(stateName);
   }
  },
  getRange: function() {
   return this.latestRange = this.getActualBlocks().reduce(function(r, lb) {
    return { min: r.min + lb.getMinWidth(), max: r.max + lb.getMaxWidth(this) };
   }.bind(this), { min: 0, max: 0 });
  },
  createBlock: function(block, blockUpdater) { return new LayoutDynamicBlock(this, block, blockUpdater); }
 });
 var SimultaneousAdaptivityLayer = ASPx.CreateClass(LayoutAdaptivityLayer, {
  createBlock: function(block, blockUpdater) { return new LayoutStaticBlock(this, block, blockUpdater); },
  getRange: function() {
   return this.latestRange = { min: this.getActualBlocks().reduce(function(r, lb) { return r + lb.getMinWidth(); }, 0), max: this.prevLayer.getRange().max - 1 };
  }
 });
 var LayoutAdaptivityModel = ASPx.CreateClass(null, {
  constructor: function(onLayerApplied) {
   this.layers = [];
   this.currentWidth = null;
   this.onLayerApplied = onLayerApplied;
  },
  initialize: function(collection, DOMelement, onElementResize) {
   ASPx.DOM.SubscribeElementContentWidth(DOMelement, function (w) {
    if (this.currentWidth !== w) {
     if (this.currentWidth === null) {
      collection.subscribe(function (changes) {
       changes.addedItems.forEach(this.addBlock.bind(this));
       changes.removedItems.forEach(this.removeBlock.bind(this));
      }.bind(this));
     }
     this.currentWidth = w;
     this.updateLayout();
     if (onElementResize)
      onElementResize();
    }
   }.bind(this));
  },
  getLastLayer: function() { return this.layers[this.layers.length - 1] || null; },
  defaultLayer: function(callback) {
   this.layers.push(new DefaultAdaptivityLayer("default", callback, this));
  },
  simultaneousTransitionLayer: function(stateName, callback) {
   this.layers.push(new SimultaneousAdaptivityLayer(stateName, callback, this.getLastLayer()));
  },
  sequentialTransitionLayer: function(stateName, callback) {
   this.layers.push(new SequentialAdaptivityLayer(stateName, callback, this.getLastLayer()));
  },
  addBlock: function(block) {
   this.layers.forEach(function(layer) {
    layer.addBlock(block);
   });
  },
  removeBlock: function(block) {
   this.layers.forEach(function(layer) {
    layer.removeBlock(block);
   });
  },
  updateLayout: function() {
   var layers = this.findLayersForWidth(this.currentWidth);
   if(layers.length > 0) {
    var layerToApply = layers[0];
    layerToApply.activate(this.currentWidth);
    if (this.onLayerApplied)
     this.onLayerApplied(layerToApply);
   }
  },
  findLayersForWidth: function(width) { return this.layers.filter(function(layer) { return layer.isValidWidth(width); }); }
 });
 ASPx.Adaptivity = {
  LayoutAdaptivityModel: LayoutAdaptivityModel,
  LayoutBlockUpdater: LayoutBlockUpdater,
  Block: Block
 };
})(ASPx || (ASPx = {}), dx || (dx = {}));

var ASPx, dx;
(function(ASPx, dx) {
   ASPx.Components.RegisterComponentLayout("AdaptiveToolbarComponent", function(container0) {
    var viewModel = this.resolveViewModel("AdaptiveToolbarViewModel");
    this.renderElement(container0, "div", 0, null, function(container1) {
     this.updateProperty(container1, "class", "dxbs-toolbar-adaptive $0", [viewModel.CssClass]);
     this.updateProperty(container1, "id", "$0", [viewModel.Id]);
     this.renderElement(container1, "div", 0, null, function(container2) {
      this.updateProperty(container2, "class", "btn-toolbar", []);
      this.updateProperty(container2, "role", "toolbar", []);
      this.renderElement(container2, "div", 0, viewModel.HasTitle, function(container3) {
       this.updateProperty(container3, "class", "dxbs-ta-title $0", [viewModel.TitleCssClass]);
       this.renderLiteral(container3, 0, "$0", [viewModel.Title]);
      });
      this.renderCollection(container2, 1, viewModel.Groups, "ToolbarItemGroupViewModel", function(group) {
       this.renderElement(container2, "div", 0, group.IsVisible, function(container3) {
        this.updateProperty(container3, "class", "$0", [viewModel.GroupCssClass]);
        this.updateProperty(container3, "role", "group", []);
        this.renderCollection(container3, 0, group.Items, "ToolbarItemViewModel", function(item) {
         this.renderComponent(container3, 0, "ToolbarItemComponent", [item]);
        });
       });
      });
      this.renderElement(container2, "div", 2, viewModel.CanHideRootItems, function(container3) {
       this.updateProperty(container3, "class", "btn-group dxbs-ta-ag", []);
       this.renderComponent(container3, 0, "ToolbarItemComponent", [viewModel.RootSubmenuButton]);
       this.renderComponent(container3, 1, "ToolbarItemComponent", [viewModel.SideMenuButton]);
      });
     });
     this.renderElement(container1, "div", 1, viewModel.HasSubmenu, function(container2) {
      this.updateProperty(container2, "class", "dxbs-dm dxbs-ta-rs $0", [viewModel.RootSubMenuCssClass]);
      this.updateProperty(container2, "data-item", "sys_submenu", []);
      this.renderElement(container2, "div", 0, viewModel.HasSubmenuHeader, function(container3) {
       this.updateProperty(container3, "class", "dropdown-header", []);
       this.renderElement(container3, "span", 0, null, function(container4) {
        this.updateProperty(container4, "class", "dxbs-ta-shb image $0", [viewModel.SubmenuHeaderBackButtonCssClass]);
       });
       this.renderElement(container3, "span", 1, null, function(container4) {
        this.renderLiteral(container4, 0, "$0", [viewModel.SubmenuHeaderText]);
       });
       this.renderElement(container3, "span", 2, null, function(container4) {
        this.updateProperty(container4, "class", "dxbs-ta-shc image $0", [viewModel.SubmenuHeaderCloseButtonCssClass]);
       });
      });
      this.renderElement(container2, "div", 1, null, function(container3) {
       this.updateProperty(container3, "class", "btn-group-vertical dropright", []);
       this.renderCollection(container3, 0, viewModel.SubmenuGroups, "ToolbarItemGroupViewModel", function(group) {
        this.renderElement(container3, "div", 0, group.IsVisible, function(container4) {
         this.updateProperty(container4, "class", "btn-group-vertical", []);
         this.renderCollection(container4, 0, group.Items, "ToolbarItemViewModel", function(item) {
          this.renderElement(container4, "div", 0, item.IsVisible, function(container5) {
          });
         });
        });
        this.renderElement(container3, "div", 1, group.HasDivider, function(container4) {
         this.updateProperty(container4, "class", "dropdown-divider", []);
        });
       });
      });
     });
    });
   });
})(ASPx || (ASPx = {}), dx || (dx = {}));
var dx;
(function(dx) {
 var LayoutEntity = ASPx.CreateClass(null, {
  constructor: function() {
   this.container = null;
  },
  getCache: function() { return this.owner ? this.owner.getCache() : (this.cache || (this.cache = {})); },
  getUniqueId: function() { return "l" + (LayoutEntity.layoutEntityUniqueIdCount++); },
  querySelector: function(selector) { return this.querySelectorAll(selector)[0]; },
  querySelectorAll: function(selector) { return this.querySelectorAllInternal(selector || ("#" + this.getContainer().id)); },
  registerRangeCssRule: function(selector, min, max, node) {
   var styles = "";
   if(min !== -1) styles += "min-width: " + min + "px;";
   if(max !== -1) styles += "max-width: " + max + "px;";
   this.registerCssRule(selector, styles, node);
  },
  registerCssRule: function(selector, styles, uniqueNode) {
   if(this.owner)
    this.owner.registerCssRule(selector, styles, uniqueNode);
   else
    this.registerCssRuleInternal(selector, styles, uniqueNode);
  },
  toggleClassName: function(el, className, condition) { return this.owner ? this.owner.toggleClassName(el, className, condition) : this.toggleClassNameInternal(el, className, condition); },
  toggleClassNameInternal: function(el, className, condition) { },
  registerCssRuleInternal: function(selector, styles, uniqueNode) { },
  querySelectorAllInternal: function(selector) { return this.owner ? this.owner.querySelectorAll(selector) : this.getNodes(selector); },
  getNodes: function(selector) {
   if(typeof selector === "function")
    return selector();
   if(typeof selector !== "string")
    throw new Error("custom selector is not implemented");
   var result = this.container.querySelectorAll(selector);
   if(!result.length) {
    selector = "#" + this.container.id + selector;
    result = this.container.parentNode.querySelectorAll(selector);
   }
   return result;
  },
  getContainer: function() { return this.owner ? this.owner.getContainer() : this.container; },
  createLayoutEntity: function() {
   return this.owner ? this.owner.createLayoutEntity.apply(this.owner, arguments) : this.createLayoutEntityInternal.apply(this, arguments);
  },
  getNodeWidth: function(node, skipMargins) {
   return Math.ceil(node.offsetWidth + (skipMargins ? 0 : this.getBoxOuterOffset(node))) + ASPx.GetHorizontalBordersWidth(node);
  },
  getBoxSize: function(el) {
   return Math.ceil(ASPx.GetElementOffsetWidth(el)) + this.getBoxOuterOffset(el);
  },
  getBoxInnerOffset: function(el) { return ASPx.GetLeftRightBordersAndPaddingsSummaryValue(el); },
  getBoxOuterOffset: function(el) { return ASPx.GetLeftRightMargins(el); },
  getBoxOffset: function(el) { return this.getBoxOuterOffset(el) + this.getBoxInnerOffset(el); },
  createLayoutEntityInternal: function(entityType, params) {
   var proxyClass = ASPx.CreateClass(this.resolveLayoutEntityType(entityType), {
    constructor: function(args) { this.constructor.prototype.constructor.apply(this, args); },
    owner: this
   });
   return new proxyClass(params || []);
  },
  resolveLayoutEntityType: function(t) { return t; },
  dispose: function() { }
 });
 LayoutEntity.layoutEntityUniqueIdCount = 0;
 dx.LayoutEntity = LayoutEntity;
 dx.LayoutBreakPointBuilderBase = ASPx.CreateClass(LayoutEntity, {
  constructor: function(name, selectorOrFunc) {
   this.name = name;
   this.selectorOrFunc = selectorOrFunc;
   this.onStateEnter = function(block) { };
   this.onStateLeave = function(block) { };
   this.prepareBlockFunc = function() { };
  },
  getBlockWidth: function(block) { return this.prepareBlockFunc(block); },
  findBlockElements: function(container) {
   if(typeof this.selectorOrFunc === "function")
    return this.selectorOrFunc(container);
   else if(typeof this.selectorOrFunc === "string")
    return ASPx.GetChildElementNodesByPredicate(container, function(n) { return ASPx.ElementMatchesSelector(n, this.selectorOrFunc); }.bind(this));
   return [];
  },
  setPrepareFunc: function(func) {
   this.prepareBlockFunc = func.bind(this);
   return this;
  },
  buildBlock: function(el, blocksContainer, isActive, expandableElementsSelector) {
   var block = this.createLayoutEntity(dx.LayoutBlock,
    [el, blocksContainer, this.name, isActive, expandableElementsSelector,
     function() { this.owner.domChanges.push(this.onStateEnter.bind(this, block)); }.aspxBind(this),
     function() { this.owner.domChanges.push(this.onStateLeave.bind(this, block)); }.aspxBind(this)
    ]);
   var widthRanges = this.prepareBlockFunc(block);
   block.widthRanges = widthRanges;
   return block;
  },
  onEnterState: function(callback) {
   this.onStateEnter = callback;
   return this;
  },
  onLeaveState: function(callback) {
   this.onStateLeave = callback;
   return this;
  },
  registerStateCssRule: function(selectors, minWidth, maxWidth, node) {
   var selectorArr = selectors.split(',') || [""];
   for(var i = 0; i < selectorArr.length; i++) {
    var selector = selectorArr[i];
    this.registerRangeCssRule("." + this.name + (selector ? " " + selector : ""), minWidth, maxWidth, node);
   }
  }
 });
 dx.LayoutBlock = ASPx.CreateClass(LayoutEntity, {
  constructor: function(node, blocksContainer, className, isActive, expandableElementsSelector, onEnter, onLeave) {
   this.onEnter = onEnter;
   this.onLeave = onLeave;
   this.prevBlock = null;
   this.nextBlock = null;
   if(node.block) {
    this.prevBlock = node.block;
    this.prevBlock.nextBlock = this;
   }
   node.block = this;
   this.hasPreview = false;
   this.isApplied = false;
   this.node = node;
   this.className = className;
   this.blocksContainer = blocksContainer;
   this.widthRanges = [];
   this.blocksContainerOffset = this.getBoxInnerOffset(blocksContainer);
   this.minContainerWidth = 0;
   this._isActive = isActive;
   if(ASPx.GetIsParent(blocksContainer, node.parentNode)) {
    while(node.parentNode != blocksContainer)
     this.blocksContainerOffset += this.getBoxInnerOffset(node = node.parentNode);
   }
   if(expandableElementsSelector) {
    var elements = this.blocksContainer.querySelectorAll(expandableElementsSelector);
    if(elements.length > 0) {
     for(var i = 0; i < elements.length; i++)
      this.minContainerWidth = Math.max(this.minContainerWidth, ASPx.GetElementOffsetWidth(elements[i]));
     return;
    }
   }
   this.minContainerWidth = this.node.offsetWidth;
   this.ownerGroup = null;
  },
  canBePushed: function() {
   return !this.isActive() && this.prevBlock && this.prevBlock.isActive();
  },
  canBePopped: function() {
   return this.isActive() && this.prevBlock;
  },
  push: function() {
   this._isActive = true;
   if(this.prevBlock)
    this.prevBlock._isActive = false;
  },
  pop: function() {
   this._isActive = false;
   if(this.prevBlock)
    this.prevBlock._isActive = true;
  },
  isActive: function() { return this._isActive; },
  getWidth: function(calcMax) { return calcMax ? this.widthRanges[0].maxWidth : this.widthRanges[0].minWidth; },
  applyLayout: function() {
   if(!this.isApplied && this.isActive()) {
    if(this.nextBlock)
     this.nextBlock.applyLayoutInternal(false);
    if(this.prevBlock)
     this.prevBlock.applyLayoutInternal(false);
    this.applyLayoutInternal(true);
   }
  },
  applyLayoutInternal: function(state) {
   if(this.isApplied !== state) {
    this.toggleClassName(this.node, this.className, state);
    if(state || this.ownerGroup.checkIsBlockLastActive(this))
     this.toggleClassName(this.blocksContainer, this.className, state);
    if(!state)
     this.onLeave();
    else
     this.onEnter();
   }
   this.isApplied = state;
  },
  dispose: function() {
   this.node.block = null;
   this.node = null;
   this.ownerGroup = null;
   this.blocksContainer = null;
  }
 });
 dx.LayoutState = ASPx.CreateClass(LayoutEntity, {
  constructor: function(buffer, name, prevState) {
   this.builders = buffer || [];
   this.name = name;
   this.index = prevState ? prevState.index + 1 : 0;
   this.prevState = prevState;
   this.nextState = null;
   this.canBeMixed = true;
   if(prevState)
    prevState.nextState = this;
  },
  for: function(selectorOrFunc) { return this.builders[this.builders.length] = this.createLayoutEntity(dx.LayoutBreakPointBuilderBase, [this.name, selectorOrFunc]); }
 });
 dx.LayoutBlockGroup = ASPx.CreateClass(LayoutEntity, {
  constructor: function(isDefault) {
   this.blocks = [];
   this.isDefault = isDefault;
  },
  isActive: function() { return this.blocks.some(function(b) { return b.isActive(); }); },
  addBlock: function(block) {
   block.ownerGroup = this;
   this.blocks.push(block);
  },
  applyLayout: function() {
   for(var i = 0; i < this.blocks.length; i++)
    this.blocks[i].applyLayout();
  },
  getWidth: function(calcMax) {
   var resultWidth = 0;
   var blocksContainer = null;
   var blocks = this.getOrderedBlocks();
   for(var i = 0; i < blocks.length; i++) {
    var block = blocks[i];
    if(this.isDefault && blocksContainer !== block.blocksContainer) {
     blocksContainer = block.blocksContainer;
     resultWidth += block.blocksContainerOffset;
    }
    resultWidth += block.getWidth(calcMax);
   }
   return resultWidth;
  },
  checkIsBlockLastActive: function(block) {
   if(!ASPx.ElementHasCssClass(block.node, "gallery-item"))
    return true;
   var activeBlocks = this.blocks.filter(function(b) { return b.isActive() && b.blocksContainer === block.blocksContainer; });
   return activeBlocks.length === 1 && activeBlocks[0] === block;
  },
  getOrderedBlocks: function() {
   return this.blocks;
  },
  shrink: function() {
   var blocks = this.getOrderedBlocks();
   for(var i = blocks.length - 1; i >= 0; i--) {
    var block = blocks[i];
    if(!block.canBePushed())
     continue;
    block.push();
    return true;
   }
   return false;
  },
  grow: function() {
   var blocks = this.getOrderedBlocks();
   for(var i = 0; i < blocks.length; i++) {
    var block = blocks[i];
    if(!block.canBePopped())
     continue;
    block.pop();
    return true;
   }
   return false;
  }
 });
 dx.LayoutBlocksContainerPreview = ASPx.CreateClass(LayoutEntity, {
  constructor: function(node, selector, allBlocks, onEnterState, onLeaveState) {
   this.onEnterState = onEnterState;
   this.onLeaveState = onLeaveState;
   this._isActive = false;
   this.isLayoutApplied = false;
   this.node = node;
   this.width = this.getNodeWidth(node);
   this.previewContentWidth = 0;
   while(!ASPx.ElementMatchesSelector(node = node.parentNode, selector))
    this.width += this.getBoxInnerOffset(node);
   this.container = node;
   var relatedBlocks = allBlocks.filter(function(b) { return b.blocksContainer == node; });
   for(var i = 0; i < relatedBlocks.length; i++)
    relatedBlocks[i].hasPreview = true;
   var blocks = relatedBlocks.filter(function(b) { return b.nextBlock === null; });
   var className = "";
   function getRange(min, max) { return { minWidth: min, maxWidth: max || min }; }
   function mergeRanges(r1, r2) { return { minWidth: r1.minWidth + r2.minWidth, maxWidth: r1.maxWidth + r2.maxWidth }; }
   function reduceRanges(p, c) { return mergeRanges(p, c.widthRanges[0]); }
   function selectNextTier(b) {
    if(b.nextBlock) className = b.nextBlock.className;
    return b.nextBlock || b;
   }
   function hasAnyNextTierBlock(b) { return !!b.nextBlock; }
   this.contentWidth = 0;
   if(blocks.length > 0) {
    if(ASPx.GetParentByClassName(this.container, "active")) {
     var width = this.getNodeWidth(this.container);
     this.registerRangeCssRule(selector, width, width, this.container);
    }
    this.contentWidth = blocks.reduce(function(p, c) { return p + c.getWidth(); }, blocks[0].blocksContainerOffset);
    var tiers = relatedBlocks.filter(function(b) { return b.prevBlock === null; });
    className = tiers[0].className;
    var tierRange = null;
    while(tiers.length > 0) {
     tierRange = tiers.reduce(reduceRanges, getRange(tiers[0].blocksContainerOffset));
     if(className == "default")
      this.previewContentWidth = tierRange.maxWidth;
     this.registerRangeCssRule(selector + "." + className, tierRange.minWidth, tierRange.maxWidth, this.container);
     if(tiers.filter(hasAnyNextTierBlock).length === 0)
      break;
     tiers = tiers.map(selectNextTier);
    }
   } else
    this.contentWidth = node.offsetWidth;
   this.registerRangeCssRule(selector + ".preview", this.width, this.width, this.container);
  },
  isActive: function() { return this._isActive; },
  getWidth: function(calcMax) { return this.isActive() ? this.width : this.contentWidth; },
  shrink: function() { return !this.isActive() && (this._isActive = true); },
  grow: function() { return this.isActive() && !(this._isActive = false); },
  applyLayout: function() {
   if(this.isLayoutApplied != this.isActive()) {
    this.isLayoutApplied = this.isActive();
    if(!this.isLayoutApplied)
     this.onLeaveState(this.container);
    else
     this.onEnterState(this.container);
    this.toggleClassName(this.container, "preview", this.isActive());
   }
  }
 });
 dx.LayoutBlockGroupCollection = ASPx.CreateClass(LayoutEntity, {
  constructor: function(groupsContainer, selector) {
   this.groupsContainer = groupsContainer;
   this.groupsContainerOffset = this.getBoxInnerOffset(this.groupsContainer);
   this.selector = selector;
   this.expandableElementsSelector = "";
   this.currentWidth = -1;
   this.maxWidth = -1;
   this.minWidth = -1;
   this.blockGroups = [];
   this.previews = [];
   this.allBlocks = [];
   this.blocksWithoutPreview = [];
  },
  createBlockGroups: function() { },
  expandableElements: function(selector) {
   this.expandableElementsSelector = selector;
  },
  definePreviews: function(previewsSelector, onEnterState, onLeaveState) {
   var previewElements = this.groupsContainer.querySelectorAll(this.selector + " " + previewsSelector);
   for(var i = 0; i < previewElements.length; i++) {
    var p = this.createLayoutEntity(dx.LayoutBlocksContainerPreview, [previewElements[i], this.selector, this.allBlocks, onEnterState, onLeaveState]);
    this.previews.push(p);
   }
   this.blocksWithoutPreview = this.allBlocks.filter(function(b) { return !b.hasPreview; });
  },
  defineState: function(stateName, initializeStateFunc) {
   var builders = [];
   var layoutState = this.createLayoutEntity(dx.LayoutState, [builders, stateName]);
   initializeStateFunc(layoutState);
   var blocksContainers = this.getNodesOrContainerIfMatches(this.groupsContainer, this.selector);
   var blocksGroup = this.createBlockGroup();
   for(var i = 0; i < blocksContainers.length; i++) {
    var blocksContainer = blocksContainers[i];
    this.intializeBlocksContainer(blocksContainer);
    for(var j = 0; j < builders.length; j++) {
     var builder = builders[j];
     var blockElements = [];
     if(typeof builder.selectorOrFunc == "string")
      blockElements = this.getNodesOrContainerIfMatches(blocksContainer, builder.selectorOrFunc);
     else if(typeof builder.selectorOrFunc == "function")
      blockElements = builder.selectorOrFunc();
     for(var k = 0; k < blockElements.length; k++) {
      var block = builder.buildBlock(blockElements[k], blocksContainer, blocksGroup.isDefault, this.expandableElementsSelector);
      this.allBlocks.push(block);
      blocksGroup.addBlock(block);
     }
    }
   }
  },
  getNodesOrContainerIfMatches: function(container, selector) {
   var result = container.querySelectorAll(selector);
   if(result.length === 0 && ASPx.ElementMatchesSelector(container, selector))
    result = [container];
   return result;
  },
  intializeBlocksContainer: function(bc) {
   bc._dxMinWidth = 0;
   if(this.expandableElementsSelector) {
    var exElements = bc.querySelectorAll(this.expandableElementsSelector);
    for(var i = 0; i < exElements.length; i++) {
     var el = exElements[i];
     var w = ASPx.GetElementOffsetWidth(exElements[i])+ this.getBoxInnerOffset(bc);
     while(el.parentNode != bc)
      w += this.getBoxInnerOffset(el = el.parentNode);
     bc._dxMinWidth = Math.max(bc._dxMinWidth, w);
    }
   }
  },
  createBlockGroup: function(groupElement) {
   return this.blockGroups[this.blockGroups.length] = this.createLayoutEntity(dx.LayoutBlockGroup, [this.blockGroups.length === 0, groupElement]);
  },
  hasActivePreviews: function() { return this.previews.filter(function(p) { return p.isActive(); }).length > 0; },
  getWidth: function(calcMax) {
   var width = 0;
   if(!this.hasActivePreviews()) {
    width += this.groupsContainerOffset;
    var blocksContainer = null;
    var blockContainerWidth = 0;
    for(var i = 0; i < this.allBlocks.length; i++) {
     var block = this.allBlocks[i];
     if(block.isActive()) {
      if(blocksContainer !== block.blocksContainer && this.groupsContainer !== block.blocksContainer) {
       width += Math.max(blockContainerWidth, blocksContainer ? blocksContainer._dxMinWidth : 0);
       blockContainerWidth = 0;
       blocksContainer = block.blocksContainer;
       blockContainerWidth += block.blocksContainerOffset;
      }
      blockContainerWidth += block.getWidth(calcMax);
     }
    }
    width += Math.max(blockContainerWidth, blocksContainer ? blocksContainer._dxMinWidth : 0);
   } else {
    width += this.previews.reduce(function(p, c) { return p + c.getWidth(calcMax); }, 0);
    width += this.blocksWithoutPreview.reduce(function(p, c) { return p + c.getWidth(calcMax); }, 0);
   }
   return width;
  },
  shrink: function() {
   if(this.hasActivePreviews()) {
    for(var i = this.previews.length - 1; i >= 0; i--) {
     if(this.previews[i].shrink())
      return true;
    }
   } else {
    for(var i = 0; i < this.blockGroups.length; i++) {
     if(this.blockGroups[i].shrink())
      return true;
    }
    var lastPreview = this.previews[this.previews.length - 1];
    if(lastPreview)
     return lastPreview.shrink();
   }
   return false;
  },
  grow: function() {
   if(this.hasActivePreviews()) {
    for(var i = 0; i < this.previews.length; i++) {
     if(this.previews[i].grow())
      return true;
    }
   } else {
    for(var i = this.blockGroups.length - 1; i >= 0; i--) {
     if(this.blockGroups[i].grow())
      return true;
    }
   }
   return false;
  },
  applyLayout: function() {
   for(var i = 0; i < this.previews.length; i++)
    this.previews[i].applyLayout();
   for(var i = 0; i < this.blockGroups.length; i++)
    this.blockGroups[i].applyLayout();
  },
  adjust: function(w) {
   if(this.currentWidth > w) {
    while(this.getWidth() > w && this.shrink()) { }
    this.currentWidth = w;
    this.applyLayout();
   } else if(w > this.currentWidth) {
    while(w > this.getWidth() && this.grow()) {
     if(this.getWidth() > w) {
      this.shrink();
      break;
     }
    }
    this.currentWidth = w;
    this.applyLayout();
   }
  },
  initialize: function() {
   this.currentWidth = this.getWidth(false);
   this.minWidth = this.currentWidth;
   this.maxWidth = this.getWidth(true);
   this.owner.containerMaxWidth = Math.max(this.owner.containerMaxWidth, this.maxWidth);
  },
  dispose: function() {
   for(var i = 0; i < this.allBlocks.length; i++)
    this.allBlocks[i].dispose();
   this.allBlocks = [];
   this.groupsContainer = null;
   this.blockGroups = [];
   this.previews = [];
   this.blocksWithoutPreview = [];
  }
 });
 dx.LayoutBreakpointsBuilder = ASPx.CreateClass(LayoutEntity, {
  constructor: function(control, builderClass) {
   this.builderClass = builderClass;
   this.control = control;
   this.container = control.GetMainElement();
   this.containerOffsets = this.calculateContainerOffsets();
   this.blockGroupsArray = [];
   this.cssRulesCache = {};
   this.isReady = false;
   this.rebuildBreakpointsInfo = [];
   this.containerMaxWidth = -1;
   this.classesToApply = [];
   this.domChanges = [];
   dx.BootstrapClientUtils.attachToUpdateDefaultStylesRequest(this);
   this.cssSheetsToInsert = null;
   this.nextAdjustGroupWidth = null;
  },
  resolveLayoutEntityType: function(t) {
   if(t == dx.LayoutBreakPointBuilderBase)
    return this.builderClass;
   return t;
  },
  toggleClassNameInternal: function(el, className, condition) {
   this.getBatchCssUpdateCache(el)[className] = condition;
  },
  getBatchCssUpdateCache: function (el) {
   var cache = el._layoutBuilderCache;
   if (!cache) {
    cache = el._layoutBuilderCache = {};
    this.classesToApply.push(this.createBatchCssUpdateDelegate(el));
   }
   return cache;
  },
  createBatchCssUpdateDelegate: function (el) {
   return function () {
    var cache = el._layoutBuilderCache;
    if(!cache)
     return;
    delete el._layoutBuilderCache;
    for(var k in cache) {
     if(cache.hasOwnProperty(k))
      ASPx.ToggleClassNameToElement(el, k, cache[k]);
    }
   };
  },
  registerCssRuleInternal: function(rule, styles, uniqueNode) {
   if(uniqueNode) {
    var uniqueKey = ASPx.Attr.GetAttribute(uniqueNode, "data-rid");
    if(!uniqueKey)
     ASPx.Attr.SetAttribute(uniqueNode, "data-rid", uniqueKey = this.getUniqueId());
    rule = "[data-rid=" + uniqueKey + "]" + rule;
   }
   if(!this.cssRulesCache[rule])
    this.cssRulesCache[rule] = styles;
   else if(this.cssRulesCache[rule])
    this.cssRulesCache[rule] += styles;
  },
  createBlockGroups: function(selectorOrFunc, groupSelectorOrFunc, prepareFunc) {
   this.rebuildBreakpointsInfo.push({ selector: selectorOrFunc, groupSelector: groupSelectorOrFunc, prepareFunc: prepareFunc });
   var result = [];
   var containers = this.querySelectorAll(selectorOrFunc);
   for(var i = 0; i < containers.length; i++) {
    var container = containers[i];
    var blockGroupCollection = this.createLayoutEntity(dx.LayoutBlockGroupCollection, [container, groupSelectorOrFunc]);
    this.blockGroupsArray.push(blockGroupCollection);
    if(prepareFunc) {
     prepareFunc(blockGroupCollection);
    }
    blockGroupCollection.createBlockGroups();
    result.push(blockGroupCollection);
   }
   this.nextAdjustGroupWidth = this.getGroupsWidth();
   return result;
  },
  initialize: function() {
   for(var i = 0; i < this.blockGroupsArray.length; i++)
    this.blockGroupsArray[i].initialize();
   this.createCssRules();
   this.isReady = true;
   if(this.cssSheetsToInsert === null)
    this.adjust();
  },
  createCssRules: function() {
   var cssText = "";
   for(var k in this.cssRulesCache) {
    if(this.cssRulesCache.hasOwnProperty(k))
     cssText += "\n" + k + "{" + this.cssRulesCache[k] + "}";
   }
   this.insertCssRulesToDom(cssText, this.container.id);
  },
  insertCssRulesToDom: function(cssText, containerId) {
   if(this.cssSheetsToInsert !== null)
    this.cssSheetsToInsert.push({ cssText: cssText, containerId: containerId });
   else
    ASPx.BootstrapCore.createStylesBlock(cssText, containerId);
  },
  adjust: function(beforeUpdate) {
   if(this.isReady) {
    var prevCssChanges = this.classesToApply;
    var prevDomChanges = this.domChanges;
    var cssChanges = this.classesToApply = [];
    var domChanges = this.domChanges = [];
    var w = null;
    if (this.nextAdjustGroupWidth !== null) {
     w = this.nextAdjustGroupWidth;
     this.nextAdjustGroupWidth = null;
    } else
     w = this.getGroupsWidth();
    for(var i = 0; i < this.blockGroupsArray.length; i++)
     this.blockGroupsArray[i].adjust(w);
    if (beforeUpdate)
     beforeUpdate(this, w);
    cssChanges = prevCssChanges.concat(cssChanges);
    domChanges = prevDomChanges.concat(domChanges);
    this.queueUpdates(function() {
     while(cssChanges.length) cssChanges.shift()();
     this.queueUpdates(function() {
      while(domChanges.length) domChanges.shift()();
     });
    }.aspxBind(this));
   }
  },
  queueUpdates: function(callback) {
   ASPx.RequestAnimationFrame(callback);
  },
  getGroupsWidth: function() {
   return this.getContainer().offsetWidth - this.containerOffsets;
  },
  isBatchStylesUpdatingSupported: function() { return !!this.control.cancelLayoutStateAppearance; },
  beginStyleUpdate: function() {
   if(this.isBatchStylesUpdatingSupported())
    dx.LayoutBreakpointsBuilder.registerControl(this.control);
  },
  updateStyle: function() {
   if(!this.isBatchStylesUpdatingSupported())
    this.rebuildBreakpoints();
  },
  endStyleUpdate: function() {
   if(this.isBatchStylesUpdatingSupported())
    dx.LayoutBreakpointsBuilder.reInitializeLayout(this.control);
  },
  rebuildBreakpoints: function() {
   var rebuildInfo = this.rebuildBreakpointsInfo;
   this.dispose();
   for(var i = 0; i < rebuildInfo.length; i++)
    this.createBlockGroups(rebuildInfo[i].selector, rebuildInfo[i].groupSelector, rebuildInfo[i].prepareFunc);
   ASPx.RequestAnimationFrame(this.initialize.aspxBind(this));
  },
  dispose: function() {
   dx.BootstrapClientUtils.detachUpdateDefaultStylesRequestListener(this);
   this.containerOffsets = this.calculateContainerOffsets();
   for(var i = 0; i < this.blockGroupsArray.length; i++)
    this.blockGroupsArray[i].dispose();
   this.blockGroupsArray = [];
   this.cssRulesCache = {};
   this.isReady = false;
   this.rebuildBreakpointsInfo = [];
  },
  calculateContainerOffsets: function() {
   return this.getBoxInnerOffset(this.container);
  }
 });
 var currentControlQueue = [];
 var currentControlQueueLock = 0;
 dx.LayoutBreakpointsBuilder.registerControl = function(control) {
  currentControlQueue.push(control);
  currentControlQueueLock++;
 };
 function initializeControls(controls) {
  var cssSheetsBuffer = [];
  controls.forEach(function (c) { ASPx.AddClassNameToElement(c.GetMainElement(), "dxbs-lb-process"); });
  ASPx.RequestAnimationFrame(function () {
   controls.forEach(function (c) {
    c.buildLayout();
    c.layoutBreakPoints.cssSheetsToInsert = cssSheetsBuffer;
   });
   ASPx.RequestAnimationFrame(function () {
    controls.forEach(function (c) { ASPx.RemoveClassNameFromElement(c.GetMainElement(), "dxbs-lb-process"); });
    controls.forEach(function (c) { c.applyLayoutStateAppearance(); });
    var stylesFragment = document.createDocumentFragment();
    cssSheetsBuffer.forEach(function (ss) {
     ASPx.BootstrapCore.createStylesBlock(ss.cssText, ss.containerId, stylesFragment);
    });
    ASPx.GetHeadElementOrCreateIfNotExist(document).appendChild(stylesFragment);
    controls.forEach(function (c) {
     var lb = c.layoutBreakPoints;
     lb.cssSheetsToInsert = null;
     lb.adjust();
    });
   });
  });
 }
 dx.LayoutBreakpointsBuilder.initializeLayout = function(control) {
  if(--currentControlQueueLock === 0) {
   var controlsQueue = currentControlQueue;
   currentControlQueue = [];
   initializeControls(controlsQueue);
  }
 };
 dx.LayoutBreakpointsBuilder.reInitializeLayout = function(control) {
  if(--currentControlQueueLock === 0) {
   var controlsQueue = currentControlQueue;
   currentControlQueue = [];
   controlsQueue.forEach(function(c) {
    c.cancelLayoutStateAppearance();
    ASPx.BootstrapCore.removeStylesBlock(c.layoutBreakPoints.container.id);
    c.layoutBreakPoints.dispose();
   });
   ASPx.RequestAnimationFrame(function() {
    initializeControls(controlsQueue);
   });
  }
 };
 var OneLineLayoutBlock = ASPx.CreateClass(dx.LayoutBlock, {
  constructor: function(group, element) {
   this.group = group;
   this.element = element;
   this.width = 0;
   this.isActiveValue = null;
   this.index = group.blocks.length;
   this.nextBlock = null;
   this.prevBlock = element.layoutBlockObj || null;
   element.layoutBlockObj = element.layoutBlockObj ? element.layoutBlockObj.nextBlock = this : this;
  },
  afterCreate: function(groupsCollection) {
   delete this.element.layoutBlockObj;
   groupsCollection.maxWidth += this.width;
   groupsCollection.minWidth += this.getMinWidth();
   if(this.owner.canMarkItemElements())
    this.toggleClassName(this.element, "block-i", true);
   if (this.width === 0)
    this.raiseVisibilityChange(false);
  },
  setActive: function(active) {
   if(this.isActiveValue === active) return;
   this.isActiveValue = active;
   this.group.activeBlock = active ? this : null;
   this.group.groupsCollection.lastGroup = this.group;
   if(this.owner.needPrevStateCssClasses()) {
    if(this.group.state.prevState)
     this.toggleClassName(this.group.element.parentNode, this.group.state.prevState.name, this.isActiveValue);
    this.toggleClassName(this.element, this.group.state.name, this.isActiveValue);
   }
   this.toggleClassName(this.group.element, this.group.state.name, this.isActiveValue);
  },
  raiseVisibilityChange: function (isVisible) {
   var callback = isVisible ? this.element.onShow : this.element.onHide;
   if (callback)
    this.owner.domChanges.push(callback);
  },
  getMinWidth: function() { return this.nextBlock ? this.nextBlock.getMinWidth() : this.width; },
  getNextBlock: function(step) {
   var group = this.group;
   var block = group.blocks[this.index - step];
   if(!block && (group = group.groupsCollection.blockGroups[group.totalIndex + step]))
    block = group.blocks[Math.pow(group.blocks.length, step > 0) - 1];
   return block;
  }
 });
 var OneLineLayoutBlockGroup = ASPx.CreateClass(dx.LayoutBlockGroup, {
  constructor: function(groupsCollection, element, state, domIndex) {
   this.groupsCollection = groupsCollection;
   this.state = state;
   this.element = element;
   this.elementOffset = this.getBoxOffset(element);
   this.blocks = [];
   this.activeBlock = null;
   this.fullWidth = this.elementOffset;
   this.isSmallest = !state.nextState;
   this.isLargest = !state.prevState;
   this.domIndex = domIndex;
   this.totalIndex = this.groupsCollection.blockGroups.length;
   this.createBlocks(state.builders);
   if(!!state.prevState && (this.isSmallest || (element.layoutBlockGroupObj.isSmallest = this.blocks.length === 0)))
    delete element.layoutBlockGroupObj;
   else
    element.layoutBlockGroupObj = this;
  },
  afterCreate: function(groupsCollection) {
   this.blocks.forEach(function(b) { b.afterCreate(groupsCollection); });
   groupsCollection.groupsOffset += this.elementOffset;
   groupsCollection.groupBlocksLengthLookup[this.domIndex] = this.blocks.length;
   groupsCollection.lastGroup = this;
   if(this.owner.canMarkGroupElements())
    this.toggleClassName(this.element, "block-g", true);
  },
  setActive: function(isActive) {
   var index = 0;
   if(!this.isSmallest && this.isLargest) {
    index = this.blocks.length - 1;
   }
   this.blocks[index].setActive(isActive);
  },
  createBlocks: function(builders) {
   for(var i = 0; i < builders.length; i++) {
    var builder = builders[i];
    var blockElements = builder.findBlockElements(this.element);
    for(var j = 0; j < blockElements.length; j++) {
     var block = this.createLayoutEntity(dx.LayoutBlock, [this, blockElements[j]]);
     this.fullWidth += block.width = builder.getBlockWidth(block);
     this.blocks.push(block);
    }
   }
   if(this.isLargest)
    this.setActive(true);
  },
  calculateWidth: function(block) { return this !== block.group ? this.fullWidth : this.getActualBlocks(block).reduce(function(r, b) { return r + b.width; }, this.elementOffset); },
  getActualBlocks: function(block) { return this.blocks.map(function(b) { return this.state.canBeMixed && b.prevBlock && b.index < block.index ? b.prevBlock : b; }.bind(this)); }
 });
 var OneLineLayoutBlockGroupCollection = ASPx.CreateClass(dx.LayoutBlockGroupCollection, {
  constructor: function(groupsContainer, selector) {
   this.groupsContainer = groupsContainer;
   this.testElement = typeof selector === "function" ? selector : function(el) { return ASPx.ElementMatchesSelector(el, selector); };
   this.blockGroups = [];
   this.states = [];
   this.width = 0;
   this.groupsOffset = 0;
   this.maxWidth = 0;
   this.minWidth = 0;
   this.groupElementsCount = 0;
   this.currentLayoutElements = [];
   this.lastGroup = null;
   this.groupLookupMap = {};
   this.groupBlocksLengthLookup = {};
  },
  createBlockGroup: function(groupElement, state, domIndex) {
   var blockGroup = this.createLayoutEntity(dx.LayoutBlockGroup, [this, groupElement, state, domIndex]);
   blockGroup = blockGroup.blocks.length > 0 ? this.blockGroups[this.blockGroups.length] = blockGroup : null;
   if(blockGroup)
    (this.groupLookupMap[domIndex] || (this.groupLookupMap[domIndex] = [])).splice(0, 0, blockGroup.totalIndex);
   return blockGroup;
  },
  createBlockGroups: function() {
   var groupElements = this.owner.getGroupElements(this.groupsContainer);
   this.groupElementsCount = groupElements.length;
   for(var i = 0; i < this.states.length; i++) {
    for(var j = this.groupElementsCount - 1; j >= 0; j--) {
     var el = groupElements[j];
     if(el && (!this.testElement(el) || !this.createBlockGroup(el, this.states[i], j)))
      groupElements[j] = null;
    }
   }
   this.states = [];
   for(var i = 0; i < this.blockGroups.length; i++) {
    if(!this.blockGroups[i].isLargest) break;
    this.blockGroups[i].afterCreate(this);
   }
   this.minWidth += this.groupsOffset;
   this.maxWidth += this.groupsOffset;
   this.width = this.maxWidth;
   this.currentLayoutElements = this.findActiveBlocks();
  },
  defineState: function(stateName, initializeStateFunc) {
   var layoutState = this.createLayoutEntity(dx.LayoutState, [[], stateName, this.states[this.states.length - 1] || null]);
   this.states.push(layoutState);
   initializeStateFunc(layoutState);
  },
  initialize: function() { },
  applyLayout: function(layoutElements) {
   this.currentLayoutElements.forEach(function(le) { le.setActive(false); });
   this.currentLayoutElements = layoutElements;
   this.currentLayoutElements.forEach(function(le) { le.setActive(true); });
   this.detectBlockItemVisibilityChanges();
  },
  adjust: function(width) {
   if(width === this.width || width <= this.minWidth && this.width === this.minWidth || width >= this.maxWidth && this.width === this.maxWidth)
    return;
   var oldWidth = this.width;
   this.width = Math.max(this.minWidth, Math.min(this.maxWidth, width));
   if(this.width === this.maxWidth)
    return this.applyLayout(this.blockGroups.filter(function(g) { return g.isLargest; }));
   else if(this.width === this.minWidth)
    return this.applyLayout(this.blockGroups.filter(function(g) { return g.isSmallest; }));
   var delta = oldWidth - this.width;
   var sign = delta / Math.abs(delta);
   var block = this.findActiveBlocks()[0], prevBlock = block, currentBlock = block;
   while(block) {
    width = this.calculateWidth(block);
    if(sign > 0 && width <= this.width || sign < 0 && width >= this.width) {
     var blockToApply = sign < 0 ? prevBlock : block;
     if(blockToApply !== currentBlock)
      this.applyLayout([blockToApply]);
     break;
    }
    prevBlock = block;
    block = block.getNextBlock(sign);
   }
  },
  detectBlockItemVisibilityChanges: function() {
   var actualGroups = this.findActualBlockGroups();
   for(var i = 0; i < actualGroups.length; i++) {
    var group = actualGroups[i];
    var afterActiveBlock = false;
    for(var j = 0; j < group.blocks.length; j++) {
     var block = group.blocks[j];
     if(group === this.lastGroup && !(afterActiveBlock = (afterActiveBlock || block.isActiveValue)))
      block = block.prevBlock || block;
     block.raiseVisibilityChange(block.width > 0);
    }
   }
  },
  calculateWidth: function(block) {
   block = block || this.findActiveBlocks()[0];
   var groups = this.findActualBlockGroups(block.group);
   return groups.reduce(function(w, g) { return w + g.calculateWidth(block); }, 0);
  },
  findActualBlockGroups: function(activeGroup) {
   activeGroup = activeGroup || this.lastGroup;
   var groups = [];
   for(var i = 0; i < this.groupElementsCount; i++) {
    var groupIndices = this.groupLookupMap[i];
    for(var j = 0; j < groupIndices.length; j++) {
     var group = this.blockGroups[groupIndices[j]];
     if(i < activeGroup.domIndex ? group.state.index < activeGroup.state.index : group.state.index <= activeGroup.state.index) {
      groups.push(group);
      break;
     }
    }
   }
   return groups;
  },
  findActiveBlocks: function() { return this.lastGroup ? this.lastGroup.blocks.filter(function(b) { return b.isActiveValue; }) : null; },
  dispose: function() { }
 });
 var OneLineLayoutBreakPointBuilder = ASPx.CreateClass(dx.LayoutBreakPointBuilderBase, {
  setWidth: function() {
   return this.setPrepareFunc(function(block) {
    return this.getBoxSize(block.element);
   });
  },
  setHidden: function() {
   return this.setPrepareFunc(function(block) { return 0; });
  },
  setOnlyImageWidth: function() {
   return this.setPrepareFunc(function(block) {
    var width = this.getBoxSize(block.element);
    var imageElement = ASPx.GetChildByClassName(block.element, "image:not(.preview-image)");
    if(!imageElement) {
     imageElement = ASPx.GetChildByClassName(ASPx.GetChildByClassName(block.element, "dropdown-toggle"), "image:not(.preview-image)");
    }
    var previewImageElement = ASPx.GetChildByClassName(block.element, "preview-image");
    if(!previewImageElement) {
     previewImageElement = ASPx.GetChildByClassName(ASPx.GetChildByClassName(block.element, "dropdown-toggle"), "preview-image");
    }
    if(imageElement) {
     width = this.getBoxSize(imageElement) - this.getBoxOuterOffset(imageElement);
     if(previewImageElement) {
      var previewImageWidth = this.getBoxSize(previewImageElement) - this.getBoxOuterOffset(previewImageElement);
      width = Math.max(width, previewImageWidth);
     }
     var offset = this.getBoxOffset(block.element);
     var parent = imageElement.parentNode;
     while(parent !== block.element) {
      offset += this.getBoxOffset(parent);
      parent = parent.parentNode;
     }
     return width + offset;
    }
    return width;
   });
  },
  setNoTextWidth: function() {
   return this.setPrepareFunc(function(block) {
    var width = this.getBoxSize(block.element);
    if (ASPx.GetChildByClassName(block.element, "dxbs-toolbar-editor"))
     return width;
    var imageElement = ASPx.GetChildByClassName(block.element, "image");
    if(!imageElement)
     imageElement = ASPx.GetChildByClassName(ASPx.GetChildByClassName(block.element, "btn"), "image");
    if(imageElement) {
     var textElement = imageElement.nextElementSibling;
     if(textElement && !ASPx.ElementHasCssClass(textElement, "popup")) {
      width -= this.getBoxSize(textElement);
      width -= this.getBoxOuterOffset(imageElement);
     }
    }
    return width;
   });
  }
 });
 dx.OneLineLayoutBreakpointsBuilderBase = ASPx.CreateClass(dx.LayoutBreakpointsBuilder, {
  resolveLayoutEntityType: function(t) {
   switch(t) {
    case dx.LayoutBreakPointBuilderBase: return OneLineLayoutBreakPointBuilder;
    case dx.LayoutBlockGroupCollection: return OneLineLayoutBlockGroupCollection;
    case dx.LayoutBlockGroup: return OneLineLayoutBlockGroup;
    case dx.LayoutBlock: return OneLineLayoutBlock;
   }
   return t;
  },
  getGroupElements: function(groupsContainer) { return ASPx.GetChildElementNodes(groupsContainer); },
  canMarkGroupElements: function() { throw new Error("implement"); },
  canMarkItemElements: function() { throw new Error("implement"); },
  needPrevStateCssClasses: function() { throw new Error("implement"); }
 });
 dx.OneLineLayoutBreakpointsBuilder = ASPx.CreateClass(dx.OneLineLayoutBreakpointsBuilderBase, {
  canMarkGroupElements: function() { return true; },
  canMarkItemElements: function() { return true; },
  needPrevStateCssClasses: function() { return true; },
  createBlockGroups: function() {
   dx.OneLineLayoutBreakpointsBuilderBase.prototype.createBlockGroups.call(this, ".dxbs-r-card-group > .dxbs-toolbar", ".dxbs-r-grp, .dxbs-r-grp-gallery", function(blockGroups) {
    blockGroups.defineState("item", function(state) {
     state.for(":not(.dxbs-r-ab)").setWidth();
     state.for(".dxbs-r-ab:not(.dxbs-r-atb)").setHidden();
     state.for(".dxbs-r-atb").setOnlyImageWidth();
    });
    blockGroups.defineState("item-text-h", function(state) {
     state.for(":not(.dxbs-r-ab):not(.gallery-item)").setNoTextWidth();
     state.for(".gallery-item").setWidth();
     state.for(".dxbs-r-ab:not(.dxbs-r-atb)").setHidden();
     state.for(".dxbs-r-atb").setOnlyImageWidth();
    });
    blockGroups.defineState("item-h", function(state) {
     state.for(":only-child:not(.dxbs-r-ab)").setWidth();
     state.for(":not(:only-child):not(.dxbs-r-ab)").setHidden();
     state.for(".dxbs-r-ab").setWidth();
    });
    blockGroups.defineState("item-a", function(state) {
     state.for(":only-child:not(.dxbs-r-ab)").setNoTextWidth();
     state.for(":not(:only-child):not(.dxbs-r-ab)").setHidden();
     state.for(".dxbs-r-ab").setNoTextWidth();
    });
   });
  },
  calculateContainerOffsets: function() {
   var result = this.getBoxInnerOffset(this.container);
   var offsetEl = this.container.querySelector(".dxbs-r-card-group.active > .dxbs-toolbar");
   while(offsetEl != this.container) {
    result += this.getBoxOffset(offsetEl);
    offsetEl = offsetEl.parentNode;
   }
   return result;
  }
 });
})(dx || (dx = {}));
var ASPx, dx;
(function adaptiveToolbarModule(ASPx, dx) {
 ASPx.adaptiveToolbarModule = adaptiveToolbarModule;
 var statement = ASPx.Components.Statement;
 var toolbarControls = [];
 function processToolbarControls(id, onFiltered, onCommon) {
  var copyToolbarControls = toolbarControls.concat([]);
  copyToolbarControls.forEach(function (t) {
   if (!t.IsDOMDisposed()) {
    if (t.name === id && onFiltered)
     onFiltered(t);
    else if (onCommon)
     onCommon(t);
   } else
    t.OnDispose();
  });
 }
 function trackToolbarControl(toolbarControl) {
  if (toolbarControls.indexOf(toolbarControl) === -1) {
   toolbarControls.push(toolbarControl);
   dx.BootstrapClientUtils.attachToUpdateDefaultStylesRequest(toolbarControl);
  }
 }
 function stopTrackingToolbarControl(toolbarControl) {
  if (toolbarControls.indexOf(toolbarControl) > -1) {
   ASPx.Data.ArrayRemove(toolbarControls, toolbarControl);
   dx.BootstrapClientUtils.detachUpdateDefaultStylesRequestListener(toolbarControl);
  }
 }
 var ToolbarControl = ASPx.CreateClass(ASPxClientControl, {
  constructor: function (name) {
   this.constructor.prototype.constructor.call(this, name);
   this.viewModel = new ToolbarViewModel(this);
   this.component = null;
   this.layoutModel = null;
   this.isLayoutCalculated = false;
   this.currentHoveredItemPath = null;
   this.RootItemVisibilityChanged = new ASPxClientEvent();
   this.CloseUp = new ASPxClientEvent();
   this.ItemClick = new ASPxClientEvent();
   this.ItemMouseOut = new ASPxClientEvent();
   this.ItemMouseOver = new ASPxClientEvent();
   this.PopUp = new ASPxClientEvent();
  },
  InlineInitialize: function () {
   ASPxClientControl.prototype.InlineInitialize.call(this);
   this.component = new ToolbarComponent(this.viewModel);
  },
  SetData: function (data) {
   this.viewModel.update(data.viewModelData);
  },
  Initialize: function () {
   ASPxClientControl.prototype.Initialize.call(this);
   this.component.createLayout();
   ASPx.DOM.ChangeDOM(function () {
    this.viewModel.ensureSubmenusRender();
    var blocks = new ASPx.Components.Collection([], function (i) { return null; });
    blocks.add(new TitleBlock(this));
    blocks.addRange(this.getItemsBlocks());
    blocks.add(new SideMenuBtnBlock(this, this.viewModel.SideMenuButton));
    blocks.add(new EllipsisBtnBlock(this, this.viewModel.RootSubmenuButton));
    var contextItem = LayoutBlockUpdaters.contextItem(blocks);
    var model = new ASPx.Adaptivity.LayoutAdaptivityModel(function (layer) {
     if (!this.isLayoutCalculated) {
      this.isLayoutCalculated = true;
      var mainEl = this.GetMainElement();
      ASPx.DOM.CalculateStyles(function () {
       this.viewModel.ensureSubmenuShowBehavior();
       this.updateControlStyles(Math.ceil(mainEl.offsetHeight));
       this.viewModel.IsLoading.setValue(false);
       trackToolbarControl(this);
      }.bind(this));
     }
     this.viewModel.IsDropdownMenu.setValue(layer.stateName.indexOf("has-sidemenu") === -1);
     this.viewModel.IsItemTextCollapsed.setValue(layer.stateName.indexOf("no-item-text") > -1);
    }.bind(this));
    model.defaultLayer(function (block) {
     switch (block.getName()) {
      case "item": return LayoutBlockUpdaters.fullWidthItem;
      case "title": return LayoutBlockUpdaters.titleItem;
     }
     return LayoutBlockUpdaters.hiddenItem;
    });
    if (this.viewModel.CanHideRootItems.value && this.viewModel.MinRootItems.value > 0) {
     model.sequentialTransitionLayer("has-ellipsis", function (block) {
      switch (block.getName()) {
       case "ellipsis": return LayoutBlockUpdaters.fullWidthSystemItem;
       case "item": return contextItem;
      }
     });
    }
    if (this.viewModel.CanCollapseToIcons.value) {
     model.simultaneousTransitionLayer("no-item-text", function (block) {
      switch (block.getName()) {
       case "item": return LayoutBlockUpdaters.noTextItem;
       case "ellipsis": return LayoutBlockUpdaters.hiddenItem;
      }
     });
    }
    if (this.viewModel.CanHideRootItems.value) {
     model.sequentialTransitionLayer(this.viewModel.CanCollapseToIcons.value ? "no-item-text has-ellipsis" : "has-ellipsis", function (block) {
      switch (block.getName()) {
       case "item": return contextItem;
       case "ellipsis": return LayoutBlockUpdaters.fullWidthSystemItem;
      }
     });
    }
    if (this.viewModel.CanCollapseToSideMenu.value) {
     model.simultaneousTransitionLayer("has-sidemenu", function (block) {
      switch (block.getName()) {
       case "sidemenu": return LayoutBlockUpdaters.fullWidthSystemItem;
       case "title": return null;
       default: return LayoutBlockUpdaters.hiddenItem;
      }
     });
    }
    model.initialize(blocks, this.GetMainElement(), function () {
     if (!this.viewModel.SideMenuButton.IsChecked.value && !this.skipHideAllSubmenus)
      this.hideAllSubmenus();
     this.skipHideAllSubmenus = false;
    }.bind(this));
    this.layoutModel = model;
   }.bind(this), 2);
  },
  IsEnabledAdaptivity: function () { return true; },
  CollapseControl: function () {},
  IsControlCollapsed: function () { return false; },
  ExpandControl: function () {},
  BrowserWindowResizeSubscriber: function () { return true; },
  OnBrowserWindowResize: function () { this.hideAllSubmenus(); },
  OnDispose: function () {
   ASPxClientControl.prototype.OnDispose.call(this);
   stopTrackingToolbarControl(this);
  },
  getHoverDelay: function () { return 300; },
  getDataItemElement: function (path) { return this.querySelector("[data-item='" + path + "']"); },
  getItemsBlocks: function () {
   return this.viewModel.Groups.selectMany(function (g) { return g.Items; })
    .reduce(function (result, item) {
     if (result.group && result.group.tryAddItem(item)) return result;
     if (item.GroupName.value) return { group: result.blocks[result.blocks.length] = new GroupBlock(this, item), blocks: result.blocks };
     return { group: null, blocks: result.blocks.concat([new ItemBlock(this, item)]) };
    }.bind(this), { blocks: [], group: null }).blocks
    .sort(function (a, b) { return a.item.AdaptivePriority.value - b.item.AdaptivePriority.value; })
    .map(function (b, i) {
     b.index = i;
     return b;
    });
  },
  hideAllSubmenus: function () { this.viewModel.closeSubmenu(); },
  onExternalClick: function () { this.hideAllSubmenus(); },
  onMainElementClick: function (evt) {
   var evtSource = ASPx.Evt.GetEventSource(evt);
   var dataItem = findDataItem(evtSource, this.GetMainElement(), evtSource, true);
   if (dataItem) {
    var ddToggle = getDropdownToggle(dataItem.el, evtSource);
    if (this.viewModel.processClick(dataItem.path, ddToggle, dataItem.evtSrc))
     this.onHoverDataItem(dataItem, ddToggle);
   } else if (this.viewModel.SideMenuButton.IsChecked.value) {
    this.hideSidemenu();
   }
  },
  onHoverDataItem: function (dataItem, hoveredDOMElement) {
   var hoveredItem = this.viewModel.findItem(dataItem.path);
   if (hoveredItem) {
    if (this.currentHoveredItemPath !== dataItem.path) {
     if (this.currentHoveredItemPath)
      this.RaiseItemMouseOut(this.currentHoveredItemPath);
     this.RaiseItemMouseOver(dataItem.path);
     this.currentHoveredItemPath = dataItem.path;
    }
    if (hoveredDOMElement || hoveredItem.isSystemItem() || isDropdownMenuDataItem(dataItem))
     hoveredItem.showSubmenu();
    else
     hoveredItem.closeSubmenu();
   }
  },
  onHoverSimpleElement: function () { this.viewModel.closeSubmenu(); },
  GetItemTemplateContainer: function (indexPath) {
   var item = this.GetItemByIndexPath(indexPath);
   return item && item.itemViewModel.getElement();
  },
  GetItemByIndexPath: function (indexPath) { return this.GetRootItem().GetItemByIndexPath(indexPath); },
  IsSplitterNestedControl: function () { return false; },
  SetTitle: function (title) { this.viewModel.Title.setValue(title); },
  GetTitle: function () { return this.viewModel.Title.value; },
  GetVisible: function () { return this.viewModel.IsVisible.value; },
  SetVisible: function (value) { this.viewModel.IsVisible.setValue(value); },
  AdjustControl: function () { },
  GetItem: function (index) { return this.viewModel.getItem(index); },
  GetItemByName: function (name) { return this.viewModel.getItemByName(name); },
  GetItemCount: function () { return this.viewModel.getItemCount(); },
  GetRootItem: function () { return this.viewModel.getRootItem(); },
  GetSelectedItem: function () { return this.viewModel.getSelectedItem(); },
  GetOrientation: function () { },
  SetHeight: function () { },
  ToggleSideMenu: function () { },
  SetSelectedItem: function () { },
  SetOrientation: function () { },
  RaiseItemMouseOut: function (path, htmlElement, htmlEvent) {
   if(this.ItemMouseOut.IsEmpty())
    return;
   var itemVM = this.viewModel.findItem(path);
   if(itemVM.attachedItem) {
    this.ItemMouseOut.FireEvent(this, {
     item: itemVM.attachedItem,
     htmlElement: htmlElement,
     htmlEvent: htmlEvent
    });
   }
  },
  RaiseItemMouseOver: function (path, htmlElement, htmlEvent) {
   if(this.ItemMouseOver.IsEmpty())
    return;
   var itemVM = this.viewModel.findItem(path);
   if(itemVM.attachedItem) {
    this.ItemMouseOver.FireEvent(this, {
     item: itemVM.attachedItem,
     htmlElement: htmlElement,
     htmlEvent: htmlEvent
    });
   }
  },
  RaiseItemClick: function (item, htmlElement, htmlEvent) {
   var processOnServer = this.autoPostBack || this.IsServerEventAssigned("ItemClick");
   if (!this.ItemClick.IsEmpty()) {
    var args = {
     htmlElement: htmlElement,
     htmlEvent: htmlEvent,
     item: item,
     processOnServer: processOnServer
    };
    this.ItemClick.FireEvent(this, args);
    processOnServer = args.processOnServer;
   }
   if (processOnServer) {
    this.SendPostBack("CLICK:" + item.indexPath);
    return false;
   }
   return true;
  },
  RaiseRootItemVisibleChange: function (item, visible) {
   this.RootItemVisibilityChanged.FireEvent(this, { item: item, visible: visible });
  },
  beginStyleUpdate: function () { },
  endStyleUpdate: function () { },
  updateStyle: function () {
   var mainEl = this.GetMainElement();
   var toolbarEl = ASPx.GetChildByClassName(mainEl, "btn-toolbar");
   ASPx.DOM.CalculateStyles(function () {
    this.updateControlStyles(Math.ceil(toolbarEl.offsetHeight));
   }.bind(this));
   this.viewModel.RefreshTrigger.refresh();
  },
  updateControlStyles: function (height) {
   ASPx.DOM.SetStyles(this.GetMainElement(), { height: height + "px" });
  }
 });
 var ToolbarComponent = ASPx.CreateClass(ASPx.Components.ComponentBase, {
  getLayoutBuilderName: function() { return "AdaptiveToolbarComponent"; },
  getViewModelName: function() { return "AdaptiveToolbarViewModel"; }
 });
 var MenuItemBase = ASPx.CreateClass(null, {
  constructor: function (index, indexPath, menu, parent, itemViewModel) {
   this.index = index;
   this.indexPath = indexPath;
   this.menu = menu;
   this.itemViewModel = itemViewModel || null;
   this.name = itemViewModel ? this.itemViewModel.Name.value : this.indexPath;
   this.parent = parent;
   this.items = [];
   if (itemViewModel)
    itemViewModel.attachedItem = this;
   this.initialize();
  },
  initialize: function () { },
  GetItem: function (index) { return this.items[index] || null; },
  GetItemCount: function () { return this.items.length; },
  GetItemByName: function (name) {
   for (var i = 0; i < this.items.length; i++) {
    var item = this.items[i];
    if (item.name === name)
     return item;
    var subItem = item.GetItemByName(name);
    if (subItem !== null)
     return subItem;
   }
   return null;
  },
  GetBadgeIconCssClass: function () { return this.itemViewModel.BadgeIconCssClass.value; },
  SetBadgeIconCssClass: function (value) { this.itemViewModel.BadgeIconCssClass.setValue(value); },
  GetBadgeText: function () { return this.itemViewModel.BadgeText.value; },
  SetBadgeText: function (value) { this.itemViewModel.BadgeText.setValue(value); },
  GetText: function () { return this.itemViewModel.Text.value; },
  SetText: function (value) { this.itemViewModel.Text.setValue(value); },
  GetIconCssClass: function () { return this.itemViewModel.IconCssClass.value; },
  SetIconCssClass: function (value) { this.itemViewModel.IconCssClass.setValue(value); },
  GetVisible: function () { return this.itemViewModel.IsDisplayed.value; },
  SetVisible: function (value) { this.itemViewModel.IsDisplayed.setValue(value); },
  GetChecked: function () { return this.itemViewModel.IsChecked.value; },
  SetChecked: function (value) { this.itemViewModel.IsChecked.setValue(value); },
  GetEnabled: function () { return this.itemViewModel.IsEnabled.value; },
  SetEnabled: function (value) { this.itemViewModel.IsEnabled.setValue(value); },
  GetNavigateUrl: function () { },
  SetNavigateUrl: function () { },
  SetImageUrl: function () { },
  GetImageUrl: function () { },
  GetItemByIndexPath: function (indexPath) {
   for (var i = 0; i < this.items.length; i++) {
    var item = this.items[i];
    if (item.indexPath === indexPath)
     return item;
    item = item.GetItemByIndexPath();
    if (item !== null)
     return item;
   }
   return null;
  },
  fillItems: function (itemViewModels) {
   for (var i = 0; i < itemViewModels.length; i++) {
    var indexPath = this.indexPath ? this.indexPath + "i" + i : i.toString();
    var item = new MenuItem(i, indexPath, this.menu, this, itemViewModels[i]);
    this.items.push(item);
   }
  }
 });
 var MenuItem = ASPx.CreateClass(MenuItemBase, {
  initialize: function () {
   this.fillItems(this.itemViewModel.Items.items);
  }
 });
 var RootMenuItem = ASPx.CreateClass(MenuItem, {
  constructor: function (toolbarViewModel) {
   this.toolbarViewModel = toolbarViewModel;
   this.constructor.prototype.constructor.call(this, 0, "", toolbarViewModel.toolbar, null, null);
  },
  initialize: function () {
   this.fillItems(this.toolbarViewModel.Groups.selectMany(function (g) { return g.Items; }));
   this.toolbarViewModel.toolbar.rootItem = this;
  },
  GetBadgeIconCssClass: function () { return ""; },
  SetBadgeIconCssClass: function (value) { },
  GetBadgeText: function () { return ""; },
  SetBadgeText: function (value) { },
  GetText: function () { return ""; },
  SetText: function (value) { },
  GetIconCssClass: function () { return ""; },
  SetIconCssClass: function (value) { },
  GetVisible: function () { return ""; },
  SetVisible: function (value) { },
  GetChecked: function () { return false; },
  SetChecked: function (value) { },
  GetEnabled: function () { return false; },
  SetEnabled: function () { },
  GetNavigateUrl: function () { return ""; },
  SetNavigateUrl: function () { },
  SetImageUrl: function () { return ""; },
  GetImageUrl: function () { }
 });
 ASPx.Components.Events.listenClick({
  ".dxbs-toolbar-adaptive": function(mainElement, evt, evtSrc) {
   processToolbarControls(mainElement.id, function (t) { t.onMainElementClick(evt); }, function (t) { t.onExternalClick(); });
  },
  "*": function(el, evt, evtSrc) {
   processToolbarControls(null, null, function(t) { t.onExternalClick(); });
  }
 });
 var HoverTracker = ASPx.CreateClass(null, {
  constructor: function (controls, hoverStatesRef) {
   this.controls = controls;
   this.hoverStates = hoverStatesRef || [];
  },
  track: function (id, dataItem, action, isRequiredAction) {
   if (!this.controls.some(function (t) { return t.name === id; }))
    return;
   var ctrl = this.controls.filter(function (t) { return t.name === id; })[0],
    required = !!isRequiredAction,
    el = dataItem ? getDropdownToggle(dataItem.el, dataItem.evtSrc) : null,
    path = dataItem ? dataItem.path : null,
    state = this.hoverStates.filter(function (s) { return s.id === id && s.el === el && s.path === path; })[0];
   if (state) {
    if (state !== this.hoverStates[this.hoverStates.length - 1] || required && !state.required) {
     ASPx.Data.ArrayRemove(this.hoverStates, state);
     this.hoverStates.push(state);
    }
    state.required = required;
   } else {
    this.hoverStates.push(state = { id: id, el: el, path: path, required: required });
    setTimeout(function () {
     var index = this.hoverStates.indexOf(state);
     if (index !== -1) {
      if (index === this.hoverStates.length - 1 || state.required)
       action(ctrl, dataItem, el);
      this.hoverStates = this.hoverStates.filter(function (s, i) { return i > index || s.required && i < index; });
     }
    }.bind(this), ctrl.getHoverDelay());
   }
  }
 });
 function getDropdownToggle(itemEl, evtSrc) {
  var ddItem = ASPx.GetParentByClassName(evtSrc, "dropdown-item");
  if (ddItem && ASPx.GetIsParent(itemEl, ddItem) && ASPx.GetChildByClassName(ddItem, "dropdown-toggle"))
   return ddItem;
  var ddToggle = ASPx.GetParentByClassName(evtSrc, "dropdown-toggle");
  if (ddToggle && ASPx.GetIsParent(itemEl, ddToggle))
   return ddToggle;
  var submenuEl = ASPx.GetParentByClassName(evtSrc, "dxbs-dm");
  if (submenuEl && submenuEl.parentNode === itemEl)
   return submenuEl;
  return null;
 }
 (function (hoverTracker) {
  ASPx.Components.Events.listenMouseOver({
   ".dxbs-toolbar-adaptive": function (mainElement, evt, evtSrc) {
    var dataItem = findDataItem(evtSrc, mainElement, evtSrc, false);
    if (dataItem)
     hoverTracker.track(mainElement.id, dataItem, function (t, dataItem, el) { t.onHoverDataItem(dataItem, el); });
    else
     hoverTracker.track(mainElement.id, null, function (t) { t.onHoverSimpleElement(); });
   },
   "*": function () {
    processToolbarControls(null, null, function (toolbar) { hoverTracker.track(toolbar.name, null, function (t) { t.onHoverSimpleElement(); }, true); });
   }
  });
 })(new HoverTracker(toolbarControls));
 var LayoutBlockUpdaters = {
  fullWidthItem: new ASPx.Adaptivity.LayoutBlockUpdater(function (b) { return b.getWidth(); }, getItemSizeAffectingProperties),
  fullWidthSystemItem: new ASPx.Adaptivity.LayoutBlockUpdater(function (b) { return b.getWidth(); }, getSystemItemSizeAffectingProperties),
  titleItem: new ASPx.Adaptivity.LayoutBlockUpdater(function(b) { return b.getWidth(); }, function(b) { return [b.toolbar.viewModel.HasTitle]; }),
  noTextItem: new ASPx.Adaptivity.LayoutBlockUpdater(function(b) { return b.getNoTextWidth(); }, getItemSizeAffectingProperties),
  contextItem: function(blocks) {
   return new ASPx.Adaptivity.LayoutBlockUpdater(function(b) {
    var prevVisibleItems = blocks.items.filter(function(i) { return i.getName() === "item" && i.index < b.index && i.isVisible(); });
    return prevVisibleItems.length >= b.toolbar.viewModel.MinRootItems.value || !b.isVisible() ? 0 : null;
   }, getItemSizeAffectingProperties);
  },
  hiddenItem: new ASPx.Adaptivity.LayoutBlockUpdater(function() { return 0; }, function() { return []; })
 };
 var Block = ASPx.CreateClass(ASPx.Adaptivity.Block, {
  constructor: function (toolbar) {
   this.constructor.prototype.constructor.call(this);
   this.toolbar = toolbar;
  },
  getWidth: function () { return this.isVisible() ? getNodeWidth(this.getElement()) : 0; },
  isVisible: function () { return true; },
  getName: function() { },
  getElement: function() { },
  getGlobalRefreshTrigger: function () { return this.toolbar.viewModel.RefreshTrigger; }
 });
 var ItemBlockBase = ASPx.CreateClass(Block, {
  constructor: function(toolbar, item) {
   this.constructor.prototype.constructor.call(this, toolbar, item);
   this.item = item;
   this.index = -1;
  },
  getElement: function() { return this.toolbar.getDataItemElement(this.item.Path.value); },
  updateState: function(state) { this.item.IsDisplayed.setValue(state.indexOf("has-" + this.getName()) > -1); }
 });
 var EllipsisBtnBlock = ASPx.CreateClass(ItemBlockBase, {
  getName: function () { return "ellipsis"; }
 });
 var SideMenuBtnBlock = ASPx.CreateClass(ItemBlockBase, {
  getName: function () { return "sidemenu"; }
 });
 var ItemBlock = ASPx.CreateClass(ItemBlockBase, {
  getNoTextWidth: function() { return this.item.IsDisplayed.value ? getItemWidthoutTextWidth(this.getElement()) : 0; },
  getName: function () { return "item"; },
  isVisible: function () { return this.item.IsDisplayed.value; },
  updateState: function(state) {
   var toolbarViewModel = this.item.group.toolbarViewModel;
   if(!toolbarViewModel.CanCollapseToSideMenu.value && toolbarViewModel.MinRootItems.value > 0) {
    this.updateVisible(state.indexOf("has-ellipsis") === -1 || this.index < toolbarViewModel.MinRootItems.value);
   } else
    this.updateVisible(state.indexOf("has-ellipsis") === -1 && state.indexOf("has-sidemenu") === -1);
  },
  updateVisible: function (v) {
   if (!v)
    this.isWidthCalculationLocked = true;
   this.item.IsVisible.setValue(v);
   if (v)
    this.isWidthCalculationLocked = false;
  }
 });
 var GroupBlock = ASPx.CreateClass(ItemBlock, {
  constructor: function(toolbar, item) {
   this.constructor.prototype.constructor.call(this, toolbar, item);
   this.itemBlocks = [];
   this.addItem(item);
  },
  addItem: function(item) { this.itemBlocks.push(new ItemBlock(this.toolbar, item)); },
  isVisible: function() { return this.itemBlocks.reduce(function(r, b) { return r && b.isVisible(); }, true); },
  getWidth: function() { return this.itemBlocks.reduce(function(r, b) { return r + b.getWidth(); }, 0); },
  getNoTextWidth: function() { return this.itemBlocks.reduce(function(r, b) { return r + b.getNoTextWidth(); }, 0); },
  updateVisible: function(visible) { this.itemBlocks.forEach(function(b) { b.updateVisible(visible); }); },
  tryAddItem: function(item) {
   var prev = this.itemBlocks[this.itemBlocks.length - 1].item, success = false;
   if(success = (prev.GroupName.value === item.GroupName.value && prev.group === item.group && prev.AdaptivePriority.value === item.AdaptivePriority.value))
    this.addItem(item);
   return success;
  }
 });
 var TitleBlock = ASPx.CreateClass(Block, {
  getName: function() { return "title"; },
  getElement: function() { return this.toolbar.querySelector(".dxbs-ta-title"); },
  getWidth: function() { return getNodeWidth(this.getElement(), true); }
 });
 var SubmenuOwnerViewModel = ASPx.CreateClass(ASPx.Components.ViewModelBase, {
  defineMembers: function () { },
  isSystemItem: function () { return false; },
  hasSubscription: function () { return true; },
  ensureSubmenusRender: function () {
   this.HasSubmenu.setValue(true);
   this.getInnerSubmenuOwners().forEach(function (so) { so.ensureSubmenusRender(); });
   if (this.hasSubscription()) {
    this.IsSubmenuDisplayed.subscribeNext(function (visible) {
     if (visible)
      this.onShowSubmenu();
     else
      this.onCloseSubmenu();
    }.bind(this));
   }
  },
  showSubmenu: function () { this.IsSubmenuDisplayed.setValue(true); },
  closeSubmenu: function () {
   this.closeSiblingSubmenus();
   this.closeSubmenuCore();
  },
  closeSubmenuCore: function () { this.IsSubmenuDisplayed.setValue(false); },
  onShowSubmenu: function () {
   this.closeSiblingSubmenus();
   processToolbarControls(this.toolbarViewModel.toolbar.name, function () { }, function (t) { t.hideAllSubmenus(); });
   var parentSubmenuSettings = this.getParentSubmenuSettings();
   ASPx.BootstrapDockManager.preparePosition(this.getSubmenuElement(), this.getDockTarget(), this.getIsVerticalSubmenu(), parentSubmenuSettings, function (dockInfo) {
    this.currentSubmenuSettings = {
     align: dockInfo.appliedModifierKeys.height + " " + dockInfo.appliedModifierKeys.width,
     canUseWidth: this.allowShowOverPrevSubmenu(),
     width: dockInfo.elementBox.width
    };
    var parent = this.getOffsetParent();
    if (parent)
     parent.IsInnerItemSubmenuDisplayed.setValue(true);
   }.bind(this));
  },
  getDockTarget: function () {
   if (this.allowShowOverPrevSubmenu()) {
    if (this.parentItem)
     return this.parentItem.getDockTarget();
    if (!this.IsVisible.value)
     return this.toolbarViewModel.RootSubmenuButton.getDockTarget();
   }
   return this.getElement();
  },
  allowShowOverPrevSubmenu: function () { return ASPx.Browser.MobileUI; },
  getParentSubmenuSettings: function () {
   var settings = null;
   var offsetParent = this.getOffsetParent();
   if (offsetParent && (offsetParent.getIsVerticalSubmenu() === this.getIsVerticalSubmenu() || this.allowShowOverPrevSubmenu()))
    settings = this.allowShowOverPrevSubmenu() ? (offsetParent.getParentSubmenuSettings() || offsetParent.currentSubmenuSettings) : offsetParent.currentSubmenuSettings;
   return settings ? { align: settings.align, canUseWidth: this.allowShowOverPrevSubmenu(), width: settings.width } : null;
  },
  getOffsetParent: function () { return this.parentItem; },
  ensureSubmenuShowBehavior: function () { this.getInnerSubmenuOwners().forEach(function (so) { so.ensureSubmenuShowBehavior(); }); },
  onCloseSubmenu: function () {
   ASPx.DOM.ClearStyles(this.getSubmenuElement());
   var parent = this.getOffsetParent();
   if (parent)
    parent.IsInnerItemSubmenuDisplayed.setValue(false);
   this.IsInnerItemSubmenuDisplayed.setValue(false);
   this.getInnerSubmenuOwners().forEach(function (so) { so.closeSubmenuCore(); });
  },
  getParentSubmenuOwner: function () { return null; },
  getInnerSubmenuOwners: function () { return []; },
  getSubmenuElement: function () { return this.toolbarViewModel.toolbar.querySelector(".dxbs-ta-rs"); },
  getIsVerticalSubmenu: function () { return false; },
  closeSiblingSubmenus: function () {
   var parentOwner = this.getParentSubmenuOwner();
   if (parentOwner) {
    var currentSubmenuOwner = this, isVisibleUserItem = this.IsVisible.value && !this.isSystemItem();
    parentOwner
     .getInnerSubmenuOwners()
     .filter(function (so) { return so !== currentSubmenuOwner && (!so.isSystemItem() || isVisibleUserItem); })
     .forEach(function (so) { so.closeSubmenuCore(); });
    parentOwner.closeSiblingSubmenus();
   }
  }
 });
 var RootSubmenuOwnerViewModel = ASPx.CreateClass(SubmenuOwnerViewModel, {
  getInnerSubmenuOwners: function () { return this.Groups.selectMany(function (g) { return g.Items; }).concat([this.RootSubmenuButton, this.SideMenuButton]); },
  closeSubmenu: function () { this.getInnerSubmenuOwners().forEach(function (so) { so.closeSubmenuCore(); }); },
  closeSubmenuCore: function () { },
  showSubmenu: function () { },
  hasSubscription: function () { return false; }
 });
 var ItemSubmenuOwnerViewModel = ASPx.CreateClass(SubmenuOwnerViewModel, {
  getInnerSubmenuOwners: function () { return this.Items.items; },
  getParentSubmenuOwner: function () { return this.parentItem || this.toolbarViewModel; },
  getIsVerticalSubmenu: function () { return !!this.parentItem || !this.IsVisible.value; }
 });
 var ToolbarViewModel = ASPx.CreateClass(RootSubmenuOwnerViewModel, {
  constructor: function (toolbar) {
   this.toolbar = toolbar;
   this.constructor.prototype.constructor.call(this, toolbar.name);
  },
  defineMembers: function () {
   RootSubmenuOwnerViewModel.prototype.defineMembers.call(this);
   this.collection("Groups", function (i) { return new ToolbarGroupViewModel(i, this); }.bind(this), []);
   this.collection("SubmenuGroups", function () { throw new Error("Can't create directly");}, []);
   this.property("CanCollapseToIcons", false);
   this.property("CanHideRootItems", true);
   this.property("CanCollapseToSideMenu", false);
   this.property("MinRootItems", 0);
   this.property("AllowSelect", false);
   this.property("Title", "");
   this.property("RemoveItemBackgrounds", false);
   this.property("IsVisible", true);
   this.property("IsLoading", true);
   this.property("IsItemTextCollapsed", false);
   this.property("SubItemCheckedIconCssClass", "dxbs-icon dxbs-icon-check");
   this.property("ControlCssClass", "");
   this.property("SubMenuCssClass", "");
   this.property("ButtonRenderCssClass", this.getDefaultButtonRenderCssClass());
   this.property("TitleCssClass", "");
   this.property("GroupCssClass", "btn-group");
   this.property("IsDropdownMenu", true);
   this.property("EnableSubMenuScrolling", false);
   this.HasVisibleItems = this.SubmenuGroups.anyAsSubject(function (g) { return g.Items.anyAsSubject(function (i) { return i.IsVisible; }); });
   this.HasDisplayedItems = this.SubmenuGroups.anyAsSubject(function (g) {
           return g.Items.anyAsSubject(function (i) {
            return statement([i.IsDisplayed, i.IsVisible], function(v1, v2) { return v1 && v2; });
           });
          });
   this.viewModel("SideMenuButton", SidemenuItemViewModel, [this]);
   this.viewModel("RootSubmenuButton", RootSubmenuItemViewModel, [this]);
   this.toggle("HasSubmenu", false, this.HasVisibleItems);
   this.IsSubmenuDisplayed =
    statement([this.SideMenuButton.IsSubmenuDisplayed, this.RootSubmenuButton.IsSubmenuDisplayed], function (v1, v2) { return v1 || v2; });
   this.IsInnerItemSubmenuDisplayed =
    statement([this.SideMenuButton.IsInnerItemSubmenuDisplayed, this.RootSubmenuButton.IsInnerItemSubmenuDisplayed], function (v1, v2) { return v1 || v2; });
   this.IsAdaptiveGroupVisible = statement([this.SideMenuButton.IsDisplayed, this.RootSubmenuButton.IsDisplayed], function (v1, v2) { return v1 || v2; });
   this.CssClass = statement(
    [this.ControlCssClass, this.RemoveItemBackgrounds, this.IsVisible, this.IsLoading, this.IsItemTextCollapsed, this.IsAdaptiveGroupVisible],
    function (controlCssClass, removeItemBackgrounds, isVisible, isLoading, isItemTextCollapsed, isAdaptiveGroupVisible) {
     var cssClassParts = [];
     if (controlCssClass)
      cssClassParts.push(controlCssClass);
     if (!isVisible)
      cssClassParts.push(ASPx.BootstrapCssSelectors.HiddenLayout);
     if (removeItemBackgrounds)
      cssClassParts.push("dxbs-ta-nib");
     if (isLoading)
      cssClassParts.push("dxbs-loading");
     if (isItemTextCollapsed)
      cssClassParts.push("no-item-text");
     if (!isAdaptiveGroupVisible)
      cssClassParts.push("no-adaptive-group");
     return cssClassParts.join(" ");
    }.bind(this));
   this.RootSubMenuCssClass = statement([this.SubMenuCssClass, this.IsDropdownMenu, this.EnableSubMenuScrolling, this.IsSubmenuDisplayed, this.IsInnerItemSubmenuDisplayed],
    function (submenuCssClass, isDropdownMenu, enableSubMenuScrolling, isDisplayed, hasChildSubmenu) {
     var cssClassParts = [];
     if (submenuCssClass)
      cssClassParts.push(submenuCssClass);
     cssClassParts.push(isDropdownMenu ? "dropdown-menu" : "dxbs-sys-sm");
     if (enableSubMenuScrolling)
      cssClassParts.push("dxbs-scrollable");
     if (isDisplayed)
      cssClassParts.push("show");
     if (hasChildSubmenu)
      cssClassParts.push("dxbs-ta-has-inner-dm");
     cssClassParts.push(ASPx.BootstrapCssSelectors.HiddenLayout);
     cssClassParts.push("dxbs-align-right-sides dxbs-align-below");
     return cssClassParts.join(" ");
    }.bind(this));
   this.HasTitle = statement([this.Title], function (v) { return !!v; });
   this.property("HasSubmenuHeader", true);
   this.property("SubmenuHeaderBackButtonCssClass", "dxbs-icon dxbs-icon-arrow-up");
   this.property("SubmenuHeaderCloseButtonCssClass", "dxbs-icon dxbs-icon-close");
   this.SubmenuHeaderText = this.Title;
   this.RefreshTrigger = new ASPx.Components.Trigger();
   this.rootItem = null;
  },
  getDefaultButtonRenderCssClass: function () { return "btn btn-secondary"; },
  update: function (data) {
   ASPx.Components.ViewModelBase.prototype.update.call(this, data);
   this.rootItem = new RootMenuItem(this);
  },
  getItem: function (index) { return this.getRootItem().GetItem(index); },
  getItemByName: function (name) { return this.getRootItem().GetItemByName(name); },
  getRootItem: function () { return this.rootItem; },
  getItemCount: function () { return this.getRootItem().GetItemCount(); },
  getSelectedItem: function () { return null; },
  findItem: function (path) {
   if (path === "sys_submenu") return this.IsDropdownMenu.value ? this.RootSubmenuButton : this.SideMenuButton;
   if (path === "root_submenu") return this.RootSubmenuButton;
   if (path === "sidemenu") return this.SideMenuButton;
   if (isDropdownMenuDataItem({ path: path }))
    path = path.substring(2);
   var indices = path.split("_").map(function (p) { return parseInt(p); }),
    itemIndices = indices.slice(1),
    itemsContainer = this.Groups.get(indices[0]);
   while (itemIndices.length && itemsContainer)
    itemsContainer = itemsContainer.Items.get(itemIndices.shift());
   return itemsContainer;
  },
  processClick: function(path, toggleEl, srcEl) {
   var itemVM = this.findItem(path);
   if (itemVM) {
    if (!itemVM.IsEnabled.value)
     return false;
    if (ASPx.ElementHasCssClass(srcEl, "dxbs-ta-shc")) {
     this.closeSubmenu();
     return false;
    }
    if (ASPx.ElementHasCssClass(srcEl, "dxbs-ta-shb")) {
     itemVM.closeSubmenu();
     return false;
    }
    if (itemVM.isSystemItem()) {
     itemVM.IsSubmenuDisplayed.setValue(!itemVM.IsSubmenuDisplayed.value);
     return false;
    }
    if (itemVM.attachedItem && (!itemVM.HasDropdownButton.value || !toggleEl)) {
     if (!this.processClickInternal(itemVM))
      this.closeSubmenu();
     this.toolbar.RaiseItemClick(itemVM.attachedItem, null, null);
    }
   }
   return !!toggleEl;
  },
  processClickInternal: function(item) {
   if(!item || item.IsSelected.value || (!item.AllowCheck.value && !item.AllowSelect.value))
    return item.HasSubmenu.value;
   var sameGroupItemCount = 0;
   function deselectItemsInContainer(itemsContainer) {
    itemsContainer.Items.forEach(function (i) {
     if (i !== item) {
      if (i.IsSelected.value)
       i.IsSelected.setValue(false);
      if (i.GroupName.value === item.GroupName.value) {
       sameGroupItemCount++;
       i.IsChecked.setValue(false);
      }
     }
     deselectItemsInContainer(i);
    });
   }
   this.Groups.forEach(deselectItemsInContainer);
   if (item.AllowCheck.value) {
    item.IsChecked.setValue(sameGroupItemCount > 0 || !item.IsChecked.value);
    item.closeSiblingSubmenus();
    return true;
   } else if (item.AllowSelect.value)
    item.IsSelected.setValue(true);
   return false;
  }
 });
 var ToolbarGroupViewModel = ASPx.CreateClass(ASPx.Components.ViewModelBase, {
  constructor: function (id, toolbarViewModel) {
   this.toolbarViewModel = toolbarViewModel;
   this.constructor.prototype.constructor.call(this, id);
  },
  defineMembers: function () {
   this.collection("Items", this.createItem.bind(this), []);
   this.property("Name", "");
   this.IsVisible = this.Items.anyAsSubject(function (i) { return i.IsVisible; });
   this.IsVisibleAndDisplayed = this.Items.anyAsSubject(function (i) { return statement([i.IsVisible, i.IsDisplayed], function(v1, v2) { return v1 && v2; }); });
   this.HasNextVisibleGroup = this.getCollection().anyAsSubject(function (g) {
    return statement([g.IsVisibleAndDisplayed], function (v) { return v && g.id > this.id; }.bind(this));
   }.bind(this));
   this.HasDivider = statement([this.HasNextVisibleGroup, this.IsVisibleAndDisplayed], function (v1, v2) { return v1 && v2; });
  },
  ensureMarkerGroup: function () {
   var markerGroup = this.toolbarViewModel.SubmenuGroups.get(this.id);
   if (!markerGroup)
    this.toolbarViewModel.SubmenuGroups.add(markerGroup = new ToolbarGroupMarkerViewModel(this.id, this.toolbarViewModel));
   return markerGroup;
  },
  update: function () {
   ASPx.Components.ViewModelBase.prototype.update.apply(this, arguments);
   var markerGroup = this.ensureMarkerGroup();
   this.Items.forEach(function (item) {
    markerGroup.Items.add(new ToolbarItemMarkerViewModel(item, markerGroup));
   });
  },
  getCollection: function () { return this.toolbarViewModel.Groups; },
  createItem: function (i, dataItem) {
   if(dataItem.ItemType === "customItem")
    return new ToolbarCustomItemViewModel(i, this, this.toolbarViewModel, null);
   if (dataItem.ItemType === "buttonItemWithSubmenu")
    return new ToolbarButtonRootItemWithSubmenuViewModel(i, this, this.toolbarViewModel, null);
   return new ToolbarButtonRootItemViewModel(i, this, this.toolbarViewModel, null);
  }
 });
 var ToolbarGroupMarkerViewModel = ASPx.CreateClass(ToolbarGroupViewModel, {
  getCollection: function () { return this.toolbarViewModel.SubmenuGroups; },
  update: function () { },
  ensureMarkerGroup: function () { throw new Error("Invalid operation"); }
 });
 var ToolbarItemViewModel = ASPx.CreateClass(ItemSubmenuOwnerViewModel, {
  constructor: function (id, group, toolbarViewModel, parentItem) {
   this.group = group;
   this.toolbarViewModel = toolbarViewModel;
   this.parentItem = parentItem;
   this.attachedItem = null;
   this.constructor.prototype.constructor.call(this, id);
   this.fragment = null;
  },
  getElement: function () { return this.toolbarViewModel.toolbar.getDataItemElement(this.getPath()); },
  getSubmenuElement: function () { return this.toolbarViewModel.toolbar.getDataItemElement("dm" + this.getPath()) || ItemSubmenuOwnerViewModel.prototype.getSubmenuElement.call(this); },
  defineMembers: function () {
   ItemSubmenuOwnerViewModel.prototype.defineMembers.call(this);
   this.property("AdaptivePriority", 0);
   this.property("GroupName", "");
   this.property("BeginGroup", false);
   this.property("AdaptiveText", "");
   this.property("ItemType", "buttonItem");
   this.property("Text", "");
   this.property("Title", "");
   this.property("Name", "");
   this.property("NavigationURL", ASPx.AccessibilityEmptyUrl);
   this.property("ItemTagName", "button");
   this.property("BadgeText", "");
   this.property("IsVisible", true);
   this.property("HasDropdownButton", false);
   this.property("AllowSelect", this.toolbarViewModel.AllowSelect.value);
   this.property("AllowCheck", false);
   this.defineIsDisplayedProperty();
   this.property("IsChecked", false);
   this.property("IsSelected", false);
   this.property("IsEnabled", true);
   this.property("IsDropdownMenu", true);
   this.property("ButtonRenderCssClass", this.getDefaultButtonRenderCssClass());
   this.property("ItemCssClass", "");
   this.property("SubMenuItemCssClass", "");
   this.property("IconCssClass", "");
   this.property("TextCssClass", "");
   this.property("BadgeCssClass", "");
   this.property("BadgeIconCssClass", "");
   this.contentProperty("ContentTemplate", "");
   this.contentProperty("SubmenuTemplate", "");
   this.contentProperty("TextTemplate", "");
   this.property("HasContentTemplate", false);
   this.property("IsSubmenuDisplayed", false);
   this.property("IsInnerItemSubmenuDisplayed", false);
   this.collection("Items", function (i, data) {
    if (data.ItemType === "subItem") return new ToolbarSubItemViewModel(i, this);
    if (data.ItemType === "buttonItemWithSubmenu") return new ToolbarButtonSubItemWithSubmenuViewModel(i, this.group, this.toolbarViewModel, this);
    throw new Error("ItemType '" + data.ItemType + "' is not supported");
   }.bind(this), []);
   this.proxy("Path", this.getPath.bind(this));
   this.DisabledAttr = statement([this.IsEnabled], function (v) { return v ? "" : "disabled"; });
   this.HasBadgeIcon = statement([this.BadgeIconCssClass], function (v1) { return !!v1; });
   this.HasBadgeText = statement([this.BadgeText], function (v1) { return !!v1; });
   this.HasBadge = statement([this.HasBadgeIcon, this.HasBadgeText], function (v1, v2) { return v1 || v2; });
   this.HasText = statement([this.Text, this.TextTemplate], function (v1, v2) { return !!v1 && !v2; });
   this.HasImage = statement([this.IconCssClass, this.HasContentTemplate], function (v1, v2) { return !!v1 && !v2; });
   this.HasVisibleItems = this.Items.anyAsSubject(function (i) { return i.IsDisplayed; });
   this.toggle("HasSubmenu", false, statement([this.SubmenuTemplate, this.HasVisibleItems], function (t, h) { return !!t || h; }));
   this.HasCheckableChild = this.Items.anyAsSubject(function (i) { return i.AllowCheck; });
   this.RenderCheckedIcon = this.parentItem ? this.parentItem.HasCheckableChild : this.proxy("RenderCheckedIcon", function () { return false; });
   this.SubItemCheckedIconCssClass = this.toolbarViewModel.SubItemCheckedIconCssClass;
   this.CheckedCssClass = statement([this.AllowCheck, this.IsChecked], function (a, v) { return a && v ? this.getDefaultCheckedCssClass() : ""; }.bind(this));
   this.SelectedCssClass = statement([this.AllowSelect, this.IsSelected], function (a, v) { return a && v ? this.getDefaultSelectedCssClass() : ""; }.bind(this));
   this.ActiveCssClass = statement([this.SelectedCssClass, this.CheckedCssClass], function (s, c) { return s || c; });
   this.CssClass = this.createCssClassProperty();
   this.RootCssClass = statement([this.IsDisplayed, this.HasText, this.IsVisible, this.IsSubmenuDisplayed], function (d, t, v, s) {
    var cssClasses = [];
    if (!d)
     cssClasses.push(ASPx.BootstrapCssSelectors.HiddenLayout);
    if (!v && !t)
     cssClasses.push("no-text");
    if (s)
     cssClasses.push("show");
    return cssClasses.join(" ");
   });
   this.SubmenuHeaderBackButtonCssClass = this.toolbarViewModel.SubmenuHeaderBackButtonCssClass;
   this.SubmenuHeaderCloseButtonCssClass = this.toolbarViewModel.SubmenuHeaderCloseButtonCssClass;
   this.SubmenuHeaderText = statement([this.Text, this.AdaptiveText], function (t, at) { return at || t; });
   this.property("HasSubmenuHeader", true);
   this.SubMenuCssClass = statement(
    [this.toolbarViewModel.SubMenuCssClass, this.IsDropdownMenu, this.toolbarViewModel.EnableSubMenuScrolling, this.IsSubmenuDisplayed, this.HasCheckableChild, this.IsInnerItemSubmenuDisplayed],
    function (submenuCssClass, isDropdownMenu, enableSubMenuScrolling, isDisplayed, hasCheckableChild, hasChildSubmenu) {
     var cssClassParts = [ASPx.BootstrapCssSelectors.HiddenLayout];
     if (submenuCssClass)
      cssClassParts.push(submenuCssClass);
     if (enableSubMenuScrolling)
      cssClassParts.push("dxbs-scrollable");
     if (isDisplayed)
      cssClassParts.push("show");
     if (hasCheckableChild)
      cssClassParts.push("dxbs-ta-has-checkable-items");
     if (hasChildSubmenu)
      cssClassParts.push("dxbs-ta-has-inner-dm");
     return cssClassParts.join(" ");
    }.bind(this));
   this.IsVisible.subscribe(function (visible) {
    this.updateButtonRenderCssClass(visible);
    this.Text.setValue(visible ? this.Text.defaultValue : (this.AdaptiveText.value || this.Text.defaultValue));
    if (this.attachedItem)
     this.group.toolbarViewModel.toolbar.RaiseRootItemVisibleChange(this.attachedItem, visible);
   }.bind(this));
   if (!this.parentItem)
    this.toolbarViewModel.ButtonRenderCssClass.subscribe(this.ButtonRenderCssClass.setValue.bind(this.ButtonRenderCssClass));
  },
  defineIsDisplayedProperty: function () { this.property("IsDisplayed", true); },
  updateButtonRenderCssClass: function () { },
  createCssClassProperty: function () { return null; },
  getDefaultButtonRenderCssClass: function () { return this.toolbarViewModel.getDefaultButtonRenderCssClass(); },
  getDefaultCheckedCssClass: function () { return "active"; },
  getDefaultSelectedCssClass: function () { return "active"; },
  getPath: function () { return (this.parentItem ? this.parentItem.getPath() : this.group.Id.value) + "_" + this.Id.value; }
 });
 var ToolbarSubItemViewModel = ASPx.CreateClass(ToolbarItemViewModel, {
  constructor: function (id, parentItem) {
   this.constructor.prototype.constructor.call(this, id, parentItem.group, parentItem.toolbarViewModel, parentItem);
  },
  createCssClassProperty: function () {
   return statement([this.SubMenuItemCssClass, this.ActiveCssClass, this.IsEnabled],
    function (subMenuItemCssClass, activeCssClass, isEnabled) {
     var cssClassParts = [];
     if (subMenuItemCssClass)
      cssClassParts.push(subMenuItemCssClass);
     if (activeCssClass)
      cssClassParts.push(activeCssClass);
     if (!isEnabled)
      cssClassParts.push("disabled");
     return cssClassParts.join(" ");
    }.bind(this));
  },
  getDefaultCheckedCssClass: function () { return "checked"; },
  getDefaultSelectedCssClass: function () { return "active"; }
 });
 var ToolbarButtonItemViewModel = ASPx.CreateClass(ToolbarItemViewModel, {
  createCssClassProperty: function () {
   return statement([this.ItemCssClass, this.ButtonRenderCssClass, this.ActiveCssClass, this.IsEnabled, this.HasDropdownButton, this.IsVisible],
    function (itemCssClass, buttonRenderCssClass, activeCssClass, isEnabled, hasDropdownButton) {
     var cssClassParts = [buttonRenderCssClass];
     if (this.isSubMenuItem())
      cssClassParts.push("dropdown-item");
     if (itemCssClass)
      cssClassParts.push(itemCssClass);
     if (activeCssClass)
      cssClassParts.push(activeCssClass);
     if (!isEnabled)
      cssClassParts.push("disabled");
     if (!hasDropdownButton && this.isDropdownToggle())
      cssClassParts.push("dropdown-toggle");
     return cssClassParts.join(" ");
    }.bind(this));
  },
  getDefaultCheckedCssClass: function () { return this.isSubMenuItem() && !!this.parentItem ? "checked" : "active"; },
  getButtonRenderCssClassForSubitemAppearance: function () { return "btn btn-outline-secondary"; },
  isDropdownToggle: function () { return false; },
  isSubMenuItem: function () { return !this.IsVisible.value; },
  canUpdateButtonRenderCssClass: function () { return false; },
  updateButtonRenderCssClass: function (v) {
   if (!this.canUpdateButtonRenderCssClass())
    return;
   if (v && this.oldButtonRenderCssClass) {
    this.ButtonRenderCssClass.setValue(this.oldButtonRenderCssClass);
   } else if (!v) {
    this.oldButtonRenderCssClass = this.ButtonRenderCssClass.value;
    this.ButtonRenderCssClass.setValue(this.getButtonRenderCssClassForSubitemAppearance());
   }
  }
 });
 var ToolbarButtonItemWithSubmenuViewModel = ASPx.CreateClass(ToolbarButtonItemViewModel, {
  isDropdownToggle: function () { return true; }
 });
 var ToolbarButtonRootItemViewModel = ASPx.CreateClass(ToolbarButtonItemViewModel, {
  getFragmentResolver: function(t) { return new CommonFragmentResolver(this, t); },
  canUpdateButtonRenderCssClass: function () { return true; }
 });
 var ToolbarButtonRootItemWithSubmenuViewModel = ASPx.CreateClass(ToolbarButtonItemWithSubmenuViewModel, {
  getFragmentResolver: function(t) { return new CommonFragmentResolver(this, t); },
  canUpdateButtonRenderCssClass: function () { return true; },
  getOffsetParent: function () { return !this.IsVisible.value && this.toolbarViewModel.IsDropdownMenu.value ? this.toolbarViewModel.RootSubmenuButton : null; }
 });
 var ToolbarButtonSubItemWithSubmenuViewModel = ASPx.CreateClass(ToolbarButtonItemWithSubmenuViewModel, {
  getDefaultButtonRenderCssClass: function () { return this.getButtonRenderCssClassForSubitemAppearance(); },
  isSubMenuItem: function () { return true; }
 });
 var ToolbarCustomItemViewModel = ASPx.CreateClass(ToolbarItemViewModel, {
  getFragmentResolver: function(t) { return new CommonFragmentResolver(this, t); },
  createCssClassProperty: function () { return this.ItemCssClass; }
 });
 var SystemItemViewModel = ASPx.CreateClass(ToolbarButtonRootItemViewModel, {
  constructor: function (id, toolbar) {
   this.constructor.prototype.constructor.call(this, id, null, toolbar, null);
   this.IsSubmenuDisplayed.subscribe(function (v) {
    this.IsChecked.setValue(v);
   }.bind(this));
  },
  defineIsDisplayedProperty: function () {
   var s = statement([this.toolbarViewModel.HasVisibleItems, this.toolbarViewModel.HasDisplayedItems], function(v1, v2) { return v1 && v2;});
   this.toggle("IsDisplayed", false, s);
  },
  isSystemItem: function () { return true; }
 });
 var SidemenuItemViewModel = ASPx.CreateClass(SystemItemViewModel, {
  getPath: function() { return "sidemenu"; }
 });
 var RootSubmenuItemViewModel = ASPx.CreateClass(SystemItemViewModel, {
  getPath: function() { return "root_submenu"; }
 });
 var ToolbarItemMarkerViewModel = ASPx.CreateClass(ToolbarItemViewModel, {
  constructor: function (realItem, group) {
   this.realItem = realItem;
   this.constructor.prototype.constructor.call(this, realItem.id, group);
  },
  defineMembers: function() {
   this.IsVisible = statement([this.realItem.IsVisible], function (v) { return !v; });
   this.IsDisplayed = this.realItem.IsDisplayed;
  },
  update: function () { },
  getFragmentResolver: function (t) { return new MarkerContainerResolver(this, t); }
 });
 var CommonFragmentResolver = ASPx.CreateClass(ASPx.Components.DOM.FragmentResolver, {
  constructor: function(fragmentResolverOwner, type) {
   this.constructor.prototype.constructor.call(this, fragmentResolverOwner, type);
   this.item = fragmentResolverOwner;
  },
  resolve: function() {
   var result = ASPx.Components.DOM.FragmentResolver.prototype.resolve.apply(this, arguments);
   if(!this.item.fragment && this.type === ASPx.Components.DOM.CollectionItemFragment)
    this.item.fragment = result;
   return result;
  }
 });
 var MarkerContainerResolver = ASPx.CreateClass(ASPx.Components.DOM.FragmentResolver, {
  resolve: function(domRef, tagName, visibilityProperty) {
   if(this.type === ASPx.Components.DOM.ElementFragment)
    return new ItemMarkerContainer(domRef, tagName, visibilityProperty, this.fragmentResolverOwner);
   return ASPx.Components.DOM.FragmentResolver.prototype.resolve.apply(this, arguments);
  }
 });
 var ItemMarkerContainer = ASPx.CreateClass(ASPx.Components.DOM.ElementFragment, {
  constructor: function (domRef, tagName, visibilityProperty, markerItem) {
   this.markerItem = markerItem;
   this.originPlaceholder = document.createComment("");
   this.constructor.prototype.constructor.call(this, domRef, tagName, visibilityProperty, markerItem);
  },
  onVisibilityChange: function(v) {
   var realFragment = this.markerItem.realItem.fragment;
   if(realFragment) {
    ASPx.DOM.ChangeDOM(function() {
     var c = realFragment.childFragments[0];
     if(v && !this.originPlaceholder.parentNode)
      ASPx.InsertElementAfter(this.originPlaceholder, c.elementDomRef.parentNode ? c.elementDomRef : c.placeholderDomRef);
     if(this.originPlaceholder.parentNode)
      ASPx.InsertElementAfter(c.elementDomRef, v ? this.placeholderDomRef : this.originPlaceholder);
    }.bind(this));
   }
  }
 });
 function getPath(element) { return ASPx.Attr.GetAttribute(element, "data-item"); }
 function getNodeWidth(node, skipMargins) { return node ? Math.ceil(node.offsetWidth + (skipMargins ? 0 : getBoxOuterOffset(node))) : 0; }
 function getBoxOuterOffset(el) { return ASPx.GetLeftRightMargins(el); }
 function getSystemItemSizeAffectingProperties(b) { return [b.item.Text, b.item.IconCssClass]; }
 function getItemSizeAffectingProperties(b) { return [b.item.Text, b.item.IsDisplayed, b.item.IconCssClass]; }
 function isExternalInteractiveControl(el, path) { return ASPx.IsInteractiveControl(el) && !(path || ASPx.ElementHasCssClass(el, "dropdown-item") || ASPx.ElementHasCssClass(el, "dropdown-toggle")); }
 function isPopupElement(el) { return ASPx.ElementHasCssClass(el, "popout"); }
 function findDataItem(el, root, src, checkControls) {
  var path = getPath(el);
  if (el === root || checkControls && (ASPx.GetElementInitializedFlag(el) || isExternalInteractiveControl(el, path)))
   return null;
  return path ? { el: el, path: path, evtSrc: src } : findDataItem(el.parentNode, root, src, checkControls);
 }
 function getItemWidthoutTextWidth(itemEl) {
  var width = getNodeWidth(itemEl);
  var img = ASPx.GetChildByClassName(itemEl, "image");
  if (img) {
   width -= getBoxOuterOffset(img);
   var nodeToHide = img;
   while (nodeToHide = nodeToHide.nextElementSibling) {
    if (!isPopupElement(nodeToHide) && ASPx.GetCurrentStyle(nodeToHide).position !== "absolute")
     width -= getNodeWidth(nodeToHide);
   }
  }
  return width;
 }
 function isDropdownMenuDataItem(dataItem) { return dataItem && dataItem.path.indexOf("dm") === 0; }
 dx.MenuItem = MenuItem;
 dx.HoverTracker = HoverTracker;
 dx.BootstrapClientAdaptiveToolbar = ToolbarControl;
})(ASPx || (ASPx = {}), dx || (dx = {}));
(function() {
ASPx.PCWIdSuffix = "_PW";
var popupControlZIndex = 11998;
var defaultZIndexFromServer = "10000";
var ModalAlign = {
 WindowLeft: "WindowLeft",
 WindowCenter: "WindowCenter",
 WindowRight: "WindowRight",
 WindowTop: "WindowTop",
 WindowBottom: "WindowBottom"
};
function PCResizeCursorInfo(horizontalDirection, verticalDirection, horizontalOffset, verticalOffset) {
 this.horizontalDirection = horizontalDirection;
 this.verticalDirection = verticalDirection;
 this.horizontalOffset = horizontalOffset;
 this.verticalOffset = verticalOffset;
 this.course = verticalDirection + horizontalDirection;
}
var PopupControlCssClasses = {};
PopupControlCssClasses.Prefix = "dxpc-";
PopupControlCssClasses.SizeGripLiteCssClassName = PopupControlCssClasses.Prefix + "sizeGrip";
PopupControlCssClasses.LinkCssClassName = PopupControlCssClasses.Prefix + "link";
PopupControlCssClasses.ShadowLiteCssClassName = PopupControlCssClasses.Prefix + "shadow";
PopupControlCssClasses.MainDivLiteCssClass = PopupControlCssClasses.Prefix + "mainDiv";
PopupControlCssClasses.ContentWrapperCssClassName = PopupControlCssClasses.Prefix + "contentWrapper";
PopupControlCssClasses.ContentCssClassName = PopupControlCssClasses.Prefix + "content";
PopupControlCssClasses.HeaderContentCssClassName = PopupControlCssClasses.Prefix + "headerContent";
PopupControlCssClasses.FooterContentCssClassName = PopupControlCssClasses.Prefix + "footerContent";
PopupControlCssClasses.WindowWrapperCssClassName = PopupControlCssClasses.Prefix + "win-wrapper";
PopupControlCssClasses.WindowWrapperScrollCssClassName = PopupControlCssClasses.WindowWrapperCssClassName + "-scroll";
PopupControlCssClasses.HeaderCssClassName = "dxpc-header";
var LoadContentViaCallback = {
 Default: "Default",
 OnFirstShow: "OnFirstShow",
 OnPageLoad: "OnPageLoad"
};
var constants = {
 DEFAULT_WINDOW_WIDTH: 200,
 DEFAULT_WINDOW_HEIGHT: 0
};
var ASPxClientPopupControlBase = ASPx.CreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.leadingAfterInitCall = ASPxClientControl.LeadingAfterInitCallConsts.Direct;
  this.adjustInnerControlsSizeOnShow = true;
  this.shadowVisible = true;
  this.cookieName = "";
  this.popupAnimationType = "none";
  this.closeAnimationType = "none";
  this.closeAction = "OuterMouseClick";
  this.isPopupFullCorrectionOn = true;
  this.forceAdjustPositionToClientScreen = false;
  this.usedInDropDown = false;
  this.popupHorizontalOffset = 0;
  this.popupVerticalOffset = 0;
  this.popupHorizontalAlign = ASPx.PopupUtils.NotSetAlignIndicator;
  this.popupVerticalAlign = ASPx.PopupUtils.NotSetAlignIndicator;
  this.contentLoadingMode = LoadContentViaCallback.Default;
  this.slideAnimationDuration = 80;
  this.fadeAnimationDuration = 400;
  this.enableAnimation = true;
  this.showOnPageLoad = false;
  this.isDragged = false;
  this.closeOnEscape = false;
  this.savedCallbackWindowIndex = null;
  this.animationLockCount = 0;
  this.windowRequestCount = [];
  this.lpTimers = [];
  this.callbackAnimationProcessings = [];
  this.isCallbackFinishedStates = [];
  this.savedCallbackResults = [];
  this.loadingPanels = [];
  this.loadingDivs = [];
  this.left = 0;
  this.top = 0;
  this.height = constants.DEFAULT_WINDOW_HEIGHT;
  this.width = constants.DEFAULT_WINDOW_WIDTH;
  this.minHeight = null;
  this.minWidth = null;
  this.maxHeight = null;
  this.maxWidth = null;
  this.isResized = false;
  this.cachedSize = null;
  this.enableContentScrolling = false;
  this.contentOverflowX = "None";
  this.contentOverflowY = "None";
  this.contentUrl = "";
  this.contentUrlIFrameTitle = "";
  this.iframeLoading = false;
  this.iframeAdjustingPostponed = false;
  this.isPopupPositionCorrectionOn = true;
  this.resizeSessionCache = {};
  this.ResizeBorderSize = ASPx.Browser.TouchUI ? 10 : 6;
  this.ResizeCornerBorderSize = 20;
  this.isLiveResizingMode = true;
  this.allowResize = false;
  this.allowDragging = false;
  this.allowDraggingInAdaptiveMode = false;
  this.isWindowDragging = false;
  this.prohibitClearSelectionOnMouseDown = false;
  this.windowElements = {};
  this.windowContentElements = {};
  this.zIndex = -1;
  this.appearAfter = 300;
  this.disappearAfter = 500;
  this.popupAction = "LeftMouseClick";
  this.autoUpdatePosition = false;
  this.defaultIsPopuped = false;
  this.defaultLastUsedPopupElementInfo = {};
  this.defaultWindowPopupElementList = [];
  this.defaultWindowPopupElementIDList = [];
  this.firstFocusableElement = null;
  this.lastFocusableElement = null;
  this.focusLastElementHandler = function(e) { this.loopFocusHandler(e, false); }.aspxBind(this);
  this.focusFirstElementHandler = function(e) { this.loopFocusHandler(e, true); }.aspxBind(this);
  this.setFocusOnCallback = true;
  this.accessibleFocusElement = null;
  this.preventAccessibilityFocus = false;
  this.CloseButtonClick = new ASPxClientEvent();
  this.CloseUp = new ASPxClientEvent();
  this.Closing = new ASPxClientEvent();
  this.PopUp = new ASPxClientEvent();
  this.Shown = new ASPxClientEvent();
  this.Resize = new ASPxClientEvent();
  this.Dragged = new ASPxClientEvent();
  this.BeforeDrag = new ASPxClientEvent();
  this.BeforeResizing = new ASPxClientEvent();
  this.AfterResizing = new ASPxClientEvent();
  aspxGetPopupControlCollection().Add(this);
 },
 WindowElementIDAssignmentMap: [
  { cssClass: PopupControlCssClasses.HeaderCssClassName, prefix: "_PWH" },
  { cssClass: "dxpc-headerText", prefix: "_PWH", postfix: "T" },
  { cssClass: "dxpc-headerImg", prefix: "_PWH", postfix: "I" },
  { cssClass: "dxpc-closeBtn", prefix: "_HCB" },
  { cssClass: "dxpc-pinBtn", prefix: "_HPB" },
  { cssClass: "dxpc-refreshBtn", prefix: "_HRB" },
  { cssClass: "dxpc-collapseBtn", prefix: "_HMNB" },
  { cssClass: "dxpc-maximizeBtn", prefix: "_HMXB" },
  { cssClass: "dxpc-content", prefix: "_PWC" },
  { cssClass: "dxpc-iFrame", prefix: "_CIF" },
  { cssClass: "dxpc-footer", prefix: "_PWF" },
  { cssClass: "dxpc-footerText", prefix: "_PWF", postfix: "T" },
  { cssClass: "dxpc-footerImg", prefix: "_PWF", postfix: "I" }
 ],
 Initialize: function() {
  this.InitializeBeforeAnyShow();
  ASPxClientControl.prototype.Initialize.call(this);
  if(this.accessibilityCompliant)
   this.InitializeAccessibleNavigation();
 },
 InitializeWindow: function(index) {
  ASPx.PopupUtils.BodyScrollHelper.RestoreIfLocked(this.GetWindowElementId(index));
  this.RemoveWindowAllPopupElements(index);
  this.PopulatePopupElements(index);
  var element = this.GetWindowElement(index);
  if(element != null) {
   this.AssignWindowElementsID(index, element);
   this.AssignWindowElementsEvents(index, element);
   element.DXPopupWindowElement = true;
   this.AttachOnDragStartEventToWindowImages(index);
   this.EnsureWindowContentUrl(index);
   element.isHiding = false;
   element.isPopupPositionCorrectionOn = this.isPopupPositionCorrectionOn || !this.GetShowOnPageLoad(index);
   if(this.GetShowOnPageLoad(index) && this.GetZIndex(index) > 0) {
    this.FirstShowWindow(index, false);
    this.SetWindowElementZIndex(element, this.GetZIndex(index));
    element.isPopupPositionCorrectionOn = true;
   }
   this.InitializeWindowEscKeyHandler(element, index);
   if(this.GetCanScrollViewPort(index))
    ensureViewPortSizeInterval();
   var headerImageElement = this.GetWindowHeaderImageCell(index);
   if(headerImageElement != null) {
    var headerImageHandler = function() {
     this.CorrectHeaderContentElementHeight(index);
    }.aspxBind(this);
    headerImageElement.addEventListener("load", headerImageHandler);
    headerImageElement.addEventListener("error", headerImageHandler);
   }
   var footerImageElement = this.GetWindowFooterImageCell(index);
   if(footerImageElement != null) {
    var footerImageHandler = function() {
     this.CorrectWindowSizeGripPositionLite(index);
     this.CorrectFooterTextElementWidth(index);
    }.aspxBind(this);
    footerImageElement.addEventListener("load", footerImageHandler);
    footerImageElement.addEventListener("error", footerImageHandler);
   }
  }
 },
 InitializeBeforeAnyShow: function() {
  this.InitializeEnableContentScrolling();
 },
 InitializeEnableContentScrolling: function() {
  this.enableContentScrolling = this.contentOverflowX != "None" || this.contentOverflowY != "None";
 },
 InitializeWindowEscKeyHandler: function(element, index) {
  if(!this.GetEnableCloseByEsc(index)) return;
  this.AddKeyDownHandler("ESC", this.OnEscKeyDown.aspxBind(this));
 },
 AfterInitialize: function() {
  if(this.HasDefaultWindow())
   this.AfterInitializeWindow(-1);
  for(var i = 0; i < this.GetWindowCount(); i++)
   this.AfterInitializeWindow(i);
  ASPxClientControl.prototype.AfterInitialize.call(this);
 },
 AfterInitializeWindow: function(index) {
  if(this.GetShowOnPageLoad(index) && this.GetZIndex(index) < 0) {
   this.FirstShowWindow(index, true);
   var element = this.GetWindowElement(index);
   if(element != null)
    element.isPopupPositionCorrectionOn = true;
  }
  this.EnsureContent(index, true);
 },
 AssignWindowElementsID: function(index, windowElement) {
  for(var i = 0; i < this.WindowElementIDAssignmentMap.length; i++) {
   var elementClass = this.WindowElementIDAssignmentMap[i].cssClass;
   var elements = ASPx.GetNodesByClassName(windowElement, elementClass);
   for(var j = 0; j < elements.length; j++) {
    var element = elements[j];
    if(this.GetFirstParentWindow(element) === windowElement)
     this.AssignElementID(element, index, this.WindowElementIDAssignmentMap[i].prefix, this.WindowElementIDAssignmentMap[i].postfix);
   }
  }
 },
 AssignElementID: function(element, index, prefix, postfix) {
  element.id = this.name + prefix + index + (postfix ? postfix : "");
 },
 AssignWindowElementsEvents: function(index, element) {
  var header = this.GetWindowHeaderElement(index);
  if(header && this.allowDragging && !this.isWindowDragging)
   ASPx.Evt.AttachEventToElement(header, ASPx.TouchUIHelper.touchMouseDownEventName, this.GetWindowHeaderElementMouseDownEventHandler(index), true);
  this.AssignHeaderButtonsEvents(index);
  var mdEventName = ASPx.TouchUIHelper.touchMouseDownEventName;
  ASPx.Evt.AttachEventToElement(element, mdEventName, this.GetWindowElementMouseDownEventHandler(index));
  if(this.IsResizeAllowed(index)) {
   var mmEventName = ASPx.TouchUIHelper.touchMouseMoveEventName;
   ASPx.Evt.AttachEventToElement(element, mmEventName, this.GetWindowElementMouseMoveEventHandler(index));
  }
  var sizeGrip = this.GetWindowSizeGripElement(index);
  if(sizeGrip) {
   var instance = this;
   ASPx.Evt.AttachEventToElement(sizeGrip, mdEventName, function(evt) {
    ASPx.PWGripMDown(evt, instance.name, index);
    ASPx.Evt.PreventEvent(evt);
   });
  }
 },
 AssignHeaderButtonsEvents: function(index) {
  this.AttachClickToHeaderButton(index, this.GetWindowCloseButton(index), "ASPx.PWCBClick");
  this.AttachClickToHeaderButton(index, this.GetWindowRefreshButton(index), "ASPx.PWRBClick");
 },
 AttachClickToHeaderButton: function(index, headerButton, eventFuncName) {
  var instance = this;
  if(headerButton) {
   ASPx.Evt.AttachEventToElement(headerButton, "click", function(evt) {
    eval(eventFuncName)(evt, instance.name, index);
   });
  }
 },
 AttachOnDragStartEventToWindowImages: function(index) {
  this.AttachChildImagesPreventDragStartEvent(this.GetWindowHeaderElement(index));
  this.AttachChildImagesPreventDragStartEvent(this.GetWindowFooterElement(index));
 },
 AttachChildImagesPreventDragStartEvent: function(parentElem) {
  var images = parentElem == null ? null : ASPx.GetNodesByTagName(parentElem, "img");
  if(images != null) {
   for(var i = 0; i < images.length; i++)
    ASPx.Evt.AttachEventToElement(images[i], "dragstart", ASPx.Evt.PreventEventAndBubble);
  }
 },
 GetPropertyValue: function(index, propName) {
  return this[propName];
 },
 SetPropertyValue: function(index, propName, value) {
  this[propName] = value;
 },
 GetStretchVerticallyByIndex: function(index) {
  return this.GetPropertyValue(index, "stretchVertically");
 },
 GetModalMaxWidth: function(index) {
  return this.GetPropertyValue(index, "modalMaxWidth");
 },
 SetAdaptiveMaxWidthByIndex: function(index, value) {
  value = this.ConvertDimensionValueToString(value);
  this.SetPropertyValue(index, "modalMaxWidth", value);
  this.GetWindowElement(index).style["maxWidth"] = value;
  if(value.indexOf("px") > 0)
   this.EnsureMaxWidthClassName(index, ASPx.PxToInt(value));
 },
 EnsureMaxWidthClassName: function(index, maxWidth) {
  var defaultPaddingsWidth = 20;
  ASPx.ToggleClassNameToElement(this.GetModalWrapperElement(index), "dxmodalMaxWidth", maxWidth < ASPx.MaxMobileWindowWidth - defaultPaddingsWidth);
 },
 GetModalMinWidth: function(index) {
  return this.GetPropertyValue(index, "modalMinWidth");
 },
 SetAdaptiveMinWidthByIndex: function(index, value) {
  value = this.ConvertDimensionValueToString(value);
  this.SetPropertyValue(index, "modalMinWidth", value);
  this.GetWindowElement(index).style["minWidth"] = value;
 },
 GetModalMinHeight: function(index) {
  return this.GetPropertyValue(index, "modalMinHeight");
 },
 SetContentElementsAdaptiveDisplayStyle: function(index) {
  var contentWrapper = this.GetWindowContentWrapperElement(index);
  ASPx.ToggleClassNameToElement(contentWrapper, "dxmodalTableSys", !this.GetWindowContentIFrameElement(index) && !this.HasAnyScrollBars(index));
 },
 SetContentWrapperAdaptiveHeight: function(index, adaptiveHeight) {
  var contentWrapper = this.GetWindowContentWrapperElement(index);
  contentWrapper.style.height = adaptiveHeight;
 },
 SetAdaptiveMinHeightByIndex: function(index, value) {
  this.StretchVerticallyByIndex(index, false);
  this.SetPropertyValue(index, "modalMinHeight", value);
  this.SetAdaptiveHeightDimension(index, "minHeight", value);
 },
 GetModalMaxHeight: function(index) {
  return this.GetPropertyValue(index, "modalMaxHeight");
 },
 SetAdaptiveMaxHeightByIndex: function(index, value) {
  this.SetPropertyValue(index, "modalMaxHeight", value);
  this.SetAdaptiveHeightDimension(index, "maxHeight", value);
 },
 GetFixedHeader: function(index) {
  return this.GetPropertyValue(index, "fixedHeader");
 },
 GetFixedFooter: function(index) {
  return this.GetPropertyValue(index, "fixedFooter");
 },
 GetWindowWidthInternal: function(index) {
  return this.GetPropertyValue(index, "width");
 },
 GetWindowHeightInternal: function(index) {
  return this.GetPropertyValue(index, "height");
 },
 SetWindowHeight: function(index, height) {
  this.SetPropertyValue(index, "height", height);
 },
 SetWindowWidth: function(index, width) {
  this.SetPropertyValue(index, "width", width);
 },
 GetWindowMinWidth: function(index) {
  return this.GetPropertyValue(index, "minWidth");
 },
 GetWindowMaxWidth: function(index) {
  return this.GetPropertyValue(index, "maxWidth");
 },
 GetWindowMinHeight: function(index) {
  return this.GetPropertyValue(index, "minHeight");
 },
 GetWindowMaxHeight: function(index) {
  return this.GetPropertyValue(index, "maxHeight");
 },
 SetWindowMaxHeight: function(index, maxHeight) {
  this.SetPropertyValue(index, "maxHeight", maxHeight);
 },
 SetWindowCachedSize: function(index, width, height) {
  this.SetPropertyValue(index, "cachedSize", new ASPx.PopupSize(width, height));
 },
 GetWindowCachedSize: function(index) {
  return this.GetPropertyValue(index, "cachedSize");
 },
 ResetWindowCachedSize: function(index) {
  this.SetPropertyValue(index, "cachedSize", null);
 },
 GetPosition: function(index, isLeft) {
  return this.GetPropertyValue(index, isLeft ? "left" : "top");
 },
 GetWindowTop: function(index) {
  return this.GetPropertyValue(index, "top");
 },
 SetWindowTop: function(index, top) {
  this.SetPropertyValue(index, "top", top);
 },
 GetWindowLeft: function(index) {
  return this.GetPropertyValue(index, "left");
 },
 SetWindowLeft: function(index, left) {
  this.SetPropertyValue(index, "left", left);
 },
 GetEnableCloseByEsc: function(index) {
  return this.GetPropertyValue(index, "closeOnEscape");
 },
 GetIsDragged: function(index) {
  return this.GetPropertyValue(index, "isDragged");
 },
 GetWindowContentIFrameUrl: function(index) {
  return this.GetPropertyValue(index, "contentUrl");
 },
 GetWindowContentIFrameTitle: function(index) {
  return this.GetPropertyValue(index, "contentUrlIFrameTitle");
 },
 GetWindowCloseAction: function(index) {
  return this.GetPropertyValue(index, "closeAction");
 },
 GetShowOnPageLoad: function(index) {
  return this.GetPropertyValue(index, "showOnPageLoad");
 },
 GetZIndex: function(index) {
  return this.GetPropertyValue(index, "zIndex");
 },
 GetIframeLoading: function(index) {
  return this.GetPropertyValue(index, "iframeLoading");
 },
 SetIframeLoading: function(index, value) {
  this.SetPropertyValue(index, "iframeLoading", value);
 },
 SetIsDragged: function(index, value) {
  this.SetPropertyValue(index, "isDragged", value);
 },
 GetIsResized: function(index) {
  return this.GetPropertyValue(index, "isResized");
 },
 SetIsResized: function(index, value) {
  this.SetPropertyValue(index, "isResized", value);
 },
 SetIframeAdjustingPostponed: function(index, value) {
  this.SetPropertyValue(index, "iframeAdjustingPostponed", value);
 },
 GetIframeAdjustingPostponed: function(index) {
  return this.GetPropertyValue(index, "iframeAdjustingPostponed");
 },
 GetWindowPopupAction: function(index) {
  return this.GetPropertyValue(index, "popupAction");
 },
 GetWindowElementMouseMoveEventHandler: function(index) {
  var instance = this;
  return function(evt) { ASPx.PWMMove(evt, instance.name, index); };
 },
 GetWindowElementMouseDownEventHandler: function(index) {
  var instance = this;
  return function(evt) {
   if(instance.AllowMouseDown(evt, index))
    ASPx.PWMDown(evt, instance.name, index, instance.isWindowDragging);
  };
 },
 GetWindowHeaderElementMouseDownEventHandler: function(index) {
  var instance = this;
  return function(evt) {
   if(instance.AllowMouseDown(evt, index))
    ASPx.PWDGMDown(evt, instance.name, index);
  };
 },
 AllowMouseDown: function(evt, index) {
  return !this.PreventHeaderButtonMouseDownBubbling(evt, this.GetWindowCloseButton(index)) &&
   !this.PreventHeaderButtonMouseDownBubbling(evt, this.GetWindowRefreshButton(index));
 },
 PreventHeaderButtonMouseDownBubbling: function(evt, hdrButton) {
  if(hdrButton) {
   var source = ASPx.Evt.GetEventSource(evt);
   if(ASPx.GetIsParent(hdrButton, source)) {
    ASPx.PWHMDown(evt);
    return true;
   }
  }
  return false;
 },
 PrepareToAdjustContentOnShow: function(index) {
  if(this.adjustInnerControlsSizeOnShow) {
   var windowContent = this.GetContentContainer(index),
    collection = ASPx.GetControlCollection();
   collection.CollapseControls(windowContent);
  }
 },
 AdjustContentOnShow: function(index) {
  if(this.adjustInnerControlsSizeOnShow) {
   var windowElement = this.GetWindowElement(index);
   ASPx.GetControlCollection().AdjustControls(windowElement, false);
  }
 },
 AdjustSize: function() {
  if(this.enableContentScrolling)
   return;
  this.SetSize(0, 0);
 },
 GetFirstParentWindow: function(el) {
  while(el && el.tagName != "BODY") {
   if(el.nodeType == 1 && el.className.indexOf("dxpclW") > -1 && !isNaN(this.GetWindowIndex(el)))
    return el;
   el = el.parentNode;
  }
 },
 getParentPopupControl: function(index) {
  var parentPopupWindowElement = this.GetFirstParentWindow(this.GetWindowElement(index).parentNode);
  if(parentPopupWindowElement)
   return aspxGetPopupControlCollection().GetPopupWindowFromID(parentPopupWindowElement.id);
 },
 registerAndActivateWindow: function(windowElement, index, allowChangeZIndex) {
  aspxGetPopupControlCollection().RegisterVisibleWindow(windowElement, this, index);
  if(allowChangeZIndex)
   aspxGetPopupControlCollection().ActivateWindowElement(windowElement, undefined, this.GetPopupType(), this.GetDefaultZIndexFromServer(), this.GetPopupControlZIndex());
 },
 HasCloseAnimation: function() {
  return this.closeAnimationType != ASPxClientPopupControlBase.AnimationType.None;
 },
 AddKeyDownHandler: function(shortcutString, handler) {
  if(typeof(this.keyDownHandlers) === "undefined")
   this.keyDownHandlers = [];
  this.keyDownHandlers[ASPx.ParseShortcutString(shortcutString)] = handler;
 },
 InternalIsWindowDisplayed: function(index) {
  var element = this.GetWindowElement(index);
  return (element != null) ? ASPx.GetElementDisplay(element) : false;
 },
 InternalIsWindowVisible: function(index) {
  var element = this.GetWindowElement(index);
  if(!element)
   return false;
  if(this.HasCloseAnimation() && !element.closeAnimationCompleted)
   return false;
  return ASPx.GetElementVisibility(element) && ASPx.GetElementDisplay(element);
 },
 IsWindowVisible: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.InternalIsWindowVisible(index);
 },
 IsVisible: function() {
  return this.InternalIsWindowVisible(-1);
 },
 UpdateWindowsStateCookie: function() {
  if(this.cookieName == "") return;
  ASPx.Cookie.DelCookie(this.cookieName);
  ASPx.Cookie.SetCookie(this.cookieName, this.GetWindowsState());
 },
 SetWindowElementZIndex: function(element, zIndex) {
  element.style.zIndex = zIndex;
  var iFrame = element.overflowElement;
  if(iFrame)
   iFrame.style.zIndex = zIndex - 1;
  var modalElement = element.modalElement;
  if(modalElement)
   modalElement.style.zIndex = zIndex - 1;
  this.UpdateWindowsStateCookie();
 },
 SetWindowContentHtmlCore: function(index, html, useAnimation) {
  var element = this.GetContentContainer(index);
  if(element != null) {
   ASPx.SetInnerHtml(element, html);
   this.AfterSetWindowContentHtml(index, element, useAnimation);
  }
 },
 SetContentHtml: function(html, useAnimation) {
  this.SetWindowContentHtml(null, html, useAnimation);
  if(html && this.accessibilityCompliant)
   ASPx.GetControlCollection().ControlsInitialized.AddHandler(this.OnControlsInitialized, this);
 },
 SetWindowContentHtml: function(window, html, useAnimation) {
  var index = (window != null) ? window.index : -1;
  this.SetWindowContentHtmlCore(index, html, useAnimation);
 },
 GetContentHtml: function() {
  return this.GetWindowContentHtml(null);
 },
 AfterSetWindowContentHtml: function(index, contentContainer, useAnimation) {
  if(useAnimation && typeof (ASPx.AnimationHelper) != "undefined")
   ASPx.AnimationHelper.fadeIn(contentContainer, function() { this.ResizeWindowIFrame(index); }.aspxBind(this));
  else
   this.ResizeWindowIFrame(index);
 },
 ResizeWindowIFrame: function(index) {
  if(!this.renderIFrameForPopupElements || !this.InternalIsWindowVisible(index)) return;
  var iFrame = this.GetWindowIFrame(index);
  if(iFrame) {
   var cell = this.GetWindowMainCell(this.GetWindowElement(index));
   ASPx.SetStyles(iFrame, { width: cell.offsetWidth, height: cell.offsetHeight });
  }
 },
 DoHideWindow: function(index, dontRaiseClosing, closeReason) {
  if(!this.InternalIsWindowVisible(index)) return;
  var cancel = !dontRaiseClosing && this.RaiseClosing(index, closeReason);
  if(!cancel) {
   if(this.HasCloseAnimation() && this.IsAnimationAllowed())
    this.DoHideWindowCoreWithAnimation(index, closeReason);
   else {
    this.DoHideWindowCore(index, closeReason);
    this.RaiseCloseUp(index, closeReason);
   }
  }
  return cancel;
 },
 HasAnyScrollBars: function(index) {
  var contentElement = this.GetWindowContentElement(index);
  var hasBothScrollBars = contentElement.style.overflow == "scroll" || contentElement.style.overflow == "auto";
  return hasBothScrollBars || contentElement.style.overflowX == "scroll" ||
   contentElement.style.overflowY == "scroll" || contentElement.style.overflowX == "auto" ||
   contentElement.style.overflowY == "auto";
 },
 DoHideWindowModalElement: function(element, closeReason) {
  var modalElement = element.modalElement;
  if(modalElement && ASPx.GetElementVisibility(modalElement, true)) {
   var closeModalElement = function () {
    ASPx.SetStyles(modalElement, { width: 1, height: 1, zIndex: defaultZIndexFromServer - 1 });
    ASPx.SetElementVisibility(modalElement, false);
    ASPx.SetElementDisplay(modalElement, false);
   };
   aspxGetPopupControlCollection().UnregisterVisibleModalElement(modalElement);
   if(this.GetHideBodyScrollWhenModal(this.GetWindowIndex(element))) {
    if(ASPx.Browser.WebKitFamily)
     aspxGetPopupControlCollection().LockScrollEvent();
    if(!ASPx.Browser.WebKitTouchUI)
     ASPx.PopupUtils.BodyScrollHelper.RestoreBodyScroll(element.id);
    if(ASPx.Browser.WebKitFamily)
     aspxGetPopupControlCollection().UnlockScrollEvent();
   }
   if(closeReason == ASPxClientPopupControlCloseReason.OuterMouseClick) {
    ASPx.SetStyles(modalElement, { opacity: 0 });
    if(!modalElement.mouseHandler) {
     modalElement.mouseHandler = function() {
      ASPx.SetStyles(modalElement, { opacity: "" });
      closeModalElement();
      ASPx.Evt.DetachEventFromElement(modalElement, "mouseup", modalElement.mouseHandler);
      ASPx.Evt.DetachEventFromElement(modalElement, "mouseout", modalElement.mouseHandler);
     };
    }
    ASPx.Evt.AttachEventToElement(modalElement, "mouseup", modalElement.mouseHandler);
    ASPx.Evt.AttachEventToElement(modalElement, "mouseout", modalElement.mouseHandler);
   } else
    closeModalElement();
  }
 },
 IncreaseWindowRequestCount: function (index) {
  if(!this.windowRequestCount[index])
   this.windowRequestCount[index] = 1;
  else
   this.windowRequestCount[index]++;
 },
 DecreaseWindowRequestCount: function(index) {
  this.windowRequestCount[index]--;
 },
 IsLoadingContainerVisible: function() {
  return true;
 },
 ShouldHideExistingLoadingElements: function() {
  return false;
 },
 GetModalElementEndAnimationOpacity: function(index) {
  if(typeof (this.modalElementOpacity) == "undefined")
   this.modalElementOpacity = [];
  if(typeof (this.modalElementOpacity[index]) == "undefined")
   this.modalElementOpacity[index] = ASPx.GetElementOpacity(this.GetWindowModalElement(index));
  return this.modalElementOpacity[index];
 },
 SetModalElementVisibilityWithAnimation: function(modalElement, index) {
  if(this.AllowModalElementAnimation(index)) {
   var endOpacity = this.GetModalElementEndAnimationOpacity(index);
   ASPx.AnimationHelper.setOpacity(modalElement, 0);
   ASPx.SetElementVisibility(modalElement, true);
   ASPx.AnimationHelper.fadeTo(modalElement, { to: endOpacity });
  } else
   ASPx.SetElementVisibility(modalElement, true);
 },
 AllowModalElementAnimation: function(index) {
  return this.popupAnimationType === ASPxClientPopupControlBase.AnimationType.Fade;
 },
 SetVisibleWithAnimation: function(element, isMoving, index, horizontalPopupPosition, verticalPopupPosition) {
  var isAnimationNeed = this.IsAnimationAllowed() && !isMoving;
  if(isAnimationNeed && this.popupAnimationType !== "none") {
   switch(this.popupAnimationType) {
    case ASPxClientPopupControlBase.AnimationType.Slide:
     this.StartSlideAnimation(element, index, horizontalPopupPosition, verticalPopupPosition);
     break;
    case ASPxClientPopupControlBase.AnimationType.Fade:
     this.StartFadeAnimation(element, index);
     break;
    case ASPxClientPopupControlBase.AnimationType.Auto:
     this.StartAutoAnimation(element, index, horizontalPopupPosition, verticalPopupPosition);
     break;
   }
  }
  else
   ASPx.SetElementVisibility(element, true);
 },
 StartAutoAnimation: function(element, index, horizontalPopupPosition, verticalPopupPosition) {
  ASPx.SetElementVisibility(element, true);
 },
 StartFadeAnimation: function(element, index) {
  ASPx.AnimationHelper.setOpacity(element, 0);
  ASPx.SetElementVisibility(element, true);
  var callback = function() {
   this.OnAnimationStop(index);
  }.aspxBind(this);
  ASPx.AnimationHelper.fadeIn(element, callback, this.fadeAnimationDuration);
 },
 StartSlideAnimation: function (animationDivElement, index, horizontalPopupPosition, verticalPopupPosition) {
  var element = this.GetWindowMainCell(animationDivElement);
  var clientX = horizontalPopupPosition.position;
  var clientY = verticalPopupPosition.position;
  var args = "(\"" + this.name + "\", " + index + ")";
  var onAnimStopCallString = "ASPx.PCAStop" + args;
  this.InitDivPosForShowSlideAnimation(index, animationDivElement, clientX, clientY, onAnimStopCallString);
  var horizontalDirection = this.GetAnimationHorizontalDirection(index, horizontalPopupPosition);
  var verticalDirection = this.GetAnimationVerticalDirection(index, verticalPopupPosition);
  var offsetCoefficient = this.GetSlideOffsetCoefficient(index);
  var xPos = horizontalDirection * animationDivElement.offsetWidth * offsetCoefficient;
  var yPos = verticalDirection * animationDivElement.offsetHeight * offsetCoefficient;
  neddToForceAnimation = xPos === 0 && yPos === 0;
  if(neddToForceAnimation)
   yPos = 1;
  ASPx.SetStyles(element, { left: xPos, top: yPos });
  ASPx.SetElementVisibility(animationDivElement, true);
  this.DoShowWindowIFrame(index, clientX, clientY, 0, 0);
  ASPx.PopupUtils.StartSlideAnimation(animationDivElement, element, this.GetWindowIFrame(index), this.GetSlideAnimationDuration(index));
 },
 GetSlideAnimationDuration: function(index) {
  return this.slideAnimationDuration;
 },
 GetSlideOffsetCoefficient: function(index) {
  return 1;
 },
 InitDivPosForShowSlideAnimation: function(index, animationDivElement, clientX, clientY, onAnimStopCallString) {
  ASPx.PopupUtils.InitAnimationDiv(animationDivElement, clientX, clientY, onAnimStopCallString, true);
 },
 InitDivPosForHideSlideAnimation: function(animationDivElement) {
 },
 StopShowAnimation: function(index) {
  if(this.popupAnimationType != "none") {
   var windowElement = this.GetWindowElement(index);
   if(this.popupAnimationType === 'slide')
    ASPx.PopupUtils.StopAnimation(windowElement, this.GetWindowMainCell(windowElement));
   else
    ASPx.AnimationHelper.cancelAnimation(windowElement);
  }
 },
 StopCloseAnimation: function(index) {
  var element = this.GetWindowElement(index);
  if(this.HasCloseAnimation() && !element.closeAnimationCompleted) {
   ASPx.AnimationHelper.cancelAnimation(element);
   this.DoHideWindowCore(index);
  }
 },
 IsFadeCloseAnimation: function(index) {
  return this.closeAnimationType === ASPxClientPopupControlBase.AnimationType.Fade;
 },
 PrepareElementAfterCloseAnimation: function(index, element) {
  element.closeAnimationCompleted = true;
  if(this.IsFadeCloseAnimation(index))
   ASPx.SetStyles(element, { opacity: 1 });
  else
   ASPx.SetStyles(this.GetWindowMainCell(element), {
    left: 0,
    top: 0
   });
 },
 DoHideWindowCoreWithAnimation: function(index, closeReason) {
  this.StopShowAnimation(index);
  var element = this.GetWindowElement(index);
  element.closeAnimationCompleted = false;
  if(this.AllowModalElementAnimation(index) && this.CanManipulateWithModalElement(index))
   ASPx.AnimationHelper.fadeOut(element.modalElement, null, this.fadeAnimationDuration);
  switch(this.closeAnimationType) {
   case ASPxClientPopupControlBase.AnimationType.Slide:
    this.DoHideWindowWithSlideAnimation(index, closeReason);
    break;
   case ASPxClientPopupControlBase.AnimationType.Fade:
    this.DoHideWindowWithFadeAnimation(index, element, closeReason);
    break;
   case ASPxClientPopupControlBase.AnimationType.Auto:
    this.DoHideWindowWithAutoAnimation(index, element, closeReason);
    break;
  }
 },
 DoHideWindowWithAutoAnimation: function(index, element, closeReason) {
 },
 DoHideWindowWithFadeAnimation: function(index, element, closeReason) {
  ASPx.AnimationHelper.fadeOut(element, function() {
   this.DoHideWindowCore(index);
   this.RaiseCloseUp(index, closeReason);
  }.aspxBind(this), this.fadeAnimationDuration);
 },
 DoHideWindowWithSlideAnimation: function(index, closeReason) {
  var element = this.GetWindowElement(index);
  var horizontalPopupPosition = this.GetSlideAnimationPosition(element, true);
  var verticalPopupPosition = this.GetSlideAnimationPosition(element, false);
  var horizontalDirection = this.GetAnimationHorizontalDirection(index, horizontalPopupPosition);
  var verticalDirection = this.GetAnimationVerticalDirection(index, verticalPopupPosition);
  this.InitDivPosForHideSlideAnimation(element);
  var offsetCoefficient = this.GetSlideOffsetCoefficient(index);
  ASPx.AnimationHelper.createMultipleAnimationTransition(this.GetWindowMainCell(element), {
   duration: this.GetSlideAnimationDuration(index),
   onComplete: function(element) {
    this.DoHideWindowCore(index);
    this.RaiseCloseUp(index, closeReason);
   }.aspxBind(this)
  }).Start({
   left: { to: horizontalDirection * element.offsetWidth * offsetCoefficient, unit: "px" },
   top: { to: verticalDirection * element.offsetHeight * offsetCoefficient, unit: "px" }
  });
 },
 GetSlideAnimationPosition: function(element, isX) {
  return this.GetClientPopupPos(element, null, ASPx.InvalidPosition, isX, true);
 },
 GetAnimationHorizontalDirection: function(index, horizontalPopupPosition) {
  return ASPx.PopupUtils.GetAnimationHorizontalDirection(horizontalPopupPosition, this.popupHorizontalAlign, this.popupVerticalAlign, this.rtl);
 },
 GetAnimationVerticalDirection: function(index, verticalPopupPosition) {
  return ASPx.PopupUtils.GetAnimationVerticalDirection(verticalPopupPosition, this.popupHorizontalAlign, this.popupVerticalAlign);
 },
 OnAnimationStop: function(index) {
  this.OnWindowShown(index);
 },
 PerformCallback: function(parameter, onSuccess) {
  this.PerformWindowCallback(null, parameter, onSuccess);
 },
 PerformWindowCallback: function(window, parameter, onSuccess) {
  parameter = ASPx.IsExists(parameter) ? parameter.toString() : "";
  var index = (window != null) ? window.index : -1;
  if(!this.InWindowCallback(index)) {
   var windowCallbackArguments = index + ";" + parameter;
   this.CreateWindowCallback(index, windowCallbackArguments, onSuccess);
  }
 },
 InWindowCallback: function(windowIndex) {
  return this.windowRequestCount[windowIndex] > 0;
 },
 CreateWindowCallback: function(windowIndex, argument, handler) {
  this.IncreaseWindowRequestCount(windowIndex);
  var element = this.GetWindowElement(windowIndex);
  if(this.contentLoadingMode != LoadContentViaCallback.OnPageLoad || !element.loading || this.GetShowOnPageLoad(windowIndex))
   this.ShowWindowLoadingElements(windowIndex);
  this.CreateCallback(argument, null, handler);
 },
 OnCallback: function(result) {
  this.OnCallbackInternal(result.html, result.index, false);
 },
 OnCallbackError: function(result, data) {
  this.OnCallbackInternal(result, ASPx.IsExists(data) ? data : -1, true);
 },
 OnCallbackErrorAfterUserHandle: function(result, data) {
  this.DecreaseWindowRequestCount(data);
 },
 OnCallbackInternal: function(html, windowIndex, isError) {
  var element = this.GetWindowElement(windowIndex);
  element.loaded = !isError;
  element.loading = false;
  this.DecreaseWindowRequestCount(windowIndex);
  this.HideWindowLoadingPanel(windowIndex);
  this.SetWindowContentHtmlCore(windowIndex, html);
  this.UpdatePositionAfterCallback(windowIndex);
  this.savedCallbackWindowIndex = windowIndex;
  this.UpdateWindowsStateCookie();
 },
 RaiseCallbackError: function(message) {
  var result = ASPxClientControl.prototype.RaiseCallbackError.call(this, message);
  if(result.isHandled)
   this.HideAllLoadingPanels();
  return result;
 },
 StartWindowBeginCallbackAnimation: function(windowIndex) {
  this.callbackAnimationProcessings[windowIndex] = true;
  this.isCallbackFinishedStates[windowIndex] = false;
  ASPx.AnimationHelper.fadeOut(this.GetWindowContentElement(windowIndex), function() { this.FinishWindowBeginCallbackAnimation(windowIndex); }.aspxBind(this));
 },
 FinishWindowBeginCallbackAnimation: function(windowIndex) {
  this.callbackAnimationProcessings[windowIndex] = false;
  if(!this.isCallbackFinishedStates[windowIndex])
   this.ShowWindowLoadingElementsInternal(windowIndex);
  else
   this.DoCallback(this.savedCallbackResults[windowIndex]);
 },
 CheckBeginCallbackAnimationInProgress: function(callbackResult) {
  var result;
  try {
   result = this.EvalCallbackResult(callbackResult).result;
  } catch(e) {
   return false;
  }
  var windowIndex = result.index;
  if(this.enableCallbackAnimation && this.callbackAnimationProcessings[windowIndex]) {
   this.savedCallbackResults[windowIndex] = callbackResult;
   this.isCallbackFinishedStates[windowIndex] = true;
   return true;
  }
  return false;
 },
 StartWindowEndCallbackAnimation: function(windowIndex) {
  this.callbackAnimationProcessings[windowIndex] = true;
  ASPx.AnimationHelper.fadeIn(this.GetWindowContentElement(windowIndex), function() { this.FinishWindowEndCallbackAnimation(windowIndex); }.aspxBind(this));
 },
 FinishWindowEndCallbackAnimation: function(windowIndex) {
  this.DoEndCallback();
  this.callbackAnimationProcessings[windowIndex] = false;
 },
 CheckEndCallbackAnimationNeeded: function() {
  var windowIndex = this.savedCallbackWindowIndex;
  this.savedCallbackWindowIndex = null;
  if(windowIndex !== null && !this.callbackAnimationProcessings[windowIndex]) {
   this.StartWindowEndCallbackAnimation(windowIndex);
   return true;
  }
  return false;
 },
 EnsureContent: function(windowIndex, isInit) {
  var element = this.GetWindowElement(windowIndex);
  if(element && !element.loaded && !element.loading) {
   var shouldLoad = this.contentLoadingMode == LoadContentViaCallback.OnPageLoad || this.contentLoadingMode == LoadContentViaCallback.OnFirstShow && !isInit;
   if(shouldLoad) {
    element.loading = true;
    this.CreateWindowCallback(windowIndex, windowIndex);
   } else if(this.contentLoadingMode == LoadContentViaCallback.Default)
    element.loaded = true;
  }
 },
 HideAllLoadingPanels: function() {
  if(this.HasDefaultWindow())
   this.HideWindowLoadingPanel(-1);
  for(var i = 0; i < this.GetWindowCount() ; i++)
   this.HideWindowLoadingPanel(i);
 },
 HideWindowLoadingPanel: function(windowIndex) {
  this.ClearWindowLoadingPanelTimer(windowIndex);
  if(this.loadingDivs[windowIndex]) {
   ASPx.RemoveElement(this.loadingDivs[windowIndex]);
   this.loadingDivs[windowIndex] = null;
  }
  if(this.loadingPanels[windowIndex]) {
   ASPx.RemoveElement(this.loadingPanels[windowIndex]);
   this.loadingPanels[windowIndex] = null;
  }
 },
 ShowWindowLoadingElements: function(windowIndex) {
  if(this.lpTimers[windowIndex] && this.lpTimers[windowIndex] > -1) return;
  if(this.enableCallbackAnimation)
   this.StartWindowBeginCallbackAnimation(windowIndex);
  else
   this.ShowWindowLoadingElementsInternal(windowIndex);
 },
 ShowWindowLoadingPanelOnTimer: function(windowIndex) {
  this.ClearWindowLoadingPanelTimer(windowIndex);
  this.ShowWindowLoadingPanel(windowIndex);
 },
 ClearWindowLoadingPanelTimer: function(windowIndex) {
  this.lpTimers[windowIndex] = ASPx.Timer.ClearTimer(this.lpTimers[windowIndex]);
 },
 ShowWindowLoadingElementsInternal: function(windowIndex) {
  if(this.lpDelay > 1 && !this.enableCallbackAnimation) {
   var _this = this;
   this.lpTimers[windowIndex] = window.setTimeout(function() { _this.ShowWindowLoadingPanelOnTimer(windowIndex); }, this.lpDelay);
  }
  else
   this.ShowWindowLoadingPanel(windowIndex);
 },
 ShowWindowLoadingPanel: function(windowIndex) {
  if(!this.IsExistLoadingPanel())
   return;
  if(!this.loadingPanels[windowIndex] && this.InternalIsWindowVisible(windowIndex)) {
   var parentElement = this.GetWindowElement(windowIndex).parentNode;
   var offsetElement = this.GetLoadingPanelOffsetElement(windowIndex);
   this.loadingDivs[windowIndex] = this.CreateLoadingDiv(parentElement, offsetElement, windowIndex);
   this.loadingPanels[windowIndex] = this.CreateLoadingPanelWithAbsolutePosition(parentElement, offsetElement, windowIndex);
  }
 },
 GetLoadingPanelOffsetElement: function(windowIndex) {
  return this.GetWindowContentWrapperElement(windowIndex);
 },
 IsExistLoadingPanel: function() {
  return !!this.GetLoadingDiv();
 },
 LockAnimation: function() {
  this.animationLockCount++;
 },
 UnlockAnimation: function() {
  this.animationLockCount--;
 },
 IsAnimationLocked: function() {
  return this.animationLockCount > 0;
 },
 IsAnimationAllowed: function() {
  return this.enableAnimation && !this.IsAnimationLocked();
 },
 SetWindowSizeByIndexCore: function(index, width, height, isWindowCollapsed) {
  this.SetClientWindowSizeLite(index, width, height, isWindowCollapsed);
  var iFrame = this.GetWindowIFrame(index);
  if(iFrame && !isWindowCollapsed) {
   var winElememnt = this.GetWindowElement(index);
   var realWidth = winElememnt.offsetWidth;
   var realHeight = winElememnt.offsetHeight;
   ASPx.SetStyles(iFrame, { width: realWidth, height: realHeight });
  }
  this.UpdateWindowsStateCookie();
 },
 SetWindowSizeByIndex: function(index, width, height) {
  var minWidth = this.GetWindowMinWidth(index);
  var minHeight = this.GetWindowMinHeight(index);
  var maxWidth = this.GetWindowMaxWidth(index);
  var maxHeight = this.GetWindowMaxHeight(index);
  if(minWidth)
   width = Math.max(width, minWidth);
  if(minHeight)
   height = Math.max(height, minHeight);
  if(maxWidth)
   width = Math.min(width, maxWidth);
  if(maxHeight)
   height = Math.min(height, maxHeight);
  var isWindowMaximized = this.GetIsMaximized(index);
  var isWindowCollapsed = this.GetIsCollapsed(index);
  var isWindowMaximizedAndCollapsed = (isWindowMaximized && isWindowCollapsed);
  if(this.SizeCanBeSet(index, isWindowMaximizedAndCollapsed)) {
   if(!this.CollapseExecuting() && !this.MaximizationExecuting() && !this.ResizingForMaxWindowLocked()) {
    this.SetWindowCachedSize(index, width, height);
    this.SetIsResized(index, true);
   }
   if(isWindowCollapsed && !this.MaximizationExecuting() && !this.ResizingForMaxWindowLocked()) {
    this.SetWindowCachedSize(index, width, height);
    this.UpdateRestoredWindowSize(index, width, height);
    height = 0;
   }
   if(isWindowMaximized && !this.CollapseExecuting() && !this.ResizingForMaxWindowLocked()) {
    this.SetWindowCachedSize(index, width, height);
    this.UpdateRestoredWindowSize(index, width, height);
   } else {
    this.SetWindowSizeByIndexCore(index, width, height, isWindowCollapsed);
   }
  } else
   this.SetWindowCachedSize(index, width, height);
 },
 SizeCanBeSet: function(index, isWindowMaximizedAndCollapsed) {
  return this.InternalIsWindowDisplayed(index) && this.IsWindowElementsIDAssigned(index) && (!isWindowMaximizedAndCollapsed || this.ResizingForMaxWindowLocked());
 },
 RestoreWindowSizeFromCache: function(index) {
  var cachedSize = this.GetWindowCachedSize(index);
  if(cachedSize != null) {
   if(cachedSize.width !== this.GetClientWindowWidth(index, true, true) ||
      cachedSize.height !== this.GetClientWindowHeight(index, true, true))
    this.SetWindowSizeByIndex(index, cachedSize.width, cachedSize.height);
   this.ResetWindowCachedSize(index);
  }
 },
 CollapseExecuting: function() {
  return false;
 },
 MaximizationExecuting: function() {
  return false;
 },
 ResizingForMaxWindowLocked: function() {
  return false;
 },
 IsResizeAllowed: function(index) {
  return this.allowResize;
 },
 GetWindowDimensionByIndex: function(index, isWidth, forceFromCache) {
  var cachedSize = this.GetWindowCachedSize(index);
  var dimensionValue = null;
  if(forceFromCache == undefined && !this.GetWindowElement(index))
   forceFromCache = true;
  if(cachedSize && forceFromCache)
   dimensionValue = isWidth ? cachedSize.width : cachedSize.height;
  if(dimensionValue)
   return dimensionValue;
  else {
   var element = this.GetWindowElement(index);
   var sizeFromDOM = 0;
   if(this.GetIsCollapsed(index)) {
    var headerCell = this.GetWindowHeaderElement(index);
    sizeFromDOM = isWidth ? headerCell.offsetWidth : headerCell.offsetHeight;
   }
   else {
    var mainCell = this.GetWindowMainCell(element);
    sizeFromDOM = isWidth ? mainCell.offsetWidth : mainCell.offsetHeight;
   }
   if(sizeFromDOM === 0 && cachedSize)
    sizeFromDOM = isWidth ? cachedSize.width : cachedSize.height;
   return sizeFromDOM;
  }
 },
 SetWindowSize: function(window, width, height) {
  var index = (window != null) ? window.index : -1;
  this.SetWindowSizeByIndex(index, width, height);
 },
 SetSize: function(width, height) {
  this.SetWindowSize(null, width, height);
 },
 SetWidth: function(width) {
  var height = this.GetHeight();
  this.SetSize(width, height);
 },
 SetHeight: function(height) {
  var width = this.GetWidth();
  this.SetSize(width, height);
 },
 GetHeight: function() {
  return this.GetWindowDimensionByIndex(-1, false, false);
 },
 GetWidth: function() {
  return this.GetWindowDimensionByIndex(-1, true, false);
 },
 CanBeClosedByClickOnElement: function(index, srcElement, posX, id) {
  return srcElement === null || ASPx.GetParentById(srcElement, id) === null;
 },
 OnMouseDown: function(evt, index, isDraggingAllowed, pointOnScrollBar) {
  if(ASPx.Evt.IsLeftButtonPressed(evt)) {
   if((this.IsResizeAllowed(index) || isDraggingAllowed) && !this.prohibitClearSelectionOnMouseDown)
    ASPx.Selection.Clear();
   var isResizing = this.ProcessResizeOnMouseDown(evt, index);
   var clickedOnScroll = pointOnScrollBar && this.GetEnableContentScrolling(index);
   if(isDraggingAllowed && !isResizing && !clickedOnScroll && !this.GetIsPinned(index) && !this.GetIsMaximized(index) && !ASPx.Ident.IsFocusableElementRegardlessTabIndex(evt.target))
    this.OnDragStart(evt, index);
  }
 },
 OnMouseMove: function(evt, index) {
  if(this.allowResize && !this.GetIsCollapsed(index) && !this.GetIsMaximized(index))
   this.CreateResizeCursorInfo(evt, index);
 },
 CreateResizeCursorInfo: function(evt, index) {
  var element = this.GetWindowElement(index);
  var mainCell = this.GetWindowMainCell(element);
  var clientWindow = this.GetWindowClientTable(index);
  var headerElement = this.GetWindowHeaderElement(index);
  var left = ASPx.GetAbsoluteX(mainCell);
  var top = ASPx.GetAbsoluteY(mainCell);
  var x = ASPx.Evt.GetEventX(evt);
  var y = ASPx.Evt.GetEventY(evt);
  var mainCellWidth = mainCell.offsetWidth;
  var mainCellHeight = mainCell.offsetHeight;
  var leftOffset = Math.abs(x - left);
  var rightOffset = Math.abs(x - left - mainCellWidth);
  var topOffset = Math.abs(y - top);
  var bottomOffset = Math.abs(y - top - mainCellHeight);
  var cursorInfo = this.CreateResizeBorderCursorInfo(index, leftOffset, rightOffset, topOffset, bottomOffset);
  var grip = this.GetWindowSizeGripElement(index);
  if(grip) {
   var gripCursorInfo = this.CreateGripCursorInfo(index, mainCell, grip, leftOffset, rightOffset, bottomOffset);
   if(gripCursorInfo)
    cursorInfo = gripCursorInfo;
  }
  this.UpdateResizeCursor(index, clientWindow, cursorInfo.verticalDirection, cursorInfo.horizontalDirection);
  this.UpdateResizeCursor(index, mainCell, cursorInfo.verticalDirection, cursorInfo.horizontalDirection);
  if(headerElement)
   this.UpdateResizeCursor(index, headerElement, cursorInfo.verticalDirection, cursorInfo.horizontalDirection);
  return cursorInfo;
 },
 UpdateResizeCursor: function(index, element, verticalDirection, horizontalDirection) {
  var cursor = verticalDirection + horizontalDirection;
  if(cursor == "")
   this.HideTemporaryCursor(element);
  else {
   cursor += "-resize";
   this.ShowTemporaryCursor(element, cursor);
  }
 },
 CreateGripCursorInfo: function(index, mainCell, grip, leftOffset, rightOffset, bottomOffset) {
  var gripWidth = this.rtl
   ? ASPx.GetAbsoluteX(grip) - ASPx.GetAbsoluteX(mainCell) + grip.offsetWidth
   : mainCell.offsetWidth - (ASPx.GetAbsoluteX(grip) - ASPx.GetAbsoluteX(mainCell));
  var gripHeight = mainCell.offsetHeight - (ASPx.GetAbsoluteY(grip) - ASPx.GetAbsoluteY(mainCell));
  if(gripHeight > bottomOffset) {
   if(this.rtl && gripWidth > leftOffset)
    return new PCResizeCursorInfo("w", "s", leftOffset, bottomOffset);
   if(gripWidth > rightOffset)
    return new PCResizeCursorInfo("e", "s", rightOffset, bottomOffset);
  }
  return null;
 },
 CreateResizeBorderCursorInfo: function(index, leftOffset, rightOffset, topOffset, bottomOffset) {
  var ResizeBorderSize = this.ResizeBorderSize;
  var verticalDirection = this.GetResizeVerticalCourse(ResizeBorderSize, topOffset, bottomOffset);
  ResizeBorderSize = verticalDirection != "" ? this.ResizeCornerBorderSize : this.ResizeBorderSize;
  var horizontalDirection = this.GetResizeHorizontalCourse(ResizeBorderSize, leftOffset, rightOffset);
  if(verticalDirection == "" && horizontalDirection != "")
   verticalDirection = this.GetResizeVerticalCourse(this.ResizeCornerBorderSize, topOffset, bottomOffset);
  var horizontalOffset = leftOffset < rightOffset ? leftOffset : rightOffset;
  var verticalOffset = topOffset < bottomOffset ? topOffset : bottomOffset;
  return new PCResizeCursorInfo(horizontalDirection, verticalDirection, horizontalOffset, verticalOffset);
 },
 GetResizeVerticalCourse: function(ResizeBorderSize, topOffset, bottomOffset) {
  if(ResizeBorderSize > topOffset) return "n";
  if(ResizeBorderSize > bottomOffset) return "s";
  return "";
 },
 GetResizeHorizontalCourse: function(ResizeBorderSize, leftOffset, rightOffset) {
  if(ResizeBorderSize > leftOffset) return "w";
  if(ResizeBorderSize > rightOffset) return "e";
  return "";
 },
 ProcessResizeOnMouseDown: function(evt, index) {
  var isResizing = false;
  if(this.IsResizeAllowed(index) && !this.GetIsCollapsed(index) && !this.GetIsMaximized(index)) {
   var eventSourceControl = ASPx.Evt.GetEventSource(evt);
   var eventFromPopupContainer = ASPx.ElementHasCssClass(eventSourceControl, PopupControlCssClasses.ContentCssClassName) ||
    !ASPx.GetParentByClassName(eventSourceControl, PopupControlCssClasses.ContentCssClassName) ||
    this.eventFromOwnPopupContent(eventSourceControl);
   if(eventFromPopupContainer && getComputedStyle(evt.target).cursor !== "pointer")
    isResizing = this.OnResizeStart(evt, index);
  }
  if(isResizing && ASPx.Browser.WebKitTouchUI)
   aspxGetPopupControlCollection().OverStop();
  return isResizing;
 },
 eventFromOwnPopupContent: function(element) {
  while(element != null) {
   if(element.tagName == "BODY")
    return false;
   if(element.style.position == "absolute") {
    var windowIndex = this.GetWindowIndex(element);
    var isPopupWindow = !isNaN(windowIndex);
    if(isPopupWindow) {
     if(this.GetWindowElementId(windowIndex) == element.id)
      return true;
     return false;
    } else {
     var elementIsOtherPopup = element.style.zIndex >= this.GetPopupControlZIndex();
     if(elementIsOtherPopup)
      return false;
    }
   }
   element = element.parentNode;
  }
  return false;
 },
 OnResizeStart: function(evt, index) {
  if(!aspxGetPopupControlCollection().IsResizeInint()) {
   var cursor = this.CreateResizeCursorInfo(evt, index);
   if(cursor.course != "") {
    aspxGetPopupControlCollection().setIframesMouseMoveEnabled(false);
    this.EnsureWindowCoverDiv(index);
    this.SetIsResized(index, true);
    var resizePanel = this.CreateResizePanel(index);
    this.UpdateResizeCursor(index, resizePanel, cursor.verticalDirection, cursor.horizontalDirection);
    aspxGetPopupControlCollection().InitResizeObject(this, index, cursor, resizePanel);
    this.OnResize(evt, index, cursor, resizePanel);
   }
  }
  return aspxGetPopupControlCollection().IsResizeInint();
 },
 OnResizeStop: function(evt, index, cursor, resizePanel) {
  if(this.IsResizeAllowed(index)) {
   aspxGetPopupControlCollection().setIframesMouseMoveEnabled(true);
   this.RemoveWindowCoverDiv();
   var windowElement;
   if(!this.isLiveResizingMode) {
    windowElement = this.GetWindowElement(index);
    ASPx.GetControlCollection().CollapseControls(windowElement);
    this.OnResizeWindow(index, cursor, resizePanel);
   }
   this.CreateResizeCursorInfo(evt, index);
   this.UpdateWindowsStateCookie();
   this.RaiseResize(index);
   if(!this.isLiveResizingMode)
    ASPx.GetControlCollection().AdjustControls(windowElement, true);
  }
  this.ResetResizeSessionCache();
 },
 OnResizeWindow: function(index, cursor, resizePanel) {
  var windowElement = this.GetWindowElement(index);
  var resizePanelDimensions = this.GetResizePanelDimensions();
  var left = resizePanelDimensions.left;
  var top = resizePanelDimensions.top;
  this.SetClientWindowSizeLite(index, resizePanelDimensions.offsetWidth, resizePanelDimensions.offsetHeight);
  if(this.fixedBottom)
   top = this.fixedBottom - windowElement.offsetHeight;
  if(this.fixedRight)
   left = this.fixedRight - windowElement.offsetWidth;
  this.fixedBottom = null;
  this.fixedRight = null;
  if(cursor.verticalDirection === "n")
   this.ChangePosOnResizeWindow(top, windowElement, false);
  if(cursor.horizontalDirection === "w")
   this.ChangePosOnResizeWindow(left, windowElement, true);
  if(this.InternalIsWindowVisible(index))
   this.DoShowWindowIFrame(index, left, top, ASPx.InvalidDimension, ASPx.InvalidDimension);
 },
 ChangePosOnResizeWindow: function(pos, windowElement, isX) {
  if(ASPx.Browser.IE && ASPx.Browser.Version >= 10)
   pos = Math.round(pos);
  windowElement.style[isX ? "left" : "top"] = pos + "px";
 },
 SetClientWindowSizeLite: function(index, width, height, isWindowCollapsed) {
  this.RaiseBeforeResizing(index);
  this.SetClientWindowSizeCoreLite(index, width, height, isWindowCollapsed);
  if(!this.IsRaiseAfterResizingLocked())
   this.RaiseAfterResizing(index);
 },
 SetClientWindowSizeCoreLite: function(index, width, height, isWindowCollapsed) {
  var contentUrl = this.GetWindowContentIFrameUrl(index);
  var needToHideContent = !contentUrl;
  var element = this.GetWindowElement(index);
  var contentWrapper = this.GetWindowContentWrapperElement(index);
  var contentElement = this.GetWindowContentElement(index);
  var scrollTop = null,
   scrollLeft = null;
  if(ASPx.Browser.IE && this.GetEnableContentScrolling(index)) {
   scrollTop = contentElement.scrollTop;
   scrollLeft = contentElement.scrollLeft;
  }
  var contentIframeElement = this.GetWindowContentIFrameElement(index);
  var iframeHeightCorrectionOnFirstShow = height > 0;
  if(contentIframeElement && (this.GetWindowIsShown(index) || iframeHeightCorrectionOnFirstShow))
   contentIframeElement.style.height = "0px";
  contentWrapper.style.height = "";
  contentWrapper.style.width = "";
  contentElement.style.height = "";
  contentElement.style.width = "";
  var hasAnyScrollBars = this.HasAnyScrollBars(index);
  var expectedHeight = (!ASPx.IsExists(height) && hasAnyScrollBars) ? this.GetExpectedHeight(index) : null;
  var contentElementChildrenScroll = null,
   contentElementChildren = null;
  if(needToHideContent) {
   if(ASPx.Browser.IE) {
    var contentElementChildren = this.GetContentElementChildren(index, contentElement),
     contentElementChildrenScroll = this.GetContentElementChildrenScroll(index, contentElementChildren);
   }
   contentElement.style.display = "none";
  }
  var elementsDisplayValue = this.GetWindowElementDisplayValue(hasAnyScrollBars, height);
  element.style.display = elementsDisplayValue;
  if(!this.GetIsCollapsed(index))
   contentWrapper.style.display = elementsDisplayValue;
  if(ASPx.IsExists(width)) {
   var actualWidth = width - this.GetElementBordersAndPaddings(index, element, true);
   if(actualWidth <= 0)
    actualWidth = ASPx.Browser.WebKitFamily ? 1 : 0;
   element.style.width = actualWidth + "px";
  }
  var actualHeight;
  if(ASPx.IsExists(height)) {
   actualHeight = height - this.GetElementBordersAndPaddings(index, element, false);
   if(actualHeight < 0)
    actualHeight = 0;
   element.style.height = actualHeight + "px";
  } else {
   if(ASPx.IsExists(expectedHeight)) {
    actualHeight = expectedHeight;
    element.style.height = actualHeight + "px";
   }
  }
  this.CorrectWindowSizeGripPositionLite(index);
  this.CorrectWindowHeaderText(index);
  this.SetContentWrapperHeightLite(index, actualHeight, element, contentWrapper);
  var correctContentElementSize = hasAnyScrollBars || contentElement.style.overflow == "hidden" || contentElement.style.overflowX == "hidden" || contentElement.style.overflowY == "hidden";
  if((correctContentElementSize || contentUrl) && (height || expectedHeight)) {
   if(contentElement !== contentWrapper) {
    var contentHeight = ASPx.GetClearClientHeight(contentWrapper);
    if(contentHeight < 0)
     contentHeight = 0;
    contentElement.style.height = contentHeight + "px";
   }
  }
  if(correctContentElementSize && width && contentElement !== contentWrapper)
   contentElement.style.width = ASPx.GetClearClientWidth(contentWrapper) + "px";
  contentElement.style.display = this.getContentElementDisplay(correctContentElementSize, contentUrl);
  if(ASPx.IsExists(contentElementChildrenScroll) && contentElementChildrenScroll.length > 0) {
   for(var i = 0; i < contentElementChildrenScroll.length; i++) {
    var childScroll = contentElementChildrenScroll[i],
     childIndex = childScroll[0],
     childScrollLeft = childScroll[1],
     childScrollTop = childScroll[2];
    if(!!childScrollLeft)
     contentElementChildren[childIndex].scrollLeft = childScrollLeft;
    if(!!childScrollTop)
     contentElementChildren[childIndex].scrollTop = childScrollTop;
   }
  }
  if(ASPx.Browser.IE && this.GetEnableContentScrolling(index)) {
   contentElement.scrollTop = scrollTop;
   contentElement.scrollLeft = scrollLeft;
  }
  if(contentIframeElement)
   contentIframeElement.style.height = "100%";
  this.SetWindowWidth(index, width);
  this.SetWindowHeight(index, height);
  if(isWindowCollapsed)
   this.ResetWindowHeight(index);
 },
 GetExpectedHeight: function(index) {
  var height = this.GetWindowHeightInternal(index) || 0;
  height = Math.max(height, this.GetWindowMinHeight(index));
  if(this.HasAnyScrollBars(index)) {
   var windowHeight = this.GetWindowContentElement(index).offsetHeight + this.GetWindowHeightWithoutContent(index);
   height = Math.max(height, windowHeight);
  }
  var maxHeight = this.GetWindowMaxHeight(index);
  if(maxHeight)
   height = Math.min(height, maxHeight);
  return height;
 },
 IsRaiseAfterResizingLocked: function() {
  return false;
 },
 CreateResizePanel: function(index) {
  var element = this.GetWindowElement(index);
  var resizePanel = document.createElement("DIV");
  element.parentNode.appendChild(resizePanel);
  resizePanel.style.overflow = "hidden";
  resizePanel.style.position = "absolute";
  resizePanel.style.zIndex = this.GetPopupControlZIndex() + aspxGetPopupControlCollection().visiblePopupWindowIds.length * 2 + 2;
  if(!this.isLiveResizingMode)
   resizePanel.style.border = "black 1px dotted";
  return resizePanel;
 },
 OnResize: function(evt, index, cursor, resizePanel) {
  this.OnResizePanelLite(evt, index, cursor, resizePanel);
  if(this.isLiveResizingMode)
   this.OnResizeWindow(index, cursor, resizePanel);
  ASPx.Selection.Clear();
  if(ASPx.Browser.WebKitTouchUI)
   ASPx.Evt.PreventEvent(evt);
  if(this.GetIsPinned(index))
   this.HoldPosition(index, true, resizePanel);
 },
 OnResizePanelLite: function(evt, index, cursor, resizePanel) {
  var x = ASPx.Evt.GetEventX(evt);
  var y = ASPx.Evt.GetEventY(evt);
  var element = this.GetWindowElement(index);
  if(ASPx.Browser.IE && ASPx.Browser.Version >= 10) {
   x = Math.round(x);
   y = Math.round(y);
  }
  var elementTop = ASPx.GetAbsoluteY(element);
  var elementLeft = ASPx.GetAbsoluteX(element);
  var newLeft = ASPx.PxToInt(element.style.left);
  var newTop = ASPx.PxToInt(element.style.top);
  var newWidth = element.offsetWidth;
  var newHeight = element.offsetHeight;
  if(cursor.verticalDirection == "n") {
   if(!this.fixedBottom)
    this.fixedBottom = newTop + newHeight;
   newHeight += elementTop - y + cursor.verticalOffset;
   newTop = ASPx.PrepareClientPosForElement(y - cursor.verticalOffset, element, false);
  }
  if(cursor.verticalDirection == "s") {
   newHeight = y - elementTop + cursor.verticalOffset;
   this.fixedBottom = null;
  }
  if(cursor.horizontalDirection == "w") {
   if(!this.fixedRight)
    this.fixedRight = newLeft + newWidth;
   newWidth += elementLeft - x + cursor.horizontalOffset;
   newLeft = ASPx.PrepareClientPosForElement(x - cursor.horizontalOffset, element, true);
  }
  if(cursor.horizontalDirection == "e") {
   newWidth = x - elementLeft + cursor.horizontalOffset;
   this.fixedRight = null;
  }
  if(newWidth > 0 && newHeight > 0) {
   var minWidth = this.GetWindowMinWidth(index);
   var maxWidth = this.GetWindowMaxWidth(index);
   if(minWidth && newWidth < minWidth)
    newWidth = minWidth;
   if(maxWidth && newWidth > maxWidth)
    newWidth = maxWidth;
   var minHeight = this.GetWindowMinHeight(index);
   var maxHeight = this.GetWindowMaxHeight(index);
   if(minHeight && newHeight < minHeight)
    newHeight = minHeight;
   if(maxHeight && newHeight > maxHeight)
    newHeight = maxHeight;
   if(ASPx.Browser.IE && ASPx.Browser.Version >= 10) {
    newLeft = Math.round(newLeft);
    newTop = Math.round(newTop);
    newHeight = Math.round(newHeight);
    newWidth = Math.round(newWidth);
   }
   this.SetResizePanelDimensions(newLeft, newTop, newWidth, newHeight);
   var widthWithoutBorders = newWidth - this.getLeftRightBordersAndPaddingsSummaryValue(resizePanel);
   var heightWithoutBorders = newHeight - this.getTopBottomBordersAndPaddingsSummaryValue(resizePanel);
   ASPx.SetStyles(resizePanel, {
    left: newLeft, top: newTop,
    width: widthWithoutBorders, height: heightWithoutBorders
   });
   this.SetWindowLeft(index, elementLeft);
   this.SetWindowTop(index, elementTop);
  }
 },
 SetResizePanelDimensions: function(left, top, offsetWidth, offsetHeight) {
  var cache = this.GetResizeSessionCache();
  cache.resizePanelDimensions = {
   left: left,
   top: top,
   offsetWidth: offsetWidth,
   offsetHeight: offsetHeight
  };
 },
 GetResizePanelDimensions: function() {
  var cache = this.GetResizeSessionCache();
  return cache.resizePanelDimensions;
 },
 ResetResizeSessionCache: function() {
  this.resizeSessionCache = {};
 },
 GetResizeSessionCache: function() {
  return aspxGetPopupControlCollection().IsResizeInint() ? this.resizeSessionCache : {};
 },
 EnsureWindowCoverDiv: function(index) {
  this.windowCoverDiv = this.CreateCoverDiv(index);
  var windowElement = this.GetWindowElement(index);
  windowElement.parentNode.appendChild(this.windowCoverDiv);
 },
 CreateCoverDiv: function(index) {
  var coverDiv = document.createElement("DIV");
  ASPx.SetStyles(coverDiv, {
   position: "fixed",
   left: 0,
   top: 0,
   width: "100%",
   height: "100%"
  });
  return coverDiv;
 },
 RemoveWindowCoverDiv: function() {
  if(!!this.windowCoverDiv) {
   this.windowCoverDiv.parentNode.removeChild(this.windowCoverDiv);
   this.windowCoverDiv = null;
  }
 },
 OnDrag: function(index, x, y, xClientCorrection, yClientCorrection) {
  var element = this.GetWindowElement(index);
  if(element != null) {
   ASPx.SetStyles(element, { left: x, top: y });
   xClientCorrection = typeof (xClientCorrection) != "undefined" ? xClientCorrection : 0;
   yClientCorrection = typeof (yClientCorrection) != "undefined" ? yClientCorrection : 0;
   this.SetWindowLeft(index, x + xClientCorrection);
   this.SetWindowTop(index, y + yClientCorrection);
   var iFrame = element.overflowElement;
   if(iFrame)
    ASPx.SetStyles(iFrame, { left: x, top: y });
   if(ASPx.Browser.Opera)
    ASPx.Selection.Clear();
  }
 },
 OnDragStop: function(index) {
  this.HideDragCursor(index);
  this.UpdateWindowsStateCookie();
  if(this.GetWindowContentIFrameElement(index))
   this.SetIframeVisibleForDragging(index, true);
  this.RaiseDragged(index);
 },
 OnDragStart: function(evt, index) {
  this.RaiseBeforeDrag(index);
  this.SetIsDragged(index, true);
  this.ShowDragCursor(index);
  if(this.GetWindowContentIFrameElement(index))
   this.SetIframeVisibleForDragging(index, false);
  this.InitDragInfo(index, evt);
 },
 HideIframeElementBeforeDragging: function() {
 },
 InitDragInfo: function(index, evt) {
  var element = this.GetWindowElement(index);
  var gragXOffset = ASPx.GetAbsoluteX(element) - ASPx.Evt.GetEventX(evt);
  var gragYOffset = ASPx.GetAbsoluteY(element) - ASPx.Evt.GetEventY(evt);
  var xClientCorrection = this.GetDragCorrection(index, element, true);
  var yClientCorrection = this.GetDragCorrection(index, element, false);
  gragXOffset -= xClientCorrection;
  gragYOffset -= yClientCorrection;
  aspxGetPopupControlCollection().InitDragObject(this, index, gragXOffset, gragYOffset, xClientCorrection, yClientCorrection);
 },
 GetDragCorrection: function(index, element, isX) {
  return ASPx.GetPositionElementOffset(element, isX);
 },
 ShowDragCursor: function(index) {
  var dragElement = this.GetDragElement(index);
  if(dragElement)
   this.ShowTemporaryCursor(dragElement, "move");
 },
 ShowTemporaryCursor: function(element, cursor) {
  ASPx.Attr.ChangeStyleAttribute(element, "cursor", cursor);
 },
 HideDragCursor: function(index) {
  var dragElement = this.GetDragElement(index);
  if(dragElement != null)
   this.HideTemporaryCursor(dragElement);
 },
 GetDragElement: function(index) {
  var headerElement = this.GetWindowHeaderElement(index);
  var element = this.GetWindowElement(index);
  if(element != null)
   return (headerElement != null ? headerElement : this.GetWindowMainCell(element));
  return null;
 },
 HideTemporaryCursor: function(element) {
  ASPx.Attr.RestoreStyleAttribute(element, "cursor");
 },
 OnDocumentKeyDown: function(evt, popupWindow) {
  var handler = this.keyDownHandlers && this.keyDownHandlers[ASPx.GetShortcutCode(evt.keyCode, evt.ctrlKey, evt.shiftKey, evt.altKey)];
  if(handler)
   handler(this.GetWindowIndex(popupWindow));
 },
 OnEscKeyDown: function(index) {
  if(this.GetEnableCloseByEsc(index))
   this.DoHideWindow(index, false, ASPxClientPopupControlCloseReason.Escape);
 },
 OnRefreshButtonClick: function(index) {
  var contentIFrame = this.GetWindowContentIFrameElement(index);
  if(contentIFrame)
   this.RefreshWindowContentUrl(this.GetWindow(index));
  else
   this.PerformWindowCallback(this.GetWindow(index));
 },
 OnCloseButtonClick: function(index) {
  this.RaiseCloseButtonClick(index);
  if(this.GetWindowCloseAction(index) != "None")
   this.DoHideWindow(index, false, ASPxClientPopupControlCloseReason.CloseButton);
 },
 Show: function(popupElementIndex) {
  this.ShowWindowByIndex(-1, popupElementIndex);
 },
 Hide: function() {
  this.HideWindow(null);
 },
 HideWindow: function(window) {
  var index = (window != null) ? window.index : -1;
  this.DoHideWindow(index, false, ASPxClientPopupControlCloseReason.API);
 },
 RaiseEventByIndex: function(index, event, argsName) {
  if(!event.IsEmpty()) {
   var window = index < 0 ? null : this.GetWindow(index),
    args = new argsName(window);
   event.FireEvent(this, args);
  }
 },
 RaiseCloseButtonClick: function(index) {
  this.RaiseEventByIndex(index, this.CloseButtonClick, ASPxClientPopupWindowEventArgs);
 },
 RaiseShown: function(index) {
  this.RaiseEventByIndex(index, this.Shown, ASPxClientPopupWindowEventArgs);
 },
 RaisePopUp: function(index) {
  this.RaiseEventByIndex(index, this.PopUp, ASPxClientPopupWindowEventArgs);
 },
 RaiseBeforeResizing: function(index) {
  this.RaiseEventByIndex(index, this.BeforeResizing, ASPxClientPopupWindowEventArgs);
 },
 RaiseAfterResizing: function(index) {
  this.RaiseEventByIndex(index, this.AfterResizing, ASPxClientPopupWindowEventArgs);
 },
 RaiseDragged: function(index) {
  this.RaiseEventByIndex(index, this.Dragged, ASPxClientPopupWindowEventArgs);
 },
 RaiseBeforeDrag: function(index) {
  this.RaiseEventByIndex(index, this.BeforeDrag, ASPxClientPopupWindowEventArgs);
 },
 RaiseClosing: function(index, closeReason) {
  var window = index < 0 ? null : this.GetWindow(index);
  var cancel = false;
  if(!this.Closing.IsEmpty()) {
   var args = new ASPxClientPopupWindowCancelEventArgs(window, closeReason);
   this.Closing.FireEvent(this, args);
   cancel = args.cancel;
  }
  return cancel;
 },
 RaiseCloseUp: function(index, closeReason) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.CloseUp.IsEmpty()) {
   var args = new ASPxClientPopupWindowCloseUpEventArgs(window, closeReason);
   this.CloseUp.FireEvent(this, args);
  }
 },
 RaiseResize: function(index, resizeState) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.Resize.IsEmpty()) {
   if(!resizeState)
    resizeState = ASPxClientPopupControlResizeState.Resized;
   var args = new ASPxClientPopupWindowResizeEventArgs(window, resizeState);
   this.Resize.FireEvent(this, args);
  }
 },
 RaisePopupOnShow: function(isMoving, index) {
  if(!isMoving) {
   this.RaisePopUp(index);
   if(!this.IsAnimationAllowed())
    this.OnWindowShown(index);
  }
 },
 OnActivate: function(index, evt) {
  var element = this.GetWindowElement(index);
  if(element != null)
   aspxGetPopupControlCollection().ActivateWindowElement(element, evt, this.GetPopupType(), this.GetDefaultZIndexFromServer(), this.GetPopupControlZIndex());
 },
 OnPWHBClickCore: function(evt, index, method) {
  this.OnActivate(index, evt);
  if(ASPx.TouchUIHelper.handleFastTapIfRequired(evt,
   function() { this[method](index); }.aspxBind(this), true)) {
   return;
  }
  if(ASPx.Browser.Opera)
   ASPx.Evt.EmulateDocumentOnMouseDown(evt);
  this[method](index);
 },
 OnScroll: function(evt, index) {
  if(this.HasIframeOnIos(index))
   this.ResetWebkitScrolling(this.getTouchScrollerElement(index), 0);
  if(!this.GetIsPinned(index) || (this.lockScroll > 0)) return;
  this.AdjustPinPositionWhileScroll(index);
 },
 ResetWebkitScrolling: function(scrollElement, timeout) {
  if(scrollElement.scrollTop === 0) {
   var styleName = "-webkit-overflow-scrolling";
   scrollElement.style[styleName] = "auto";
   window.setTimeout(function() {
    scrollElement.style[styleName] = "touch";
   }.aspxBind(this), timeout);
  }
 },
 HaveSpecialDivForAnimation: function() {
  return this.enableAnimation;
 },
 HasIframeOnIos: function(index) {
  return ASPx.Browser.MacOSMobilePlatform && !!this.GetWindowContentIFrameElement(index);
 },
 WindowIsModal: function(index) {
  return this.GetPropertyValue(index, "modal");
 },
 GetIsPopuped: function(index) {
  if(0 <= index && index < this.GetWindowCountCore())
   return this.windowsIsPopupedList[index];
  return this.defaultIsPopuped;
 },
 SetIsPopuped: function(index, isPopuped) {
  if(0 <= index && index < this.GetWindowCountCore())
   this.windowsIsPopupedList[index] = isPopuped;
  this.defaultIsPopuped = isPopuped;
 },
 GetIsMaximized: function(index) {
  return false;
 },
 GetIsMaximizedInit: function(index) {
  return false;
 },
 GetCurrentLeft: function(index) {
  return this.GetPosition(index, true);
 },
 GetCurrentTop: function(index) {
  return this.GetPosition(index, false);
 },
 GetIsPinned: function(index) {
  return false;
 },
 GetIsCollapsed: function(index) {
  return false;
 },
 needToHidePinnedOutFromViewPort: function(index) {
  return false;
 },
 GetHideBodyScrollWhenModal: function(index) {
  return false;
 },
 GetCanScrollViewPort: function(index) {
  return false;
 },
 GetEnableContentScrolling: function(index) {
  return false;
 },
 AutoUpdateElementsPosition: function() {
 },
 GetWindowChild: function(index, idPostfix) {
  var elem = this.GetWindowElement(index);
  if(elem)
   return ASPx.GetChildById(elem, this.name + idPostfix);
  return null;
 },
 GetWindowIndex: function(element) {
  var id = element.id;
  var pos = id.lastIndexOf(ASPx.PCWIdSuffix);
  return parseInt(id.substr(pos + ASPx.PCWIdSuffix.length));
 },
 GetWindow: function(index) {
  return (0 <= index && index < this.windows.length) ? this.windows[index] : null;
 },
 DoShowWindowIFrame: function(index, x, y, width, height) {
  if(!this.renderIFrameForPopupElements) return;
  var element = this.GetWindowElement(index);
  var iFrame = this.GetWindowIFrame(index);
  if(element && iFrame) {
   var cell = this.GetWindowMainCell(element);
   if(width < 0)
    width = cell.offsetWidth;
   if(height < 0)
    height = cell.offsetHeight;
   ASPx.SetStyles(iFrame, { width: width, height: height });
   if(this.IsValidPosition(x) && this.IsValidPosition(y))
    ASPx.SetStyles(iFrame, { left: x, top: y });
   if(ASPx.Browser.IE || ASPx.Browser.Firefox)
    this.ClearWindowIframeBodyInnerHtml(iFrame);
   ASPx.SetElementDisplay(iFrame, true);
  }
 },
 IsValidPosition: function(pos) {
  return pos !== ASPx.InvalidPosition;
 },
 DoHideWindowIFrame: function(element) {
  if(!this.renderIFrameForPopupElements) return;
  var iFrame = element.overflowElement;
  if(iFrame)
   ASPx.SetElementDisplay(iFrame, false);
 },
 GetIframeBody: function(iFrame) {
  var document = iFrame.contentDocument || iFrame.contentWindow.document;
  if(document)
   return document.getElementsByTagName('body')[0];
 },
 ClearWindowIframeBodyInnerHtml: function(iFrame) {
  var iFrameBody = this.GetIframeBody(iFrame);
  if(iFrameBody)
   iFrameBody.innerHTML = "";
 },
 FindWindowIFrame: function(index) {
  return ASPx.GetElementById(this.name + "_DXPWIF" + index);
 },
 GetWindowIFrame: function(index) {
  var element = this.GetWindowElement(index);
  var iFrame = element.overflowElement;
  if(!iFrame) {
   iFrame = this.FindWindowIFrame(index);
   element.overflowElement = iFrame;
  }
  return iFrame;
 },
 CreateFakeDivForIframe: function(iframe) {
  var fakeDiv = document.createElement("div");
  ASPx.SetStyles(fakeDiv, { width: iframe.offsetWidth, height: iframe.offsetHeight });
  return fakeDiv;
 },
 CreateIframeCoverDiv: function(iframe, index) {
  if(!this.iframeCoverDiv)
   this.iframeCoverDiv = [];
  if(!this.iframeCoverDiv[index])
   this.iframeCoverDiv[index] = this.CreateFakeDivForIframe(iframe);
  this.iframeCoverDiv[index].style.position = "absolute";
  iframe.parentElement.appendChild(this.iframeCoverDiv[index]);
  ASPx.SetAbsoluteX(this.iframeCoverDiv[index], ASPx.GetAbsoluteX(iframe));
  ASPx.SetAbsoluteY(this.iframeCoverDiv[index], ASPx.GetAbsoluteY(iframe));
 },
 RemoveIframeCoverDiv: function(iframe, index) {
  iframe.parentElement.removeChild(this.iframeCoverDiv[index]);
  this.iframeCoverDiv[index] = null;
 },
 GetWindowBorderOwnerElement: function(windowElement) {
  if(ASPx.ElementHasCssClass(windowElement, PopupControlCssClasses.MainDivLiteCssClass))
   return windowElement;
  else
   return ASPx.GetNodeByClassName(windowElement, PopupControlCssClasses.MainDivLiteCssClass);
 },
 GetWindowContentIFrameElement: function(index) {
  return this.GetWindowChild(index, "_CIF" + index);
 },
 GetWindowContentElement: function(index) {
  return this.GetWindowChild(index, "_PWC" + index);
 },
 GetWindowContentIFrameElementId: function(index) {
  return this.name + "_CIF" + index;
 },
 GetContentContainer: function(index) {
  return this.GetWindowContentElement(index);
 },
 getTouchScrollerElement: function(index) {
  return this.GetContentContainer(index);
 },
 GetWindowHeaderElement: function(index) {
  return this.GetWindowChild(index, "_PWH" + index);
 },
 GetWindowFooterElement: function(index) {
  return this.GetWindowChild(index, "_PWF" + index);
 },
 GetWindowSizeGripElement: function(index) {
  var footer = this.GetWindowFooterElement(index);
  if(!footer)
   return null;
  var descendants = ASPx.GetNodesByClassName(footer, PopupControlCssClasses.SizeGripLiteCssClassName);
  return descendants.length > 0 ? descendants[0] : null;
 },
 GetWindowContentWrapperElement: function(index) {
  if(!ASPx.IsExistsElement(this.windowContentElements[index])) {
   var windowElem = this.GetWindowElement(index);
   var contentWrapperParent = this.GetWindowMainCell(windowElem);
   this.windowContentElements[index] = ASPx.GetChildByClassName(contentWrapperParent, PopupControlCssClasses.ContentWrapperCssClassName);
  }
  return this.windowContentElements[index];
 },
 GetWindowMainCell: function(element) {
  return this.HaveSpecialDivForAnimation() ? ASPx.GetNodeByTagName(element, "DIV", 0) : element;
 },
 GetWindowModalElement: function(index) {
  var element = this.GetWindowElement(index);
  if(!element) return;
  var modalElement = element.modalElement;
  if(!modalElement) {
   modalElement = this.FindWindowModalElement(index);
   element.modalElement = modalElement;
   if(modalElement) {
    modalElement.DXModalPopupControl = this;
    modalElement.DXModalPopupWindowIndex = index;
   }
  }
  return modalElement;
 },
 CanManipulateWithModalElement: function(index) {
  return this.WindowIsModal(index);
 },
 GetCurrentZIndex: function(index) {
  var element = this.GetWindowElement(index);
  if(element != null) {
   if(element.style.zIndex != "" && element.style.zIndex != this.GetDefaultZIndexFromServer())
    return element.style.zIndex;
   return this.GetZIndex(index);
  }
 },
 GetWindowsState: function() {
  var state = "";
  if(this.HasDefaultWindow()) {
   state += this.GetWindowState(-1);
  }
  return state;
 },
 GetWindowState: function(index) {
  var element = this.GetWindowElement(index);
  if(element != null) {
   var visibleFlag = (!this.InternalIsWindowVisible(index) || element.isHiding) ? "0" : "1";
   var isDraggedFlag = this.GetIsDragged(index) ? "1" : "0";
   var zIndex = this.GetCurrentZIndex(index);
   var isResized = this.GetIsResized(index);
   var isResizedFlag = isResized ? "1" : "0";
   var width = null, height=null;
   if(isResized) {
    width = this.GetWindowWidthInternal(index);
    height = this.GetIsCollapsed(index) ? this.GetWindowDimensionByIndex(index, false, true) : this.GetWindowHeightInternal(index);
   } else {
    width = ASPx.InvalidDimension;
    height = ASPx.InvalidDimension;
   }
   var contentWasLoaded = element.loaded ? "1" : "0";
   var left, top;
   var isMaximized = this.GetIsMaximized(index);
   if(isMaximized && !this.MaximizationExecuting()) {
    var restoredWindowData = this.GetRestoredWindowData(index);
    left = restoredWindowData.left;
    top = restoredWindowData.top;
   } else {
    left = this.GetCurrentLeft(index);
    top = this.GetCurrentTop(index);
   }
   var isPinned = this.GetIsPinned(index);
   if(isPinned) {
    left -= ASPx.GetDocumentScrollLeft();
    top -= ASPx.GetDocumentScrollTop();
   }
   left = Math.ceil(left);
   top = Math.ceil(top);
   var pinFlag = isPinned ? "1" : "0";
   var minFlag = this.GetIsCollapsed(index) ? "1" : "0";
   var maxFlag = isMaximized || this.GetIsMaximizedInit(index) ? "1" : "0";
   return [visibleFlag, isDraggedFlag, zIndex, left, top, isResizedFlag, width, height, contentWasLoaded, pinFlag, minFlag, maxFlag].join(":");
  }
  return "";
 },
 UpdateStateObject: function(){
  this.UpdateStateObjectWithObject({ windowsState: this.GetWindowsState() });
 },
 GetStateHiddenFieldOrigin: function() {
  return this.GetWindowElement(this.GetWindowCountCore() - 1);
 },
 GetPopupType: function() {
  return "aspxpopup";
 },
 GetDefaultZIndexFromServer: function() {
  return defaultZIndexFromServer;
 },
 GetPopupControlZIndex: function() {
  return popupControlZIndex;
 },
 FindWindowModalElement: function(index) {
  return ASPx.GetElementById(this.name + "_DXPWMB" + index);
 },
 GetWindowCloseButton: function(index) {
  return ASPx.GetElementById(this.name + "_HCB" + index);
 },
 GetWindowRefreshButton: function(index) {
  return ASPx.GetElementById(this.name + "_HRB" + index);
 },
 FirstShowWindow: function(index, allowChangeZIndex) {
  var popupHorizontalOffsetBackup = -1;
  var popupVerticalOffsetBackup = -1;
  var isFreeWindow = this.GetIsDragged(index);
  var x = ASPx.InvalidPosition;
  var y = ASPx.InvalidPosition;
  if(isFreeWindow) {
   x = this.GetWindowLeft(index);
   y = this.GetWindowTop(index);
   popupHorizontalOffsetBackup = this.popupHorizontalOffset;
   popupVerticalOffsetBackup = this.popupVerticalOffset;
   this.popupHorizontalOffset = 0;
   this.popupVerticalOffset = 0;
  }
  this.LockAnimation();
  this.DoShowWindowCore(index, x, y, isFreeWindow ? -1 : 0, false, allowChangeZIndex);
  this.UnlockAnimation();
  if(isFreeWindow) {
   this.popupHorizontalOffset = popupHorizontalOffsetBackup;
   this.popupVerticalOffset = popupVerticalOffsetBackup;
  }
  this.CorrectElementVerticalAlignment(ASPx.AdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index));
  this.CorrectFooterTextElementWidth(index);
 },
 HasDefaultWindow: function() {
  return true;
 },
 GetWindowCount: function() {
  return 0;
 },
 GetWindowContentHtml: function(window) {
  var index = (window != null) ? window.index : -1;
  var element = this.GetContentContainer(index);
  return (element != null) ? element.innerHTML : "";
 },
 GetWindowElementId: function(index) {
  return this.name + ASPx.PCWIdSuffix + index;
 },
 GetWindowElement: function(index) {
  if(!ASPx.IsExistsElement(this.windowElements[index]))
   this.windowElements[index] = ASPx.GetElementById(this.GetWindowElementId(index));
  return this.windowElements[index];
 },
 GetWindowClientTable: function(index) {
  return this.GetWindowElement(index);
 },
 GetCurrentWindowElement: function() {
  return this.GetWindowElement(-1);
 },
 getActualMainElement: function() { return this.GetCurrentWindowElement(); },
 ShowWindowContentUrl: function(index) {
  var contentIFrame = this.GetWindowContentIFrameElement(index);
  this.LoadWindowContentUrl(index);
  if(contentIFrame && contentIFrame.DXReloadAfterShowRequired) {
   this.RefreshWindowContentUrl(this.GetWindow(index));
   contentIFrame.DXReloadAfterShowRequired = false;
  }
 },
 RefreshWindowContentUrl: function(window) {
  var index = (window != null) ? window.index : -1;
  if(ASPx.Browser.IE)
   this.RefreshWindowContentUrlIE(index, window);
  else
   this.RefreshWindowContentUrlCommon(window);
 },
 RefreshContentUrl: function() {
  this.RefreshWindowContentUrl(null);
 },
 RefreshWindowContentUrlIE: function(index, window) {
  var windowVisible = this.InternalIsWindowVisible(index);
  if(windowVisible)
   this.RefreshWindowContentUrlIECore(index, window);
  else {
   var iframe = this.GetWindowContentIFrameElement(index);
   if(iframe)
    iframe.DXReloadAfterShowRequired = true;
  }
 },
 RefreshWindowContentUrlIECore: function(index, window) {
  try {
   if(!this.GetIframeLoading(index)) {
    var iframe = this.GetWindowContentIFrameElement(index);
    if(iframe)
     iframe.contentWindow.location.reload();
   }
  } catch (e) {
   this.RefreshWindowContentUrlCommon(window);
  }
 },
 RefreshWindowContentUrlCommon: function(window) {
  this.SetWindowContentUrl(window, this.GetWindowContentUrl(window));
 },
 GetContentUrl: function() {
  return this.GetWindowContentUrl(null);
 },
 GetWindowContentUrl: function(window) {
  var index = (window != null) ? window.index : -1;
  if(!this.IsWindowVisible(window))
   return this.GetWindowContentIFrameUrl(index);
  var element = this.GetWindowContentIFrameElement(index);
  return (element != null) ? element.src : "";
 },
 GetContentIFrame: function(window) {
  return this.GetWindowContentIFrame(null);
 },
 GetWindowContentIFrame: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.GetWindowContentIFrameElement(index);
 },
 GetContentIFrameWindow: function() {
  var iframeElement = this.GetContentIFrame();
  return iframeElement.contentWindow;
 },
 SetContentUrl: function(url) {
  this.SetWindowContentUrl(null, url);
 },
 SetWindowContentUrl: function(window, url) {
  var index = (window != null) ? window.index : -1;
  this.SetWindowContentUrlInternal(index, url);
 },
 LoadWindowContentUrl: function(index) {
  var url = this.GetWindowContentIFrameUrl(index);
  this.LoadWindowContentFromUrl(index, url);
 },
 LoadWindowContentFromUrl: function(index, url) {
  var element = this.GetWindowContentIFrameElement(index);
  if(element && element.src != url && element.DXSrcRaw != url) {
   this.SetSrcToIframeElement(index, element, url);
   this.SetWindowContentIFrameUrl(index, element.src);
  }
 },
 SetWindowContentIFrameUrl: function(index, url) {
  this.SetPropertyValue(index, "contentUrl", url);
 },
 SetWindowContentUrlInternal: function(index, url) {
  var element = this.GetWindowContentIFrameElement(index);
  var windowVisible = this.InternalIsWindowVisible(index);
  if(windowVisible && element != null)
   this.SetIframeVisibleForDragging(index, true);
  this.SetWindowContentIFrameUrl(index, url);
  var src = windowVisible ? url : ASPx.Browser.WebKitFamily && ASPx.Browser.Version >= 75 ? "about:blank" : ASPx.SSLSecureBlankUrl;
  if(element == null) {
   this.CreateWindowContentIFrameElement(index, src);
   this.RefreshDimensionsAfterCreateIframe(index);
  }
  else
   this.SetSrcToIframeElement(index, element, src);
  this.ReinitScrollForIframe(index);
 },
 ReinitScrollForIframe: function(index) {
  if(this.HasIframeOnIos(index)) {
   var scrollElement = this.getTouchScrollerElement(index);
   if(scrollElement) {
    var options = this.GetWindowTouchScrollOptions(index);
    ASPx.TouchUIHelper.InitNativeScrolling(scrollElement, options);
    if(!!this.touchUIScrollers[index]) {
     this.touchUIScrollers[index].Destroy();
     this.touchUIScrollers[index] = null;
    }
   }
  }
 },
 EnsureWindowContentUrl: function(index) {
  var contentUrl = this.GetWindowContentIFrameUrl(index);
  if(contentUrl != "")
   this.SetWindowContentUrlInternal(index, contentUrl);
 },
 CreateWindowContentIFrameElement: function(index, src) {
  var content = this.GetContentContainer(index);
  var iframeParent = content;
  content.innerHTML = "";
  content.style.display = "block";
  var iframe = this.CreateContentIFrameElement(index, src);
  this.RequireIFrameHeightAdjusting(index, iframe);
  iframeParent.appendChild(iframe);
  this.InitIFrame(index);
  return iframe;
 },
 InitIFrame: function(index) {
  var contentIFrameElement = this.GetWindowContentIFrameElement(index);
  if(contentIFrameElement) {
   contentIFrameElement.popupControlName = this.name;
   contentIFrameElement.pcWndIndex = index;
   ASPx.Evt.AttachEventToElement(contentIFrameElement, "load", ASPx.PCIframeLoad);
  }
 },
 OnIFrameLoad: function(index) {
  this.SetIframeLoading(index, false);
 },
 RequireIFrameHeightAdjusting: function(index, iframe) {
  if(this.InternalIsWindowVisible(index))
   this.AdjustIFrameHeight(index, iframe);
  else
   this.PostponeIframeAdjusting(index);
 },
 PostponeIframeAdjusting: function(index) {
  this.SetIframeAdjustingPostponed(index, true);
 },
 EnsureIFrameHeightAdjusted: function(index) {
  if(this.GetIframeAdjustingPostponed(index)) {
   var iframe = this.GetWindowContentIFrameElement(index);
   this.AdjustIFrameHeight(index, iframe);
  }
 },
 AdjustIFrameHeight: function(index, iframe) {
 },
 CreateContentIFrameElement: function(index, src) {
  var iframe = document.createElement("IFRAME");
  iframe.id = this.GetWindowContentIFrameElementId(index);
  iframe.scrolling = "auto";
  iframe.frameBorder = 0;
  iframe.style.width = "100%";
  iframe.style.height = "100%";
  iframe.style.overflow = "auto";
  if(ASPx.Browser.Chrome) iframe.style.webkitBackfaceVisibility = "hidden";
  if(ASPx.Browser.IE || ASPx.Browser.Edge)
   iframe.style["-ms-user-select"] = "text";
  var titleText = this.GetWindowContentIFrameTitle(index);
  if(!!titleText)
   iframe.title = titleText;
  this.SetSrcToIframeElement(index, iframe, src);
  return iframe;
 },
 SetSrcToIframeElement: function(index, iframeElement, src) {
  this.SetIframeLoading(index, true);
  iframeElement.src = src;
  if(ASPx.Browser.Chrome && src.indexOf("#"))
   this.PreventScrollingAfterIframeLoaded(iframeElement);
  iframeElement.DXSrcRaw = src;
 },
 PreventScrollingAfterIframeLoaded: function(iframeElement) {
  var docScrollTop = ASPx.GetDocumentScrollTop();
  var onIframeLoadedHandler = function() {
   window.setTimeout(function() {
    ASPx.SetDocumentScrollTop(docScrollTop);
    ASPx.Evt.DetachEventFromElement(iframeElement, "load", onIframeLoadedHandler);
   }, 0);
  };
  ASPx.Evt.AttachEventToElement(iframeElement, "load", onIframeLoadedHandler);
 },
 GetWindowHeaderTextCell: function(index) {
  return this.GetWindowChild(index, "_PWH" + index + "T");
 },
 GetWindowHeaderTextElement: function(index) {
  var element = this.GetWindowHeaderTextCell(index);
  if(element != null) {
   var link = ASPx.GetNodeByTagName(element, "A", 0);
   return link || element;
  }
  return null;
 },
 GetWindowHeaderLinkElement: function(index) {
  var element = this.GetWindowHeaderElement(index);
  return element ? ASPx.GetNodeByClassName(element, PopupControlCssClasses.LinkCssClassName) : null;
 },
 GetWindowHeaderImageCell: function(index) {
  return this.GetWindowChild(index, "_PWH" + index + "I");
 },
 GetWindowFooterTextCell: function(index) {
  return this.GetWindowChild(index, "_PWF" + index + "T");
 },
 GetWindowFooterTextElement: function(index) {
  var element = this.GetWindowFooterTextCell(index);
  if(element != null) {
   var link = ASPx.GetNodeByTagName(element, "A", 0);
   return link || element;
  }
  return null;
 },
 GetWindowFooterLinkElement: function(index) {
  var element = this.GetWindowFooterElement(index);
  return element ? ASPx.GetNodeByClassName(element, PopupControlCssClasses.LinkCssClassName) : null;
 },
 GetWindowFooterImageCell: function(index) {
  return this.GetWindowChild(index, "_PWF" + index + "I");
 },
 GetWindowHeaderImageUrl: function(index) {
  var element = this.GetWindowHeaderImageCell(index);
  return element ? element.src : "";
 },
 SetWindowHeaderImageUrl: function(index, url) {
  var element = this.GetWindowHeaderImageCell(index);
  if(element != null) {
   element.src = url;
  }
 },
 GetWindowFooterImageUrl: function(index) {
  var element = this.GetWindowFooterImageCell(index);
  return element ? element.src : "";
 },
 SetWindowFooterImageUrl: function(index, url) {
  var element = this.GetWindowFooterImageCell(index);
  if(element != null) {
   element.src = url;
  }
 },
 GetWindowHeaderNavigateUrl: function(index) {
  var link = this.GetWindowHeaderLinkElement(index);
  if(link)
   return link.href || ASPx.Attr.GetAttribute(linkEl, "savedhref");
  return "";
 },
 SetWindowHeaderNavigateUrl: function(index, url) {
  var link = this.GetWindowHeaderLinkElement(index);
  if(link) {
   if(ASPx.Attr.IsExistsAttribute(link, "savedhref"))
    ASPx.Attr.SetAttribute(link, "savedhref", url);
   else if(ASPx.Attr.IsExistsAttribute(link, "href"))
    link.href = url;
  }
 },
 GetWindowFooterNavigateUrl: function(index) {
  var link = this.GetWindowFooterLinkElement(index);
  if(link)
   return link.href || ASPx.Attr.GetAttribute(linkEl, "savedhref");
  return "";
 },
 SetWindowFooterNavigateUrl: function(index, url) {
  var link = this.GetWindowFooterLinkElement(index);
  if(link) {
   if(ASPx.Attr.IsExistsAttribute(link, "savedhref"))
    ASPx.Attr.SetAttribute(link, "savedhref", url);
   else if (ASPx.Attr.IsExistsAttribute(link, "href"))
    link.href = url;
  }
 },
 GetWindowHeaderText: function(index) {
  var element = this.GetWindowHeaderTextElement(index);
  if(element != null)
    return element.innerHTML;
  return "";
 },
 SetWindowHeaderText: function(index, text) {
  var element = this.GetWindowHeaderTextElement(index);
  if(element != null) {
   element.innerHTML = text;
   this.CorrectHeaderContentElementHeight(index);
   this.CorrectElementVerticalAlignment(ASPx.AdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index), true);
  }
 },
 GetWindowFooterText: function(index) {
  var element = this.GetWindowFooterTextElement(index);
  if(element != null)
   return element.innerHTML;
  return "";
 },
 SetWindowFooterText: function(index, text) {
  var element = this.GetWindowFooterTextElement(index);
  if(element != null) {
   element.innerHTML = text;
   this.CorrectWindowSizeGripPositionLite(index);
  }
 },
 CorrectWindowSizeGripPositionLite: function(index) {
  var sizeGrip = this.GetWindowSizeGripElement(index);
  if(!sizeGrip || sizeGrip.corrected) return;
  sizeGrip.style[this.rtl ? "marginRight" : "marginLeft"] = "-" + sizeGrip.offsetWidth + "px";
  sizeGrip.style.marginTop = "-" + sizeGrip.offsetHeight + "px";
  sizeGrip.corrected = true;
 },
 GetHeaderFooterHeightCore: function(index) {
  var extenders = [
   this.GetWindowHeaderElement(index),
   this.GetWindowFooterElement(index)
  ], height = 0;
  for(var i = 0; i < extenders.length; i++) {
   if(extenders[i])
    height += extenders[i].offsetHeight;
  }
  return height;
 },
 GetHeaderImageUrl: function() {
  return this.GetWindowHeaderImageUrl(-1);
 },
 SetHeaderImageUrl: function(value) {
  this.SetWindowHeaderImageUrl(-1, value);
 },
 GetFooterImageUrl: function() {
  return this.GetWindowFooterImageUrl(-1);
 },
 SetFooterImageUrl: function(value) {
  this.SetWindowFooterImageUrl(-1, value);
 },
 GetHeaderNavigateUrl: function() {
  return this.GetWindowHeaderNavigateUrl(-1);
 },
 SetHeaderNavigateUrl: function(value) {
  this.SetWindowHeaderNavigateUrl(-1, value);
 },
 GetFooterNavigateUrl: function() {
  return this.GetWindowFooterNavigateUrl(-1);
 },
 SetFooterNavigateUrl: function(value) {
  this.SetWindowFooterNavigateUrl(-1, value);
 },
 GetHeaderText: function() {
  return this.GetWindowHeaderText(-1);
 },
 SetHeaderText: function(value) {
  this.SetWindowHeaderText(-1, value);
 },
 GetFooterText: function() {
  return this.GetWindowFooterText(-1);
 },
 SetFooterText: function(value) {
  this.SetWindowFooterText(-1, value);
 },
 GetVisible: function() {
  return this.IsVisible();
 },
 SetVisible: function(visible) {
  if(visible && !this.IsVisible())
   this.Show();
  else if(!visible && this.IsVisible())
   this.Hide();
 },
 GetStateHiddenFieldName: function() {
  return this.uniqueID + "State";
 },
 GetWindowCountCore: function() {
  return 0;
 },
 IsWindowElementsIDAssigned: function(index) {
  var contentElement = this.GetWindowContentElement(index);
  return ASPx.IsExistsElement(contentElement);
 },
 InitializeDOM: function () {
  var windowElement = this.GetWindowElement(this.GetWindowCountCore() - 1);
  if(windowElement)
   windowElement.dxinit = true;
 },
 IsDOMInitialized: function() {
  var windowElement = this.GetWindowElement(this.GetWindowCountCore() - 1);
  return windowElement && windowElement.dxinit;
 },
 IsDOMDisposed: function() {
  var windowElement = this.GetWindowElement(this.GetWindowCountCore() - 1);
  return !ASPx.IsExistsElement(windowElement);
 },
 OnDispose: function() {
  ASPxClientControl.prototype.OnDispose.call(this);
  this.ClearPopupElementConnection();
 },
 RegisterInControlTree: function(tree) {
  var mainNode = tree.createNode(null, this);
  if(this.HasDefaultWindow())
   this.RegisterRelatedNodeForWindowElement(tree, -1, mainNode);
  for(var i = 0; i < this.GetWindowCount() ; i++)
   this.RegisterRelatedNodeForWindowElement(tree, i, mainNode);
 },
 RegisterRelatedNodeForWindowElement: function(tree, windowElementIndex, mainNode) {
  var windowElement = this.GetWindowElement(windowElementIndex);
  if(windowElement) {
   var childNode = tree.createNode(windowElement.id, null);
   tree.addRelatedNode(mainNode, childNode);
  }
 },
 CorrectWindowHeaderText: function(index) {
  var headerElement = this.GetWindowHeaderElement(index);
  if(!headerElement || headerElement.corrected) return;
  var leftChildrenWidth = 0, rightChildrenWidth = 0, headerContentElement;
  for(var i = 0; i < headerElement.childNodes.length; i++) {
   var child = headerElement.childNodes[i];
   if(!child.offsetWidth) continue;
   if(ASPx.GetElementFloat(child) === "right")
    rightChildrenWidth += child.offsetWidth + ASPx.GetLeftRightMargins(child);
   else if(ASPx.GetElementFloat(child) === "left")
    leftChildrenWidth += child.offsetWidth + ASPx.GetLeftRightMargins(child);
   else if(!headerContentElement)
    headerContentElement = child;
  }
  if(headerContentElement && (leftChildrenWidth > 0 || rightChildrenWidth > 0)) {
   var headerContentElementStyle = ASPx.GetCurrentStyle(headerContentElement);
   var originalMarginLeft = parseInt(headerContentElementStyle.marginLeft);
   var originalMarginRight = parseInt(headerContentElementStyle.marginRight);
   ASPx.SetStyles(headerContentElement, {
    marginLeft: leftChildrenWidth + originalMarginLeft,
    marginRight: rightChildrenWidth + originalMarginRight
   });
   this.CorrectHeaderContentElementHeight(index);
  }
  headerElement.corrected = true;
 },
 CorrectHeaderContentElementHeight: function(index) {
  var headerElement = this.GetWindowHeaderElement(index),
   headerContentElement = ASPx.GetChildByClassName(headerElement, PopupControlCssClasses.HeaderContentCssClassName);
  if(!headerElement || !headerContentElement) return;
  if(headerContentElement.style.height)
   headerContentElement.style.height = "";
  var contentElementHeight = ASPx.GetClearClientHeight(headerElement) - this.getTopBottomBordersAndPaddingsSummaryValue(headerContentElement),
   lineHeightForTextVerticalAlign = contentElementHeight,
   windowHeaderTextCell = this.GetWindowHeaderTextCell(index);
  if(windowHeaderTextCell)
   lineHeightForTextVerticalAlign -= this.getTopBottomBordersAndPaddingsSummaryValue(windowHeaderTextCell);
  ASPx.SetStyles(headerContentElement, { lineHeight: lineHeightForTextVerticalAlign, height: contentElementHeight }, false);
 },
 CorrectFooterTextElementWidth: function(index) {
  var footerElement = this.GetWindowFooterElement(index);
  var footerContentElement = ASPx.GetChildByClassName(footerElement, PopupControlCssClasses.FooterContentCssClassName);
  var footerTextElement = this.GetWindowFooterTextElement(index);
  var footerImageElement = this.GetWindowFooterImageCell(index);
  if(!footerElement || !footerContentElement || !footerTextElement)
   return;
  var footerTextMaxWidth = "";
  if(footerImageElement) {
   var footerTextMaxWidthCorrection = footerImageElement.offsetWidth + ASPx.GetLeftRightMargins(footerImageElement);
   footerTextMaxWidth = "calc(100% - " + footerTextMaxWidthCorrection + "px)";
  }
  ASPx.SetStyles(footerTextElement, { maxWidth: footerTextMaxWidth }, false);
 },
 OnBeforeDropdownShow: function() {
  var element = this.GetWindowElement(-1);
  if(!ASPx.GetElementDisplay(element)) {
   element.style.visibility = "hidden";
  }
  this.SetWindowDisplay(-1, true);
  if(this.adaptivityEnabled) {
   ASPx.SetElementDisplay(this.GetModalWrapperElement(-1), true);
   this.SetAdaptiveModalMode(-1, this.NeedAdaptiveModalMode());
  }
 },
 SetWindowDisplay: function(index, value) {
  var pcwElement = this.GetWindowElement(index);
  ASPx.SetElementDisplay(pcwElement, value);
 },
 getWindowHorizontalAlign: function(element) {
  return this.popupHorizontalAlign;
 },
 getWindowVerticalAlign: function(element) {
  return this.popupVerticalAlign;
 },
 getWindowHorizontalOffset: function(element) {
  return this.popupHorizontalOffset;
 },
 getWindowVerticalOffset: function(element) {
  return this.popupVerticalOffset;
 },
 GetHorizontalAlign: function() {
  return this.popupHorizontalAlign;
 },
 GetVerticalAlign: function() {
  return this.popupVerticalAlign;
 },
 GetPopupHorizontalOffset: function() {
  return this.popupHorizontalOffset;
 },
 SetPopupHorizontalOffset: function(offset) {
  this.popupHorizontalOffset = offset;
 },
 SetPopupVerticalOffset: function(offset) {
  this.popupVerticalOffset = offset;
 },
 GetPopupVerticalOffset: function() {
  return this.popupVerticalOffset;
 },
 ShowAtElement: function(htmlElement, savePopupElement) {
  this.ShowWindowAtElementByIndex(-1, htmlElement, savePopupElement);
 },
 ShowAtElementByID: function(id) {
  var htmlElement = document.getElementById(id);
  this.ShowAtElement(htmlElement);
 },
 ShowWindowAtElementByIndex: function(index, htmlElement, savePopupElement) {
  var lastIndexBackup = this.GetLastShownPopupElementIndex(index);
  this.ShowWindowByIndex(index, this.AddPopupElementInternal(index, htmlElement));
  if(!savePopupElement)
   this.RemovePopupElementInternal(index, htmlElement);
  this.SetLastShownPopupElementIndex(index, lastIndexBackup);
 },
 ShowWindowByIndex: function(index, popupElementIndex) {
  if(!this.isInitialized)
   return;
  if(popupElementIndex === undefined)
   popupElementIndex = this.GetLastShownPopupElementIndex(index);
  this.DoShowWindowCore(index, ASPx.InvalidPosition, ASPx.InvalidPosition, popupElementIndex, false, true);
 },
 DoShowWindowCore: function(index, x, y, popupElementIndex, closeOtherWindows, allowChangeZIndex, evt, closeOtherReason) {
 },
 DoShowWindow: function(index, popupElementIndex, evt) {
  if(!this.InternalIsWindowVisible(index)) {
   var x = ASPx.Evt.GetEventX(evt);
   var y = ASPx.Evt.GetEventY(evt);
   this.DoShowWindowCore(index, x, y, popupElementIndex, true, true, evt, ASPxClientPopupControlCloseReason.OuterMouseClick);
  }
 },
 SetWindowPos: function(index, element, x, y) {
  ASPx.SetStyles(element, { left: x, top: y });
  this.DoShowWindowIFrame(index, x, y, ASPx.InvalidDimension, ASPx.InvalidDimension);
  this.SetIsDragged(index, true);
  this.SetWindowLeft(index, ASPx.GetAbsoluteX(element));
  this.SetWindowTop(index, ASPx.GetAbsoluteY(element));
  this.UpdateWindowsStateCookie();
 },
 CorrectPopupPositionForClientWindow: function(element, popupPosition, isX) {
  if(element.isPopupPositionCorrectionOn && this.isPopupFullCorrectionOn || this.forceAdjustPositionToClientScreen) {
   popupPosition.position = ASPx.PopupUtils.AdjustPositionToClientScreen(element, popupPosition.position, this.rtl, isX);
  }
  return popupPosition;
 },
 GetClientPopupPos: function(element, popupElement, pos, isX, isDragged) {
  var index = this.GetWindowIndex(element);
  var popupPosition = null;
  if(this.GetIsMaximizedOnWebKitTouch(index))
   return new ASPx.PopupPosition(ASPx.PrepareClientPosForElement(0, element, isX), false);
  if(isDragged)
   popupPosition = new ASPx.PopupPosition(!this.IsValidPosition(pos) ? this.GetPosition(index, isX) : pos, false);
  else
   popupPosition = isX ? this.GetClientPopupPosX(element, popupElement, pos) : this.GetClientPopupPosY(element, popupElement, pos);
  popupPosition.position = ASPx.PrepareClientPosForElement(popupPosition.position, element, isX);
  if(ASPx.Browser.Firefox && ASPx.Browser.Version < 3 && this.GetWindowModalElement(index))
   popupPosition.position -= isX ? ASPx.GetDocumentScrollLeft() : ASPx.GetDocumentScrollTop();
  return popupPosition;
 },
 GetClientPopupPosX: function(element, popupElement, x) {
  var mainElement = this.GetWindowMainCell(element);
  var popupPosition = ASPx.PopupUtils.GetPopupAbsoluteX(mainElement, popupElement, this.getWindowHorizontalAlign(element), this.getWindowHorizontalOffset(element),
   x, this.GetWindowLeft(this.GetWindowIndex(element)), this.rtl, this.isPopupFullCorrectionOn);
  return this.CorrectPopupPositionForClientWindow(element, popupPosition, true);
 },
 GetClientPopupPosY: function(element, popupElement, y) {
  var mainElement = this.GetWindowMainCell(element);
  var popupPosition = ASPx.PopupUtils.GetPopupAbsoluteY(mainElement, popupElement, this.getWindowVerticalAlign(element), this.getWindowVerticalOffset(element),
   y, this.GetWindowTop(this.GetWindowIndex(element)), this.isPopupFullCorrectionOn, this.usedInDropDown, this.usedInDropDown);
  return this.usedInDropDown ? popupPosition : this.CorrectPopupPositionForClientWindow(element, popupPosition, false);
 },
 UpdateWindowPositionInternal: function(index, popupElement) {
  var positionUpdated = false,
   element = this.GetWindowElement(index);
  if(this.InternalIsWindowVisible(index) && element != null) {
   var horizontalPopupPosition;
   if(this.popupHorizontalAlign === ASPx.PopupUtils.WindowCenterAlignIndicator && window.innerWidth <= element.offsetWidth) {
    var scrollDiff = aspxGetPopupControlCollection().GetDocScrollDifference(),
     scrollInProgress = scrollDiff.horizontal !== 0 || scrollDiff.vertical !== 0;
    horizontalPopupPosition = scrollInProgress ? ASPx.PxToInt(element.style.left) : this.GetClientPopupPos(element, popupElement, ASPx.InvalidPosition, true, false);
   } else
    horizontalPopupPosition = this.GetClientPopupPos(element, popupElement, ASPx.InvalidPosition, true, false);
   var verticalPopupPosition = this.GetClientPopupPos(element, popupElement, ASPx.InvalidPosition, false, false);
   this.SetWindowPos(index, element, horizontalPopupPosition.position, verticalPopupPosition.position);
   positionUpdated = true;
  }
  return positionUpdated;
 },
 UpdatePositionAtElement: function(popupElement) {
  this.UpdateWindowPositionAtElement(null, popupElement);
 },
 UpdateWindowPositionAtElement: function(window, popupElement) {
  var index = (window != null) ? window.index : -1;
  this.UpdateWindowPositionInternal(index, popupElement);
 },
 TryAutoUpdatePosition: function(index) {
  if(this.GetAutoUpdatePosition(index))
   this.UpdateWindowPositionInternal(index, this.GetPopupElement(index, this.GetLastShownPopupElementIndex(index)));
 },
 GetLastShownPopupElementIndex: function(windowIndex) {
  var info = this.GetLastUsedPopupElementInfo(windowIndex);
  return ASPx.GetDefinedValue(info.shownPEIndex, 0);
 },
 SetLastShownPopupElementIndex: function(windowIndex, popupElementIndex) {
  var info = this.GetLastUsedPopupElementInfo(windowIndex);
  info.shownPEIndex = popupElementIndex;
 },
 GetLastUsedPopupElementInfo: function(index) {
  if(0 <= index && index < this.GetWindowCountCore())
   return this.windowsLastUsedPopupElementInfoList[index];
  return this.defaultLastUsedPopupElementInfo;
 },
 GetPopupElement: function(index, popupElementIndex) {
  var popupElement = this.GetPopupElementList(index)[popupElementIndex];
  return popupElement ? popupElement : null;
 },
 GetPopupElementList: function(index) {
  if(0 <= index && index < this.GetWindowCountCore())
   return this.windowsPopupElementList[index];
  return this.defaultWindowPopupElementList;
 },
 PopulatePopupElementsByIds: function(index) {
  var ids = this.GetPopupElementIDList(index);
  for(var i = 0; i < ids.length; i++) {
   var popupElement = ASPx.PopupUtils.FindPopupElementById(ids[i]);
   if(popupElement)
    this.AddWindowPopupElement(index, popupElement);
  }
 },
 PopulatePopupElements: function(index) {
  this.PopulatePopupElementsByIds(index);
 },
 SetPopupElementIDByIndex: function(index, popupElementId) {
  this.RemoveWindowAllPopupElements(index);
  this.SetPopupElementIDs(index, popupElementId.split(';'));
  if(aspxGetPopupControlCollection().IsDisappearTimerActive()) {
   aspxGetPopupControlCollection().ClearDisappearTimer();
   this.Hide(index);
  }
  this.PopulatePopupElements(index);
 },
 RefreshPopupElementConnection: function() {
  this.ClearPopupElementConnection();
  var index = this.HasDefaultWindow() ? -1 : 0;
  for(; index < this.GetWindowCount(); index++)
   this.PopulatePopupElements(index);
 },
 ClearPopupElementConnection: function() {
  var index = this.HasDefaultWindow() ? -1 : 0;
  for(; index < this.GetWindowCount(); index++)
   this.RemoveWindowAllPopupElements(index);
 },
 GetPopupElementIDList: function(index) {
  if(0 <= index && index < this.GetWindowCountCore())
   return this.windowsPopupElementIDList[index];
  return this.defaultWindowPopupElementIDList;
 },
 SetPopupElementIDs: function(index, ids) {
  if(0 <= index && index < this.GetWindowCountCore())
   this.windowsPopupElementIDList[index] = ids;
  this.defaultWindowPopupElementIDList = ids;
 },
 AddPopupElementInternal: function(index, element) {
  var popupElements = this.GetPopupElementList(index);
  for(var i = 0; i < popupElements.length; i++) {
   if(!popupElements[i]) {
    popupElements[i] = element;
    return i;
   }
  }
  popupElements.push(element);
  return popupElements.length - 1;
 },
 RemovePopupElementInternal: function(index, element) {
  var popupElements = this.GetPopupElementList(index);
  for(var i = 0; i < popupElements.length; i++) {
   if(popupElements[i] == element) {
    popupElements[i] = null;
    return;
   }
  }
 },
 AddPopupElement: function(popupElement) {
  this.AddWindowPopupElement(-1, popupElement);
 },
 AddWindowPopupElement: function(index, popupElement) {
  var popupElementIndex = this.AddPopupElementInternal(index, popupElement);
  this.SetPopupElementReference(index, popupElement, popupElementIndex, true);
 },
 RemovePopupElement: function(popupElement) {
  this.RemoveWindowPopupElement(-1, popupElement);
 },
 RemoveWindowPopupElement: function(index, popupElement) {
  this.RemovePopupElementInternal(index, popupElement);
  this.SetPopupElementReference(index, popupElement, null, false);
 },
 SetPopupElementReference: function(index, popupElement, popupElementIndex, attach) {
  if(!ASPx.IsExistsElement(popupElement)) return;
  var setReferenceFunction = this.getAttachReferenceFunction(attach);
  var setContextMenuReferenceFunction = attach ? ASPx.Evt.AttachContextMenuToElement : ASPx.Evt.DetachContextMenuFromElement;
  var windowPopupAction = this.GetWindowPopupAction(index);
  if(windowPopupAction == "LeftMouseClick")
   setReferenceFunction(popupElement, "mouseup", aspxPEMEvent);
  else if(windowPopupAction == "RightMouseClick")
   setContextMenuReferenceFunction(popupElement, aspxPEMEvent);
  else if(windowPopupAction == "MouseOver") {
   var windowElement = this.GetWindowElement(index);
   setReferenceFunction(popupElement, "mouseover", ASPx.PopupUtils.OverControl.OnMouseOver);
   setReferenceFunction(windowElement, "mouseover", aspxPWEMOver);
   if(attach)
    this.SetMSTouchMouseOverReference(popupElement, windowElement, this.name, index, this.appearAfter);
  }
  if(windowPopupAction == "LeftMouseClick" || windowPopupAction == "RightMouseClick") {
   setReferenceFunction(popupElement, "mousedown", aspxPEMEvent);
  }
  if(attach) {
   popupElement.DXPopupElementControl = this;
   popupElement.DXPopupWindowIndex = index;
   popupElement.DXPopupElementIndex = popupElementIndex;
  } else
   popupElement.DXPopupElementControl = popupElement.DXPopupWindowIndex = popupElement.DXPopupElementIndex = undefined;
 },
 getAttachReferenceFunction: function(attach) {
  return attach ? ASPx.Evt.AttachEventToElement : ASPx.Evt.DetachEventFromElement;
 },
 SetMSTouchMouseOverReference: function(popupElement, windowElement, popupName, index, appearAfter) {
  if(!ASPx.TouchUIHelper.pointerEnabled) return;
  popupElement.dxMsTouchGesture = popupElement.dxMsTouchGesture ||
   ASPx.TouchUIHelper.msTouchCreateGesturesWrapper(popupElement, function(evt) {
    window.setTimeout(function() {
     aspxGetPopupControlCollection().SetAppearTimer(popupName, index, popupElement.DXPopupElementIndex, appearAfter, evt);
    }, 0);
   });
  windowElement.dxMsTouchGesture = windowElement.dxMsTouchGesture || ASPx.TouchUIHelper.msTouchCreateGesturesWrapper(windowElement, function(evt) {
   window.setTimeout(function() {
    aspxGetPopupControlCollection().ClearDisappearTimer();
   }, 0);
  });
 },
 GetLastOverPopupElementIndex: function(windowIndex) {
  var info = this.GetLastUsedPopupElementInfo(windowIndex);
  return ASPx.GetDefinedValue(info.overPEIndex, -1);
 },
 SetLastOverPopupElementIndex: function(windowIndex, popupElementIndex) {
  var info = this.GetLastUsedPopupElementInfo(windowIndex);
  info.overPEIndex = popupElementIndex;
 },
 OnPopupElementMouseOver: function(evt, popupElement) {
  if(popupElement != null) {
   var index = popupElement.DXPopupWindowIndex;
   var isVisible = this.InternalIsWindowVisible(index);
   var popupElementIndex = popupElement.DXPopupElementIndex;
   if(this.GetLastOverPopupElementIndex(index) != popupElementIndex) {
    if(aspxGetPopupControlCollection().IsAppearTimerActive())
     aspxGetPopupControlCollection().ClearAppearTimer();
    if(aspxGetPopupControlCollection().IsDisappearTimerActive())
     aspxGetPopupControlCollection().ClearDisappearTimer();
    if(isVisible) {
     this.DoHideWindow(index, false, ASPxClientPopupControlCloseReason.MouseOut);
     isVisible = false;
    }
   }
   if(!isVisible) {
    aspxGetPopupControlCollection().SetAppearTimer(this.name, index, popupElement.DXPopupElementIndex, this.appearAfter, evt);
    aspxGetPopupControlCollection().InitOverObject(this, index, evt);
   }
   this.SetLastOverPopupElementIndex(index, popupElementIndex);
  }
 },
 OnPopupElementMouseOut: function(evt, popupElement) {
 },
 RemoveAllPopupElements: function() {
  this.RemoveWindowAllPopupElements(-1);
 },
 RemoveWindowAllPopupElements: function(index) {
  var popupElements = this.GetPopupElementList(index);
  for(var i = 0; i < popupElements.length; i++)
   this.RemoveWindowPopupElement(index, popupElements[i]);
 },
 GetWindowCurrentPopupElementByIndex: function(index) {
  var popupElement = this.GetPopupElement(index, this.GetLastShownPopupElementIndex(index));
  if(popupElement && popupElement.DXPopupElementControl)
   return popupElement;
  return null;
 },
 GetWindowCurrentPopupElementIndexByWindowIndex: function(windowIndex) {
  var popupElement = this.GetWindowCurrentPopupElementByIndex(windowIndex);
  return popupElement ? popupElement.DXPopupElementIndex : -1;
 },
 GetIsMaximizedOnWebKitTouch: function(index) {
  return false;
 },
 ProcessAccessibleElementOnHide: function() {
  if(this.accessibilityCompliant) {
   var focusElement = this.accessibleFocusElement ? this.accessibleFocusElement : this.GetCurrentPopupElement();
   ASPx.AccessibilityUtils.SetFocusAccessibleCore(focusElement);
   this.accessibleFocusElement = null;
  }
 },
 OnControlsInitialized: function() {
  this.InitializeAccessibleNavigationCore();
  setTimeout(function() {
   ASPx.GetControlCollection().ControlsInitialized.RemoveHandler(this.OnControlsInitialized, this);
  }.aspxBind(this), 0);
 },
 InitializeAccessibleNavigation: function() {
  this.Shown.AddHandler(this.InitializeAccessibleNavigationCore.aspxBind(this));
 },
 InitializeAccessibleNavigationCore: function() {
  this.resetFocusableElements();
  var focusableElement = this.getFirstFocusableElement();
  if(focusableElement) {
   var currentWindowContentCell = this.GetWindowContentElement(-1);
   var contentFirstActionElement = ASPx.FindFirstChildActionElement(currentWindowContentCell);
   if(contentFirstActionElement && contentFirstActionElement !== focusableElement)
    focusableElement = contentFirstActionElement;
   if(!this.preventAccessibilityFocus)
    ASPx.AccessibilityUtils.SetFocusAccessible(focusableElement);
   this.SetLoopingFocusHandlers();
  }
 },
 resetFocusableElements: function() {
  if(this.firstFocusableElement)
   ASPx.Evt.DetachEventFromElement(this.firstFocusableElement, "keydown", this.focusLastElementHandler);
  if(this.lastFocusableElement)
   ASPx.Evt.DetachEventFromElement(this.lastFocusableElement, "keydown", this.focusFirstElementHandler);
  this.firstFocusableElement = null;
  this.lastFocusableElement = null;
 },
 getFirstFocusableElement: function() {
  if(!this.firstFocusableElement)
   this.firstFocusableElement = ASPx.FindFirstChildActionElement(this.GetCurrentWindowElement());
  return this.firstFocusableElement;
 },
 getLastFocusableElement: function() {
  if(!this.lastFocusableElement)
   this.lastFocusableElement = ASPx.FindLastChildActionElement(this.GetCurrentWindowElement());
  return this.lastFocusableElement;
 },
 SetLoopingFocusHandlers: function() {
  ASPx.Evt.AttachEventToElement(this.getFirstFocusableElement(), "keydown", this.focusLastElementHandler);
  ASPx.Evt.AttachEventToElement(this.getLastFocusableElement(), "keydown", this.focusFirstElementHandler);
 },
 loopFocusHandler: function(evt, isLastFocusableElement) {
  var keyCode = ASPx.Evt.GetKeyCode(evt);
  if(keyCode !== ASPx.Key.Tab)
   return;
  var targetElement = isLastFocusableElement ? this.getLastFocusableElement() : this.getFirstFocusableElement();
  if(ASPx.Evt.GetEventSource(evt) !== targetElement)
   return;
  var elementToFocus = null;
  if(!isLastFocusableElement && evt.shiftKey)
   elementToFocus = this.getLastFocusableElement();
  else if(isLastFocusableElement && !evt.shiftKey)
   elementToFocus = this.getFirstFocusableElement();
  if(elementToFocus) {
   ASPx.AccessibilityUtils.SetFocusAccessible(elementToFocus);
   ASPx.Evt.PreventEventAndBubble(evt);
  }
 },
 getLeftRightBordersAndPaddingsSummaryValue: function(element, currentStyle) {
  return ASPx.GetLeftRightBordersAndPaddingsSummaryValue(element, currentStyle);
 },
 getTopBottomBordersAndPaddingsSummaryValue: function(element, currentStyle) {
  return ASPx.GetTopBottomBordersAndPaddingsSummaryValue(element, currentStyle);
 },
 AdjustModalElementBounds: function(element) {
 },
 RefreshDimensionsAfterCreateIframe: function(index) {
 },
 UpdatePositionAfterCallback: function(windowIndex) {
 }
});
ASPxClientPopupControlBase.AnimationType = {
 Fade: "fade",
 Slide: "slide",
 Auto: "auto",
 None: "none"
};
var ASPxClientPopupControl = ASPx.CreateClass(ASPxClientPopupControlBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.popupActionArray = [];
  this.windowsPopupElementIDList = [];
  this.windowsPopupElementList = [];
  this.windowsLastUsedPopupElementInfoList = [];
  this.windowsIsPopupedList = [];
  this.windowsPopupReasonMouseEventList = [];
  this.defaultPopupReasonMouseEvent = null;
  this.modal = false;
  this.modalArray = [];
  this.isDraggedArray = [];
  this.closeActionArray = [];
  this.showOnPageLoadArray = [];
  this.windows = [];
  this.windowCount = 0;
  this.closeOnEscapeArray = [];
  this.leftArray = [];
  this.contentUrlArray = [];
  this.contentUrlIFrameTitleArray = [];
  this.iframeLoadingArray = [];
  this.iframeAdjustingPostponedArray = [];
  this.isResizedArray = [];
  this.zIndexArray = [];
  this.topArray = [];
  this.shownArray = [];
  this.heightArray = [];
  this.widthArray = [];
  this.widthFromServer = false;
  this.widthFromServerArray = [];
  this.minHeightArray = [];
  this.minWidthArray = [];
  this.maxHeightArray = [];
  this.maxWidthArray = [];
  this.hideBodyScrollWhenModal = true;
  this.hideBodyScrollWhenModalArray = [];
  this.hideBodyScrollWhenMaximized = true;
  this.canScrollViewPort = false;
  this.canScrollViewPortArray = [];
  this.autoUpdatePositionArray = [];
  this.cachedSizeArray = [];
  this.enableContentScrollingArray = [];
  this.contentOverflowXArray = [];
  this.contentOverflowYArray = [];
  this.isPinned = false;
  this.isPinnedArray = [];
  this.pinX = 0;
  this.pinXArray = [];
  this.pinY = 0;
  this.pinYArray = [];
  this.lockScroll = 0;
  this.isCollapsed = false;
  this.isCollapsedArray = [];
  this.isCollapsedInit = false;
  this.isCollapsedInitArray = [];
  this.collapseExecutingLockCount = 0;
  this.isMaximized = false;
  this.isMaximizedArray = [];
  this.isMaximizedInit = false;
  this.isMaximizedInitArray = [];
  this.maximizationExecutingLockCount = 0;
  this.restoredWindowValues = {};
  this.restoredWindowValuesArray = [];
  this.browserResizingForMaxWindowLockCount = 0;
  this.updateRestoredWindowSizeLockCount = 0;
  this.touchUIScrollers = {};
  this.adaptivityEnabled = false;
  this.DefaultModalMaxWidth = 500;
  this.DefaultModalMinWidth = 0;
  this.stretchVertically = false;
  this.stretchVerticallyArray = [];
  this.fixedHeader = true;
  this.fixedHeaderArray = [];
  this.fixedFooter = true;
  this.fixedFooterArray = [];
  this.modalMinHeight = null;
  this.modalMinHeightArray = [];
  this.modalMinWidth = null;
  this.modalMinWidthArray = [];
  this.modalMaxHeight = null;
  this.modalMaxHeightArray = [];
  this.modalMaxWidth = null;
  this.modalMaxWidthArray = [];
  this.modalVerticalAlign = ModalAlign.WindowTop;
  this.modalHorizontalAlign = ModalAlign.WindowCenter;
  this.adaptiveModalMode = false;
  this.adaptiveModalModeArray = [];
  this.switchAtWindowInnerWidth = ASPx.MaxMobileWindowWidth;
  this.PinnedChanged = new ASPxClientEvent();
  this.AdaptiveModeChanged = new ASPxClientEvent();
 },
 SetData: function(data){
  if(data.windows)
   this.CreateWindows(data.windows);
 },
 InlineInitialize: function() {
  ASPxClientControl.prototype.InlineInitialize.call(this);
  this.InitializeArrayCores();
 },
 Initialize: function() {
  ASPxClientPopupControlBase.prototype.Initialize.call(this);
  aspxGetPopupControlCollection().EnsureSaveScrollState();
  if(this.HasDefaultWindow())
   this.InitializeWindow(-1);
  for(var i = 0; i < this.GetWindowCount() ; i++)
   this.InitializeWindow(i);
  this.InitializeScrollbars();
 },
 InitializeEnableContentScrolling: function() {
  for(var windowIndex = 0; windowIndex < this.GetWindowCount() ; windowIndex++) {
   var contentOverflowX = this.GetWindowOverflowX(windowIndex);
   var contentOverflowY = this.GetWindowOverflowY(windowIndex);
   this.enableContentScrollingArray.push(contentOverflowX != "None" || contentOverflowY != "None");
  }
  ASPxClientPopupControlBase.prototype.InitializeEnableContentScrolling.call(this);
 },
 InitializeScrollbars: function() {
  if(!ASPx.Browser.WebKitTouchUI && !ASPx.Browser.MSTouchUI && (!ASPx.Browser.WindowsPhonePlatform || !ASPx.Browser.IE))
   return;
  this.ForEachWindow(function(windowIndex) {
   if(this.GetEnableContentScrolling(windowIndex)) {
    var scrollElement = this.getTouchScrollerElement(windowIndex);
    if(scrollElement) {
     if(ASPx.Browser.MSTouchUI)
      scrollElement.style.touchAction = "auto";
     else {
      var options = this.GetWindowTouchScrollOptions(windowIndex);
      if(!this.HasIframeOnIos(windowIndex))
       this.touchUIScrollers[windowIndex] = ASPx.TouchUIHelper.MakeScrollable(scrollElement, options);
     }
    }
   }
  }.aspxBind(this));
 },
 GetWindowTouchScrollOptions: function (index) {
  var contentOverflowX = this.GetWindowOverflowX(index),
   contentOverflowY = this.GetWindowOverflowY(index);
  return {
   showHorizontalScrollbar: contentOverflowX === "Auto" || contentOverflowX === "Scroll",
   showVerticalScrollbar: contentOverflowY === "Auto" || contentOverflowY === "Scroll"
  };
 },
 ForEachWindow: function(callback) {
  var indices = [];
  if(this.HasDefaultWindow())
   indices.push(-1);
  else {
   for(var i = 0; i < this.GetWindowCount(); i++)
    indices.push(i);
  }
  ASPx.Data.ForEach(indices, callback);
 },
 GetMainElementId: function() {
  return null;
 },
 preventParentOverlowOnIos: function(index) {
  if(!ASPx.Browser.MacOSMobilePlatform) return;
  var parent = this.getParentPopupControl(index);
  if(parent)
   parent.popupControl.changeContentOverflow(parent.windowIndex);
 },
 restoreParentOverflowOnIos: function(index) {
  if(!ASPx.Browser.MacOSMobilePlatform) return;
  var parent = this.getParentPopupControl(index);
  if(parent)
   parent.popupControl.restoreContentOverflow(parent.windowIndex);
 },
 changeContentOverflow: function(index) {
  var scrollerElement = this.getTouchScrollerElement(index);
  if(!scrollerElement) return;
  ASPx.Attr.ChangeStyleAttribute(scrollerElement, "overflow", "visible");
  ASPx.Attr.ChangeStyleAttribute(scrollerElement, "overflowX", "visible");
  ASPx.Attr.ChangeStyleAttribute(scrollerElement, "overflowY", "visible");
 },
 restoreContentOverflow: function(index) {
  var scrollerElement = this.getTouchScrollerElement(index);
  if(!scrollerElement) return;
  ASPx.Attr.RestoreStyleAttribute(scrollerElement, "overflow");
  ASPx.Attr.RestoreStyleAttribute(scrollerElement, "overflowX");
  ASPx.Attr.RestoreStyleAttribute(scrollerElement, "overflowY");
 },
 UpdateScrollbar: function(index) {
  var touchUIScroller = this.touchUIScrollers[index];
  if(!touchUIScroller)
   return;
  var scrollElement = this.GetContentContainer(index);
  if(scrollElement)
   touchUIScroller.ChangeElement(scrollElement);
 },
 InitializeArrayCores: function() {
  if(this.GetWindowCountCore() > 0) {
   this.InitializeWindowPopupElementList();
   this.InitializeWindowPopupElementIDList();
   this.InitializeWindowLastUsedPopupElementInfoList();
   this.InitializeArray(this.shownArray);
   this.InitializeArray(this.windowsPopupReasonMouseEventList, null);
   this.InitializeArray(this.windowsIsPopupedList, false);
   this.InitializeArray(this.contentUrlArray, "");
   this.InitializeArray(this.contentUrlIFrameTitleArray, "");
   this.InitializeArray(this.popupActionArray, this.popupAction);
   this.InitializeArray(this.closeActionArray, this.closeAction);
   this.InitializeArray(this.showOnPageLoadArray, false);
   this.InitializeArray(this.isDraggedArray, false);
   this.InitializeArray(this.isPinnedArray, false);
   this.InitializeArray(this.isCollapsedArray, false);
   this.InitializeArray(this.isCollapsedInitArray, false);
   this.InitializeArray(this.isMaximizedArray, false);
   this.InitializeArray(this.isMaximizedInitArray, false);
   this.InitializeArray(this.restoredWindowValuesArray, {});
   this.InitializeArray(this.iframeAdjustingPostponedArray, {});
   this.InitializeArray(this.isResizedArray, false);
   this.InitializeArray(this.zIndexArray, -1);
   this.InitializeArray(this.leftArray, 0);
   this.InitializeArray(this.topArray, 0);
   this.InitializeArray(this.widthArray, constants.DEFAULT_WINDOW_WIDTH);
   this.InitializeArray(this.heightArray, constants.DEFAULT_WINDOW_HEIGHT);
   this.InitializeArray(this.widthFromServerArray, false);
   this.InitializeArray(this.pinXArray, 0);
   this.InitializeArray(this.pinYArray, 0);
   this.InitializeArray(this.minWidthArray, null);
   this.InitializeArray(this.minHeightArray, null);
   this.InitializeArray(this.maxWidthArray, null);
   this.InitializeArray(this.maxHeightArray, null);
   this.InitializeArray(this.cachedSizeArray, null);
   this.InitializeArray(this.iframeLoadingArray, false);
   this.InitializeArray(this.autoUpdatePositionArray, false);
   this.InitializeArray(this.hideBodyScrollWhenModalArray, true);
   this.InitializeArray(this.canScrollViewPortArray, false);
   this.InitializeArray(this.closeOnEscapeArray, this.closeOnEscape);
   this.InitializeArray(this.modalArray, false);
   this.InitializeArray(this.adaptiveModalModeArray, false);
   this.InitializeArray(this.fixedHeaderArray, true);
   this.InitializeArray(this.fixedFooterArray, true);
   this.InitializeArray(this.modalMinWidthArray, null);
   this.InitializeArray(this.modalMinHeightArray, null);
   this.InitializeArray(this.modalMaxWidthArray, null);
   this.InitializeArray(this.modalMaxHeightArray, null);
   this.InitializeArray(this.stretchVerticallyArray, false);
  }
 },
 InitializeArray: function(array, defaultValue) {
  if(array.length == 0) {
   for(var i = 0; i < this.GetWindowCountCore() ; i++)
    array[i] = defaultValue;
  }
 },
 InitializeWindowPopupElementIDList: function() {
  for(var i = 0; i < this.GetWindowCountCore() ; i++) {
   if(!this.windowsPopupElementIDList[i])
    this.windowsPopupElementIDList[i] = [];
  }
 },
 InitializeWindowPopupElementList: function() {
  for(var i = 0; i < this.GetWindowCountCore() ; i++) {
   if(!this.windowsPopupElementList[i])
    this.windowsPopupElementList[i] = [];
  }
 },
 InitializeWindowLastUsedPopupElementInfoList: function() {
  for(var i = 0; i < this.GetWindowCountCore() ; i++) {
   if(!this.windowsLastUsedPopupElementInfoList[i])
    this.windowsLastUsedPopupElementInfoList[i] = {};
  }
 },
 AllowMouseDown: function(evt, index) {
  return ASPxClientPopupControlBase.prototype.AllowMouseDown.call(this, evt, index) &&
   !this.PreventHeaderButtonMouseDownBubbling(evt, this.GetWindowPinButton(index)) &&
   !this.PreventHeaderButtonMouseDownBubbling(evt, this.GetWindowCollapseButton(index)) &&
   !this.PreventHeaderButtonMouseDownBubbling(evt, this.GetWindowMaximizeButton(index));
 },
 AssignHeaderButtonsEvents: function(index) {
  ASPxClientPopupControlBase.prototype.AssignHeaderButtonsEvents.call(this, index);
  this.AttachClickToHeaderButton(index, this.GetWindowPinButton(index), "ASPx.PWPBClick");
  this.AttachClickToHeaderButton(index, this.GetWindowCollapseButton(index), "ASPx.PWMNBClick");
  this.AttachClickToHeaderButton(index, this.GetWindowMaximizeButton(index), "ASPx.PWMXBClick");
 },
 InitializeWindow: function(index) {
  ASPxClientPopupControlBase.prototype.InitializeWindow.call(this, index);
  if(this.adaptivityEnabled) {
   ASPx.Evt.AttachEventToElement(this.GetModalWrapperElement(index), "scroll", function(e) { this.OnModalWrapperScroll(e, index); }.aspxBind(this));
   if(ASPx.Browser.WebKitTouchUI) {
    ASPx.Evt.AttachEventToElement(this.GetModalWrapperElement(index), "touchstart", function(e) { this.OnModalWrapperTouchStart(e); }.aspxBind(this));
    ASPx.Evt.AttachEventToElement(this.GetModalWrapperElement(index), "touchmove", function(e) { this.OnModalWrapperTouchMove(e, index); }.aspxBind(this));
   }
  } else {
   var modalElement = this.GetWindowModalElement(index);
   if(modalElement)
    ASPx.Evt.AttachEventToElement(modalElement, "mousedown", aspxPWMEMDown);
  }
 },
 BrowserWindowResizeSubscriber: function() {
  return true;
 },
 OnBrowserWindowResize: function(e) {
  window.setTimeout(this.SetPopupMaximizedPositionOnBrowserResize.aspxBind(this), 0);
  this.ForEachWindow(this.updateContentScrollIfNeeded.aspxBind(this));
 },
 SetPopupMaximizedPositionOnBrowserResize: function() {
  this.ForEachWindow(this.SetMaximizedPositionOnBrowserResize.aspxBind(this));
 },
 UpdateResizeCursor: function(index, element, verticalDirection, horizontalDirection) {
  if(this.GetAdaptiveModalMode(index))
   this.HideTemporaryCursor(element);
  else
   ASPxClientPopupControlBase.prototype.UpdateResizeCursor.call(this, index, element, verticalDirection, horizontalDirection);
 },
 SetMaximizedPositionOnBrowserResize: function(index) {
  var element = this.GetWindowElement(index);
  if(element && this.GetIsMaximized(index) && this.InternalIsWindowVisible(index)) {
   var left = this.GetMaximizedPosition(element, true);
   var top = this.GetMaximizedPosition(element, false);
   this.SetWindowPos(index, element, left, top);
  }
 },
 InitCollapsedWindows: function(index) {
  if((this.isCollapsedInit && index == -1) || (index >= 0 && index < this.isCollapsedInitArray.length && this.isCollapsedInitArray[index])) {
   if(this.InternalIsWindowVisible(index)) {
    this.DoCollapse(index, true);
    if(index == -1)
     this.isCollapsedInit = false;
    else
     this.isCollapsedInitArray[index] = false;
   }
  }
 },
 InitMaximizedWindows: function(index) {
  if(this.GetIsMaximizedInit(index) && this.InternalIsWindowVisible(index)) {
   this.DoMaximize(index, true);
   this.SetIsMaximizedInit(index, false);
  }
 },
 InitPinnedWindows: function(index) {
  if((this.isPinned && index == -1) || (index >= 0 && index < this.isPinnedArray.length && this.isPinnedArray[index]))
   this.HoldPosition(index, true);
 },
 AfterInitializeWindow: function(index) {
  if(this.contentOverflowX !== "None" && !this.GetWindowWidthFromServer(index))
   this.SetWindowWidth(index, 0);
  ASPxClientPopupControlBase.prototype.AfterInitializeWindow.call(this, index);
  this.InitPinnedWindows(index);
  this.InitMaximizedWindows(index);
  this.InitCollapsedWindows(index);
 },
 OnDragStop: function(index) {
  ASPxClientPopupControlBase.prototype.OnDragStop.call(this, index);
  if(this.adaptivityEnabled)
   ASPxClientPopupControl.WindowResizeHelper.Initialize(this.GetWindowElement(index));
  else
   this.updateContentScrollIfNeeded(index);
 },
 GetPropertyValue: function(index, propName) {
  if(0 <= index && index < this.GetWindowCountCore())
   return this[propName + "Array"][index];
  return ASPxClientPopupControlBase.prototype.GetPropertyValue.call(this, index, propName);
 },
 SetPropertyValue: function(index, propName, value) {
  if(0 <= index && index < this.GetWindowCountCore())
   this[propName + "Array"][index] = value;
  else
   ASPxClientPopupControlBase.prototype.SetPropertyValue.call(this, index, propName, value);
 },
 GetAdaptiveModalMode: function(index) {
  return this.GetPropertyValue(index, "adaptiveModalMode");
 },
 GetAutoUpdatePosition: function(index) {
  return this.GetPropertyValue(index, "autoUpdatePosition") && !this.GetAdaptiveModalMode(index);
 },
 SetAdaptiveModalMode: function(index, enabled) {
  ASPx.ToggleClassNameToElement(this.GetModalWrapperElement(index), this.GetModalSystemCssClass(), enabled);
  this.SetPropertyValue(index, "adaptiveModalMode", enabled);
 },
 GetIsPinned: function(index) {
  return this.GetPropertyValue(index, "isPinned");
 },
 SetIsPinned: function(index, value) {
  this.SetPropertyValue(index, "isPinned", value);
 },
 GetPinPosX: function(index) {
  return this.GetPropertyValue(index, "pinX");
 },
 SetPinPosX: function(index, pinX) {
  this.SetPropertyValue(index, "pinX", pinX);
 },
 GetPinPosY: function(index) {
  return this.GetPropertyValue(index, "pinY");
 },
 SetPinPosY: function(index, pinY) {
  this.SetPropertyValue(index, "pinY", pinY);
 },
 GetIsCollapsed: function(index) {
  return this.GetPropertyValue(index, "isCollapsed");
 },
 SetIsCollapsed: function(index, value) {
  this.SetPropertyValue(index, "isCollapsed", value);
 },
 GetIsMaximized: function(index) {
  return this.GetPropertyValue(index, "isMaximized");
 },
 GetIsMaximizedOnWebKitTouch: function(index) {
  return this.GetIsMaximized(index) && ASPx.Browser.WebKitTouchUI;
 },
 SetIsMaximized: function(index, value) {
  this.SetPropertyValue(index, "isMaximized", value);
 },
 GetIsMaximizedInit: function(index) {
  return this.GetPropertyValue(index, "isMaximizedInit");
 },
 SetIsMaximizedInit: function(index, value) {
  this.SetPropertyValue(index, "isMaximizedInit", value);
 },
 GetRestoredWindowData: function(index) {
  return ASPx.CloneObject(this.GetPropertyValue(index, "restoredWindowValues"));
 },
 GetEnableContentScrolling: function(index) {
  return this.GetPropertyValue(index, "enableContentScrolling");
 },
 GetWindowOverflowX: function(index) {
  return this.GetPropertyValue(index, "contentOverflowX");
 },
 GetWindowOverflowY: function(index) {
  return this.GetPropertyValue(index, "contentOverflowY");
 },
 SetRestoredWindowData: function(index, value) {
  this.SetPropertyValue(index, "restoredWindowValues", value);
 },
 GetWindowIsShown: function(index) {
  return this.GetPropertyValue(index, "shown");
 },
 SetWindowIsShown: function(index, shown) {
  this.SetPropertyValue(index, "shown", shown);
 },
 GetWindowWidthFromServer: function(index) {
  return this.GetPropertyValue(index, "widthFromServer");
 },
 GetHideBodyScrollWhenModal: function(index) {
  return this.GetPropertyValue(index, "hideBodyScrollWhenModal");
 },
 SetHideBodyScrollWhenModal: function(index, value) {
  this.SetPropertyValue(index, "hideBodyScrollWhenModal", value);
 },
 GetCanScrollViewPort: function(index) {
  return this.GetPropertyValue(index, "canScrollViewPort");
 },
 HasDefaultWindow: function() {
  return this.GetWindowCountCore() === 0;
 },
 GetWindowFooterHeightLite: function(index) {
  var footer = this.GetWindowFooterElement(index);
  if(footer)
   return footer.offsetHeight;
  return null;
 },
 SetWindowPopUpReasonMouseEvent: function(index, evt) {
  evt = ASPx.CloneObject(evt);
  if(evt === undefined)
   evt = null;
  if(0 <= index && index < this.GetWindowCountCore())
   this.windowsPopupReasonMouseEventList[index] = evt;
  this.defaultPopupReasonMouseEvent = evt;
 },
 GetPopUpReasonMouseEvent: function() {
  return this.GetWindowPopUpReasonMouseEvent(null);
 },
 GetWindowPopUpReasonMouseEvent: function(window) {
  var index = (window != null) ? window.index : -1;
  if(0 <= index && index < this.GetWindowCountCore())
   return this.windowsPopupReasonMouseEventList[index];
  return this.defaultPopupReasonMouseEvent;
 },
 GetWindowCountCore: function() {
  return (this.windows.length > 0) ? this.windows.length : this.windowCount;
 },
 SetClientModality: function(isModal) {
  this.SetWindowClientModality(-1, isModal);
 },
 SetWindowClientModality: function(index, isModal) {
  var modalElement = this.GetWindowModalElement(index);
  if(isModal && !ASPx.IsElementVisible(modalElement))
   this.DoShowWindowModalElement(index);
  if(!isModal && ASPx.IsElementVisible(modalElement)) {
   var element = this.GetWindowElement(index);
   this.DoHideWindowModalElement(element);
  }
 },
 GetWindowPinButton: function(index) {
  return ASPx.GetElementById(this.name + "_HPB" + index);
 },
 GetWindowCollapseButton: function(index) {
  return ASPx.GetElementById(this.name + "_HMNB" + index);
 },
 GetWindowMaximizeButton: function(index) {
  return ASPx.GetElementById(this.name + "_HMXB" + index);
 },
 GetWindowScrollDiv: function(index) {
  return this.GetWindowChild(index, "_CSD" + index);
 },
 GetWindowElementDisplayValue: function(windowHasAnyScrollbars, windowHeight) {
  return windowHasAnyScrollbars && windowHeight ? "block" : "table";
 },
 GetMainWindowWidth: function(index, noCache) {
  return this.GetClientWindowWidth(index, true, noCache);
 },
 GetClientWindowWidth: function(index, outerSize, noCache) {
  if(!noCache && (this.GetIsCollapsed(index) || this.GetIsMaximized(index))) {
   var cachedSize = this.GetWindowCachedSize(index);
   if(cachedSize != null)
    return cachedSize.width;
  }
  var element = this.GetWindowElement(index);
  if(element != null)
   return element.offsetWidth;
 },
 GetMainWindowHeight: function(index, noCache) {
  return this.GetClientWindowHeight(index, true, noCache);
 },
 GetClientWindowHeight: function(index, outerSize, noCache) {
  if(!noCache && (this.GetIsCollapsed(index) || this.GetIsMaximized(index))) {
   var cachedSize = this.GetWindowCachedSize(index);
   if(cachedSize != null)
    return cachedSize.height;
  }
  var element = this.GetWindowElement(index);
  if(element != null)
   return element.offsetHeight;
 },
 ShowModal: function() {
  this.ShowModalByIndex(-1);
 },
 ShowModalByIndex: function(index) {
  if(this.adaptivityEnabled) {
   this.SetAdaptiveModalMode(index, true);
   this.ResetModalStyles(index);
   this.ResetPopupStyles(index);
   this.DoShowModal(index, ASPx.InvalidPosition, ASPx.InvalidPosition, this.GetLastShownPopupElementIndex(index));
  }
 },
 DoShowWindowCore: function(index, x, y, popupElementIndex, closeOtherWindows, allowChangeZIndex, evt, closeOtherReason) {
  if(this.IsDOMDisposed()) return;
  this.SetWindowPopUpReasonMouseEvent(index, evt);
  if(this.adaptivityEnabled) {
   this.SetAdaptiveModalMode(index, this.NeedAdaptiveModalMode(index));
   this.ResetModalStyles(index);
   if(this.GetAdaptiveModalMode(index)) {
    this.ResetPopupStyles(index);
    this.DoShowModal(index, x, y, popupElementIndex);
    return;
   }
  }
  this.DoShowWindowAtPos(index, x, y, popupElementIndex, closeOtherWindows, allowChangeZIndex, evt, closeOtherReason);
 },
 NeedAdaptiveModalMode: function(index) {
  return window.innerWidth < this.GetSwitchAtWindowInnerWidth();
 },
 GetSwitchAtWindowInnerWidth: function() {
  return this.switchAtWindowInnerWidth;
 },
 GetModalSystemCssClass: function() {
  return "dxmodalSys";
 },
 DoShowWindowAtPos: function(index, x, y, popupElementIndex, closeOtherWindows, allowChangeZIndex, evt, closeOtherReason) {
  if(!this.isInitialized)
   this.PopulatePopupElements(index);
  var element = this.GetWindowElement(index);
  if(element != null && this.IsWindowElementsIDAssigned(index)) {
   this.StopCloseAnimation(index);
   this.PrepareToAdjustContentOnShow(index);
   if(closeOtherWindows)
    aspxGetPopupControlCollection().DoHideAllWindows(element, this.GetWindowElementId(index), false, closeOtherReason, 0);
   var isMoving = this.InternalIsWindowVisible(index);
   ASPx.SetElementDisplay(element, true);
   element.style.display = this.GetWindowElementDisplayValue(this.HasAnyScrollBars(index), this.GetPopupWindowDimensionFromCache(index, false));
   element.style.position = "absolute";
   var scrollDiv = this.GetWindowScrollDiv(index),
    shouldResetScrollSize = scrollDiv && this.GetEnableContentScrolling(index) && ASPx.GetDocumentMaxClientHeight() <= element.offsetHeight,
    savedScrollDivHeight = shouldResetScrollSize && scrollDiv.style.height;
   if(shouldResetScrollSize)
    scrollDiv.style.height = 0;
   this.RestoreWindowSizeFromCache(index);
   if(!this.GetWindowIsShown(index)) {
    var width = this.GetPopupWindowDimensionFromCache(index, true),
     height = this.GetPopupWindowDimensionFromCache(index, false);
    this.SetClientWindowSizeCoreLite(index, width, height);
    this.SetWindowIsShown(index, true);
   }
   var popupElement = this.GetPopupElement(index, popupElementIndex);
   if(popupElement)
    this.SetLastShownPopupElementIndex(index, popupElementIndex);
   if(this.GetIsMaximized(index)) {
    if(this.hideBodyScrollWhenMaximized)
     ASPx.PopupUtils.BodyScrollHelper.HideBodyScroll(element.id);
    this.NormalizeMaximizedWindowSize(index);
   }
   var isDragged = this.GetIsDragged(index);
   var horizontalPopupPosition = this.GetClientPopupPos(element, popupElement, x, true, isDragged);
   var verticalPopupPosition = this.GetClientPopupPos(element, popupElement, y, false, isDragged);
   var clientX = horizontalPopupPosition.position;
   var clientY = verticalPopupPosition.position;
   this.SetWindowPos(index, element, clientX, clientY);
   if(shouldResetScrollSize)
    scrollDiv.style.height = savedScrollDivHeight;
   this.DoShowWindowModalElement(index);
   this.SetVisibleWithAnimation(element, isMoving, index, horizontalPopupPosition, verticalPopupPosition);
   this.ShowWindowContentUrl(index);
   this.AdjustContentOnShow(index);
   scrollDiv = this.GetWindowScrollDiv(index);
   if(scrollDiv && this.GetEnableContentScrolling(index)) {
    var dimension = null;
    var windowMainCell = this.GetWindowMainCell(element);
    if(windowMainCell.style.width && windowMainCell.style.height)
     dimension = 'both';
    else if(windowMainCell.style.width)
     dimension = 'width';
    else if(windowMainCell.style.height)
     dimension = 'height';
    if(!dimension)
     return;
    ASPx.SetElementDisplay(scrollDiv, false);
    this.SetWindowScrollDivSize(scrollDiv, index, dimension);
    ASPx.SetElementDisplay(scrollDiv, true);
   }
   this.registerAndActivateWindow(element, index, allowChangeZIndex);
   this.RaisePopupOnShow(isMoving, index);
   this.CorrectWindowSizeGripPositionLite(index);
   this.CorrectWindowHeaderText(index);
   this.InitMaximizedWindows(index);
   this.InitCollapsedWindows(index);
   if(this.GetIsPinned(index)) window.setTimeout(function() { this.HoldPosition(index, true); }.aspxBind(this), 0);
   if(!this.GetShowOnPageLoad(index))
    this.CorrectElementVerticalAlignment(ASPx.AdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index));
   if(element.style.width.indexOf("px") > -1) {
    element.style.width = ASPx.GetCurrentStyle(element).width;
   }
   this.updateContentScrollIfNeeded(index);
  }
 },
 DoShowModal: function(index, x, y, popupElementIndex) {
  var element = this.GetWindowElement(index);
  if(element != null) {
   this.StopCloseAnimation(index);
   this.EnsureIframeOnIosContentOverflow(index);
   this.PrepareToAdjustContentOnShow(index);
   if(!ASPx.Browser.WebKitTouchUI)
    ASPx.PopupUtils.BodyScrollHelper.HideBodyScroll(element.id);
   this.DoShowWindowModalElement(index);
   var isMoving = this.InternalIsWindowVisible(index);
   ASPx.SetElementDisplay(this.GetModalWrapperElement(index), true);
   this.ResetScroll(index);
   ASPx.SetElementDisplay(element, true);
   this.SetSizeBeforeShow(index);
   this.UpdateAlignment(index);
   var popupElement = this.GetPopupElement(index, popupElementIndex);
   if(popupElement)
    this.SetLastShownPopupElementIndex(index, popupElementIndex);
   this.SetContentElementsAdaptiveDisplayStyle(index);
   var horizontalPopupPosition = this.GetClientPopupPos(element, popupElement, x, true, false),
    verticalPopupPosition = this.GetClientPopupPos(element, popupElement, y, false, false);
   this.SetVisibleWithAnimation(element, isMoving, index, horizontalPopupPosition, verticalPopupPosition);
   this.ShowWindowContentUrl(index);
   this.AdjustContentOnShow(index);
   this.registerAndActivateWindow(element, index, true);
   this.RaisePopupOnShow(isMoving, index);
   this.CorrectWindowHeaderText(index);
   if(!this.GetShowOnPageLoad(index))
    this.CorrectElementVerticalAlignment(ASPx.AdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index));
  }
 },
 EnsureIframeOnIosContentOverflow: function(index) {
  if(this.HasIframeOnIos(index)) {
   var contentElement = this.GetWindowContentElement(index);
   if(contentElement.style.overflow === "")
    contentElement.style.overflow = "auto";
  }
 },
 SetWindowElementZIndex: function(element, zIndex) {
  ASPxClientPopupControlBase.prototype.SetWindowElementZIndex.call(this, element, zIndex);
  if(this.adaptivityEnabled)
   this.SetModalWrapperZIndex(this.GetWindowIndex(element), zIndex);
  else
   this.updateContentScrollIfNeeded(this.GetWindowIndex(element));
 },
 SetModalWrapperZIndex: function(index, zIndex) {
  if(!this.GetAdaptiveModalMode(index)) return;
  ASPx.SetStyles(this.GetModalWrapperElement(index), {
   zIndex: zIndex
  });
 },
 updateContentScrollIfNeeded: function(index) {
  var windowElement = this.GetWindowElement(index);
  var wrapper = this.getWindowWrapper(windowElement);
  var wrapperScroll = this.getWindowWrapperScroll(windowElement);
  if(!wrapper || !this.WindowIsModal(index) || !this.GetHideBodyScrollWhenModal(index))
   return;
  ASPx.PopupUtils.adjustViewportScrollWrapper(wrapper, wrapperScroll, windowElement);
 },
 getWindowWrapper: function(windowElement) {
  return ASPx.GetParentByClassName(windowElement, PopupControlCssClasses.WindowWrapperCssClassName);
 },
 getWindowWrapperScroll: function(windowElement) {
  return ASPx.GetParentByClassName(windowElement, PopupControlCssClasses.WindowWrapperScrollCssClassName);
 },
 SizeCanBeSet: function(index, isWindowMaximizedAndCollapsed) {
  return ASPxClientPopupControlBase.prototype.SizeCanBeSet.call(this, index, isWindowMaximizedAndCollapsed) && !this.GetAdaptiveModalMode(index);
 },
 GetPopupWindowDimensionFromCache: function(index, isWidth) {
  var dimension;
  if(isWidth) {
   dimension = this.GetWindowWidthInternal(index);
   if(ASPx.IsExists(dimension)) {
    dimension = Math.max(dimension, this.GetWindowMinWidth(index));
    var maxWidth = this.GetWindowMaxWidth(index);
    if(maxWidth)
     dimension = Math.min(dimension, maxWidth);
   }
  }
  else {
   dimension = this.GetWindowHeightInternal(index);
   if(ASPx.IsExists(dimension)) {
    if(this.HasAnyScrollBars(index) && dimension === constants.DEFAULT_WINDOW_HEIGHT)
     return undefined;
    dimension = Math.max(dimension, this.GetWindowMinHeight(index));
    var maxHeight = this.GetWindowMaxHeight(index);
    if(maxHeight)
     dimension = Math.min(dimension, maxHeight);
   }
  }
  return dimension;
 },
 NormalizeMaximizedWindowSize: function(index) {
  var width = this.GetPopupWindowDimensionFromCache(index, true),
   height = this.GetPopupWindowDimensionFromCache(index, false),
   dimensions = this.getDocumentDimensions(index),
   sizeNormalizationIsNeeded = width < dimensions.width || height < dimensions.height;
  if(sizeNormalizationIsNeeded)
   this.NormalizeWindowSize(index, true);
 },
 NormalizeWindowSize: function(index, isMaximized) {
  var width = this.GetClientWindowWidth(index),
   height = this.GetClientWindowHeight(index),
   normWidth = width,
   normHeight = height,
   maxWidth = this.GetWindowMaxWidth(index),
   minWidth = this.GetWindowMinWidth(index),
   maxHeight = this.GetWindowMaxHeight(index),
   minHeight = this.GetWindowMinHeight(index);
  if(maxWidth)
   normWidth = Math.min(normWidth, maxWidth);
  if(minWidth)
   normWidth = Math.max(normWidth, minWidth);
  if(maxHeight)
   normHeight = Math.min(normHeight, maxHeight);
  if(minHeight)
   normHeight = Math.max(normHeight, minHeight);
  if(normWidth !== width || normHeight !== height)
   this.SetWindowSize(this.GetWindow(index), normWidth, normHeight);
  if(isMaximized) {
   var dimensions = this.getDocumentDimensions(index);
   if(this.GetIsCollapsed(index)) {
    if(normWidth != dimensions.width) {
     this.SetWindowSizeByIndexCore(index, dimensions.width, normHeight, true);
    }
   } else {
    if(normWidth != dimensions.width || normHeight != dimensions.height) {
     this.SetWindowSizeByIndexCore(index, dimensions.width, dimensions.height, false);
    }
   }
  }
 },
 DoShowWindowModalElement: function(index) {
  if(this.CanManipulateWithModalElement(index)) {
   if(this.adaptivityEnabled) {
    this.DoShowWindowModalElementWithAdaptivity(index);
    return;
   }
   var modalElement = this.GetWindowModalElement(index);
   var bodyScrollHasJustBeingHidden = false;
   if(this.GetHideBodyScrollWhenModal(index) && (!this.IsWindowVisible(this.GetWindow(index)) || !ASPx.IsElementVisible(modalElement))) {
    bodyScrollHasJustBeingHidden = true;
    aspxGetPopupControlCollection().LockWindowResizeByBodyScrollVisibilityChanging();
    if(!ASPx.Browser.WebKitTouchUI)
     ASPx.PopupUtils.BodyScrollHelper.HideBodyScroll(this.GetWindowElementId(index));
   }
   if(ASPx.Browser.IE && this.GetHideBodyScrollWhenModal(index))
    ASPx.Evt.AttachEventToElement(modalElement, ASPx.Evt.GetMouseWheelEventName(), function(evt) { return ASPx.Evt.PreventEventAndBubble(evt); });
   ASPx.SetElementDisplay(modalElement, true);
   this.AdjustModalElementBounds(modalElement);
   this.SetModalElementVisibilityWithAnimation(modalElement, index);
   aspxGetPopupControlCollection().RegisterVisibleModalElement(modalElement);
   if(bodyScrollHasJustBeingHidden)
    aspxGetPopupControlCollection().UnlockWindowResizeByBodyScrollVisibilityChanging();
  }
 },
 DoShowWindowModalElementWithAdaptivity: function(index) {
  var overlayElement = this.GetOverlayElement(index);
  if(!overlayElement) return;
  ASPx.SetStyles(overlayElement, {
   right: 0,
   bottom: 0,
   width: "",
   height: ""
  });
  ASPx.SetElementDisplay(overlayElement, true);
  this.SetModalElementVisibilityWithAnimation(overlayElement, index);
  ASPx.GetPopupControlCollection().RegisterVisibleModalElement(overlayElement);
 },
 SetSizeBeforeShow: function(index) {
  if(this.GetModalMaxWidth(index) && this.GetModalMaxWidth(index) !== this.DefaultModalMaxWidth)
   this.SetAdaptiveMaxWidthByIndex(index, this.GetModalMaxWidth(index));
  if(this.GetModalMinWidth(index) !== this.DefaultModalMinWidth)
   this.SetAdaptiveMinWidthByIndex(index, this.GetModalMinWidth(index));
  this.UpdateHeightDimensions(index);
 },
 UpdateHeightDimensions: function(index) {
  this.UpdateAdaptiveMinHeight(index);
  this.UpdateAdaptiveMaxHeight(index);
 },
 UpdateAdaptiveMinHeight: function(index) {
  if(this.GetModalMinHeight(index) !== null)
   this.SetAdaptiveHeightDimension(index, "minHeight", this.GetModalMinHeight(index));
 },
 UpdateAdaptiveMaxHeight: function(index) {
  if(this.GetModalMaxHeight(index) !== null)
   this.SetAdaptiveHeightDimension(index, "maxHeight", this.GetModalMaxHeight(index));
 },
 GetClientPopupPos: function(element, popupElement, pos, isX, isDragged) {
  if(!this.GetAdaptiveModalMode(this.GetWindowIndex(element)))
   return ASPxClientPopupControlBase.prototype.GetClientPopupPos.call(this, element, popupElement, pos, isX, isDragged);
  var getPosFunc = isX ? ASPx.GetAbsolutePositionX : ASPx.GetAbsolutePositionY;
  return { position: getPosFunc(element) };
 },
 GetAnimationVerticalDirection: function(index, verticalPopupPosition) {
  if(!this.GetAdaptiveModalMode(index))
   return ASPxClientPopupControlBase.prototype.GetAnimationVerticalDirection.call(this, index, verticalPopupPosition);
  return ASPxClientPopupControl.Animation.GetVerticalDirection(this.modalVerticalAlign, this.modalHorizontalAlign);
 },
 GetAnimationHorizontalDirection: function(index, horizontalPopupPosition) {
  if(!this.GetAdaptiveModalMode(index))
   return ASPxClientPopupControlBase.prototype.GetAnimationHorizontalDirection.call(this, index, horizontalPopupPosition);
  return ASPxClientPopupControl.Animation.GetHorizontalDirection(this.modalHorizontalAlign);
 },
 GetDefaultVerticalOffset: function() {
  return this.IsSmallDisplay() ? 10 : 30;
 },
 IsSmallDisplay: function() {
  return window.innerWidth < this.GetScreenLimitForCss();
 },
 GetScreenLimitForCss: function() {
  return ASPx.MaxMobileWindowWidth;
 },
 StartAutoAnimation: function(element, index, horizontalPopupPosition, verticalPopupPosition) {
  if(this.adaptivityEnabled) {
   if(this.NeedFadeAnimation(index, this.popupAnimationType))
    this.StartFadeAnimation(element, index);
   else
    this.StartSlideAnimation(element, index, horizontalPopupPosition, verticalPopupPosition);
  } else
   ASPxClientPopupControlBase.prototype.StartAutoAnimation.call(this, element, index, horizontalPopupPosition, verticalPopupPosition);
 },
 DoHideWindowWithAutoAnimation: function(index, element, closeReason) {
  if(this.NeedFadeAnimation(index, this.closeAnimationType))
   this.DoHideWindowWithFadeAnimation(index, element, closeReason);
  else
   this.DoHideWindowWithSlideAnimation(index, closeReason);
 },
 IsDraggingAllowed: function(index) {
  return this.allowDragging && (!this.GetAdaptiveModalMode(index) || this.allowDraggingInAdaptiveMode);
 },
 IsResizeAllowed: function(index) {
  return ASPxClientPopupControlBase.prototype.IsResizeAllowed.call(this, index) && !this.GetAdaptiveModalMode(index);
 },
 IsFadeCloseAnimation: function(index) {
  return ASPxClientPopupControlBase.prototype.IsFadeCloseAnimation.call(this, index) || this.NeedFadeAnimation(index, this.closeAnimationType);
 },
 NeedFadeAnimation: function(index, animationType) {
  return ASPxClientPopupControl.Animation.NeedFadeAnimation(this.modalHorizontalAlign, this.modalVerticalAlign,
   animationType, this.popupHorizontalAlign, this.popupVerticalAlign, this.GetAdaptiveModalMode(index));
 },
 AllowModalElementAnimation: function(index) {
  if(this.GetAdaptiveModalMode(index))
   return this.popupAnimationType !== ASPxClientPopupControlBase.AnimationType.None;
  return ASPxClientPopupControlBase.prototype.AllowModalElementAnimation.call(this, index);
 },
 DoHideWindowCore: function(index, closeReason) {
  var element = this.GetWindowElement(index);
  if(element != null) {
   if(this.HasCloseAnimation())
    this.PrepareElementAfterCloseAnimation(index, element);
   element.isHiding = true;
   element.style.zIndex = this.GetDefaultZIndexFromServer();
   this.SetIsDragged(index, false);
   this.UpdateWindowsStateCookie();
   element.isHiding = false;
   this.StopShowAnimation(index);
   if(ASPx.Browser.WebKitTouchUI || ASPx.Browser.Safari) {
    var dummy = element.offsetWidth;
   }
   ASPx.SetElementDisplay(element, false);
   ASPx.SetElementVisibility(element, false);
   if(this.adaptivityEnabled) {
    ASPx.SetElementDisplay(this.GetModalWrapperElement(index), "");
    if(!ASPx.Browser.WebKitTouchUI)
     ASPx.PopupUtils.BodyScrollHelper.RestoreBodyScroll(element.id);
    this.SetWrapperScrollVisible(index, true);
    this.SetIsDragged(index, false);
   }
   if(this.hideBodyScrollWhenMaximized && this.GetIsMaximized(index))
    ASPx.PopupUtils.BodyScrollHelper.RestoreBodyScroll(element.id);
   this.DoHideWindowModalElement(element, closeReason);
   this.DoHideWindowIFrame(element);
   aspxGetPopupControlCollection().UnregisterVisibleWindow(element);
   this.ProcessAccessibleElementOnHide();
   this.HideWindowLoadingPanel(index);
  }
 },
 OnAnimationStop: function(index) {
  if(this.adaptivityEnabled) {
   this.SetWrapperScrollVisible(index, true);
   this.UnlockWrapperScrollEventEvent();
  }
  ASPxClientPopupControlBase.prototype.OnAnimationStop.call(this, index);
  if(!this.adaptivityEnabled && ASPx.Browser.Firefox)
   this.GetWindowElement(index).style.display = "table";
 },
 ResetModalStyles: function(index) {
  var element = this.GetWindowElement(index);
  if(element != null) {
   ASPx.SetStyles(element, {
    minWidth: "",
    maxWidth: "",
    marginTop: "",
    marginLeft: "",
    marginRight: "",
    position: ""
   });
   ASPx.SetStyles(this.GetWindowContentElement(index), {
    minHeight: "",
    maxHeight: "",
   });
   this.FixateFooter(index, false, 0);
   this.FixateHeader(index, false, 0);
   this.SetIsDragged(false);
   this.DoHideWindowModalElement(element);
  }
 },
 ResetPopupStyles: function(index) {
  var element = this.GetWindowElement(index);
  if(element != null) {
   ASPx.SetStyles(element, {
    left: "",
    top: "",
    width: "",
    height: "",
   });
   ASPx.SetStyles(this.GetWindowContentWrapperElement(index), {
    height: "",
    width: "",
    display: ""
   });
   ASPx.SetStyles(this.GetWindowContentElement(index), {
    display: "",
    width: "",
    height: ""
   });
   this.SetWindowIsShown(index, false);
  }
 },
 InitDivPosForHideSlideAnimation: function(animationDivElement) {
  ASPx.PopupUtils.InitAnimationDivCore(animationDivElement);
 },
 DoHideWindow: function(index, dontRaiseClosing, closeReason) {
  var cancel = ASPxClientPopupControlBase.prototype.DoHideWindow.call(this, index, dontRaiseClosing, closeReason);
  this.updateContentScrollIfNeeded(index);
  return cancel;
 },
 OnWindowShown: function(windowIndex) {
  this.EnsureContent(windowIndex, false);
  this.EnsureIFrameHeightAdjusted(windowIndex);
  if(this.GetAdaptiveModalMode(windowIndex))
   this.ChangeFooterFixed(windowIndex);
  else {
   var isMaximized = this.GetIsMaximized(windowIndex);
   if(isMaximized || this.HasAnyScrollBars(windowIndex))
    this.NormalizeWindowSize(windowIndex, isMaximized);
  }
  this.RaiseShown(windowIndex);
  var loadingElementsWillNotBeShown = !this.lpTimers[windowIndex] || this.lpTimers[windowIndex] < 0;
  if(this.InWindowCallback(windowIndex) && loadingElementsWillNotBeShown) {
   this.ShowWindowLoadingElementsInternal(windowIndex);
  }
  if(this.GetAdaptiveModalMode(windowIndex))
   this.UpdateAdaptiveMinHeight(windowIndex);
  aspxGetPopupControlCollection().RefreshModalRenderInIe();
 },
 RefreshModalRenderInIe: function(index) {
  var windowElement = this.GetWindowElement(index),
   zoom = windowElement.style.zoom;
  windowElement.style.zoom = "1";
  window.setTimeout(function() {
   windowElement.style.zoom = zoom;
  }, 100);
 },
 SetWrapperScrollVisible: function(index, visible) {
  if(!this.GetAdaptiveModalMode(index)) return;
  var modalWrapper = this.GetModalWrapperElement(index);
  if(visible) {
   ASPx.Attr.RestoreStyleAttribute(modalWrapper, "overflow-x");
   ASPx.Attr.RestoreStyleAttribute(modalWrapper, "overflow-y");
  } else {
   if(this.modalVerticalAlign === ModalAlign.WindowBottom && this.GetWindowElement(index).offsetHeight <= window.innerHeight)
    ASPx.Attr.ChangeStyleAttribute(modalWrapper, "overflow-y", "hidden");
   if(this.modalHorizontalAlign === ModalAlign.WindowRight)
    ASPx.Attr.ChangeStyleAttribute(modalWrapper, "overflow-x", "hidden");
  }
 },
 GetDragCorrection: function(index, element, isX) {
  if(this.adaptivityEnabled) {
   var offset = isX ? element.offsetLeft : element.offsetTop;
   offset -= ASPx.PxToInt(element.style[isX ? "left" : "top"]);
   return ASPx.GetPositionElementOffset(this.GetModalWrapperElement(index), isX) + offset;
  } else
   return ASPxClientPopupControlBase.prototype.GetDragCorrection.call(this, index, element, isX);
 },
 GetSlideAnimationDuration: function(index) {
  return !this.GetAdaptiveModalMode(index) ? ASPxClientPopupControlBase.prototype.GetSlideAnimationDuration.call(this, index) : 300;
 },
 GetSlideOffsetCoefficient: function(index) {
  return !this.GetAdaptiveModalMode(index) ? ASPxClientPopupControlBase.prototype.GetSlideOffsetCoefficient.call(this, index) : 0.25;
 },
 InitDivPosForShowSlideAnimation: function(index, animationDivElement, clientX, clientY, onAnimStopCallString) {
  if(!this.GetAdaptiveModalMode(index))
   ASPxClientPopupControlBase.prototype.InitDivPosForShowSlideAnimation.call(this, index, animationDivElement, clientX, clientY, onAnimStopCallString);
  else
   ASPx.PopupUtils.InitAnimationProperties(animationDivElement, onAnimStopCallString);
 },
 BeforeAnySlideAnimation: function(index) {
  this.FixateFooter(index, false, 0);
  this.FixateHeader(index, false, 0);
  this.SetWrapperScrollVisible(index, false);
 },
 StartSlideAnimation: function(animationDivElement, index, horizontalPopupPosition, verticalPopupPosition) {
  if(this.adaptivityEnabled) {
   this.LockWrapperScrollEvent();
   this.BeforeAnySlideAnimation(index);
  }
  ASPxClientPopupControlBase.prototype.StartSlideAnimation.call(this, animationDivElement, index, horizontalPopupPosition, verticalPopupPosition);
 },
 DoHideWindowWithSlideAnimation: function(index, closeReason) {
  if(this.adaptivityEnabled)
   this.BeforeAnySlideAnimation(index);
  ASPxClientPopupControlBase.prototype.DoHideWindowWithSlideAnimation.call(this, index, closeReason);
 },
 UpdatePositionAfterCallback: function(windowIndex) {
  if(this.adaptivityEnabled)
   this.TryAutoUpdatePosition(windowIndex);
  else if(this.contentLoadingMode === LoadContentViaCallback.OnFirstShow && this.InternalIsWindowVisible(windowIndex))
   this.UpdateWindowPositionInternal(windowIndex, this.GetPopupElement(windowIndex, this.GetLastShownPopupElementIndex(windowIndex)));
 },
 CreateLoadingDiv: function(parentElement, offsetElement, windowIndex) {
  if(typeof (windowIndex) != "undefined") {
   var loadingDiv = ASPxClientControl.prototype.CreateLoadingDiv.call(this, parentElement, offsetElement);
   loadingDiv.id += windowIndex;
   return loadingDiv;
  }
 },
 CreateLoadingPanelWithAbsolutePosition: function(parentElement, offsetElement, windowIndex) {
  if(typeof (windowIndex) != "undefined") {
   var loadingPanel = ASPxClientControl.prototype.CreateLoadingPanelWithAbsolutePosition.call(this, parentElement, offsetElement);
   loadingPanel.id += windowIndex;
   return loadingPanel;
  }
 },
 PerformWindowCallback: function(window, parameter, onSuccess) {
  ASPxClientPopupControlBase.prototype.PerformWindowCallback.call(this, window, parameter, onSuccess);
 },
 SetIframeVisibleForDragging: function(index, visible) {
  var iframeElement = this.GetWindowContentIFrameElement(index);
  if(ASPx.Browser.IE || ASPx.Browser.Edge) {
   if(ASPx.Browser.Edge || ASPx.Browser.Version >= 11)
    iframeElement.style.pointerEvents = visible ? "" : "none";
   else {
    if(visible)
     this.RemoveIframeCoverDiv(iframeElement, index);
    else
     this.CreateIframeCoverDiv(iframeElement, index);
   }
  }
  ASPx.SetElementVisibility(iframeElement, visible);
 },
 OnResizeStop: function(evt, index, cursor, resizePanel) {
  ASPxClientPopupControlBase.prototype.OnResizeStop.call(this, evt, index, cursor, resizePanel);
  if(this.IsResizeAllowed(index))
   this.SetWindowCachedSize(index, this.GetClientWindowWidth(index), this.GetClientWindowHeight(index));
  this.updateContentScrollIfNeeded(index);
 },
 OnMouseDownModalElement: function(evt, index) {
  aspxGetPopupControlCollection().DoHideAllWindows(ASPx.Evt.GetEventSource(evt), "", false, ASPxClientPopupControlCloseReason.OuterMouseClick, evt.offsetX);
  this.SetIsPopuped(index, true);
 },
 IsRaiseAfterResizingLocked: function() {
  return this.CollapseExecuting() || this.MaximizationExecuting();
 },
 GetContentElementChildren: function(index, contentElement) {
  var cache = this.GetResizeSessionCache();
  if(!cache.contentElementChildren || !cache.contentElementChildren[index]) {
   cache.contentElementChildren = [];
   cache.contentElementChildren[index] = contentElement.getElementsByTagName("*");
  }
  return cache.contentElementChildren[index];
 },
 GetContentElementChildrenScroll: function(index, contentElementChildren) {
  var cache = this.GetResizeSessionCache();
  if(!cache.contentElementChildrenScroll || !cache.contentElementChildrenScroll[index]) {
   cache.contentElementChildrenScroll = [];
   cache.contentElementChildrenScroll[index] = [];
   for(var i = 0, len = contentElementChildren.length; i < len; i++) {
    var child = contentElementChildren[i];
    if(!!child.scrollLeft || !!child.scrollTop)
     cache.contentElementChildrenScroll[index].push([i, child.scrollLeft, child.scrollTop]);
   }
  }
  return cache.contentElementChildrenScroll[index];
 },
 GetElementBordersAndPaddings: function(index, element, leftRight) {
  var cache = this.GetResizeSessionCache();
  if(!cache.elementBordersAndPaddings || !cache.elementBordersAndPaddings[index]) {
   cache.elementBordersAndPaddings = [];
   var style = ASPx.GetCurrentStyle(element);
   cache.elementBordersAndPaddings[index] = {
    leftRight: this.getLeftRightBordersAndPaddingsSummaryValue(element, style),
    topBottom: this.getTopBottomBordersAndPaddingsSummaryValue(element, style)
   };
  }
  return leftRight ? cache.elementBordersAndPaddings[index].leftRight : cache.elementBordersAndPaddings[index].topBottom;
 },
 GetHeaderFooterHeight: function(index) {
  var cache = this.GetResizeSessionCache();
  if(!cache.headerFooterHeight || !cache.headerFooterHeight[index]) {
   cache.headerFooterHeight = [];
   cache.headerFooterHeight[index] = this.GetHeaderFooterHeightCore(index);
  }
  return cache.headerFooterHeight[index];
 },
 getContentElementDisplay: function(correctContentElementSize, contentUrl) {
  return correctContentElementSize || contentUrl ? "block" : "table-cell";
 },
 SetContentWrapperHeightLite: function(index, actualHeight, windowElem, contentWrapper) {
  if(!windowElem.style.height || ASPx.IsPercentageSize(windowElem.style.height))
   return;
  var borderOwner = this.GetWindowBorderOwnerElement(windowElem);
  var height = borderOwner == windowElem ? actualHeight : actualHeight - (borderOwner ? ASPx.GetTopBottomBordersAndPaddingsSummaryValue(borderOwner) : 0);
  height -= this.GetHeaderFooterHeight(index);
  if(height > 0)
   contentWrapper.style.height = height + "px";
 },
 SetWindowScrollDivSize: function(scrollDiv, index, dimension) {
  var windowClientTable = this.GetWindowClientTable(index);
  var headerElement = this.GetWindowHeaderElement(index);
  var height = windowClientTable.offsetHeight;
  if(headerElement)
   height -= headerElement.offsetHeight;
  height -= this.GetWindowFooterHeightLite(index);
  if(dimension == 'height' || dimension == 'both')
   ASPx.SetOffsetHeight(scrollDiv, height);
  if(dimension == 'width' || dimension == 'both') {
   var width = windowClientTable.offsetWidth;
   var contentElement = this.GetWindowContentElement(index);
   width -= this.getLeftRightBordersAndPaddingsSummaryValue(scrollDiv) + ASPx.GetHorizontalBordersWidth(contentElement);
   if(width > -1)
    scrollDiv.style.width = width + "px";
  }
  scrollDiv.style.marginRight = "0px";
 },
 AdjustIFrameHeight: function(index, iframe) {
  ASPxClientPopupControlBase.prototype.AdjustIFrameHeight.call(this, index, iframe);
  if(!this.InternalIsWindowVisible(index) || !iframe || this.GetAdaptiveModalMode(index)) return;
  this.SetIframeAdjustingPostponed(index, false);
  var content = this.GetContentContainer(index);
  var contentWrapper = this.GetWindowContentWrapperElement(index);
  iframe.style.verticalAlign = "text-bottom";
  var iframeHeight = contentWrapper.offsetHeight - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(content);
  if(iframeHeight >= 0)
   iframe.style.height = iframeHeight + "px";
 },
 OnPinButtonClick: function(index) {
  var value = this.GetIsPinned(index);
  this.SetPinCore(index, !value);
 },
 SetPinCore: function(index, value) {
  if(this.GetIsPinned(index) != value) {
   this.SetIsPinned(index, value);
   this.HoldPosition(index, value);
   this.UpdateWindowsStateCookie();
   this.OnPinned(index, value);
  }
 },
 OnPinned: function(index, pinned) {
  this.RaisePinnedChanged(index, pinned);
 },
 HoldPosition: function(index, hold, element) {
  if(hold) {
   element = element || this.GetWindowElement(index);
   if(!element) return;
   var x = ASPx.GetAbsoluteX(element);
   var y = ASPx.GetAbsoluteY(element);
   scrollX = ASPx.GetDocumentScrollLeft();
   scrollY = ASPx.GetDocumentScrollTop();
   this.SetPinPosX(index, x - scrollX);
   this.SetPinPosY(index, y - scrollY);
  }
  this.UpdateHeaderButtonSelected(index, "GetWindowPinButton", hold);
  this.CheckHeaderCursor(index);
 },
 GetBodyWidth: function() {
  return aspxGetPopupControlCollection().GetSavedBodyWidth();
 },
 GetBodyHeight: function() {
  return aspxGetPopupControlCollection().GetSavedBodyHeight();
 },
 GetIsOutFromViewPort: function(index) {
  var element = this.GetWindowElement(index);
  if(!element) return false;
  var pinXTarget = this.GetPinPosX(index);
  var pinYTarget = this.GetPinPosY(index);
  var popupWindowWidth = this.GetClientWindowWidth(index);
  var docClientWidth = ASPx.GetDocumentClientWidth();
  var rightOutOffset = (pinXTarget + popupWindowWidth) - docClientWidth;
  var popupWindowHeight = this.GetClientWindowHeight(index);
  var docClientHeight = ASPx.GetDocumentClientHeight();
  var bottomOutOffset = (pinYTarget + popupWindowHeight) - docClientHeight;
  return (rightOutOffset > 0 || bottomOutOffset > 0);
 },
 needToHidePinnedOutFromViewPort: function(index) {
  return this.GetIsPinned(index) && this.GetIsOutFromViewPort(index);
 },
 AdjustPinPositionWhileScroll: function(index) {
  var element = this.GetWindowElement(index);
  if(!element) return;
  var x = ASPx.GetAbsoluteX(element);
  var y = ASPx.GetAbsoluteY(element);
  var scrollX = ASPx.GetDocumentScrollLeft();
  var scrollY = ASPx.GetDocumentScrollTop();
  var pinX = x - scrollX;
  var pinY = y - scrollY;
  var pinXTarget = this.GetPinPosX(index);
  var pinYTarget = this.GetPinPosY(index);
  if((pinX != pinXTarget) || (pinY != pinYTarget)) {
   this.lockScroll++;
   var xNew = pinXTarget + scrollX;
   var yNew = pinYTarget + scrollY;
   var bodyWidth = this.GetBodyWidth();
   var bodyHeight = this.GetBodyHeight();
   var popupWindowWidth = this.GetClientWindowWidth(index);
   var docClientWidth = ASPx.GetDocumentClientWidth();
   var rightOutOffset = (pinXTarget + popupWindowWidth) - docClientWidth;
   var popupWindowHeight = this.GetClientWindowHeight(index);
   var docClientHeight = ASPx.GetDocumentClientHeight();
   var bottomOutOffset = (pinYTarget + popupWindowHeight) - docClientHeight;
   var cancelScrollX = false;
   if(xNew + (popupWindowWidth - rightOutOffset) > bodyWidth) {
    xNew -= (xNew + (popupWindowWidth - rightOutOffset) - bodyWidth);
    cancelScrollX = true;
   }
   var cancelScrollY = false;
   if(yNew + (popupWindowHeight - bottomOutOffset) > bodyHeight) {
    yNew -= (yNew + (popupWindowHeight - bottomOutOffset) - bodyHeight);
    cancelScrollY = true;
   }
   xNew = ASPx.PrepareClientPosForElement(xNew, element, true);
   yNew = ASPx.PrepareClientPosForElement(yNew, element, false);
   this.SetWindowPos(index, element, xNew, yNew);
   if(cancelScrollX) {
    var scrollLeftMax = bodyWidth - ASPx.GetDocumentClientWidth();
    if((rightOutOffset > 0) && (scrollX > scrollLeftMax)) {
     this.lockScroll++;
     ASPx.SetDocumentScrollLeft(scrollLeftMax);
     this.lockScroll--;
    }
   }
   if(cancelScrollY) {
    var scrollTopMax = bodyHeight - ASPx.GetDocumentClientHeight();
    if((bottomOutOffset > 0) && (scrollY > scrollTopMax)) {
     this.lockScroll++;
     ASPx.SetDocumentScrollTop(scrollTopMax);
     this.lockScroll--;
    }
   }
   this.lockScroll--;
  }
 },
 OnCollapseButtonClick: function(index) {
  this.SetCollapsedCore(index, !this.GetIsCollapsed(index));
 },
 SetCollapsedCore: function(index, minimization) {
  if(this.GetIsCollapsed(index) == minimization) return;
  this.DoCollapse(index, minimization);
  this.OnCollapsed(index, minimization);
 },
 DoCollapse: function(index, minimization) {
  if(this.GetIsCollapsed(index) == minimization) return;
  this.StartCollapse();
  if(minimization) {
   var cachedWidth = this.GetClientWindowWidth(index);
   var cachedHeight = this.GetClientWindowHeight(index);
   var shouldUpdateRestoredSize = this.ShoulUpdatedRestoredWindowSizeOnCollapse(index);
   var width = this.GetMainWindowWidth(index, !shouldUpdateRestoredSize);
   var height = this.GetMainWindowHeight(index, !shouldUpdateRestoredSize);
   this.SetWindowSizeByIndex(index, width, 0);
   this.SetWindowContentVisible(index, false);
   this.SetWindowFooterVisible(index, false);
   this.ResetWindowHeight(index);
   this.SetIsCollapsed(index, minimization);
   this.SetWindowCachedSize(index, cachedWidth, cachedHeight);
   if(shouldUpdateRestoredSize)
    this.UpdateRestoredWindowSize(index, width, height);
  }
  else {
   if(this.MaximizationExecuting()) {
    var element = this.GetWindowElement(index);
    if(element) {
     element.style.left = ASPx.GetDocumentScrollLeft();
     element.style.top = ASPx.GetDocumentScrollTop();
    }
   }
   this.SetWindowContentVisible(index, true);
   this.SetWindowFooterVisible(index, true);
   this.SetIsCollapsed(index, minimization);
   if(this.GetIsMaximized(index)) {
    var documentClientWidth = ASPx.PopupUtils.GetDocumentClientWidthForPopup();
    var documentClientHeight = ASPx.PopupUtils.GetDocumentClientHeightForPopup();
    this.SetWindowSizeByIndex(index, documentClientWidth, documentClientHeight);
   } else {
    var restoredWindowData = this.GetRestoredWindowData(index);
    this.SetWindowSizeByIndex(index, restoredWindowData.width, restoredWindowData.height);
   }
   ASPx.GetControlCollection().AdjustControls(this.GetWindowElement(index));
  }
  this.UpdateHeaderButtonSelected(index, "GetWindowCollapseButton", minimization);
  this.EndCollapse();
  this.UpdateWindowsStateCookie();
 },
 ResetWindowHeight: function(index) {
  var element = this.GetWindowElement(index);
  if(element)
   element.style.height = "";
 },
 ShoulUpdatedRestoredWindowSizeOnCollapse: function(index) {
  return !this.GetIsMaximized(index);
 },
 OnCollapsed: function(index, value) {
  if(value)
   this.RaiseCollapsed(index);
  else
   this.RaiseExpanded(index);
  this.RaiseAfterResizing(index);
 },
 OnMaximizeButtonClick: function(index) {
  this.SetMaximizedCore(index, !this.GetIsMaximized(index));
 },
 SetMaximizedCore: function(index, maximization) {
  if(this.GetIsMaximized(index) == maximization) return;
  this.DoMaximize(index, maximization);
  this.OnMaximizedChanged(index, maximization);
 },
 GetMaximizedPosition: function(element, isX) {
  if(ASPx.Browser.WebKitTouchUI)
   return ASPx.PrepareClientPosForElement(0, element, isX);
  return ASPx.PrepareClientPosForElement(isX ? ASPx.GetDocumentScrollLeft() : ASPx.GetDocumentScrollTop(), element, isX);
 },
 PerformMaximaze: function (index, maximization, element) {
  if (this.hideBodyScrollWhenMaximized)
   ASPx.PopupUtils.BodyScrollHelper.HideBodyScroll(element.id);
  if (this.GetIsCollapsed(index))
   this.DoCollapse(index, false);
  var cachedWidth = this.GetClientWindowWidth(index);
  var cachedHeight = this.GetClientWindowHeight(index);
  var restoredWindowData = this.GetInitRestoredWindowData(index);
  var documentClientWidth = ASPx.PopupUtils.GetDocumentClientWidthForPopup();
  var documentClientHeight = ASPx.PopupUtils.GetDocumentClientHeightForPopup();
  var windowClientTable = this.GetWindowClientTable(index);
  var windowClientTableParent = windowClientTable.parentNode;
  childStyle = ASPx.GetCurrentStyle(windowClientTableParent);
  var left = this.GetMaximizedPosition(element, true);
  var top = this.GetMaximizedPosition(element, false);
  this.SetWindowPos(index, element, left, top);
  this.SetWindowSizeByIndex(index, documentClientWidth, documentClientHeight);
  this.SetWindowCachedSize(index, cachedWidth, cachedHeight);
  this.SetRestoredWindowData(index, restoredWindowData);
  this.SetIsMaximized(index, maximization);
 },
 PerformMinimize: function (index, maximization, element) {
  var restoredWindowData = this.GetRestoredWindowData(index);
  var width = restoredWindowData.width || this.GetMainWindowWidth(index);
  var height = restoredWindowData.height || this.GetMainWindowHeight(index);
  this.SetIsMaximized(index, maximization);
  var left = ASPx.PrepareClientPosForElement(restoredWindowData.left, element, true);
  var top = ASPx.PrepareClientPosForElement(restoredWindowData.top, element, false);
  this.SetWindowPos(index, element, left, top);
  this.SetWindowSizeByIndex(index, width, height);
  if (this.GetIsCollapsed(index)) {
   this.SetIsCollapsed(index, false);
   this.UpdateRestoredWindowSizeLock();
   this.DoCollapse(index, true);
   this.UpdateRestoredWindowSizeUnlock();
  }
  if (this.hideBodyScrollWhenMaximized)
   ASPx.PopupUtils.BodyScrollHelper.RestoreBodyScroll(element.id);
 },
 DoMaximize: function(index, maximization) {
  if(this.GetIsMaximized(index) == maximization) return;
  var element = this.GetWindowElement(index);
  if(!element) return;
  this.StartMaximization();
  if(maximization)
   this.PerformMaximaze(index, maximization, element);
  else
   this.PerformMinimize(index, maximization, element);
  if(this.GetIsPinned(index))
   this.HoldPosition(index, true, element);
  this.UpdateHeaderButtonSelected(index, "GetWindowMaximizeButton", maximization);
  this.EndMaximization();
  this.UpdateWindowsStateCookie();
  this.CheckHeaderCursor(index);
 },
 OnMaximizedChanged: function(index, value) {
  if(value)
   this.RaiseMaximized(index);
  else
   this.RaiseRestoredAfterMaximized(index);
  this.RaiseAfterResizing(index);
 },
 GetInitRestoredWindowData: function(index) {
  var restoredWindowData = this.GetRestoredWindowData(index);
  restoredWindowData.left = this.GetCurrentLeft(index);
  restoredWindowData.top = this.GetCurrentTop(index);
  restoredWindowData.width = this.GetMainWindowWidth(index);
  restoredWindowData.height = this.GetMainWindowHeight(index);
  return restoredWindowData;
 },
 getDocumentDimensions: function(index) {
  var documentClientWidth = ASPx.PopupUtils.GetDocumentClientWidthForPopup(),
   documentClientHeight = ASPx.PopupUtils.GetDocumentClientHeightForPopup();
  return { width: documentClientWidth, height: documentClientHeight };
 },
 UpdateMaximizedWindowSizeOnResize: function(index) {
  this.StartUpdateMaximizedWindowSizeOnResize();
  var dimensions = this.getDocumentDimensions(index);
  if(this.GetIsCollapsed(index)) dimensions.height = 0;
  this.SetWindowSizeByIndex(index, dimensions.width, dimensions.height);
  if(this.GetIsCollapsed(index)) {
   this.CorrectCollapsedSize(index);
  }
  window.setTimeout(function() { this.SetMaximizedWindowSizeAfterOnResize(index); }.aspxBind(this), 0);
  this.EndUpdateMaximizedWindowSizeOnResize();
 },
 SetMaximizedWindowSizeAfterOnResize: function(index) {
  this.StartUpdateMaximizedWindowSizeOnResize();
  var dimensions = this.getDocumentDimensions(index);
  windowWidthCurrent = this.GetMainWindowWidth(index, true);
  windowHeightCurrent = this.GetMainWindowHeight(index, true);
  if(this.GetIsCollapsed(index))
   dimensions.height = 0;
  if(dimensions.width != windowWidthCurrent || dimensions.height != windowHeightCurrent) {
   this.SetWindowSizeByIndex(index, dimensions.width, dimensions.height);
   if(this.GetIsCollapsed(index)) {
    this.CorrectCollapsedSize(index);
   }
  }
  this.EndUpdateMaximizedWindowSizeOnResize();
 },
 CorrectCollapsedSize: function(index) {
  var contentWrapper = this.GetWindowContentWrapperElement(index);
  if(contentWrapper && ASPx.IsElementVisible(contentWrapper))
   contentWrapper.style.display = 'none';
 },
 UpdateHeaderButtonSelected: function(index, methodGetWindowButton, flagSelected) {
  if(typeof (ASPx.GetStateController) != "undefined") {
   button = this[methodGetWindowButton](index);
   var method = flagSelected ? "SelectElementBySrcElement" : "DeselectElementBySrcElement";
   ASPx.GetStateController()[method](button);
  }
 },
 CheckHeaderCursor: function(index) {
  if(!this.allowDragging) return;
  var dragElement = this.GetDragElement(index);
  if(!dragElement) return;
  var styleCursor = dragElement.style.cursor;
  var isPinned = this.GetIsPinned(index);
  var isMaximized = this.GetIsMaximized(index);
  if((isPinned || isMaximized) && styleCursor != "default")
   dragElement.style.cursor = "default";
  else if(!isPinned && !isMaximized && styleCursor != "move")
   dragElement.style.cursor = "move";
 },
 StartCollapse: function() {
  this.collapseExecutingLockCount++;
 },
 EndCollapse: function() {
  this.collapseExecutingLockCount--;
 },
 CollapseExecuting: function() {
  return this.collapseExecutingLockCount > 0;
 },
 StartMaximization: function() {
  this.maximizationExecutingLockCount++;
 },
 EndMaximization: function() {
  this.maximizationExecutingLockCount--;
 },
 MaximizationExecuting: function() {
  return this.maximizationExecutingLockCount > 0;
 },
 StartUpdateMaximizedWindowSizeOnResize: function() {
  this.browserResizingForMaxWindowLockCount++;
 },
 EndUpdateMaximizedWindowSizeOnResize: function() {
  this.browserResizingForMaxWindowLockCount--;
 },
 ResizingForMaxWindowLocked: function() {
  return this.browserResizingForMaxWindowLockCount > 0;
 },
 UpdateRestoredWindowSizeLock: function() {
  this.updateRestoredWindowSizeLockCount++;
 },
 UpdateRestoredWindowSizeUnlock: function() {
  this.updateRestoredWindowSizeLockCount--;
 },
 UpdateRestoredWindowSizeLocked: function() {
  return this.updateRestoredWindowSizeLockCount > 0;
 },
 UpdateRestoredWindowSize: function(index, width, height) {
  if(!this.UpdateRestoredWindowSizeLocked()) {
   restoredMinWindowData = this.GetRestoredWindowData(index);
   restoredMinWindowData.width = width;
   restoredMinWindowData.height = height;
   this.SetRestoredWindowData(index, restoredMinWindowData);
  }
 },
 GetWindowsState: function() {
  var state = ASPxClientPopupControlBase.prototype.GetWindowsState.call(this);
  for(var i = 0; i < this.GetWindowCountCore() ; i++) {
   state += this.GetWindowState(i);
   if(i < this.GetWindowCountCore() - 1) state += ";";
  }
  return state;
 },
 CreateWindows: function(windowsNames) {
  for(var i = 0; i < windowsNames.length; i++) {
   var window = new ASPxClientPopupWindow(this, i, windowsNames[i]);
   this.windows.push(window);
  }
 },
 RaiseCloseButtonClick: function(index) {
  ASPxClientPopupControlBase.prototype.RaiseCloseButtonClick.call(this, index);
 },
 RaisePinnedChanged: function(index, pinned) {
  var window = index < 0 ? null : this.GetWindow(index);
  if(!this.PinnedChanged.IsEmpty()) {
   var args = new ASPxClientPopupWindowPinnedChangedEventArgs(window, pinned);
   this.PinnedChanged.FireEvent(this, args);
  }
 },
 RaiseCollapsed: function(index) {
  this.RaiseResize(index, ASPxClientPopupControlResizeState.Collapsed);
 },
 RaiseExpanded: function(index) {
  this.RaiseResize(index, ASPxClientPopupControlResizeState.Expanded);
 },
 RaiseMaximized: function(index) {
  this.RaiseResize(index, ASPxClientPopupControlResizeState.Maximized);
 },
 RaiseRestoredAfterMaximized: function(index) {
  this.RaiseResize(index, ASPxClientPopupControlResizeState.RestoredAfterMaximized);
 },
 GetContentWidth: function() {
  return this.GetWindowContentWidth(null);
 },
 GetContentHeight: function() {
  return this.GetWindowContentHeight(null);
 },
 SetSize: function(width, height) {
  ASPxClientPopupControlBase.prototype.SetSize.call(this, width, height);
 },
 GetWindowDimension: function(window, isWidth, forceFromCache) {
  var index = (window != null) ? window.index : -1;
  return this.GetWindowDimensionByIndex(index, isWidth, forceFromCache);
 },
 GetWindowContentDimension: function(window, isWidth) {
  var index = (window != null) ? window.index : -1,
   contentElem = this.GetWindowContentElement(index),
   dimensionHolder = contentElem.parentNode,
   paddingsHolder = contentElem;
  return isWidth ?
  (dimensionHolder.offsetWidth - this.getLeftRightBordersAndPaddingsSummaryValue(paddingsHolder)) :
  (dimensionHolder.offsetHeight - this.getTopBottomBordersAndPaddingsSummaryValue(paddingsHolder));
 },
 GetWindowContentWidth: function(window) {
  return this.GetWindowContentDimension(window, true);
 },
 GetWindowContentHeight: function(window) {
  return this.GetWindowContentDimension(window, false);
 },
 GetWindowHeight: function(window) {
  return this.GetWindowDimension(window, false);
 },
 GetWindowWidth: function(window) {
  return this.GetWindowDimension(window, true);
 },
 SetWindowSize: function(window, width, height) {
  return ASPxClientPopupControlBase.prototype.SetWindowSize.call(this, window, width, height);
 },
 GetContentHTML: function() {
  return this.GetContentHtml();
 },
 SetContentHTML: function(html) {
  this.SetContentHtml(html);
 },
 SetWindowPopupElementID: function(window, popupElementId) {
  var index = (window != null) ? window.index : -1;
  this.SetPopupElementIDByIndex(index, popupElementId);
 },
 SetPopupElementID: function(popupElementId) {
  this.SetPopupElementIDByIndex(-1, popupElementId);
 },
 GetCurrentPopupElementIndex: function() {
  return this.GetWindowCurrentPopupElementIndexByWindowIndex(-1);
 },
 GetWindowCurrentPopupElementIndex: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.GetWindowCurrentPopupElementIndexByWindowIndex(index);
 },
 GetCurrentPopupElement: function() {
  return this.GetWindowCurrentPopupElementByIndex(-1);
 },
 GetWindowCurrentPopupElement: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.GetWindowCurrentPopupElementByIndex(index);
 },
 ShowAtPos: function(x, y) {
  this.ShowWindowAtPos(null, Math.round(x), Math.round(y));
 },
 BringToFront: function() {
  this.BringWindowToFront(null);
 },
 IsWindowVisible: function(window) {
  return ASPxClientPopupControlBase.prototype.IsWindowVisible.call(this, window);
 },
 GetWindow: function(index) {
  return ASPxClientPopupControlBase.prototype.GetWindow.call(this, index);
 },
 GetWindowByName: function(name) {
  for(var i = 0; i < this.windows.length; i++)
   if(this.windows[i].name == name) return this.windows[i];
  return null;
 },
 GetWindowCount: function() {
  return this.GetWindowCountCore();
 },
 ShowWindow: function(window, popupElementIndex) {
  var index = (window != null) ? window.index : -1;
  this.ShowWindowByIndex(index, popupElementIndex);
 },
 ShowWindowAtElement: function(window, htmlElement) {
  var index = (window != null) ? window.index : -1;
  this.ShowWindowAtElementByIndex(index, htmlElement);
 },
 ShowWindowAtElementByID: function(window, id) {
  var htmlElement = document.getElementById(id);
  this.ShowWindowAtElement(window, htmlElement);
 },
 ShowWindowAtPos: function(window, x, y) {
  if(!this.isInitialized)
   return;
  var index = (window != null) ? window.index : -1;
  this.DoShowWindowCore(index, x, y, -1, false, true);
 },
 BringWindowToFront: function(window) {
  var index = (window != null) ? window.index : -1;
  var element = this.GetWindowElement(index);
  aspxGetPopupControlCollection().ActivateWindowElement(element, undefined, this.GetPopupType(), this.GetDefaultZIndexFromServer(), this.GetPopupControlZIndex());
 },
 HideWindow: function(window) {
  ASPxClientPopupControlBase.prototype.HideWindow.call(this, window);
 },
 GetWindowContentHTML: function(window) {
  return this.GetWindowContentHtml(window);
 },
 SetWindowContentHTML: function(window, html) {
  this.SetWindowContentHtml(window, html);
 },
 GetWindowContentHtml: function(window) {
  return ASPxClientPopupControlBase.prototype.GetWindowContentHtml.call(this, window);
 },
 SetWindowContentHtml: function(window, html, useAnimation) {
  ASPxClientPopupControlBase.prototype.SetWindowContentHtml.call(this, window, html, useAnimation);
 },
 AfterSetWindowContentHtml: function(index, contentContainer, useAnimation) {
  if(this.GetAdaptiveModalMode(index))
   this.TryAutoUpdatePosition(index);
  else if(this.InternalIsWindowVisible(index))
   this.RecalculateWindowSize(index);
  ASPxClientPopupControlBase.prototype.AfterSetWindowContentHtml.call(this, index, contentContainer, useAnimation);
  this.UpdateScrollbar(index);
 },
 UpdateAlignment: function(index) {
  if(this.GetIsDragged(index)) return;
  var element = this.GetWindowElement(index),
   wrapperStyle = getComputedStyle(this.GetModalWrapperElement(index)),
   top = ASPxClientPopupControl.AligmentCalculator.CalculateTopMargin(this.modalVerticalAlign, element.offsetHeight, this.GetDefaultVerticalOffset()),
   left = ASPxClientPopupControl.AligmentCalculator.CalculateLeftRightMargin(this.modalHorizontalAlign, ModalAlign.WindowLeft, wrapperStyle.paddingLeft),
   right = ASPxClientPopupControl.AligmentCalculator.CalculateLeftRightMargin(this.modalHorizontalAlign, ModalAlign.WindowRight, wrapperStyle.paddingRight);
  ASPx.SetStyles(element, {
   marginTop: top,
   marginLeft: left,
   marginRight: right
  });
 },
 GetOverlayElement: function(index) {
  return this.GetWindowModalElement(index);
 },
 GetModalWrapperElement: function(index) {
  if(!this.adaptivityEnabled) return null;
  var windowElement = this.GetWindowElement(index);
  return !!windowElement ? windowElement.parentNode : null;
 },
 GetWindowHeightWithoutContent: function(index) {
  var element = this.GetWindowElement(index),
   borderOwner = this.GetWindowBorderOwnerElement(element);
  return this.GetHeaderFooterHeightCore(index) + ASPx.GetVerticalBordersWidth(borderOwner);
 },
 StretchVertically: function() {
  this.StretchVerticallyByIndex(-1, true);
 },
 WindowStretchVertically: function(window) {
  var index = (window != null) ? window.index : -1;
  this.StretchVerticallyByIndex(index, true);
 },
 StretchVerticallyByIndex: function(index, value) {
  if(this.GetStretchVerticallyByIndex(index) !== value) {
   this.SetPropertyValue(index, "stretchVertically", value);
   var oldMinHeight = !!this.GetModalMinHeight(index) ? this.GetModalMinHeight(index) : 0;
   this.SetPropertyValue(index, "modalMinHeight", value ? "100vh" : this.minHeightBackup);
   this.minHeightBackup = oldMinHeight;
   this.UpdateHeightDimensions(index);
  }
 },
 SetAdaptiveMinWidth: function(minWidth) {
  this.SetAdaptiveMinWidthByIndex(-1, minWidth);
 },
 SetWindowAdaptiveMinWidth: function(window, minWidth) {
  var index = (window != null) ? window.index : -1;
  this.SetAdaptiveMinWidthByIndex(index, minWidth);
 },
 SetAdaptiveMaxWidth: function(maxWidth) {
  this.SetAdaptiveMaxWidthByIndex(-1, maxWidth);
 },
 SetWindowAdaptiveMaxWidth: function(window, maxWidth) {
  var index = (window != null) ? window.index : -1;
  this.SetAdaptiveMaxWidthByIndex(index, maxWidth);
 },
 SetAdaptiveMinHeight: function(minHeight) {
  this.SetAdaptiveMinHeightByIndex(-1, minHeight);
 },
 SetWindowAdaptiveMinHeight: function(window, minHeight) {
  var index = (window != null) ? window.index : -1;
  this.SetAdaptiveMinHeightByIndex(index, minHeight);
 },
 SetAdaptiveMaxHeight: function(maxHeight) {
  this.SetAdaptiveMaxHeightByIndex(-1, maxHeight);
 },
 SetWindowAdaptiveMaxHeight: function(window, maxHeight) {
  var index = (window != null) ? window.index : -1;
  this.SetAdaptiveMaxHeightByIndex(index, maxHeight);
 },
 SetAdaptiveHeightDimension: function(index, propertyName, value) {
  value = this.ConvertDimensionValueToString(value);
  value = value.indexOf("%") > -1 ? value.replace("%", "vh") : value;
  var margins = 0;
  if(this.stretchVertically && propertyName === "minHeight")
   margins = ASPx.GetTopBottomMargins(this.GetWindowElement(index));
  var contentElement = this.GetWindowContentElement(index);
  var iframe = this.GetWindowContentIFrameElement(index);
  var additionalHeight = this.GetWindowHeightWithoutContent(index) + margins;
  var adaptiveHeight = "calc(" + value + " - " + additionalHeight + "px)";
  contentElement.style[propertyName] = adaptiveHeight;
  if (contentElement.style.minHeight) {
   if (iframe || this.HasAnyScrollBars(index))
    contentElement.style.height = "1px";
   else if (propertyName === "minHeight")
    this.SetContentWrapperAdaptiveHeight(index, adaptiveHeight);
  }
  if(iframe) {
   iframe.style.verticalAlign = "text-bottom";
   iframe.style.height = "100%";
  }
 },
 ConvertDimensionValueToString: function(value) {
  if(typeof value === "number")
   return value + "px";
  if(typeof value === "string")
   return value;
 },
 CanBeClosedByClickOnElement: function(index, srcElement, posX, id) {
  return ASPxClientPopupControlBase.prototype.CanBeClosedByClickOnElement.call(this, index, srcElement, posX, id) &&
   (!this.GetAdaptiveModalMode(index) || srcElement != this.GetModalWrapperElement(index) || posX < srcElement.offsetWidth - ASPx.GetVerticalScrollBarWidth());
 },
 SetWindowDisplay: function(index, value) {
  ASPxClientPopupControlBase.prototype.SetWindowDisplay.call(this, index, value);
  if(this.adaptivityEnabled) {
   var wrapper = this.GetModalWrapperElement(index);
   ASPx.SetElementDisplay(wrapper, value);
  }
 },
 HaveSpecialDivForAnimation: function() {
  return ASPxClientPopupControlBase.prototype.HaveSpecialDivForAnimation.call(this) || this.adaptivityEnabled;
 },
 WindowIsModal: function(index) {
  return ASPxClientPopupControlBase.prototype.WindowIsModal.call(this, index) || this.GetAdaptiveModalMode(index);
 },
 RecalculateWindowSize: function(index) {
  var window = this.GetWindowElement(index);
  var displayAfterSetSize = window.style.display;
  this.SetClientWindowSizeCoreLite(index, this.GetWindowWidthInternal(index), this.GetWindowHeightInternal(index), this.GetIsCollapsed(index));
  window.style.display = displayAfterSetSize;
  if(this.HasAnyScrollBars(index))
   this.NormalizeWindowSize(index, this.GetIsMaximized(index));
 },
 GetWindowContentIFrame: function(window) {
  return ASPxClientPopupControlBase.prototype.GetWindowContentIFrame.call(this, window);
 },
 GetWindowContentUrl: function(window) {
  return ASPxClientPopupControlBase.prototype.GetWindowContentUrl.call(this, window);
 },
 SetWindowContentUrl: function(window, url) {
  ASPxClientPopupControlBase.prototype.SetWindowContentUrl.call(this, window, url);
 },
 RefreshDimensionsAfterCreateIframe: function(index) {
  if(ASPx.IsElementVisible(this.GetWindowElement(index), true)) {
   var windowWidth = this.GetWindowDimensionByIndex(index, true, false);
   var windowHeight = this.GetWindowDimensionByIndex(index, false, false);
   this.SetClientWindowSizeCoreLite(index, windowWidth, windowHeight);
  }
 },
 GetPinned: function() {
  return this.GetIsPinned(-1);
 },
 SetPinned: function(value) {
  this.SetPinCore(-1, value);
 },
 GetWindowPinned: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.GetIsPinned(index);
 },
 SetWindowPinned: function(window, value) {
  var index = (window != null) ? window.index : -1;
  this.SetPinCore(index, value);
 },
 GetMaximized: function() {
  return this.GetIsMaximized(-1);
 },
 SetMaximized: function(value) {
  this.SetMaximizedCore(-1, value);
 },
 GetWindowMaximized: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.GetIsMaximized(index);
 },
 SetWindowMaximized: function(window, value) {
  var index = (window != null) ? window.index : -1;
  this.SetMaximizedCore(index, value);
 },
 GetCollapsed: function() {
  return this.GetIsCollapsed(-1);
 },
 SetCollapsed: function(value) {
  this.SetCollapsedCore(-1, value);
 },
 GetWindowCollapsed: function(window) {
  var index = (window != null) ? window.index : -1;
  return this.GetIsCollapsed(index);
 },
 SetWindowCollapsed: function(window, value) {
  var index = (window != null) ? window.index : -1;
  this.SetCollapsedCore(index, value);
 },
 RefreshWindowContentUrl: function(window) {
  ASPxClientPopupControlBase.prototype.RefreshWindowContentUrl.call(this, window);
 },
 SetWindowContentVisible: function(index, visible) {
  var contentElement = this.GetWindowContentWrapperElement(index);
  if(contentElement)
   this.SetWindowPartVisibleCore(contentElement, "DXPopupWindowContentDisplay", visible);
 },
 SetWindowFooterVisible: function(index, visible) {
  var footerElement = this.GetWindowFooterElement(index);
  if(footerElement)
   this.SetWindowPartVisibleCore(footerElement, "DXPopupWindowFooterDisplay", visible);
 },
 SetWindowPartVisibleCore: function(partElement, displayCacheName, visible) {
  var nothingChanged = ASPx.IsElementVisible(partElement) && visible;
  if(nothingChanged) return;
  if(!(ASPx.IsExists(partElement[displayCacheName])))
   partElement[displayCacheName] = partElement.style.display;
  partElement.style.display = visible ? partElement[displayCacheName] : 'none';
 },
 UpdatePosition: function() {
  this.UpdatePositionAtElement(this.GetPopupElement(-1, this.GetLastShownPopupElementIndex(-1)));
 },
 UpdatePositionAtElement: function(popupElement) {
  ASPxClientPopupControlBase.prototype.UpdatePositionAtElement.call(this, popupElement);
 },
 UpdateWindowPosition: function(window) {
  var index = (window != null) ? window.index : -1;
  this.UpdateWindowPositionAtElement(window, this.GetPopupElement(index, this.GetLastShownPopupElementIndex(index)));
 },
 UpdateWindowPositionAtElement: function(window, popupElement) {
  ASPxClientPopupControlBase.prototype.UpdateWindowPositionAtElement.call(this, window, popupElement);
 },
 UpdateWindowPositionInternal: function(index, popupElement) {
  if(this.GetAdaptiveModalMode(index)) {
   this.TryAutoUpdatePosition(index);
   return;
  }
  if(!ASPxClientPopupControlBase.prototype.UpdateWindowPositionInternal.call(this, index, popupElement))
   this.DoShowWindowAtPos(index, ASPx.InvalidDimension, ASPx.InvalidDimension, this.GetLastShownPopupElementIndex(index), false, false);
 },
 UpdateMode: function(index) {
  if(!this.adaptivityEnabled) return;
  var currentMode = this.GetAdaptiveModalMode(index),
   newMode = this.NeedAdaptiveModalMode(index);
  if(currentMode != newMode) {
   this.SetAdaptiveModalMode(index, newMode);
   if(!newMode && !ASPx.Browser.WebKitTouchUI) {
    var element = this.GetWindowElement(index);
    ASPx.PopupUtils.BodyScrollHelper.RestoreBodyScroll(element.id);
   }
   this.ShowWindowByIndex(-1);
   this.RaiseAdaptiveModeChanged();
  }
 },
 RaiseAdaptiveModeChanged: function() {
  if(!this.AdaptiveModeChanged.IsEmpty()) {
   var args = new ASPxClientEventArgs();
   this.AdaptiveModeChanged.FireEvent(this, args);
  }
 },
 TryAutoUpdatePosition: function(index) {
  this.UpdateMode(index);
  ASPxClientPopupControlBase.prototype.TryAutoUpdatePosition.call(this, index);
  if(this.GetAdaptiveModalMode(index)) {
   this.CorrectScrollPositionOnAndroid(index, false);
   this.ResetWebkitScrolling(this.GetModalWrapperElement(index), 100);
   this.UpdateHeightDimensions(index);
   this.ChangeHeaderFixed(index);
   this.UpdateAlignment(index);
   this.ChangeFooterFixed(index);
   if(this.GetIsDragged(index) &&
    ASPxClientPopupControl.WindowResizeHelper.AdjustModalOnWindowResize(this.GetWindowElement(index)))
    this.SetIsDragged(index, false);
  }
  if(this.GetIsMaximized(index)) {
   this.CorrectScrollPositionOnAndroid(index, true);
   this.UpdateMaximizedWindowSizeOnResize(index);
  }
 },
 CorrectScrollPositionOnAndroid: function(index, checkElementIsInPopup) {
  if(ASPx.Browser.AndroidMobilePlatform) {
   var activeElement = this.GetActiveElementIncludingIframes();
   if(activeElement && (activeElement.tagName === "INPUT" || activeElement.tagName === "TEXTAREA") &&
    (!checkElementIsInPopup || this.GetWindowElement(index).contains(activeElement)))
    window.setTimeout(function() {
     if(activeElement.scrollIntoViewIfNeeded)
      activeElement.scrollIntoViewIfNeeded();
    }, 100);
  }
 },
 GetActiveElementIncludingIframes: function(document) {
  document = document || window.document;
  if(document.body === document.activeElement || document.activeElement.tagName === "IFRAME") {
   var iframes = document.getElementsByTagName("iframe");
   for(var i = 0; i < iframes.length; i++) {
    var iFrameDocument = null;
    try {
     iFrameDocument = iframes[i].contentWindow.document;
    }
    catch(e) {  }
    if(iFrameDocument !== null) {
     var focused = this.GetActiveElementIncludingIframes(iframes[i].contentWindow.document);
     if(focused !== false) {
      return focused;
     }
    }
   }
  } else
   return document.activeElement;
  return false;
 },
 OnModalWrapperScroll: function(e, index) {
  if(!this.GetAdaptiveModalMode(index) || this.IsWrapperScrollEventLocked()) return;
  this.ChangeHeaderFixed(index);
  this.ChangeFooterFixed(index);
 },
 OnModalWrapperTouchStart: function(e) {
  this.touchStartY = e.touches[0].clientY;
 },
 OnModalWrapperTouchMove: function (e, index) {
  if(e.touches.length > 1)
   return;
  var preventScroll = this.RequirePreventScrollForAdaptiveMode(e, index);
  if(preventScroll)
   ASPx.Evt.PreventEvent(e);
  this.touchStartY = e.touches[0].clientY;
 },
 RequirePreventScrollForAdaptiveMode: function(e, index) {
  var modalWrapper = this.GetModalWrapperElement(index),
   zoom = modalWrapper.offsetWidth / window.innerWidth,
   activeElement = document.activeElement,
   activeTyping = !!activeElement && (activeElement["type"] === "text" || activeElement["type"] === "textarea");
  if(zoom !== 1 || activeTyping)
   return false;
  var currentY = e.touches[0].clientY,
   preventScroll = currentY > this.touchStartY && modalWrapper.scrollTop === 0 ||
    currentY < this.touchStartY && modalWrapper.scrollTop + modalWrapper.clientHeight >= modalWrapper.scrollHeight;
  if(!preventScroll)
   return false;
  var targetElement = ASPx.Evt.GetEventSource(e),
   contentWrapper = this.GetWindowContentWrapperElement(index);
  while(targetElement && targetElement !== contentWrapper && targetElement.tagName !== 'BODY') {
   if(this.ElementHasScroll(targetElement))
    return false;
   targetElement = targetElement.parentNode;
  }
  return true;
 },
 ElementHasScroll: function(elem) {
  var style = window.getComputedStyle(elem);
  return ["overflow", "overflow-x", "overflow-y"].some(function(prop) {
   return ASPx.Data.ArrayContains(["scroll","auto"], style[prop]);
  });
 },
 GetFixedHeaderMaxBottom: function(index) {
  var contentWrapper = this.GetWindowContentWrapperElement(index);
  return ASPx.GetAbsolutePositionY(contentWrapper) + contentWrapper.offsetHeight;
 },
 GetFixedFooterMaxTop: function(index) {
  var header = this.GetWindowHeaderElement(index),
   contentWrapper = this.GetWindowContentWrapperElement(index),
   headerBottom = !!header ? ASPx.GetAbsolutePositionY(header) + header.offsetHeight : ASPx.GetAbsolutePositionY(contentWrapper);
  return window.innerHeight - headerBottom;
 },
 ChangeHeaderFixed: function(index) {
  if(!this.GetFixedHeader(index)) return;
  var element = this.GetWindowElement(index),
   modalWrapper = this.GetModalWrapperElement(index),
   isHeaderPartiallyHidden = modalWrapper.scrollTop > element.offsetTop,
   maxBottom = isHeaderPartiallyHidden ? this.GetFixedHeaderMaxBottom(index) : 0;
  this.FixateHeader(index, isHeaderPartiallyHidden, maxBottom);
 },
 ChangeFooterFixed: function(index) {
  if(!this.GetFixedFooter(index) || !this.GetWindowFooterElement(index)) return;
  var element = this.GetWindowElement(index),
   modalWrapper = this.GetModalWrapperElement(index),
   isFooterPartiallyHidden = element.offsetTop + element.offsetHeight - modalWrapper.scrollTop > window.innerHeight,
   maxTop = isFooterPartiallyHidden ? this.GetFixedFooterMaxTop(index) : 0;
  this.FixateFooter(index, isFooterPartiallyHidden, maxTop);
 },
 ChangeHeaderFooterFixed: function(index, elementToFix, isFixed, fixedClassName, offsetName, maxPos) {
  if(!elementToFix) return;
  var element = this.GetWindowElement(index),
   contentWrapper = this.GetWindowContentWrapperElement(index),
   changeClassNameFunc = isFixed ? ASPx.AddClassNameToElement : ASPx.RemoveClassNameFromElement,
   elementToFixHeight = elementToFix.offsetHeight;
  if(isFixed) {
   var borderOwner = this.GetWindowBorderOwnerElement(element),
    width = ASPx.GetClearClientWidth(borderOwner);
   ASPx.SetOffsetWidth(elementToFix, width);
   elementToFix.style[offsetName] = maxPos < elementToFixHeight ? maxPos - elementToFixHeight + "px" : "";
  } else
   elementToFix.style.width = "";
  contentWrapper.style["margin-" + offsetName] = isFixed ? elementToFixHeight + "px" : 0;
  changeClassNameFunc(elementToFix, fixedClassName);
 },
 FixateFooter: function(index, isFixed, maxTop) {
  this.ChangeHeaderFooterFixed(index, this.GetWindowFooterElement(index), isFixed, "dxFixedFooter", "bottom", maxTop);
 },
 FixateHeader: function(index, isFixed, maxBottom) {
  this.ChangeHeaderFooterFixed(index, this.GetWindowHeaderElement(index), isFixed, "dxFixedHeader", "top", maxBottom);
 },
 LockWrapperScrollEvent: function() {
  this.wrapperScrollEventLocked = true;
 },
 UnlockWrapperScrollEventEvent: function() {
  this.wrapperScrollEventLocked = false;
 },
 IsWrapperScrollEventLocked: function() {
  return this.wrapperScrollEventLocked;
 },
 ResetScroll: function(index) {
  if(!this.GetAdaptiveModalMode(index)) return;
  this.LockWrapperScrollEvent();
  this.GetModalWrapperElement(index).scrollTop = 0;
  this.UnlockWrapperScrollEventEvent();
 },
 AdjustModalElementBounds: function(element) {
  if(!ASPx.IsExistsElement(element)) return;
  ASPx.SetStyles(element, {
   left: 0,
   top: 0,
   right: 0,
   bottom: 0,
   width: "",
   height: ""
  });
 },
 RefreshPopupElementConnection: function() {
  ASPxClientPopupControlBase.prototype.RefreshPopupElementConnection.call(this);
 }
});
ASPxClientPopupControl.AligmentCalculator = (function() {
 function CalculateTopMargin(verticalAlign, elementHeight, defaultOffset) {
  if(verticalAlign === ModalAlign.WindowTop)
   return "";
  if(elementHeight < window.innerHeight) {
   var freeSpace = window.innerHeight - elementHeight;
   switch(verticalAlign) {
    case ModalAlign.WindowCenter:
     return freeSpace / 2;
    case ModalAlign.WindowBottom:
     return freeSpace - defaultOffset;
   }
  }
  return "";
 }
 function CalculateLeftRightMargin(horizontalAlign, forAligmenment, wrapperPadding) {
  if(horizontalAlign === forAligmenment) {
   if(ASPx.PxToInt(wrapperPadding) !== 0)
    return 0;
   return 10;
  }
  return "";
 }
 return {
  CalculateTopMargin: CalculateTopMargin,
  CalculateLeftRightMargin: CalculateLeftRightMargin
 };
})();
ASPxClientPopupControl.Animation = (function() {
 function GetVerticalDirection(verticalAlign, horizontalAlign) {
  switch(verticalAlign) {
   case ModalAlign.WindowTop:
    return -1;
   case ModalAlign.WindowCenter:
    if(horizontalAlign === ModalAlign.WindowCenter)
     return -1;
    return 0;
   case ModalAlign.WindowBottom:
    return 1;
  }
 }
 function GetHorizontalDirection(horizontalAlign) {
  switch(horizontalAlign) {
   case ModalAlign.WindowLeft:
    return -1;
   case ModalAlign.WindowCenter:
    return 0;
   case ModalAlign.WindowRight:
    return 1;
  }
 }
 function NeedFadeAnimation(horizontalAlign, verticalAlign, animationType, popupHorizontalAlign, popupVerticalAlign, adaptiveModalMode) {
  if(animationType === ASPxClientPopupControlBase.AnimationType.Auto) {
   if(adaptiveModalMode)
    return horizontalAlign === ModalAlign.WindowCenter && verticalAlign === ModalAlign.WindowCenter;
   else
    return popupHorizontalAlign === ASPx.PopupUtils.WindowCenterAlignIndicator && popupVerticalAlign === ASPx.PopupUtils.WindowCenterAlignIndicator;
  }
  return false;
 }
 return {
  GetVerticalDirection: GetVerticalDirection,
  GetHorizontalDirection: GetHorizontalDirection,
  NeedFadeAnimation: NeedFadeAnimation
 };
})();
ASPxClientPopupControl.WindowResizeHelper = (function() {
 var previousInnerWidth = 0,
  previousMargin = 0;
 function AdjustModalOnWindowResize(element) {
  var offsetLeft = element.offsetLeft,
   offsetWidth = element.offsetWidth,
   windowWidth = window.innerWidth,
   expectedLeft = windowWidth / 2 - offsetWidth / 2,
   toTheRightOfCenter = offsetLeft > expectedLeft,
   dw = windowWidth - previousInnerWidth,
   computedStyle = getComputedStyle(element),
   left = ASPx.PxToFloat(computedStyle.left),
   currentMargin = ASPx.PxToFloat(computedStyle.marginLeft),
   dm = currentMargin - previousMargin,
   newLeft = left - dm;
  if(toTheRightOfCenter)
   newLeft += dw;
  ASPx.SetStyles(element, { left: newLeft + "px" });
  if(Math.abs(offsetLeft - expectedLeft) <= 10 || dw < 0 && toTheRightOfCenter !== (element.offsetLeft > expectedLeft)) {
   ASPx.SetStyles(element, { left: "" });
   ASPx.Attr.RestoreStyleAttribute(element, "top");
   ASPx.Attr.RestoreStyleAttribute(element, "margin-top");
   return true;
  }
  previousMargin = currentMargin;
  previousInnerWidth = windowWidth;
  return false;
 }
 function Initialize(element) {
  previousInnerWidth = window.innerWidth;
  ASPx.Attr.ChangeStyleAttribute(element, "top", element.offsetTop + "px");
  ASPx.Attr.ChangeStyleAttribute(element, "margin-top", "0");
  previousMargin = ASPx.PxToFloat(getComputedStyle(element).marginLeft);
 }
 return {
  Initialize: Initialize,
  AdjustModalOnWindowResize: AdjustModalOnWindowResize
 };
})();
ASPxClientPopupControl.Cast = ASPxClientControl.Cast;
ASPxClientPopupControl.GetPopupControlCollection = function() {
 return aspxGetPopupControlCollection();
};
var ASPxClientPopupWindow = ASPx.CreateClass(null, {
 constructor: function(popupControl, index, name) {
  this.popupControl = popupControl;
  this.index = index;
  this.name = name;
 },
 GetHeaderImageUrl: function() {
  return this.popupControl.GetWindowHeaderImageUrl(this.index);
 },
 SetHeaderImageUrl: function(value) {
  this.popupControl.SetWindowHeaderImageUrl(this.index, value);
 },
 GetFooterImageUrl: function() {
  return this.popupControl.GetWindowFooterImageUrl(this.index);
 },
 SetFooterImageUrl: function(value) {
  this.popupControl.SetWindowFooterImageUrl(this.index, value);
 },
 GetHeaderNavigateUrl: function() {
  return this.popupControl.GetWindowHeaderNavigateUrl(this.index);
 },
 SetHeaderNavigateUrl: function(value) {
  this.popupControl.SetWindowHeaderNavigateUrl(this.index, value);
 },
 GetFooterNavigateUrl: function() {
  return this.popupControl.GetWindowFooterNavigateUrl(this.index);
 },
 SetFooterNavigateUrl: function(value) {
  this.popupControl.SetWindowFooterNavigateUrl(this.index, value);
 },
 GetHeaderText: function() {
  return this.popupControl.GetWindowHeaderText(this.index);
 },
 SetHeaderText: function(value) {
  this.popupControl.SetWindowHeaderText(this.index, value);
 },
 GetFooterText: function() {
  return this.popupControl.GetWindowFooterText(this.index);
 },
 SetFooterText: function(value) {
  this.popupControl.SetWindowFooterText(this.index, value);
 }
});
var ASPxClientPopupWindowEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(window) {
  this.constructor.prototype.constructor.call(this);
  this.window = window;
 }
});
var ASPxClientPopupWindowCancelEventArgs = ASPx.CreateClass(ASPxClientCancelEventArgs, {
 constructor: function(window, closeReason) {
  this.constructor.prototype.constructor.call(this);
  this.window = window;
  this.closeReason = closeReason;
 }
});
var ASPxClientPopupWindowCloseUpEventArgs = ASPx.CreateClass(ASPxClientPopupWindowEventArgs, {
 constructor: function(window, closeReason) {
  this.constructor.prototype.constructor.call(this, window);
  this.closeReason = closeReason;
 }
});
var ASPxClientPopupWindowResizeEventArgs = ASPx.CreateClass(ASPxClientPopupWindowEventArgs, {
 constructor: function(window, resizeState) {
  this.constructor.prototype.constructor.call(this, window);
  this.resizeState = resizeState;
 }
});
var ASPxClientPopupWindowPinnedChangedEventArgs = ASPx.CreateClass(ASPxClientPopupWindowEventArgs, {
 constructor: function(window, pinned) {
  this.constructor.prototype.constructor.call(this, window);
  this.pinned = pinned;
 }
});
var ASPxClientPopupControlCollection = ASPx.CreateClass(ASPxClientControlCollection, {
 constructor: function() {
  this.constructor.prototype.constructor.call(this);
  this.draggingControl = null;
  this.draggingWindowIndex = -1;
  this.gragXOffset = 0;
  this.gragYOffset = 0;
  this.visibleModalElements = [];
  this.visiblePopupWindowIds = [];
  this.windowResizeByBodyScrollVisibilityChangingLockCount = 0;
  this.savedBodyWidth = 0;
  this.savedBodyHeight = 0;
  this.overControl = null;
  this.overWindowIndex = -1;
  this.overXPos = ASPx.InvalidPosition;
  this.overYPos = ASPx.InvalidPosition;
  this.appearTimerID = -1;
  this.disappearTimerID = -1;
  this.scrollEventLockCount = 0;
  this.currentActiveWindowElement = null;
  this.resizeControl = null;
  this.resizeIndex = -2;
  this.resizeCursor = "";
  this.resizePanel = null;
  this.selectBanned = false;
  this.pcWindowsAreRestrictedByDocumentWindow = true;
  this.docScrollLeft = -1;
  this.docScrollTop = -1;
  this.EnsureSaveScrollState();
 },
 GetCollectionType: function(){
  return "Popup";
 },
 Remove: function(popupControl) {
  for(var i = this.visibleModalElements.length - 1; i >= 0; i--) {
   var modalElement = this.visibleModalElements[i];
   if(modalElement && modalElement.DXModalPopupControl === popupControl)
    this.UnregisterVisibleModalElement(modalElement);
  }
  for(var j = this.visiblePopupWindowIds.length - 1; j >= 0; j--) {
   var id = this.visiblePopupWindowIds[j];
   if(!ASPx.IsExists(id)) continue;
   var popupWindow = this.GetPopupWindowFromID(id);
   if(popupWindow.popupControl === popupControl) {
    var windowElement = popupControl.GetWindowElement(popupWindow.windowIndex);
    if(windowElement)
     this.UnregisterVisibleWindow(windowElement);
    else
     ASPx.Data.ArrayRemove(this.visiblePopupWindowIds, id);
   }
  }
  ASPxClientControlCollection.prototype.Remove.call(this, popupControl);
 },
 EnsureSaveScrollState: function() {
  if(ASPx.documentLoaded && this.docScrollLeft < 0 && this.docScrollTop < 0)
   this.SaveScrollState();
 },
 GetPopupWindowFromID: function(id) {
  var pos = id.lastIndexOf(ASPx.PCWIdSuffix);
  var name = id.substring(0, pos);
  var index = id.substr(pos + ASPx.PCWIdSuffix.length);
  var popupControl = aspxGetPopupControlCollection().Get(name);
  return { popupControl: popupControl, windowIndex: index };
 },
 DoHideAllWindows: function(srcElement, excptId, applyToAll, closeReason, posX) {
  for(var i = this.visiblePopupWindowIds.length - 1; i >= 0; i--) {
   var id = this.visiblePopupWindowIds[i];
   if(id == excptId) continue;
   var popupWindow = this.GetPopupWindowFromID(id),
    windowIndex = popupWindow.windowIndex,
    popupControl = popupWindow.popupControl;
   if(!popupControl.CanBeClosedByClickOnElement(windowIndex, srcElement, posX, id)) continue;
   if(popupControl != null) {
    var popupWindowZIndexArray = ASPx.PopupUtils.GetElementZIndexArray(popupControl.GetWindowElement(windowIndex));
    var isPopupHigherSrcElement = ASPx.PopupUtils.IsHigher(popupWindowZIndexArray, ASPx.PopupUtils.GetElementZIndexArray(srcElement)) || !popupControl.HasDefaultWindow();
    var windowCloseAction = popupControl.GetWindowCloseAction(windowIndex);
    if ((windowCloseAction != "CloseButton" && windowCloseAction != "None") && isPopupHigherSrcElement || applyToAll)
     popupControl.DoHideWindow(parseInt(windowIndex), false, closeReason);
   }
  }
 },
 RefreshModalRenderInIe: function() {
  if(ASPx.Browser.IE && ASPx.Browser.Version === 11 && this.visibleModalElements.length > 0) {
   var topModalWindow = this.GetTopModalWindow();
   if(topModalWindow) {
    var popupWindow = this.GetPopupWindowFromID(topModalWindow.id),
     windowIndex = popupWindow.windowIndex,
     popupControl = popupWindow.popupControl;
    if(popupControl)
     popupControl.RefreshModalRenderInIe(windowIndex);
   }
  }
 },
 DoShowAtCurrentPos: function(name, index, popupElementIndex, evtClone) {
  var pc = this.Get(name);
  if(pc != null && !pc.InternalIsWindowVisible(index))
   pc.DoShowWindowCore(index, this.overXPos, this.overYPos, popupElementIndex, true, true, evtClone, ASPxClientPopupControlCloseReason.MouseOut);
 },
 WindowZIndexWasInitialized: function(zIndex, pcZIndex) {
  return pcZIndex <= zIndex;
 },
 ActivateWindowElement: function(element, evt, popupType, defZIndex, zIndex) {
  var maxZIndex = this.GetMaxZIndex(popupType, defZIndex),
   topZIndex = this.WindowZIndexWasInitialized(maxZIndex, zIndex) ? parseInt(maxZIndex) : zIndex;
  if(this.WindowZIndexWasInitialized(element.style.zIndex, zIndex) && element.style.zIndex != topZIndex) {
   this.DeleteWindowFromZIndexOrder(element);
  }
  if(!this.WindowZIndexWasInitialized(element.style.zIndex, zIndex))
   topZIndex += 2;
  var popupWindow = this.GetPopupWindowFromID(element.id);
  popupWindow.popupControl.SetWindowElementZIndex(element, topZIndex);
  var pcWElementEventSource = ASPx.PopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupWindowElement);
  if(!evt || (evt && pcWElementEventSource == element)) {
   if(this.GetCurrentActiveWindowElement() != element) {
    this.RefreshTabIndexes(false);
    this.SaveCurrentActiveWindowElement(element);
   }
  }
 },
 RefreshTabIndexes: function(forceRecalculate) {
  var topModalWindow = this.GetTopModalWindow();
  if(topModalWindow != null || forceRecalculate) {
   var topModalWindowZIndexArray = ASPx.PopupUtils.GetElementZIndexArray(topModalWindow);
   this.CalculateTabIndexes(topModalWindowZIndexArray);
  }
 },
 ElementHasTabIndex: function(element) {
  return ASPx.IsExists(ASPx.Attr.GetAttribute(element, "tabindex"));
 },
 IsElementCanBeActive: function(element) {
  return element.tagName === "INPUT" || element.tagName === "A" ||
   element.tagName === "BUTTON" || element.tagName === "TEXTAREA" ||
   element.tagName === "SELECT" || this.ElementHasTabIndex(element);
 },
 GetCanBeActiveElements: function() {
  var elements = document.getElementsByTagName("*"),
   canBeActiveElements = [];
  for(var i = 0; i < elements.length; i++) {
   if(this.IsElementCanBeActive(elements[i]))
    canBeActiveElements.push(elements[i]);
  }
  return canBeActiveElements;
 },
 GetEditableDivs: function(){
  if(document.querySelectorAll)
   return document.querySelectorAll("div[contenteditable=true]");
  var editableDivs = [ ];
  var allDivs = document.getElementsByTagName("DIV");
  for(var i = 0; i < allDivs.length; i++){
   var div = allDivs[i];
   if(div.getAttribute("contenteditable") == 'true')
    editableDivs.push(div);
  }
  return editableDivs;
 },
 CalculateTabIndexes: function(topModalWindowZIndexArray) {
  var elements = this.GetCanBeActiveElements();
  for(var i = 0; i < elements.length; i++) {
   var currentElementZIndexArray = ASPx.PopupUtils.GetElementZIndexArray(elements[i]),
    manager = ASPx.ControlTabIndexManager.getInstance(),
    tabIndexManagerGroupId = "pcCollection";
   if(ASPx.PopupUtils.IsHigher(currentElementZIndexArray, topModalWindowZIndexArray))
    manager.restoreTabIndexAttribute(elements[i], tabIndexManagerGroupId);
   else
    manager.changeTabIndexAttribute(elements[i], tabIndexManagerGroupId);
  }
 },
 PopupWindowIsModalByVisibleIndex: function(visiblePopupWindowIndex) {
  return this.PopupWindowIsModalByID(this.visiblePopupWindowIds[visiblePopupWindowIndex]);
 },
 PopupWindowIsModalByID: function(windowElementID) {
  var popupWindow = this.GetPopupWindowFromID(windowElementID);
  return popupWindow.popupControl.WindowIsModal(popupWindow.windowIndex);
 },
 SaveCurrentActiveWindowElement: function(windowElement) {
  this.currentActiveWindowElement = windowElement;
 },
 SkipCurrentActiveWindowElement: function(element) {
  if(element == this.GetCurrentActiveWindowElement())
   this.SaveCurrentActiveWindowElement(null);
 },
 GetCurrentActiveWindowElement: function() {
  return this.currentActiveWindowElement;
 },
 GetMaxZIndex: function (type, defaultZIndex) {
  var maxZIndex = defaultZIndex;
  for(var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var id = this.visiblePopupWindowIds[i];
   if(type !== undefined && this.GetPopupWindowFromID(id).popupControl.GetPopupType() !== type)
    continue;
   var currentWindow = ASPx.GetElementById(id);
   if(!!currentWindow && ASPx.IsElementVisible(currentWindow) && currentWindow.style && currentWindow.style.zIndex > maxZIndex)
    maxZIndex = currentWindow.style.zIndex;
  }
  return maxZIndex;
 },
 GetTopModalWindow: function() {
  return this.GetTopWindow(true);
 },
 GetTopWindow: function(onlyModal) {
  var topWindow = null;
  var topWindowZIndexArray = null;
  for(var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var currentWindow = ASPx.GetElementById(this.visiblePopupWindowIds[i]);
   if(onlyModal && !this.PopupWindowIsModalByVisibleIndex(i))
    continue;
   if(ASPx.IsElementVisible(currentWindow)) {
    var currentWindowZIndexArray = ASPx.PopupUtils.GetElementZIndexArray(currentWindow);
    if(topWindow == null || ASPx.PopupUtils.IsHigher(currentWindowZIndexArray, topWindowZIndexArray)) {
     topWindow = currentWindow;
     topWindowZIndexArray = currentWindowZIndexArray;
    }
   }
  }
  return topWindow;
 },
 DeleteWindowFromZIndexOrder: function(element) {
  for(var i = this.visiblePopupWindowIds.length - 1; i >= 0; i--) {
   var windowElement = ASPx.GetElementById(this.visiblePopupWindowIds[i]);
   if(!windowElement)
    ASPx.Data.ArrayRemoveAt(this.visiblePopupWindowIds, i);
   else if(windowElement.style.zIndex > element.style.zIndex) {
    var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
    popupWindow.popupControl.SetWindowElementZIndex(windowElement, windowElement.style.zIndex - 2);
   }
  }
 },
 AdjustModalElementsBounds: function() {
  for(var i = 0; i < this.visibleModalElements.length; i++)
   this.visibleModalElements[i].DXModalPopupControl.AdjustModalElementBounds(this.visibleModalElements[i]);
 },
 ClearAppearTimer: function() {
  this.appearTimerID = ASPx.Timer.ClearTimer(this.appearTimerID);
 },
 ClearDisappearTimer: function() {
  this.disappearTimerID = ASPx.Timer.ClearTimer(this.disappearTimerID);
 },
 IsAppearTimerActive: function() {
  return this.appearTimerID > -1;
 },
 IsDisappearTimerActive: function() {
  return this.disappearTimerID > -1;
 },
 SetAppearTimer: function(name, index, popupElementIndex, timeout, evt) {
  var evtClone = ASPx.CloneObject(evt);
  this.appearTimerID = window.setTimeout(function() {
   aspxGetPopupControlCollection().DoShowAtCurrentPos(name, index, popupElementIndex, evtClone);
  }, timeout);
 },
 SetDisappearTimer: function(name, index, timeout) {
  this.disappearTimerID = window.setTimeout(function() {
   aspxGetPopupControlCollection().OnPWDisappearTimer(name, index);
  }, timeout);
 },
 GetDocScrollDifference: function() {
  return new _aspxScrollDifference(ASPx.GetDocumentScrollLeft() - this.docScrollLeft, ASPx.GetDocumentScrollTop() - this.docScrollTop);
 },
 IsDocScrolled: function(scroll) {
  return scroll.horizontal != 0 || scroll.vertical != 0;
 },
 SaveScrollState: function() {
  this.docScrollLeft = ASPx.GetDocumentScrollLeft();
  this.docScrollTop = ASPx.GetDocumentScrollTop();
 },
 InitDragObject: function(control, index, x, y, xClientCorrection, yClientCorrection) {
  this.draggingControl = control;
  this.draggingWindowIndex = index;
  this.gragXOffset = x;
  this.gragYOffset = y;
  this.xClientCorrection = xClientCorrection;
  this.yClientCorrection = yClientCorrection;
  this.SetDocumentSelectionBan(true);
 },
 InitOverObject: function(control, index, evt) {
  this.overControl = control;
  this.overWindowIndex = index;
  if(evt)
   this.SaveCurrentMouseOverPos(evt);
 },
 InitResizeObject: function(control, index, cursor, resizePanel) {
  this.resizeControl = control;
  this.resizeIndex = index;
  this.resizeCursor = cursor;
  this.resizePanel = resizePanel;
  this.SetDocumentSelectionBan(true);
 },
 SetDocumentSelectionBan: function(value) {
  if(this.selectBanned === value)
   return;
  this.selectBanned = value;
  if(ASPx.Browser.WebKitFamily) {
   if(value) {
    if(!this.webkitUserSelectBackup && document.body.style.webkitUserSelect)
     this.webkitUserSelectBackup = document.body.style.webkitUserSelect;
    document.body.style.webkitUserSelect = "none";
   } else {
    if(this.webkitUserSelectBackup) {
     document.body.style.webkitUserSelect = this.webkitUserSelectBackup;
     delete this.webkitUserSelectBackup;
    } else
     document.body.style.webkitUserSelect = "auto";
   }
  }
 },
 IsResizeInint: function() {
  return this.resizeControl != null;
 },
 ClearDragObject: function() {
  this.draggingControl = null;
  this.draggingWindowIndex = -1;
  this.gragXOffset = 0;
  this.gragYOffset = 0;
  this.SetDocumentSelectionBan(this.resizeControl != null);
 },
 ClearResizeObject: function() {
  this.resizeControl = null;
  this.resizeIndex = -2;
  this.resizeCursor = "";
  this.SetDocumentSelectionBan(this.draggingControl != null);
  this.resizePanel.parentNode.removeChild(this.resizePanel);
 },
 Drag: function(evt) {
  if(ASPx.tableColumnResizing || ASPx.currentDragHelper || !ASPx.Evt.IsLeftButtonPressed(evt)) return;
  var x = ASPx.Evt.GetEventX(evt);
  var y = ASPx.Evt.GetEventY(evt);
  if(this.pcWindowsAreRestrictedByDocumentWindow && ASPx.PopupUtils.CoordinatesInDocumentRect(x, y)) {
   x += this.gragXOffset;
   y += this.gragYOffset;
   this.draggingControl.OnDrag(this.draggingWindowIndex, x, y, this.xClientCorrection, this.yClientCorrection, evt);
   if(ASPx.Browser.WebKitTouchUI)
    ASPx.Evt.PreventEvent(evt);
  }
 },
 DragStop: function() {
  this.draggingControl.OnDragStop(this.draggingWindowIndex);
  this.ClearDragObject();
 },
 ResizeStop: function(evt) {
  this.resizeControl.OnResizeStop(evt, this.resizeIndex, this.resizeCursor, this.resizePanel);
  aspxGetPopupControlCollection().ClearResizeObject();
 },
 setIframesMouseMoveEnabled: function(enabled) {
  for(var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
   var popupControl = popupWindow.popupControl;
   if(popupControl) {
    var iframe = popupControl.GetWindowContentIFrameElement(popupWindow.windowIndex);
    if(iframe) {
     iframe.style.pointerEvents = enabled ? "" : "none";
     if(ASPx.Browser.IE && ASPx.Browser.MajorVersion < 11) {
      if(enabled)
       popupControl.RemoveIframeCoverDiv(iframe, popupWindow.windowIndex);
      else
       popupControl.CreateIframeCoverDiv(iframe, popupWindow.windowIndex);
     }
    }
   }
  }
 },
 OnPWMouseMove: function(evt, name, index) {
  if(this.draggingControl == null &&
   this.overControl == null &&
   this.resizeControl == null) {
   var pc = aspxGetPopupControlCollection().Get(name);
   if(pc != null) pc.OnMouseMove(evt, index);
  }
 },
 OnPWMouseOver: function(evt) {
  if(!this.overControl || this.draggingControl) return;
  if(this.IsOverPopupWindow(evt))
   this.ClearDisappearTimer();
 },
 IsOverPopupWindow: function(evt) {
  return ASPx.PopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupControlOverElement) != null;
 },
 OnDocumentKeyDown: function(evt) {
  var windowElement = this.GetTopWindow(false);
  if(windowElement) {
   var window = this.GetPopupWindowFromID(windowElement.id);
   if(window.popupControl);
    window.popupControl.OnDocumentKeyDown(evt, windowElement);
  }
 },
 OnDocumentMouseDown: function(evt) {
  var popupElement = ASPx.PopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupControlElement);
  var excptId = popupElement == null ? "" :
   popupElement.DXPopupElementControl.GetWindowElementId(popupElement.DXPopupWindowIndex);
  this.OnMouseDownCore(evt, excptId);
 },
 OnMouseDown: function(evt) {
  this.OnMouseDownCore(evt, "");
 },
 OnMouseDownCore: function(evt, excptId) {
  var srcElement = ASPx.Evt.GetEventSource(evt);
  this.DoHideAllWindows(srcElement, excptId, false, ASPxClientPopupControlCloseReason.OuterMouseClick, ASPx.Evt.GetEventX(evt));
  aspxGetPopupControlCollection().ClearAppearTimer();
 },
 OnMouseMove: function (evt) {
  if(ASPx.Browser.WebKitTouchUI && ASPx.TouchUIHelper.isGesture)
   return;
  if(this.draggingControl != null) {
   this.Drag(evt);
  }
  else if(this.overControl != null) {
   this.OnMouseOver(evt);
  }
  else if(this.resizeControl != null) {
   if(ASPx.Browser.IE && !ASPx.Evt.IsLeftButtonPressed(evt))
    this.ResizeStop(evt);
   else
    this.resizeControl.OnResize(evt, this.resizeIndex, this.resizeCursor, this.resizePanel);
  }
 },
 OnMouseOver: function(evt) {
  var element = ASPx.PopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupControlOverElement);
  var curPopupElement = this.overControl.GetWindowCurrentPopupElementByIndex(this.overWindowIndex);
  var popup = element != null ? element.DXPopupElementControl : null;
  var isPopupActionMouseOver = popup && popup.GetWindowPopupAction(this.overWindowIndex) == 'MouseOver';
  var isCurPopupElement = element !== null && element === curPopupElement;
  var isCurPopupWindow = element != null && element.id === this.overControl.GetWindowElementId(this.overWindowIndex);
  var isCurPopupElementOrCurPopupWindow = isCurPopupElement || isCurPopupWindow || isPopupActionMouseOver;
  if(isCurPopupElementOrCurPopupWindow) {
   var clearTimer = true;
   popup = element.DXPopupElementControl;
   if(popup && popup.GetLastShownPopupElementIndex(element.DXPopupWindowIndex) != element.DXPopupElementIndex)
    clearTimer = false;
   if(clearTimer)
    this.ClearDisappearTimer();
   this.SaveCurrentMouseOverPos(evt);
   return;
  }
  this.OnMouseOut();
 },
 OnMouseOut: function(evt) {
  if(!this.overControl || this.draggingControl) return;
  this.ClearAppearTimer();
  var windowCloseAction = this.overControl.GetWindowCloseAction(this.overWindowIndex);
  if(windowCloseAction == "MouseOut" && this.overControl.InternalIsWindowVisible(this.overWindowIndex)) {
   if(!this.IsDisappearTimerActive() && this.IsDisappearAllowedByMouseOut(evt))
    this.SetDisappearTimer(this.overControl.name, this.overWindowIndex, this.overControl.disappearAfter);
  }
  else
   this.OverStop();
 },
 IsDisappearAllowedByMouseOut: function(evt) {
  return ASPx.Browser.Firefox || ASPx.Browser.Chrome ? !this.IsOverPopupWindow(evt) : true;
 },
 OnMouseUp: function(evt) {
  if(this.draggingControl != null)
   this.DragStop();
  if(this.resizeControl != null)
   this.ResizeStop(evt);
 },
 OnResize: function(evt) {
  this.AutoUpdateElementsPosition();
  this.AdjustModalElementsBounds();
 },
 OnScroll: function(evt) {
  if(this.scrollEventLockCount > 0)
   return;
  var scroll = this.GetDocScrollDifference();
  if(this.IsDocScrolled(scroll)) {
   this.CorrectPositionAtScroll(scroll);
   this.AdjustModalElementsBounds();
   this.SaveScrollState();
  }
  this.CalculateDocumentDimensionsWithoutPinnedWindows(evt);
  this.FireScrollEventToWindows(evt);
 },
 GetSavedBodyWidth: function() {
  if(this.savedBodyWidth == 0)
   this.CalculateDocumentDimensionsWithoutPinnedWindows();
  return this.savedBodyWidth;
 },
 GetSavedBodyHeight: function() {
  if(this.savedBodyHeight == 0)
   this.CalculateDocumentDimensionsWithoutPinnedWindows();
  return this.savedBodyHeight;
 },
 HidePinnedPopupsThatOutFromViewPort: function() {
  var popupsToRestoreVisible = [];
  for(var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
   var popupControl = popupWindow.popupControl;
   if(!popupControl.needToHidePinnedOutFromViewPort(popupWindow.windowIndex))
    continue;
   var element = popupControl.GetWindowElement(popupWindow.windowIndex);
   if(!element) continue;
   var restoreData = {};
   restoreData.element = element;
   restoreData.display = element.style.display;
   element.style.display = "none";
   popupsToRestoreVisible.push(restoreData);
  }
  return popupsToRestoreVisible;
 },
 RestorePinnedPopupsThatOutFromViewPort: function(popupsToRestoreVisible) {
  if(popupsToRestoreVisible.length > 0) {
   for(var i = 0; i < popupsToRestoreVisible.length; i++) {
    var restoreData = popupsToRestoreVisible[i];
    restoreData.element.style.display = restoreData.display;
   }
  }
 },
 CalculateDocumentDimensionsWithoutPinnedWindows: function(evt) {
  var popupsToRestoreVisible = [];
  var needToHideRestorePopupsThatOutFromViewPort = !!evt && ASPx.Evt.GetEventSource(evt) == document;
  if(needToHideRestorePopupsThatOutFromViewPort)
   popupsToRestoreVisible = this.HidePinnedPopupsThatOutFromViewPort();
  this.savedBodyWidth = ASPx.GetDocumentWidth();
  this.savedBodyHeight = ASPx.GetDocumentHeight();
  if(needToHideRestorePopupsThatOutFromViewPort)
   this.RestorePinnedPopupsThatOutFromViewPort(popupsToRestoreVisible);
 },
 FireScrollEventToWindows: function(evt) {
  for(var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
   var popupControl = popupWindow.popupControl;
   popupControl.OnScroll(evt, popupWindow.windowIndex);
  }
 },
 CalculateDocumentDimensionsWithoutPinnedWindowsOldIE: function(onCalculateFinished, evt) {
  var popupsToRestoreVisible = [];
  var needToHideRestorePopupsThatOutFromViewPort = !!evt && ASPx.Evt.GetEventSource(evt) == document;
  if(needToHideRestorePopupsThatOutFromViewPort)
   popupsToRestoreVisible = this.HidePinnedPopupsThatOutFromViewPort();
  this.scrollEventLockCount++;
  window.setTimeout(function() {
   this.savedBodyWidth = ASPx.GetDocumentWidth();
   this.savedBodyHeight = ASPx.GetDocumentHeight();
   if(needToHideRestorePopupsThatOutFromViewPort)
    this.RestorePinnedPopupsThatOutFromViewPort(popupsToRestoreVisible);
   if(onCalculateFinished)
    window.setTimeout(function() { onCalculateFinished(); }.aspxBind(this), 0);
   this.scrollEventLockCount--;
  }.aspxBind(this), 0);
 },
 FireScrollEventToWindowsOldIE: function(evt) {
  this.scrollEventLockCount++;
  this.FireScrollEventToWindows(evt);
  this.scrollEventLockCount--;
 },
 LockScrollEvent: function() {
  this.scrollEventLockCount++;
 },
 UnlockScrollEvent: function() {
  this.scrollEventLockCount--;
 },
 CorrectPositionAtScroll: function(scroll) {
  for(var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
   var popupControl = popupWindow.popupControl;
   if(popupControl != null && popupControl.InternalIsWindowVisible(popupWindow.windowIndex)) {
    if(popupControl.GetAutoUpdatePosition(popupWindow.windowIndex))
     popupWindow.popupControl.TryAutoUpdatePosition(popupWindow.windowIndex);
   }
  }
 },
 OnSelectStart: function() {
  return !this.selectBanned;
 },
 OverStop: function() {
  this.overControl = null;
  this.overWindowIndex = -1;
 },
 OnPWDisappearTimer: function(name, index) {
  var pc = this.Get(name);
  if(pc != null) {
   if(!pc.DoHideWindow(index, false, ASPxClientPopupControlCloseReason.MouseOut))
    this.OverStop();
   this.ClearDisappearTimer();
  }
 },
 SaveCurrentMouseOverPos: function(evt) {
  this.overXPos = ASPx.Evt.GetEventX(evt);
  this.overYPos = ASPx.Evt.GetEventY(evt);
 },
 RegisterVisibleModalElement: function(element) {
  if(ASPx.Data.ArrayIndexOf(this.visibleModalElements, element) == -1)
   this.visibleModalElements.push(element);
 },
 UnregisterVisibleModalElement: function(element) {
  ASPx.Data.ArrayRemove(this.visibleModalElements, element);
 },
 RegisterVisibleWindow: function(element, popupControl, index) {
  if(ASPx.Data.ArrayIndexOf(this.visiblePopupWindowIds, element.id) == -1) {
   this.visiblePopupWindowIds.push(element.id);
   if(popupControl && popupControl.GetWindowCloseAction(index) == "MouseOut")
    aspxGetPopupControlCollection().InitOverObject(popupControl, index, null);
   this.OnRegisteredVisibleWindow(element);
  }
 },
 OnRegisteredVisibleWindow: function(element) {
  var elementIndex = ASPx.Data.ArrayIndexOf(this.visiblePopupWindowIds, element.id);
  if(this.PopupWindowIsModalByVisibleIndex(elementIndex))
   ASPx.PopupUtils.RemoveFocus(element);
 },
 UnregisterVisibleWindow: function(element) {
  this.DeleteWindowFromZIndexOrder(element);
  ASPx.Data.ArrayRemove(this.visiblePopupWindowIds, element.id);
  var forceRecalculate = this.PopupWindowIsModalByID(element.id);
  this.RefreshTabIndexes(forceRecalculate);
  this.SkipCurrentActiveWindowElement(element);
 },
 AutoUpdateElementsPosition: function() {
  for(var i = 0; i < this.visiblePopupWindowIds.length; i++) {
   var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
   var popupControl = popupWindow.popupControl;
   if(popupControl != null && popupControl.InternalIsWindowVisible(popupWindow.windowIndex))
    popupControl.TryAutoUpdatePosition(popupWindow.windowIndex);
  }
 },
 LockWindowResizeByBodyScrollVisibilityChanging: function() {
  this.windowResizeByBodyScrollVisibilityChangingLockCount++;
 },
 UnlockWindowResizeByBodyScrollVisibilityChanging: function() {
  this.windowResizeByBodyScrollVisibilityChangingLockCount--;
 },
 WindowResizeByBodyScrollVisibilityChangingLocked: function() {
  return this.windowResizeByBodyScrollVisibilityChangingLockCount > 0;
 },
 HideAllWindows: function() {
  this.DoHideAllWindows(null, "", true, ASPxClientPopupControlCloseReason.API, 0);
 }
});
var ASPxClientPopupControlResizeState = {
 Resized: 0,
 Collapsed: 1,
 Expanded: 2,
 Maximized: 3,
 RestoredAfterMaximized: 4
};
var ASPxClientPopupControlCloseReason = {
 API: "API",
 CloseButton: "CloseButton",
 OuterMouseClick: "OuterMouseClick",
 MouseOut: "MouseOut",
 Escape: "Escape"
};
var popupControlCollection = null;
function aspxGetPopupControlCollection() {
 if(popupControlCollection == null)
  popupControlCollection = new ASPxClientPopupControlCollection();
 return popupControlCollection;
}
function _aspxScrollDifference(horizontal, vertical) {
 this.horizontal = horizontal;
 this.vertical = vertical;
}
function aspxPWEMOver(evt) {
 aspxGetPopupControlCollection().OnPWMouseOver(evt);
}
ASPx.PWHMDown = function(evt) {
 return ASPx.Evt.CancelBubble(evt);
};
ASPx.PWCBClick = function(evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if(pc != null) pc.OnPWHBClickCore(evt, index, "OnCloseButtonClick");
};
ASPx.PWPBClick = function(evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if(pc != null) pc.OnPWHBClickCore(evt, index, "OnPinButtonClick");
};
ASPx.PWRBClick = function(evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if(pc != null) pc.OnPWHBClickCore(evt, index, "OnRefreshButtonClick");
};
ASPx.PWMNBClick = function(evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if(pc != null) pc.OnPWHBClickCore(evt, index, "OnCollapseButtonClick");
};
ASPx.PWMXBClick = function(evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if(pc != null) pc.OnPWHBClickCore(evt, index, "OnMaximizeButtonClick");
};
ASPx.PWDGMDown = function (evt, name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 return ASPx.PWMDown(evt, name, index, pc.IsDraggingAllowed(index));
};
ASPx.PWGripMDown = function(evt, name, index) {
 aspxPWMDownCore(evt, name, index, false);
 return ASPx.PWHMDown(evt);
};
ASPx.PWMMove = function(evt, name, index) {
 aspxGetPopupControlCollection().OnPWMouseMove(evt, name, index);
};
ASPx.PWMDown = function(evt, name, index, isWindowContentDraggingAllowed) {
 var pointOnScrollBar = false;
 var pc = aspxGetPopupControlCollection().Get(name);
 if(pc && pc.GetEnableContentScrolling(index)) {
  var rtl = pc.rtl && (ASPx.Browser.IE || ASPx.Browser.Firefox || ASPx.Browser.Opera);
  pointOnScrollBar = aspxPointOnElementScrollBar(pc.GetContentContainer(index), evt.clientX, evt.clientY, rtl);
 }
 aspxPWMDownCore(evt, name, index, isWindowContentDraggingAllowed, pointOnScrollBar);
 if(isWindowContentDraggingAllowed) {
  aspxGetPopupControlCollection().OnDocumentMouseDown(evt);
  if(typeof (ASPx.GetDropDownCollection) == "function")
   ASPx.GetDropDownCollection().OnDocumentMouseDown(evt);
  if(!pointOnScrollBar) {
   if(!ASPx.Browser.WebKitTouchUI && ASPx.Evt.GetEventSource(evt).tagName == "IMG")
    ASPx.Evt.PreventEvent(evt);
  }
 }
};
function aspxPWMDownCore(evt, name, index, isDraggingAllowed, pointOnScrollBar) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if(pc != null) {
  pc.OnActivate(index, evt);
  pc.OnMouseDown(evt, index, isDraggingAllowed, pointOnScrollBar);
 }
}
function aspxPWMEMDown(evt) {
 var internalScrollableModalDiv = ASPx.Browser.AndroidDefaultBrowser ? ASPx.Evt.GetEventSource(evt) : null;
 var modalDiv = internalScrollableModalDiv ? internalScrollableModalDiv.parentNode : ASPx.Evt.GetEventSource(evt);
 if(modalDiv != null)
  modalDiv.DXModalPopupControl.OnMouseDownModalElement(evt, modalDiv.DXModalPopupWindowIndex);
}
function aspxPEMEvent(evt) {
 var element = ASPx.PopupUtils.FindEventSourceParentByTestFunc(evt, aspxTestPopupControlElement);
 if(element != null) {
  var popupControl = element.DXPopupElementControl;
  var index = element.DXPopupWindowIndex;
  if(evt.type == "mousedown") {
   popupControl.SetIsPopuped(index, popupControl.InternalIsWindowVisible(index));
   aspxGetPopupControlCollection().OnMouseDown(evt);
  }
  else {
   var windowPopupAction = popupControl.GetWindowPopupAction(element.DXPopupWindowIndex);
   var leftMouseButtonAction = windowPopupAction == "LeftMouseClick" && ASPx.Evt.IsLeftButtonPressed(evt);
   var isAccessibleKeyboardAction = popupControl.accessibilityCompliant && ASPx.Evt.IsActionKeyPressed(evt);
   var rightMouseButtonAction = windowPopupAction == "RightMouseClick" && !ASPx.Evt.IsLeftButtonPressed(evt);
   if(leftMouseButtonAction || rightMouseButtonAction || isAccessibleKeyboardAction) {
    if(rightMouseButtonAction)
     ASPx.PopupUtils.PreventContextMenu(evt);
    var windowCloseAction = popupControl.GetWindowCloseAction(index);
    var isPopuped = popupControl.GetIsPopuped(index);
    var isNewPopupElement = popupControl.GetLastShownPopupElementIndex(index) != element.DXPopupElementIndex;
    if(isPopuped && isNewPopupElement) {
     popupControl.DoHideWindow(index, false, ASPxClientPopupControlCloseReason.OuterMouseClick);
     aspxGetPopupControlCollection().ClearDisappearTimer();
     isPopuped = false;
    }
    if(!(isPopuped && windowCloseAction == "OuterMouseClick")) {
     popupControl.DoShowWindow(index, element.DXPopupElementIndex, evt);
    }
    if(windowCloseAction == "MouseOut")
     aspxGetPopupControlCollection().InitOverObject(popupControl, element.DXPopupWindowIndex, evt);
    return false;
   }
  }
 }
}
ASPx.PopupElementMouseEvent = aspxPEMEvent;
function aspxPointOnElementScrollBar(element, x, y, rtl) {
 var scrollWidth = ASPx.GetVerticalScrollBarWidth();
 var hasHorizontalScroll = element.scrollWidth > element.clientWidth;
 var hasVerticalScroll = element.scrollHeight > element.clientHeight;
 var ceilX = rtl ? ASPx.GetAbsoluteX(element) + scrollWidth :
  ASPx.GetAbsoluteX(element) + (element.offsetWidth - ASPx.GetHorizontalBordersWidth(element));
 var ceilY = ASPx.GetAbsoluteY(element) + (element.offsetHeight - ASPx.GetVerticalBordersWidth(element));
 return (hasVerticalScroll && x >= ceilX - scrollWidth && x <= ceilX) ||
   (hasHorizontalScroll && y >= ceilY - scrollWidth && y <= ceilY);
}
ASPx.PCAStop = function(name, index) {
 var pc = aspxGetPopupControlCollection().Get(name);
 if(pc != null) pc.OnAnimationStop(index);
};
ASPx.PCIframeLoad = function(evt) {
 var srcElement = ASPx.Evt.GetEventSource(evt);
 if(srcElement) {
  var pcName = srcElement.popupControlName;
  var pcWndIndex = srcElement.pcWndIndex;
  if(pcName) {
   var pc = aspxGetPopupControlCollection().Get(pcName);
   if(pc) pc.OnIFrameLoad(pcWndIndex);
  }
 }
};
function aspxTestPopupWindowElement(element) {
 return !!element.DXPopupWindowElement;
}
function aspxTestPopupControlElement(element) {
 return element.DXPopupElementControl && ASPx.IsExists(element.DXPopupWindowIndex);
}
function aspxTestPopupControlOverElement(element) {
 var collection = aspxGetPopupControlCollection();
 var popupControl = collection.overControl;
 var index = collection.overWindowIndex;
 var windowId = popupControl.GetWindowElementId(index);
 if(element.id == windowId)
  return true;
 var popupElements = popupControl.GetPopupElementList(index);
 for(var i = 0; i < popupElements.length; i++)
  if(popupElements[i] == element)
   return true;
 return false;
}
ASPx.Evt.AttachEventToDocument("keydown", function(evt) {
 aspxGetPopupControlCollection().OnDocumentKeyDown(evt);
});
ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseDownEventName, function(evt) {
 aspxGetPopupControlCollection().OnDocumentMouseDown(evt);
});
ASPx.Evt.AttachEventToDocument(ASPx.TouchUIHelper.touchMouseUpEventName, function(evt) {
 return aspxGetPopupControlCollection().OnMouseUp(evt);
});
ASPx.Evt.AttachEventToElement(window, ASPx.TouchUIHelper.touchMouseMoveEventName, function(evt) {
 if(typeof(aspxGetPopupControlCollection) != "undefined")
  aspxGetPopupControlCollection().OnMouseMove(evt);
}, false, !ASPx.Browser.WebKitTouchUI);
ASPx.Evt.AttachEventToDocument("mouseout", function(evt) {
 if(typeof (aspxGetPopupControlCollection) != "undefined")
  aspxGetPopupControlCollection().OnMouseOut(evt);
});
 ASPx.Evt.AttachEventToElement(window, "resize", function(evt) {
 aspxGetPopupControlCollection().OnResize(evt);
});
ASPx.Evt.AttachEventToElement(window, "scroll", function(evt) {
 aspxGetPopupControlCollection().OnScroll(evt);
});
ASPx.Evt.AttachEventToDocument("selectstart", function(evt) {
 var ret = aspxGetPopupControlCollection().OnSelectStart(evt);
 if(!ret) return false;
});
var currViewPortSize = null,
 viewPortSizeInterval = null;
function getViewPortSize() {
 return {
  w: window.innerWidth,
  h: window.innerHeight,
  x: window.pageXOffset,
  y: window.pageYOffset
 };
}
function ensureViewPortSizeInterval() {
 if(!!viewPortSizeInterval) return;
 viewPortSizeInterval = setInterval(function() {
  var size = getViewPortSize();
  if(currViewPortSize && (size.w != currViewPortSize.w || size.h != currViewPortSize.h || size.x != currViewPortSize.x || size.y != currViewPortSize.y)) {
   var controlCollection = aspxGetPopupControlCollection();
   controlCollection.ForEachControl(function(popupControl) {
    if(popupControl.GetCanScrollViewPort(-1) && popupControl.IsVisible()) {
     popupControl.updateContentScrollIfNeeded(-1);
     popupControl.UpdatePosition();
    }
   });
  }
  currViewPortSize = size;
 }, 50);
}
window.ASPxClientPopupControlBase = ASPxClientPopupControlBase;
window.ASPxClientPopupControl = ASPxClientPopupControl;
window.ASPxClientPopupWindow = ASPxClientPopupWindow;
window.ASPxClientPopupWindowEventArgs = ASPxClientPopupWindowEventArgs;
window.ASPxClientPopupWindowCancelEventArgs = ASPxClientPopupWindowCancelEventArgs;
window.ASPxClientPopupWindowResizeEventArgs = ASPxClientPopupWindowResizeEventArgs;
window.ASPxClientPopupWindowPinnedChangedEventArgs = ASPxClientPopupWindowPinnedChangedEventArgs;
window.ASPxClientPopupControlCollection = ASPxClientPopupControlCollection;
window.ASPxClientPopupControlResizeState = ASPxClientPopupControlResizeState;
window.ASPxClientPopupControlCloseReason = ASPxClientPopupControlCloseReason;
ASPx.GetPopupControlCollection = aspxGetPopupControlCollection;
ASPx.PopupControlCssClasses = PopupControlCssClasses;
})();

(function(dx) {
 var eventsHub = ASPx.BootstrapEventManager.EventsHub.clone(ASPx),
  mouseDownEventName = ASPx.TouchUIHelper.touchMouseDownEventName,
  discoverEventHubs = [eventsHub.getEventListener(mouseDownEventName), eventsHub.getEventListener("mouseover")];
 var BootstrapClientPopupControl = ASPx.CreateClass(ASPxClientPopupControl, {
  constructor: function (name) {
   this.constructor.prototype.constructor.call(this, name);
   this.accessibilityCompliant = true;
   this.overlayElement = null;
   this.discoveredPopupElements = [];
   this.attachedElementDiscoverEventRef = null;
  },
  PopulatePopupElements: function(index) {
   var popupElementIDList = this.GetPopupElementIDList(index);
   if(ASPx.Ident.IsArray(popupElementIDList))
    this.PopulatePopupElementsByIds();
   else {
    var popupElements = document.querySelectorAll(popupElementIDList);
    for(var i = 0; i < popupElements.length; i++)
     this.onPopupElementDiscovered(popupElements[i], null, null, index);
    if (!this.attachedElementDiscoverEventRef) {
     eventsHub.ensureEventListenersActive();
     var attachedRef = {};
     attachedRef[popupElementIDList] = function (el, evt, evtSrc, evtName) {
      this.onPopupElementDiscovered(el, evt, evtName, index);
     }.bind(this);
     discoverEventHubs.forEach(function (h) { h.attach(attachedRef); });
     this.attachedElementDiscoverEventRef = attachedRef;
    }
   }
  },
  onPopupElementDiscovered: function (el, evt, evtName, index) {
   if (this.discoveredPopupElements.indexOf(el) === -1) {
    this.discoveredPopupElements.push(el);
    this.AddWindowPopupElement(index, el);
    if (evt !== null) {
     var windowPopupAction = this.GetWindowPopupAction(index);
     var activeHandler = null;
     if (windowPopupAction === "LeftMouseClick" && evtName === mouseDownEventName)
      activeHandler = ASPx.PopupElementMouseEvent;
     else if (windowPopupAction === "MouseOver" && evtName === "mouseover")
      activeHandler = ASPx.PopupUtils.OverControl.OnMouseOver;
     if (activeHandler !== null) {
      ASPx.Evt.PreventEventAndBubble(evt);
      activeHandler(evt);
     }
    }
   }
  },
  OnDispose: function () {
   ASPxClientPopupControl.prototype.OnDispose.apply(this, arguments);
   var attachedRef = this.attachedElementDiscoverEventRef;
   discoverEventHubs.forEach(function (h) { h.detach(attachedRef); });
   this.discoveredPopupElements = [];
   this.attachedElementDiscoverEventRef = null;
  },
  GetWindowIndex: function(element) {
   if(element.id === this.name)
    return -1;
   ASPxClientPopupControl.prototype.GetWindowIndex.call(this, element);
  },
  GetWindowElementId: function(index) {
   if(index === -1)
    return this.name;
   ASPxClientPopupControl.prototype.GetWindowElementId.call(this, index);
  },
  GetMainElementId: function() {
   return this.name;
  },
  GetWindowElement: function(index) {
   return this.GetMainElement();
  },
  GetWindowContentElement: function(index) {
   return ASPx.GetNodeByClassName(this.GetWindowElement(index), ASPx.BootstrapCssSelectors.ModalBody);
  },
  GetWindowScrollDiv: function(index) {
   return null;
  },
  GetWindowContentWrapperElement: function(index) {
   return ASPx.GetNodeByClassName(this.GetWindowElement(index), ASPx.BootstrapCssSelectors.ModalBody);
  },
  GetWindowHeaderElement: function(index) {
   var element = ASPx.GetChildByClassName(this.GetWindowElement(index), ASPx.BootstrapCssSelectors.ModalContent);
   return element ? ASPx.GetChildByClassName(element, ASPx.BootstrapCssSelectors.ModalHeader) : null;
  },
  GetWindowHeaderTextCell: function(index) {
   var element = this.GetWindowHeaderElement(index);
   return element ? ASPx.GetNodeByClassName(element, ASPx.BootstrapCssSelectors.ModalTitle) : null;
  },
  GetWindowHeaderTextElement: function(index) {
   return this.GetWindowHeaderTextCell(index);
  },
  GetWindowHeaderLinkElement: function(index) {
   var element = this.GetWindowHeaderTextCell(index);
   return element && element.tagName === "A" ? element : null;
  },
  GetWindowFooterElement: function(index) {
   var element = ASPx.GetChildByClassName(this.GetWindowElement(index), ASPx.BootstrapCssSelectors.ModalContent);
   return element ? ASPx.GetChildByClassName(element, ASPx.BootstrapCssSelectors.ModalFooter) : null;
  },
  GetWindowFooterTextCell: function(index) {
   var element = this.GetWindowFooterElement(index);
   return element ? ASPx.GetNodeByClassName(element, ASPx.BootstrapCssSelectors.ModalTitle) : null;
  },
  GetWindowFooterTextElement: function(index) {
   return this.GetWindowFooterTextCell(index);
  },
  GetWindowFooterLinkElement: function(index) {
   var element = this.GetWindowFooterTextCell(index);
   return element && element.tagName === "A" ? element : null;
  },
  GetWindowCloseButton: function(index) {
   return ASPx.GetNodeByClassName(this.GetWindowHeaderElement(index), "close-btn");
  },
  GetWindowPinButton: function(index) {
   return null;
  },
  GetWindowRefreshButton: function(index) {
   return null;
  },
  GetWindowCollapseButton: function(index) {
   return null;
  },
  GetWindowMaximizeButton: function(index) {
   return null;
  },
  GetWindowBorderOwnerElement: function(windowElement) {
   return ASPx.GetChildByClassName(windowElement, ASPx.BootstrapCssSelectors.ModalContent);
  },
  FindWindowModalElement: function(index) {
   if(this.overlay) {
    if(!this.overlayElement) {
     var overlay = ASPx.BootstrapOverlayManager.createOverlay(this.name, this.overlay);
     ASPx.InsertElementAfter(overlay, this.GetModalWrapperElement(index) || this.GetWindowElement(index));
     this.overlayElement = overlay;
    }
    return this.overlayElement;
   }
   return null;
  },
  GetModalWrapperElement: function(index) {
   if(!this.adaptivityEnabled) return null;
   return ASPx.GetParentByClassName(this.GetMainElement(), "dxbs-modal");
  },
  GetModalSystemCssClass: function() {
   return "modal";
  },
  GetLoadingPanelOffsetElement: function(windowIndex) {
   return this.GetWindowContentElement(windowIndex).parentNode;
  },
  GetLoadingPanelElement: function(){
   return ASPx.BootstrapLoadingPanelManager.getLoadingPanel(this.name, this.loadingPanel);
  },
  GetLoadingDiv: function(){
   return ASPx.BootstrapLoadingPanelManager.getLoadingDiv(this.name, this.loadingPanel);
  },
  CorrectWindowHeaderText: function(index) {
  },
  GetDefaultZIndexFromServer: function() {
   return "";
  },
  GetPopupType: function() {
   return this.WindowIsModal(-1) ? ASPx.BootstrapPopupManager.PopupModalType : ASPx.BootstrapPopupManager.PopupType;
  },
  GetPopupControlZIndex: function() {
   return this.WindowIsModal(-1) ? ASPx.BootstrapPopupManager.PopupModalZIndex : ASPx.BootstrapPopupManager.PopupZIndex;
  },
  GetElementBordersAndPaddings: function() {
   return 0;
  },
  getLeftRightBordersAndPaddingsSummaryValue: function(element, currentStyle) {
   return 0;
  },
  getTopBottomBordersAndPaddingsSummaryValue: function(element, currentStyle) {
   return 0;
  },
  getContentElementDisplay: function(correctContentElementSize, contentUrl) {
   return correctContentElementSize || contentUrl ? "block" : "table";
  },
  GetWindowElementDisplayValue: function(windowHasAnyScrollbars, windowHeight) {
   return "table";
  },
  SetContentElementsAdaptiveDisplayStyle: function(index) {
   if (!this.GetWindowContentIFrameElement(index) && !this.HasAnyScrollBars(index)) {
    var contentWrapper = this.GetWindowContentWrapperElement(index);
    if (this.hasPercentageHeightChild(contentWrapper))
     contentWrapper.style.display = "table-cell";
   }
  },
  SetContentWrapperAdaptiveHeight: function (index, adaptiveHeight) {
   var contentWrapper = this.GetWindowContentWrapperElement(index);
   if (this.hasPercentageHeightChild(contentWrapper))
    ASPxClientPopupControl.prototype.SetContentWrapperAdaptiveHeight.call(this, index, adaptiveHeight);
  },
  GetHeaderFooterHeight: function(index) {
   var cache = this.GetResizeSessionCache();
   if(!cache.headerFooterHeight || !cache.headerFooterHeight[index]) {
    cache.headerFooterHeight = [];
    cache.headerFooterHeight[index] = 0;
    var extenders = [
     this.GetWindowHeaderElement(index),
     this.GetWindowFooterElement(index)
    ];
    for(var i = 0; i < extenders.length; i++) {
     if(extenders[i]) {
      var height = extenders[i].offsetHeight;
      if(height) {
       cache.headerFooterHeight[index] += height + ASPx.GetTopBottomMargins(extenders[i]);
      }
     }
    }
   }
   return cache.headerFooterHeight[index];
  },
  OnDragStart: function(evt, index) {
   ASPxClientPopupControl.prototype.OnDragStart.call(this, evt, index);
   ASPx.AddClassNameToElement(document.body, "dxbs-preventsel");
  },
  OnDragStop: function(index) {
   ASPxClientPopupControl.prototype.OnDragStop.call(this, index);
   ASPx.RemoveClassNameFromElement(document.body, "dxbs-preventsel");
  },
  SetSizeBeforeShow: function(index) {
   ASPxClientPopupControl.prototype.SetSizeBeforeShow.call(this, index);
   this.GetWindowElement(index).style.width = this.GetModalMaxWidth() !== null ? "auto" : "";
  },
  getWindowWrapper: function(windowElement) {
   return ASPx.GetParentByClassName(windowElement, "dxbs-popup-wrapper");
  },
  getWindowWrapperScroll: function(windowElement) {
   return ASPx.GetParentByClassName(windowElement, "dxbs-popup-wrapper-scroll");
  },
  getFirstFocusableElement: function() {
   if (!this.firstFocusableElement) {
    var closeBtn = this.GetWindowCloseButton();
    this.firstFocusableElement = ASPx.FindFirstChildActionElement(this.GetCurrentWindowElement(), function(el) {
     return el != closeBtn;
    });
   }
   return this.firstFocusableElement;
  },
  hasPercentageHeightChild: function (element) {
   var children = ASPx.NodeListToArray(element.children);
   var percentageHeightChildrenCount = children.filter(function (child) { return ASPx.IsPercentageSize(child.style.height); }).length;
   return percentageHeightChildrenCount > 0;
  },
  SetPopupElementCssSelector: function(selector) {
   this.SetPopupElementID(selector);
  }
 });
 var baseGetPopupWindowFromID = ASPx.GetPopupControlCollection().GetPopupWindowFromID;
 ASPx.GetPopupControlCollection().GetPopupWindowFromID = function(id) {
  var popupControl = this.Get(id);
  if(!popupControl)
   return baseGetPopupWindowFromID.call(this, id);
  return { popupControl: popupControl, windowIndex: -1 };
 };
 var extraLargeDialogSizeRuleCreated = false;
 var BootstrapClientDialogPopupControl = ASPx.CreateClass(BootstrapClientPopupControl, {
  InlineInitialize: function () {
   this.createExtraLargeDialogSizeRule();
   BootstrapClientPopupControl.prototype.InlineInitialize.call(this);
  },
  createExtraLargeDialogSizeRule: function () {
   if(extraLargeDialogSizeRuleCreated)
    return;
   ASPx.BootstrapCore.createCssRuleForLargeScreen(".dxbs-dialog-xl." + ASPx.BootstrapCssSelectors.Modal + "-lg {\n max-width: 950px;\n}");
   extraLargeDialogSizeRuleCreated = true;
  }
 });
 var BootstrapClientRibbonPopupControl = ASPx.CreateClass(BootstrapClientPopupControl, {
  GetPopupControlZIndex: function() { return ASPx.BootstrapCore.zIndexCategories.popover; }
 });
 dx.BootstrapClientDialogPopupControl = BootstrapClientDialogPopupControl;
 dx.BootstrapClientPopupControl = BootstrapClientPopupControl;
 dx.BootstrapClientRibbonPopupControl = BootstrapClientRibbonPopupControl;
})(dx || (dx = {}));
(function() {
var ASPxClientButton = ASPx.CreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientButton = true;
  this.allowFocus = true;
  this.autoPostBackFunction = null;
  this.causesValidation = true;
  this.checked = false;
  this.clickLocked = false;
  this.groupName = "";
  this.focusElementSelected = false;
  this.pressed = false;
  this.useSubmitBehavior = true;
  this.validationGroup = "";
  this.validationContainerID = null;
  this.validateInvisibleEditors = false;
  this.originalWidth = null;
  this.originalHeight = null;
  this.needUpdateBounds = true;
  this.isTextEmpty = false;
  this.CheckedChanged = new ASPxClientEvent();
  this.GotFocus = new ASPxClientEvent();
  this.LostFocus = new ASPxClientEvent();
  this.Click = new ASPxClientEvent();
 },
 InlineInitialize: function() {
  var mainElement = this.GetMainElement();
  this.originalWidth = mainElement.style.width;
  this.originalHeight = mainElement.style.height;
  ASPxClientControl.prototype.InlineInitialize.call(this);
  this.InitializeElementIDs();
  this.InitializeEvents();
  this.InitializeEnabled();
  this.InitializeChecked();
  if(this.IsLink())
   this.InitializeLink();
  this.PreventButtonImageDragging();
  this.EnsureBoundsAdjusted();
 },
 InitializeElementIDs: function(){
  var mainElement = this.GetMainElement();
  var contentElement = ASPx.GetNodeByTagName(mainElement, "DIV", 0);
  if(contentElement) contentElement.id = this.name + "_CD";
  var imageElement = ASPx.GetNodeByTagName(mainElement, "IMG", 0);
  if(imageElement) imageElement.id = this.name + "Img";
 },
 InitializeEnabled: function(){
  this.SetEnabledInternal(this.clientEnabled, true);
 },
 InitializeChecked: function(){
  this.SetCheckedInternal(this.checked, true);
 },
 InitializeLink: function(){
  var mainElement = this.GetMainElement();
  if(this.enabled)
   mainElement.href = "javascript:;";
  if(!this.allowFocus)
   mainElement.style.outline = 0;
  if(!this.GetTextContainer())
   mainElement.style.fontSize = "0pt";
 },
 InitializeEvents: function(){
  if(!this.isNative && !this.IsLink()) {
   var element = this.GetInternalButton();
   if(element)
    element.onfocus = null;
   var textControl = this.GetTextControl();
   if(textControl) {
    if(ASPx.Browser.IE)
     ASPx.Evt.AttachEventToElement(textControl, "mouseup", ASPx.Selection.Clear);
    ASPx.Evt.PreventElementDragAndSelect(textControl, false);
   }
  }
  this.onClick = function(evt) {
   var processOnServer = ASPx.BClick(this.name, evt);
   if(!processOnServer)
    ASPx.Evt.PreventEvent(evt);
   return processOnServer;
  }.aspxBind(this);
  this.onImageMoseDown = function() { var el = ASPx.GetFocusedElement(); if(el) el.blur(); };
  this.onGotFocus = function() { this.OnFocus(); }.aspxBind(this);
  this.onLostFocus = function() { this.OnLostFocus(); }.aspxBind(this);
  this.onKeyUp = function(evt) { this.OnKeyUp(evt); }.aspxBind(this);
  this.onKeyDown = function(evt) { this.OnKeyDown(evt); }.aspxBind(this);
  if(!this.isNative && !this.IsLink())
   this.InitializeNativeHandlers();
 },
 InitializeNativeHandlers: function() {
  this.AttachNativeHandlerToMainElement("focus", "SetFocus");
  this.AttachNativeHandlerToMainElement("click", "DoClick");
 },
 EnsureBoundsAdjusted: function() {
  var mainElement = this.GetMainElement();
  this.needUpdateBounds = ASPx.GetCurrentStyle(mainElement).display === "block";
  if(this.needUpdateBounds)
   mainElement.className = mainElement.className.replace("dxbTSys", "");
 },
 AdjustControlCore: function () {
  if(this.isNative || this.IsLink()) return;
  var buttonImage = this.GetButtonImage();
  if(buttonImage && buttonImage.offsetHeight === 0 && buttonImage.offsetWidth === 0)
   buttonImage.onload = function() { this.UpdateSize(); }.aspxBind(this);
  else
   this.UpdateSize();
  this.UpdateVerticalAlign();
 },
 UpdateSize: function() {
  if(this.needUpdateBounds) {
   this.UpdateWidth();
   this.UpdateHeight();
  } else
   this.CorrectWrappedText(this.GetContentDiv, "Text", true);
 },
 UpdateVerticalAlign: function() {
  var contentElement = this.GetContentDiv();
  var verticalAlign = this.GetMainElement().style.verticalAlign;
  if(ASPx.IsExistsElement(contentElement) && verticalAlign)
   contentElement.style.verticalAlign = verticalAlign;
 },
 UpdateHeight: function(){
  if(this.isNative || this.IsLink() || this.originalHeight === null || ASPx.IsPercentageSize(this.originalHeight)) return;
  var height;
  var mainElement = this.GetMainElement();
  var contentDiv = this.GetContentDiv();
  var borderAndPadding = ASPx.GetTopBottomBordersAndPaddingsSummaryValue(mainElement);
  var contentHasExcessiveHeight = contentDiv.offsetHeight > mainElement.offsetHeight - borderAndPadding;
  var needSetAutoHeight = !this.originalHeight || (ASPx.Browser.Safari && contentHasExcessiveHeight);
  if(needSetAutoHeight) {
   mainElement.style.height = "";
   height = mainElement.offsetHeight - borderAndPadding;
  }
  else
   height = (ASPx.PxToInt(this.originalHeight) - borderAndPadding);
  if(height){
   mainElement.style.height = height + "px";
   if(contentDiv && contentDiv.offsetHeight > 0){
    var contentDivCurrentStyle = ASPx.GetCurrentStyle(contentDiv);
    var paddingTop = parseInt(contentDivCurrentStyle.paddingTop) || 0;
    var paddingBottom = parseInt(contentDivCurrentStyle.paddingBottom) || 0;
    var clientHeightDiff = height - contentDiv.offsetHeight;
    var verticalAlign = ASPx.GetCurrentStyle(mainElement).verticalAlign;
    if(verticalAlign == "top")
     paddingBottom = paddingBottom + clientHeightDiff;
    else if(verticalAlign == "bottom")
     paddingTop = paddingTop + clientHeightDiff;
    else {
     var halfClientHeightDiff = Math.floor(clientHeightDiff / 2);
     paddingTop = paddingTop + halfClientHeightDiff;
     paddingBottom = paddingBottom + (clientHeightDiff - halfClientHeightDiff);
    }
    contentDiv.style.paddingTop = (paddingTop > 0 ? paddingTop : 0) + "px";
    contentDiv.style.paddingBottom = (paddingBottom > 0 ? paddingBottom : 0) + "px";
   }
  }
 },
 UpdateWidth: function(){
  if(this.isNative || this.IsLink() || this.originalWidth === null) return;
  if(!ASPx.IsPercentageSize(this.originalWidth)) {
   var mainElement = this.GetMainElement();
   var borderAndPadding = ASPx.GetLeftRightBordersAndPaddingsSummaryValue(mainElement);
   if(this.originalWidth && ASPx.IsTextWrapped(this.GetTextContainer()))
    mainElement.style.width = (ASPx.PxToInt(this.originalWidth) - borderAndPadding) + "px";
   else
    mainElement.style.width = "auto";
   var width = mainElement.offsetWidth - borderAndPadding;
   if(this.originalWidth && width < ASPx.PxToInt(this.originalWidth) - borderAndPadding)
    width = ASPx.PxToInt(this.originalWidth) - borderAndPadding;
   if(width)
    mainElement.style.width = (width > 0 ? width : 0)  + "px";
  }
  this.CorrectWrappedText(this.GetContentDiv, "Text", true);
 },
 GetAdjustedSizes: function() {
  var sizes = ASPxClientControl.prototype.GetAdjustedSizes.call(this);
  var image = this.GetButtonImage();
  if(image) {
   sizes.imageWidth = image.offsetWidth;
   sizes.imageHeight = image.offsetHeight;
  }
  return sizes;
 },
 PreventButtonImageDragging: function() {
  ASPx.Evt.PreventImageDragging(this.GetButtonImage());
 },
 AttachNativeHandlerToMainElement: function(handlerName, correspondingMethodName) {
  var mainElement = this.GetMainElement();
  if(!ASPx.IsExistsElement(mainElement))
   return;
  mainElement[handlerName] = function() { _aspxBCallButtonMethod(this.name, correspondingMethodName); }.aspxBind(this);
 },
 GetContentDiv: function(){
  return this.GetChildElement("CD");
 },
 GetButtonImage: function(){
  return ASPx.CacheHelper.GetCachedElement(this, "buttonImage",
   function() {
    return ASPx.GetNodeByTagName(this.GetMainElement(), "IMG", 0);
   });
 },
 GetInternalButton: function() {
  return ASPx.CacheHelper.GetCachedElement(this, "internalButton",
   function() {
    return this.isNative || this.IsLink() ? this.GetMainElement() : ASPx.GetNodeByTagName(this.GetMainElement(), "INPUT", 0);
   });
 },
 GetTextContainer: function() {
  return ASPx.CacheHelper.GetCachedElement(this, "textContainer",
   function() {
    if(this.isNative)
     return this.GetMainElement();
    else{
     var textElement = this.IsLink() ? this.GetMainElement() : this.GetContentDiv();
     return this.accessibilityCompliant ? ASPx.GetElementById(this.name + "_BTC") : ASPx.GetNodeByTagName(textElement, "SPAN", 0);
    }
   });
 },
 GetTextControl: function(){
  return ASPx.CacheHelper.GetCachedElement(this, "textControl",
   function() {
    var element = ASPx.GetParentByTagName(this.GetContentDiv(), "DIV");
    if(!ASPx.IsExistsElement(element) || (element.id == this.name))
     element = this.GetContentDiv();
    return element;
   });
 },
 IsLink: function(){
  if (this.GetMainElement())
   return this.GetMainElement().tagName === "A";
  return false;
 },
 IsHovered: function(){
  var hoverElement = this.GetMainElement();
  return ASPx.GetStateController().currentHoverItemName == hoverElement.id;
 },
 SetEnabledInternal: function(enabled, initialization) {
  if(!this.enabled)
   return;
  if(!initialization || !enabled)
   this.ChangeEnabledStateItems(enabled);
  this.ChangeEnabledAttributes(enabled);
 },
 ChangeEnabledAttributes: function(enabled) {
  var element = this.GetInternalButton();
  if(element) {
   if(this.IsLink()){
    var method = ASPx.Attr.ChangeAttributesMethod(enabled);
    var link = this.GetMainElement();
    method(link, "href");
    if(this.accessibilityCompliant)
     ASPx.Attr.SetOrRemoveAttribute(link, ASPx.Attr.GetTabIndexAttributeName(), enabled ? null : "0");
   } else {
    if(this.accessibilityCompliant)
     ASPx.Attr.Aria.SetOrRemoveDisabled(element, !enabled);
    else
     element.disabled = !enabled;
   }
  }
  this.ChangeEnabledEventsAttributes(ASPx.Attr.ChangeEventsMethod(enabled));
  var isFocusable = enabled || this.accessibilityCompliant;
  this.ChangeEnabledFocusEvents(ASPx.Attr.ChangeEventsMethod(isFocusable));
 },
 ChangeEnabledEventsAttributes: function(method) {
  var element = this.GetMainElement();
  method(element, "click", this.onClick);
  if(this.allowFocus){
   if(!this.isNative && !this.IsLink()) {
    element = this.GetInternalButton();
    if(element) {
     method(element, "keyup", this.onKeyUp);
     method(element, "blur", this.onKeyUp);
     method(element, "keydown", this.onKeyDown);
    }
   }
   if(ASPx.Browser.Firefox){
    var image = this.GetButtonImage();
    if(image)
     method(image, "mousedown", this.onImageMoseDown);
   }
  }
 },
 ChangeEnabledFocusEvents: function(method) {
  if(!this.allowFocus)
   return;
  var element = !this.isNative && !this.IsLink() ? this.GetInternalButton() : this.GetMainElement();
  if(element) {
   method(element, "focus", this.onGotFocus);
   method(element, "blur", this.onLostFocus);
  }
 },
 ChangeEnabledStateItems: function(enabled){
  if(this.isNative) return;
  ASPx.GetStateController().SetElementEnabled(this.GetMainElement(), enabled);
  this.UpdateFocusedStyle();
 },
 RequiredPreventDoublePostback: function(){
  return ASPx.Browser.Firefox && !this.isNative;
 },
 OnFocus: function() {
  if(!this.allowFocus)
   return false;
  this.focused = true;
  if(this.isInitialized)
   this.RaiseFocus();
  this.UpdateFocusedStyle();
 },
 OnLostFocus: function() {
  if(!this.allowFocus)
   return false;
  this.focused = false;
  if(this.isInitialized)
   this.RaiseLostFocus();
  this.UpdateFocusedStyle();
 },
 CauseValidation: function() {
  if(this.causesValidation && ASPx.Ident.scripts.ASPxClientEdit)
   return this.validationContainerID != null ?
    ASPxClientEdit.ValidateEditorsInContainerById(this.validationContainerID, this.validationGroup, this.validateInvisibleEditors) :
    ASPxClientEdit.ValidateGroup(this.validationGroup, this.validateInvisibleEditors);
  else
   return true;
 },
 OnClick: function(evt) {
  if(this.clickLocked) return true;
  if(this.checked && this.groupName != "" && this.GetCheckedGroupList().length > 1) return;
  this.SetFocus();
  var isValid = this.CauseValidation();
  var processOnServer = this.autoPostBack;
  if(this.groupName != "") {
   if(this.GetCheckedGroupList().length == 1)
    this.SetCheckedInternal(!this.checked, false);
   else {
    this.SetCheckedInternal(true, false);
    this.ClearButtonGroupChecked(true);
   }
   processOnServer = this.RaiseCheckedChanged();
   if(processOnServer && isValid)
    this.SendPostBack("CheckedChanged");
  }
  var params = this.RaiseClick();
  if(evt && params.cancelEventAndBubble)
   ASPx.Evt.PreventEventAndBubble(evt);
  if(params.processOnServer && isValid)
   return this.ProcessClick();
  return false;
 },
 ProcessClick: function() {
  var requiredPreventDoublePostback = this.RequiredPreventDoublePostback();
  var postponePostback = ASPx.Browser.AndroidMobilePlatform;
  if(requiredPreventDoublePostback || postponePostback)
   window.setTimeout(function() { _aspxBCallButtonMethod(this.name, "SendPostBack", "Click"); }.aspxBind(this), 0);
  else
   this.SendPostBack("Click");
  return !requiredPreventDoublePostback;
 },
 OnKeyUp: function(evt) {
  if(!this.pressed)
   return;
  this.pressed = false;
  ASPx.GetStateController().OnKeyUpOnElement(evt);
 },
 OnKeyDown: function(evt) {
  if(evt.keyCode == ASPx.Key.Enter || evt.keyCode == ASPx.Key.Space)
   this.SetPressed();
 },
 GetCheckedGroupList: function(){
  var result = [ ];
  ASPx.GetControlCollection().ForEachControl(function(control) {
   if(ASPx.Ident.IsASPxClientButton(control) && (control.groupName == this.groupName) && !control.IsDOMDisposed())
    result.push(control);
  }, this);
  return result;
 },
 ClearButtonGroupChecked: function(raiseCheckedChanged){
  var list = this.GetCheckedGroupList();
  for(var i = 0; i < list.length; i ++){
   if(list[i] != this && list[i].checked) {
    list[i].SetCheckedInternal(false, false);
    if(raiseCheckedChanged)
     list[i].RaiseCheckedChanged();
   }
  }
 },
 ApplyCheckedStyle: function(){
  var stateController = ASPx.GetStateController();
  if(this.IsHovered())
   stateController.SetCurrentHoverElement(null);
  stateController.SelectElementBySrcElement(this.GetMainElement());
 },
 ApplyUncheckedStyle: function(){
  var stateController = ASPx.GetStateController();
  if(this.IsHovered())
   stateController.SetCurrentHoverElement(null);
  stateController.DeselectElementBySrcElement(this.GetMainElement());
 },
 SetCheckedInternal: function(checked, initialization){
  if(initialization && checked || (this.checked != checked)){
   this.checked = checked;
   if(checked)
    this.ApplyCheckedStyle();
   else
    this.ApplyUncheckedStyle();
  }
 },
 UpdateStateObject: function(){
  if(this.groupName != "")
   this.UpdateStateObjectWithObject({ checked: this.checked });
 },
 GetStateHiddenFieldName: function() {
  return this.uniqueID + "$State";
 },
 ApplyPressedStyle: function(){
  ASPx.GetStateController().OnMouseDownOnElement(this.GetMainElement());
 },
 ApplyUnpressedStyle: function(){
  ASPx.GetStateController().OnMouseUpOnElement(this.GetMainElement());
 },
 SetPressed: function(){
  this.pressed = true;
  this.ApplyPressedStyle();
 },
 SetUnpressed: function(){
  this.pressed = false;
  this.ApplyUnpressedStyle();
 },
 SetFocus: function(){
  if(!this.allowFocus || this.focused)
   return;
  var element = this.GetInternalButton();
  if(element) {
   var hiddenInternalButtonRequiresVisibilityToGetFocused = ASPx.Browser.WebKitFamily  && !this.isNative  && !this.IsLink();
   if(hiddenInternalButtonRequiresVisibilityToGetFocused)
    ASPxClientButton.MakeHiddenElementFocusable(element);
   if(ASPx.IsFocusable(element) && ASPx.GetActiveElement() != element)
    element.focus();
   if(hiddenInternalButtonRequiresVisibilityToGetFocused)
    ASPxClientButton.RestoreHiddenElementAppearance(element);
  }
 },
 ApplyFocusedStyle: function(){
  if(this.focusElementSelected) return;
  if(typeof(ASPx.GetStateController) != "undefined")
   ASPx.GetStateController().SelectElementBySrcElement(this.GetContentDiv());
  this.focusElementSelected = true;
 },
 ApplyUnfocusedStyle: function(){
  if(!this.focusElementSelected) return;
  if(typeof(ASPx.GetStateController) != "undefined")
   ASPx.GetStateController().DeselectElementBySrcElement(this.GetContentDiv());
  this.focusElementSelected = false;
 },
 UpdateFocusedStyle: function(){
  if(this.isNative || this.IsLink()) return;
  var isFocusable = this.enabled && this.allowFocus && this.focused && (this.clientEnabled || this.accessibilityCompliant);
  if(isFocusable)
   this.ApplyFocusedStyle();
  else
   this.ApplyUnfocusedStyle();
 },
 SendPostBack: function(postBackArg){
  if(!this.enabled || !this.clientEnabled)
   return;
  var arg = postBackArg || "";
  if(this.autoPostBackFunction)
   this.autoPostBackFunction(arg);
  else if(!this.useSubmitBehavior || this.IsLink())
   ASPxClientControl.prototype.SendPostBack.call(this, arg);
  if(this.useSubmitBehavior && !this.isNative)
   this.ClickInternalButton();
 },
 ClickInternalButton: function(){
  var element = this.GetInternalButton();
  if(element) {
   this.clickLocked = true;
   if(ASPx.Browser.NetscapeFamily)
    this.CreateUniqueIDCarrier();
   var postHandler = ASPx.GetPostHandler();
   postHandler.SetLastSubmitElementName(element.name);
   ASPx.Evt.DoElementClick(element);
   postHandler.SetLastSubmitElementName(null);
   if(ASPx.Browser.NetscapeFamily)
    this.RemoveUniqueIDCarrier();
   this.clickLocked = false;
  }
 },
 CreateUniqueIDCarrier: function() {
  var name = this.uniqueID;
  var id = this.GetUniqueIDCarrierID();
  var field = ASPx.CreateHiddenField(name, id);
  var form = this.GetParentForm();
  if(form) form.appendChild(field);
 },
 RemoveUniqueIDCarrier: function() {
  var field = document.getElementById(this.GetUniqueIDCarrierID());
  if(field)
   field.parentNode.removeChild(field);
 },
 GetUniqueIDCarrierID: function() {
  return this.uniqueID + "_UIDC";
 },
 DoClick: function(){
  if(!this.enabled || !this.clientEnabled)
   return;
  var button = (this.isNative || this.IsLink()) ? this.GetMainElement() : this.GetInternalButton();
  if(button)
   ASPx.Evt.DoElementClick(button);
  else
   this.OnClick();
 },
 GetChecked: function(){
  return this.checked;
 },
 SetChecked: function(checked){
  this.SetCheckedInternal(checked, false);
  this.ClearButtonGroupChecked(false);
 },
 GetText: function(){
  if(!this.isTextEmpty)
   return this.isNative ? this.GetTextContainer().value : this.GetTextContainer().innerHTML;
  return "";
 },
 SetText: function(text){
  this.isTextEmpty = (text == null || text == "");
  var textContainer = this.GetTextContainer();
  if(textContainer){
   if(this.isNative)
    textContainer.value = (text != null) ? text : "";
   else {
    var value = this.isTextEmpty ? "&nbsp;" : text;
      textContainer.innerHTML = value;
    var element = this.GetInternalButton();
    if(element)
     element.value = value;
    if(this.clientVisible && ASPx.Browser.IE && ASPx.Browser.Version >= 9)
     ASPx.SetElementDisplay(this.GetMainElement(), true);
   }
   this.UpdateSize();
  }
 },
 GetImageUrl: function(){
  var img = this.GetButtonImage();
  return img ?  img.src : "";
 },
 SetImageUrl: function(url){
  var img = this.GetButtonImage();
  if(img) {
   img.src = url;
   this.UpdateSize();
  }
 },
 SetEnabled: function(enabled){
  if(this.clientEnabled != enabled) {
   if(!enabled && this.focused)
    this.OnLostFocus();
   this.clientEnabled = enabled;
   this.SetEnabledInternal(enabled, false);
  }
 },
 GetEnabled: function(){
  return this.enabled && this.clientEnabled;
 },
 Focus: function(){
  this.SetFocus();
 },
 RaiseCheckedChanged: function(){
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned("CheckedChanged");
  if(!this.CheckedChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.CheckedChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseFocus: function(){
  if(!this.GotFocus.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.GotFocus.FireEvent(this, args);
  }
 },
 RaiseLostFocus: function(){
  if(!this.LostFocus.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.LostFocus.FireEvent(this, args);
  }
 },
 RaiseClick: function() {
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned("Click");
  var cancelEventAndBubble = false;
  if(!this.Click.IsEmpty()) {
   var args = new ASPxClientButtonClickEventArgs(processOnServer, cancelEventAndBubble);
   this.Click.FireEvent(this, args);
   cancelEventAndBubble = args.cancelEventAndBubble;
   processOnServer = args.processOnServer;
  }
  return {
   processOnServer: processOnServer,
   cancelEventAndBubble: cancelEventAndBubble
  };
 }
});
ASPxClientButton.Cast = ASPxClientControl.Cast;
var ASPxClientButtonClickEventArgs = ASPx.CreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(processOnServer, cancelEventAndBubble) {
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.cancelEventAndBubble = cancelEventAndBubble;
 }
});
ASPxClientButton.MakeHiddenElementFocusable = function(element) {
 element.__dxHiddenElementState = {
  parentDisplay: element.parentNode.style.display,
  height: element.style.height,
  width: element.style.width
 };
 element.parentNode.style.display = "block";
 element.style.height = "1px";
 element.style.width = "1px";
};
ASPxClientButton.RestoreHiddenElementAppearance = function(element) {
 var state = element.__dxHiddenElementState;
 element.parentNode.style.display = state.parentDisplay;
 element.style.height = state.height;
 element.style.width = state.width;
 delete element.__dxHiddenElementState;
};
ASPx.Ident.IsASPxClientButton = function(obj) {
 return !!obj.isASPxClientButton;
};
function _aspxBCallButtonMethod(name, methodName, arg) {
 var button = ASPx.GetControlCollection().Get(name);
 if(button != null)
  button[methodName](arg);
}
ASPx.BClick = function(name, evt) {
 var button = ASPx.GetControlCollection().Get(name);
 if(button != null)
  return button.OnClick(evt);
};
window.ASPxClientButton = ASPxClientButton;
})();

(function(dx) {
 var BootstrapClientButton = ASPx.CreateClass(ASPxClientButton, {
  constructor: function(name) {
   this.constructor.prototype.constructor.call(this, name);
  },
  InitializeNativeHandlers: function() { },
  InitializeElementIDs: function() { },
  InitializeLink: function() { },
  UpdateSize: function() { },
  UpdateHeight: function() { },
  UpdateWidth: function() { },
  AdjustControlCore: function() { },
  ApplyCheckedStyle: function() {
   var btn = this.GetInternalButton();
   ASPx.AddClassNameToElement(btn, "active");
   ASPx.Attr.SetAttribute(btn, "aria-pressed", true);
  },
  ApplyUncheckedStyle: function() {
   var btn = this.GetInternalButton();
   ASPx.RemoveClassNameFromElement(btn, "active");
   ASPx.Attr.SetAttribute(btn, "aria-pressed", false);
  },
  ApplyPressedStyle: function() { },
  ApplyUnpressedStyle: function() { },
  ApplyFocusedStyle: function() { },
  ApplyUnfocusedStyle: function() { },
  ChangeEnabledStateItems: function(enabled) { },
  SetFocus: function () {
   if (!this.allowFocus || this.focused)
    return;
   this.focused = true;
   var element = this.GetInternalButton();
   if (element) {
    if (ASPx.IsFocusable(element) && ASPx.GetActiveElement() != element)
     element.focus();
   }
  },
  ClickInternalButton: function() { },
  GetContentDiv: function() {
   return null;
  },
  GetInternalButton: function() {
   return this.GetMainElement();
  },
  GetButtonImage: function() {
   return null;
  },
  GetTextContainer: function() {
   var buttonElement = this.GetMainElement();
   var textNode = ASPx.GetNormalizedTextNode(buttonElement);
   return textNode ? textNode.parentNode : buttonElement;
  },
  GetTextControl: function() {
   return null;
  },
  GetBadgeControl: function() {
   return ASPx.BootstrapBadgeManager.findBadge(this.GetMainElement());
  },
  RequiredPreventDoublePostback: function() {
   return false;
  },
  GetText: function() {
   if(!this.isTextEmpty)
    return this.GetMainElement().value;
   return "";
  },
  SetText: function(text) {
   var buttonText = this.HtmlEncode(text);
   ASPxClientButton.prototype.SetText.call(this, buttonText);
   var buttonElement = this.GetMainElement();
   buttonElement.value = (buttonText != null) ? buttonText : "";
   var textNode = ASPx.GetNormalizedTextNode(buttonElement);
   if(textNode && textNode.parentNode == buttonElement)
    textNode.nodeValue = buttonText;
   else {
    textNode = document.createTextNode(buttonText);
    var badgeControl = this.GetBadgeControl();
    if(badgeControl)
     buttonElement.insertBefore(textNode, badgeControl);
    else
     buttonElement.appendChild(textNode);
   }
  },
  GetBadgeText: function() {
   return ASPx.BootstrapBadgeManager.getBadgeText(this.GetMainElement());
  },
  SetBadgeText: function(text) {
   var badgeText = this.HtmlEncode(text);
   var badgeControl = this.GetBadgeControl();
   if(badgeControl)
    ASPx.BootstrapBadgeManager.setBadgeText(badgeControl, badgeText);
   else
    this.GetMainElement().appendChild(ASPx.BootstrapBadgeManager.createBadge(badgeText));
  },
  GetBadgeIconCssClass: function() {
   return ASPx.BootstrapBadgeManager.getBadgeIconCssClass(this.GetMainElement());
  },
  SetBadgeIconCssClass: function(cssClass) {
   var badgeControl = this.GetBadgeControl();
   if(badgeControl)
    ASPx.BootstrapBadgeManager.setBadgeIconCssClass(badgeControl, cssClass);
   else
    this.GetMainElement().appendChild(ASPx.BootstrapBadgeManager.createBadge("", cssClass));
  }
 });
 dx.BootstrapClientButton = BootstrapClientButton;
})(dx || (dx = {}));
(function() {
var ASPxClientEditBase = ASPx.CreateClass(ASPxClientControl, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.EnabledChanged = new ASPxClientEvent();
  this.captionPosition = ASPx.Position.Left;
  this.showCaptionColon = true;
  this.scPrefix = "dxe";
 },
 InlineInitialize: function(){
  ASPxClientControl.prototype.InlineInitialize.call(this);
  this.InitializeEnabled();
  this.InitializeEvents();
 },
 InitializeEnabled: function() {
  this.SetEnabledInternal(this.clientEnabled, true);
 },
 InitializeEvents: function() { },
 AddDefaultReadOnlyStateControllerItem: function(cssClass, mainElementId) {
  ASPx.AddReadOnlyItems(mainElementId, [[[cssClass], [''], ['']]]);
 },
 AddDefaultDisabledStateControllerItem: function(cssClass, mainElementId) {
  ASPx.AddDisabledItems(mainElementId, [[[cssClass], [''], ['']]]);
 },
 GetValue: function() {
  var element = this.GetMainElement();
  if(ASPx.IsExistsElement(element))
   return element.innerHTML;
  return "";
 },
 GetValueString: function(){
  var value = this.GetValue();
  return (value == null) ? null : value.toString();
 },
 EnsureValueStringIsActual: function() {
  if(this.maskInfo != null)
   this.ParseValue();
 },
 SetValue: function(value) {
  if(value == null)
   value = "";
  var element = this.GetMainElement();
  if(ASPx.IsExistsElement(element))
   element.innerHTML = value;
 },
 GetEnabled: function(){
  return this.enabled && this.clientEnabled;
 },
 SetEnabled: function(enabled){
  if(this.clientEnabled != enabled) {
   var errorFrameRequiresUpdate = this.GetIsValid && !this.GetIsValid();
   if(errorFrameRequiresUpdate && !enabled)
    this.UpdateErrorFrameAndFocus(false , null , true );
   this.clientEnabled = enabled;
   this.SetEnabledInternal(enabled, false);
   if(errorFrameRequiresUpdate && enabled)
    this.UpdateErrorFrameAndFocus(false );
   this.RaiseEnabledChangedEvent();
  }
 },
 SetEnabledInternal: function(enabled, initialization){
  if(!this.enabled) return;
  if(!initialization || !enabled)
   this.ChangeEnabledStateItems(enabled);
  this.ChangeEnabledAttributes(enabled);
  if(ASPx.Browser.Chrome) {
   var mainElement = this.GetMainElement();
   if(mainElement)
    mainElement.className = mainElement.className;
  }
 },
 ChangeEnabledAttributes: function(enabled){
 },
 ChangeEnabledStateItems: function(enabled){
 },
 RaiseEnabledChangedEvent: function(){
  if(!this.EnabledChanged.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.EnabledChanged.FireEvent(this, args);
  }
 },
 GetDecodeValue: function (value) {
  if(typeof (value) == "string" && value.length > 1)
   value = this.SimpleDecodeHtml(value);
  return value;
 },
 SimpleDecodeHtml: function (html) {
  return ASPx.Str.ApplyReplacement(html, [
   [/&lt;/g, '<'],
   [/&amp;/g, '&'],
   [/&quot;/g, '"'],
   [/&#39;/g, '\''],
   [/&#32;/g, ' ']
  ]);
 },
 GetCachedElementById: function(idSuffix) {
  return ASPx.CacheHelper.GetCachedElementById(this, this.name + idSuffix);
 },
 GetCaptionCell: function() {
  return this.GetCachedElementById(EditElementSuffix.CaptionCell);
 },
 GetExternalTable: function() {
  return this.GetCachedElementById(EditElementSuffix.ExternalTable);
 },
 getCaptionRelatedCellCount: function() {
  if(!this.captionRelatedCellCount)
   this.captionRelatedCellCount = ASPx.GetNodesByClassName(this.GetExternalTable(), CaptionRelatedCellClassName).length;
  return this.captionRelatedCellCount;
 },
 addCssClassToCaptionRelatedCells: function() {
  if(this.captionPosition == ASPx.Position.Left || this.captionPosition == ASPx.Position.Right) {
   var captionRelatedCellsIndex = this.captionPosition == ASPx.Position.Left ? 0 : this.GetCaptionCell().cellIndex;
   for(var i = 0; i < this.GetExternalTable().rows.length; i++)
    ASPx.AddClassNameToElement(this.GetExternalTable().rows[i].cells[captionRelatedCellsIndex], CaptionRelatedCellClassName);
  }
  if(this.captionPosition == ASPx.Position.Top || this.captionPosition == ASPx.Position.Bottom)
   for(var i = 0; i < this.GetCaptionCell().parentNode.cells.length; i++)
    ASPx.AddClassNameToElement(this.GetCaptionCell().parentNode.cells[i], CaptionRelatedCellClassName);
 },
 GetCaption: function() {
  if(ASPx.IsExists(this.GetCaptionCell()))
   return this.getCaptionInternal();
  return "";
 },
 SetCaption: function(caption) {
  if(!ASPx.IsExists(this.GetCaptionCell()))
   return;
  if(this.getCaptionRelatedCellCount() == 0)
   this.addCssClassToCaptionRelatedCells();
  if(caption !== "")
   ASPx.RemoveClassNameFromElement(this.GetExternalTable(), ASPxEditExternalTableClassNames.TableWithEmptyCaptionClassName);
  else
   ASPx.AddClassNameToElement(this.GetExternalTable(), ASPxEditExternalTableClassNames.TableWithEmptyCaptionClassName);
  this.setCaptionInternal(caption);
 },
 getCaptionTextNode: function() {
  var captionElement = ASPx.GetNodesByPartialClassName(this.GetCaptionCell(), CaptionElementPartialClassName)[0];
  return ASPx.GetNormalizedTextNode(captionElement);
 },
 getCaptionInternal: function() {
  var captionText = this.getCaptionTextNode().nodeValue;
  if(captionText !== "" && captionText[captionText.length - 1] == ":")
   captionText = captionText.substring(0, captionText.length - 1);
  return captionText;
 },
 setCaptionInternal: function(caption) {
  caption = ASPx.Str.Trim(caption);
  var captionTextNode = this.getCaptionTextNode();
  if(this.showCaptionColon && caption[caption.length - 1] != ":" && caption !== "")
   caption += ":";
  captionTextNode.nodeValue = caption;
 },
 onVirtualKeyboardUITouchStart: function(evt) { }
});
var ValidationPattern = ASPx.CreateClass(null, {
 constructor: function(errorText) {
  this.errorText = errorText;
 }
});
var RequiredFieldValidationPattern = ASPx.CreateClass(ValidationPattern, {
 constructor: function(errorText) {
  this.constructor.prototype.constructor.call(this, errorText);
 },
 EvaluateIsValid: function(value) {
  return value != null && (value.constructor == Array || ASPx.Str.Trim(value.toString()) != "");
 }
});
var RegularExpressionValidationPattern = ASPx.CreateClass(ValidationPattern, {
 constructor: function(errorText, pattern) {
  this.constructor.prototype.constructor.call(this, errorText);
  this.pattern = pattern;
 },
 EvaluateIsValid: function(value) {
  if(value == null)
   return true;
  var strValue = value.toString();
  if(ASPx.Str.Trim(strValue).length == 0)
   return true;
  var regEx = new RegExp(this.pattern);
  var matches = regEx.exec(strValue);
  return matches != null && strValue == matches[0];
 }
});
function _aspxIsEditorFocusable(inputElement) {
 return ASPx.IsFocusableCore(inputElement, function(container) {
  return container.getAttribute("errorFrame") == "errorFrame";
 });
}
var invalidEditorToBeFocused = null;
var ValidationType = {
 PersonalOnValueChanged: "ValueChanged",
 PersonalViaScript: "CalledViaScript",
 MassValidation: "MassValidation"
};
var ErrorFrameDisplay = {
 None: "None",
 Static: "Static",
 Dynamic: "Dynamic"
};
var EditElementSuffix = {
 ExternalTable: "_ET",
 ControlCell: "_CC",
 ErrorCell: "_EC",
 ErrorTextCell: "_ETC",
 ErrorImage: "_EI",
 CaptionCell: "_CapC",
 AccessibilityAdditionalTextRow: "_AHTR"
};
var ASPxEditExternalTableClassNames = {
 ValidStaticTableClassName: "dxeValidStEditorTable",
 ValidDynamicTableClassName: "dxeValidDynEditorTable",
 TableWithSeparateBordersClassName: "tableWithSeparateBorders",
 TableWithEmptyCaptionClassName: "tableWithEmptyCaption"
};
var CaptionRelatedCellClassName = "dxeCaptionRelatedCell";
var CaptionElementPartialClassName = "dxeCaption";
var AccessibilityAssistantID = "AcAs";
var ASPxClientEdit = ASPx.CreateClass(ASPxClientEditBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientEdit = true;
  this.inputElement = null;
  this.convertEmptyStringToNull = true;
  this.readOnly = false;
  this.clientReadOnly = false;
  this.focused = false;
  this.focusEventsLocked = false;
  this.receiveGlobalMouseWheel = true;
  this.styleDecoration = null;
  this.heightCorrectionRequired = false;
  this.customValidationEnabled = false;
  this.display = ErrorFrameDisplay.Static;
  this.initialErrorText = "";
  this.causesValidation = false;
  this.validateOnLeave = true;
  this.validationGroup = "";
  this.sendPostBackWithValidation = null;
  this.validationPatterns = [];
  this.setFocusOnError = false;
  this.errorDisplayMode = "it";
  this.errorText = "";
  this.isValid = true;
  this.errorImageIsAssigned = false;
  this.notifyValidationSummariesToAcceptNewError = false;
  this.isErrorFrameRequired = false;
  this.enterProcessed = false;
  this.keyDownHandlers = {};
  this.keyPressHandlers = {};
  this.keyUpHandlers = {};
  this.specialKeyboardHandlingUsed = false;
  this.onKeyDownHandler = null;
  this.onKeyPressHandler = null;
  this.onKeyUpHandler = null;
  this.onGotFocusHandler = null;
  this.onLostFocusHandler = null;
  this.GotFocus = new ASPxClientEvent();
  this.LostFocus = new ASPxClientEvent();
  this.Validation = new ASPxClientEvent();
  this.ValueChanged = new ASPxClientEvent();
  this.KeyDown = new ASPxClientEvent();
  this.KeyPress = new ASPxClientEvent();
  this.KeyUp = new ASPxClientEvent();
  this.eventHandlersInitialized = false;
  this.errorCellVisibilityChanged = new ASPxClientEvent();
  this.ariaExplanatoryTextManager = null;
 },
 SetData: function(data){
  if(data.decorationStyles){
   for(var i = 0; i < data.decorationStyles.length; i++)
    this.AddDecorationStyle(data.decorationStyles[i].key,
     data.decorationStyles[i].className,
     data.decorationStyles[i].cssText);
  }
 },
 Initialize: function() {
  this.initialErrorText = this.errorText;
  ASPxClientEditBase.prototype.Initialize.call(this);
  this.InitializeKeyHandlers();
  this.UpdateClientValidationState();
  this.UpdateValidationSummaries(null , true );
 },
 InlineInitialize: function() {
  ASPxClientEditBase.prototype.InlineInitialize.call(this);
  this.UpdateStyleDecorations();
  var externalTable = this.GetExternalTable();
  if(externalTable && ASPx.IsPercentageSize(externalTable.style.width)) {
   this.width = "100%";
   this.GetMainElement().style.width = "100%";
   if(this.isErrorFrameRequired)
    externalTable.setAttribute("errorFrame", "errorFrame");
  }
  this.ariaExplanatoryTextManager = this.CreateAriaExplanatoryTextManager();
  if(this.clientReadOnly)
   this.SetReadOnlyInternal(true);
  this.UpdateErrorCellParentRowVisibility();
 },
 AfterInitialize: function() {
  this.ariaExplanatoryTextManager.SetCaptionAssociating();
  this.ariaExplanatoryTextManager.UpdateText();
  this.ariaExplanatoryTextManager.UpdateValidationState();
  ASPxClientEditBase.prototype.AfterInitialize.call(this);
 },
 UpdateStyleDecorations: function() {
  if(this.styleDecoration)
   this.styleDecoration.Update();
 },
 InitSpecialKeyboardHandling: function(){
  var name = this.name;
  this.onKeyDownHandler = function(evt) { ASPx.KBSIKeyDown(name,evt); };
  this.onKeyPressHandler = function(evt) { ASPx.KBSIKeyPress(name, evt); };
  this.onKeyUpHandler = function(evt) { ASPx.KBSIKeyUp(name, evt); };
  this.onGotFocusHandler = function(evt) { ASPx.ESGotFocus(name); };
  this.onLostFocusHandler = function(evt) { ASPx.ESLostFocus(name); };
  this.specialKeyboardHandlingUsed = true;
  this.InitializeDelayedSpecialFocus();
 },
 InitializeKeyHandlers: function() {
 },
 AddKeyDownHandler: function(key, handler) {
  this.keyDownHandlers[key] = handler;
 },
 AddKeyPressHandler: function(key, handler) {
  this.keyPressHandlers[key] = handler;
 },
 ChangeSpecialInputEnabledAttributes: function(element, method, doNotChangeAutoComplete){
  if(!doNotChangeAutoComplete)
   element.autocomplete = "off";
  if(this.onKeyDownHandler != null)
   method(element, "keydown", this.onKeyDownHandler);
  if(this.onKeyPressHandler != null)
   method(element, "keypress", this.onKeyPressHandler);
  if(this.onKeyUpHandler != null)
   method(element, "keyup", this.onKeyUpHandler);
  if(this.onGotFocusHandler != null)
   method(element, "focus", this.onGotFocusHandler);
  if(this.onLostFocusHandler != null)
   method(element, "blur", this.onLostFocusHandler);
 },
 CreateAriaExplanatoryTextManager: function() {
  if(this.accessibilityCompliant)
   return new EditAccessibilityExplanatoryTextManager(this);
  else
   return new DisableAccessibilityExplanatoryTextManager(this);
 },
 UpdateClientValidationState: function() {
  if(!this.customValidationEnabled)
   return;
  var mainElement = this.GetMainElement();
  if(mainElement) {
   var validationState = !this.GetIsValid() ? ("-" + this.GetErrorText()) : "";
   this.UpdateStateObjectWithObject({ validationState: validationState });
  }
 },
 UpdateValidationSummaries: function(validationType, initializing) {
  if(ASPx.Ident.scripts.ASPxClientValidationSummary) {
   var summaryCollection = ASPx.GetClientValidationSummaryCollection();
   summaryCollection.OnEditorIsValidStateChanged(this, validationType, initializing && this.notifyValidationSummariesToAcceptNewError);
  }
 },
 FindInputElement: function(){
  return null;
 },
 GetInputElement: function(){
  if(!ASPx.IsExistsElement(this.inputElement))
   this.inputElement = this.FindInputElement();
  return this.inputElement;
 },
 GetFocusableInputElement: function() {
  return this.GetInputElement();
 },
 GetAccessibilityActiveElements: function() {
  return [this.GetInputElement()];
 },
 GetAccessibilityFirstActiveElement: function() {
  return this.accessibilityHelper ?
    this.accessibilityHelper.getMainElement() :
    this.GetAccessibilityActiveElements()[0];
 },
 GetAccessibilityAssistantElement: function() {
  return this.GetChildElement(AccessibilityAssistantID);
 },
 GetErrorImage: function() {
  return this.GetCachedElementById(EditElementSuffix.ErrorImage);
 },
 GetControlCell: function() {
  return this.GetCachedElementById(EditElementSuffix.ControlCell);
 },
 GetErrorCell: function() {
  return this.GetCachedElementById(EditElementSuffix.ErrorCell);
 },
 GetErrorTextCell: function() {
  return this.GetCachedElementById(this.errorImageIsAssigned ? EditElementSuffix.ErrorTextCell : EditElementSuffix.ErrorCell);
 },
 GetReadOnly: function() {
  return this.readOnly || this.clientReadOnly;
 },
 SetReadOnly: function(readOnly) {
  readOnly = !!readOnly;
  if(this.clientReadOnly === readOnly || this.readOnly)
   return;
  this.SetReadOnlyInternal(readOnly);
 },
 SetReadOnlyInternal: function(readOnly) {
  this.clientReadOnly = readOnly;
  this.ChangeReadOnlyStateItems(readOnly);
 },
 ChangeReadOnlyStateItems: function(readOnly) {
  ASPx.GetStateController().SetElementReadOnly(this.GetMainElement(), readOnly);
 },
 SetVisible: function (isVisible) {
  if(this.clientVisible == isVisible)
   return;
  var externalTable = this.GetExternalTable();
  if(externalTable) {
   ASPx.SetElementDisplay(externalTable, isVisible);
   if(this.customValidationEnabled) {
    var isValid = !isVisible ? true : void (0);
    this.UpdateErrorFrameAndFocus(false , true , isValid );
   }
  }
  ASPxClientControl.prototype.SetVisible.call(this, isVisible);
 },
 GetStateHiddenFieldName: function() {
  return this.uniqueID + "$State";
 },
 GetValueInputToValidate: function() {
  return this.GetInputElement();
 },
 IsVisible: function() {
  if(!this.clientVisible)
   return false;
  var element = this.GetMainElement();
  if(!element)
   return false;
  while(element && element.tagName != "BODY") {
   if(element.getAttribute("errorFrame") != "errorFrame" && (!ASPx.GetElementVisibility(element) || !ASPx.GetElementDisplay(element)))
    return false;
   element = element.parentNode;
  }
  return true;
 },
 AdjustControlCore: function() {
  this.CollapseEditor();
  this.UnstretchInputElement();
  if(this.heightCorrectionRequired)
   this.CorrectEditorHeight();
 },
 CorrectEditorHeight: function() {
 },
 UnstretchInputElement: function() {
 },
 UseDelayedSpecialFocus: function() {
  return false;
 },
 GetDelayedSpecialFocusTriggers: function() {
  return [ this.GetMainElement() ];
 },
 InitializeDelayedSpecialFocus: function() {
  if(!this.UseDelayedSpecialFocus())
   return;
  this.specialFocusTimer = -1;
  var handler = function(evt) { this.OnDelayedSpecialFocusMouseDown(evt); }.aspxBind(this);
  var triggers = this.GetDelayedSpecialFocusTriggers();
  for(var i = 0; i < triggers.length; i++)
   ASPx.Evt.AttachEventToElement(triggers[i], "mousedown", handler);
 },
 OnDelayedSpecialFocusMouseDown: function(evt) {
  window.setTimeout(function() { this.SetFocus(); }.aspxBind(this), 0);
 },
 IsFocusEventsLocked: function() {
  return this.focusEventsLocked;
 },
 LockFocusEvents: function() {
  if(!this.focused) return;
  this.focusEventsLocked = true;
 },
 UnlockFocusEvents: function() {
  this.focusEventsLocked = false;
 },
 ForceRefocusEditor: function(evt, isNativeFocus) {
  if(ASPx.Browser.VirtualKeyboardSupported && !this.ownerListBox) {
   var focusedEditor = ASPx.VirtualKeyboardUI.getFocusedEditor();
   if(ASPx.VirtualKeyboardUI.getInputNativeFocusLocked() && (!focusedEditor || focusedEditor === this))
     return;
   ASPx.VirtualKeyboardUI.setInputNativeFocusLocked(!isNativeFocus);
  }
  this.LockFocusEvents();
  this.BlurInputElement();
  window.setTimeout(function() {
   if(ASPx.Browser.VirtualKeyboardSupported && !this.ownerListBox) {
    ASPx.VirtualKeyboardUI.setFocusEditorCore(this);
   } else {
    this.SetFocus();
   }
  }.aspxBind(this), 0);
 },
 BlurInputElement: function() {
  var inputElement = this.GetFocusableInputElement();
  if(inputElement && inputElement.blur)
   inputElement.blur();
 },
 IsEditorElement: function(element) {
  return this.GetMainElement() == element || ASPx.GetIsParent(this.GetMainElement(), element);
 },
 IsClearButtonElement: function(element) {
  return false;
 },
 IsElementBelongToInputElement: function(element) {
  return this.GetInputElement() == element;
 },
 OnFocusCore: function() {
  if(this.UseDelayedSpecialFocus())
   window.clearTimeout(this.specialFocusTimer);
  if(!this.IsFocusEventsLocked()){
   this.focused = true;
   ASPx.SetFocusedEditor(this);
   if(this.styleDecoration)
    this.styleDecoration.Update();
   if(this.isInitialized)
    this.RaiseFocus();
  }
  else
   this.UnlockFocusEvents();
 },
 OnLostFocusCore: function() {
  if(!this.IsFocusEventsLocked()){
   this.focused = false;
   if(ASPx.GetFocusedEditor() === this)
    ASPx.SetFocusedEditor(null);
   if(this.styleDecoration)
    this.styleDecoration.Update();
   this.RaiseLostFocus();
  }
 },
 OnFocus: function() {
  if(!this.specialKeyboardHandlingUsed)
   this.OnFocusCore();
 },
 OnLostFocus: function() {
  if(this.isInitialized && !this.specialKeyboardHandlingUsed)
   this.OnLostFocusCore();
 },
 OnSpecialFocus: function() {
  if(this.isInitialized)
   this.OnFocusCore();
 },
 OnSpecialLostFocus: function() {
  if(this.isInitialized)
   this.OnLostFocusCore();
 },
 OnMouseWheel: function(evt){
 },
 OnValidation: function(validationType) {
  if(this.customValidationEnabled && this.isInitialized && ASPx.IsExistsElement(this.GetMainElement()) &&
   (!this.IsErrorFrameDisplayed() || this.GetElementRequiredForErrorFrame())) {
   this.BeginErrorFrameUpdate();
   try {
    if(this.validateOnLeave || validationType != ValidationType.PersonalOnValueChanged) {
     this.SetIsValid(true, true );
     this.SetErrorText(this.initialErrorText, true );
     this.ValidateWithPatterns();
     this.RaiseValidation();
    }
    this.UpdateErrorFrameAndFocus(this.editorFocusingRequired(validationType));
   } finally {
    this.EndErrorFrameUpdate();
   }
   this.UpdateValidationSummaries(validationType);
   this.ariaExplanatoryTextManager.UpdateValidationState(validationType);
  }
 },
 GetElementRequiredForErrorFrame: function() {
  return this.GetExternalTable();
 },
 editorFocusingRequired: function(validationType) {
  return !this.GetIsValid() &&
   validationType == ValidationType.PersonalViaScript && this.setFocusOnError;
 },
 OnValueChanged: function() {
  if(this.getProcessOnServerOnValueChanged())
   this.SendPostBackInternal("");
 },
 getProcessOnServerOnValueChanged: function() {
  var processOnServer = this.RaiseValidationInternal();
  return this.RaiseValueChangedEvent() && processOnServer;
 },
 ParseValue: function() {
 },
 RaisePersonalStandardValidation: function() {
  if(ASPx.IsFunction(window.ValidatorOnChange)) {
   var inputElement = this.GetValueInputToValidate();
   if(inputElement && inputElement.Validators)
    window.ValidatorOnChange({ srcElement: inputElement });
  }
 },
 RaiseValidationInternal: function() {
  if(this.isPostBackAllowed() && this.causesValidation && this.validateOnLeave)
   return ASPxClientEdit.ValidateGroup(this.validationGroup);
  else {
   this.OnValidation(ValidationType.PersonalOnValueChanged);
   return this.GetIsValid();
  }
 },
 RaiseValueChangedEvent: function(){
  return this.RaiseValueChanged();
 },
 SendPostBackInternal: function(postBackArg) {
  if(ASPx.IsFunction(this.sendPostBackWithValidation))
   this.sendPostBackWithValidation(postBackArg);
  else
   this.SendPostBack(postBackArg);
 },
 SetElementToBeFocused: function() {
  if(this.IsVisible())
   invalidEditorToBeFocused = this;
 },
 GetFocusSelectAction: function() {
  return null;
 },
 SetFocus: function() {
  var inputElement = this.GetFocusableInputElement();
  if(!inputElement) return;
  var isIE9 = ASPx.Browser.IE && ASPx.Browser.Version >= 9;
  if((ASPx.GetActiveElement() != inputElement || isIE9) && _aspxIsEditorFocusable(inputElement))
   ASPx.SetFocus(inputElement, this.GetFocusSelectAction());
 },
 SetFocusOnError: function() {
  if(invalidEditorToBeFocused == this) {
   this.SetFocus();
   invalidEditorToBeFocused = null;
  }
 },
 BeginErrorFrameUpdate: function() {
  if(!this.errorFrameUpdateLocked)
   this.errorFrameUpdateLocked = true;
 },
 EndErrorFrameUpdate: function() {
  this.errorFrameUpdateLocked = false;
  var args = this.updateErrorFrameAndFocusLastCallArgs;
  if(args) {
   this.UpdateErrorFrameAndFocus(args[0], args[1]);
   delete this.updateErrorFrameAndFocusLastCallArgs;
  }
 },
 UpdateErrorFrameAndFocus: function(setFocusOnError, ignoreVisibilityCheck, isValid) {
  if(!this.GetEnabled() || !ignoreVisibilityCheck && !this.GetVisible())
   return;
  if(this.errorFrameUpdateLocked) {
   this.updateErrorFrameAndFocusLastCallArgs = [ setFocusOnError, ignoreVisibilityCheck ];
   return;
  }
  if(this.styleDecoration)
   this.styleDecoration.Update();
  if(typeof(isValid) == "undefined")
   isValid = this.GetIsValid();
  if(isValid && this.IsErrorFrameDisplayed())
   this.ChangeErrorFrameVisibility(false);
  else {
   var editorLocatedWithinVisibleContainer = this.IsVisible();
   if(this.IsErrorFrameDisplayed()) {
    this.UpdateErrorCellContent();
    this.ChangeErrorFrameVisibility(true);
   }
   if(editorLocatedWithinVisibleContainer) {
    if(setFocusOnError && this.setFocusOnError && invalidEditorToBeFocused == null) {
     this.SetElementToBeFocused();
     this.SetFocusOnError();
    }
   }
  }
 },
 ChangeErrorFrameVisibility: function(visible) {
  var externalTable = this.GetExternalTable();
  var isStaticDisplay = this.display == ErrorFrameDisplay.Static;
  if(!isStaticDisplay && visible) {
   this.EnsureControlCellStylesLoaded();
   this.RestoreControlCellStyles();
  }
  this.ChangeErrorCellVisibility(visible, isStaticDisplay);
  if(!isStaticDisplay && !visible) {
   this.EnsureControlCellStylesLoaded();
   this.ClearControlCellStyles();
  }
  var validExternalTableClassName = isStaticDisplay ? ASPxEditExternalTableClassNames.ValidStaticTableClassName
   : ASPxEditExternalTableClassNames.ValidDynamicTableClassName;
  ASPx.ToggleClassNameToElement(externalTable, validExternalTableClassName, !visible);
  this.UpdateErrorCellParentRowVisibility();
 },
 ChangeErrorCellVisibility: function(visible, useVisibilityAttribute) {
  var errorCell = this.GetErrorCell();
  if(errorCell) {
   if(useVisibilityAttribute)
    ASPx.SetElementVisibility(errorCell, visible);
   else {
    ASPx.SetElementDisplay(errorCell, visible);
    this.raiseErrorCellVisibilityChanged();
   }
  }
 },
 raiseErrorCellVisibilityChanged: function() {
  if(!this.errorCellVisibilityChanged.IsEmpty())
   this.errorCellVisibilityChanged.FireEvent(this);
 },
 UpdateErrorCellParentRowVisibility: function() {
  var errorCell = this.GetErrorCell();
  if(!errorCell || this.display == ErrorFrameDisplay.Static)
   return;
  var displayedCellCount = 0;
  var errorCellParentRow = errorCell.parentNode;
  for(var i = 0; i < errorCellParentRow.cells.length; i++) {
   var cell = errorCellParentRow.cells[i];
   if(ASPx.GetElementDisplay(cell))
    displayedCellCount++;
  }
  ASPx.SetElementDisplay(errorCellParentRow, displayedCellCount > 0);
 },
 EnsureControlCellStylesLoaded: function() {
  if(typeof(this.controlCellStyles) == "undefined") {
   var controlCell = this.GetControlCell();
   this.controlCellStyles = {
    cssClass: controlCell.className,
    style: this.ExtractElementStyleStringIgnoringVisibilityProps(controlCell)
   };
  }
 },
 ClearControlCellStyles: function() {
  this.ClearElementStyle(this.GetControlCell());
 },
 RestoreControlCellStyles: function() {
  var controlCell = this.GetControlCell();
  var externalTable = this.GetExternalTable();
  if(ASPx.Browser.WebKitFamily)
   this.MakeBorderSeparateForTable(externalTable);
  controlCell.className = this.controlCellStyles.cssClass;
  controlCell.style.cssText = this.controlCellStyles.style;
  if(ASPx.Browser.WebKitFamily)
   this.UndoBorderSeparateForTable(externalTable);
 },
 MakeBorderSeparateForTable: function(table) {
  ASPx.AddClassNameToElement(table, ASPxEditExternalTableClassNames.TableWithSeparateBordersClassName);
 },
 UndoBorderSeparateForTable: function(table) {
  setTimeout(function () {
   ASPx.RemoveClassNameFromElement(table, ASPxEditExternalTableClassNames.TableWithSeparateBordersClassName);
  }, 0);
 },
 ExtractElementStyleStringIgnoringVisibilityProps: function(element) {
  var savedVisibility = element.style.visibility;
  var savedDisplay = element.style.display;
  element.style.visibility = "";
  element.style.display = "";
  var styleStr = element.style.cssText;
  element.style.visibility = savedVisibility;
  element.style.display = savedDisplay;
  return styleStr;
 },
 ClearElementStyle: function(element) {
  if(!element)
   return;
  element.className = "";
  var excludedAttrNames = [
   "width", "display", "visibility",
   "position", "left", "top", "z-index",
   "margin", "margin-top", "margin-right", "margin-bottom", "margin-left",
   "float", "clear"
  ];
  var savedAttrValues = { };
  for(var i = 0; i < excludedAttrNames.length; i++) {
   var attrName = excludedAttrNames[i];
   var attrValue = element.style[attrName];
   if(attrValue)
    savedAttrValues[attrName] = attrValue;
  }
  element.style.cssText = "";
  for(var styleAttrName in savedAttrValues)
   if(savedAttrValues.hasOwnProperty(styleAttrName))
    element.style[styleAttrName] = savedAttrValues[styleAttrName];
 },
 Clear: function() {
  this.SetValue(null);
  this.SetIsValid(true);
  return true;
 },
 ResetEditorState: function() { },
 UpdateErrorCellContent: function() {
  if(this.errorDisplayMode.indexOf("t") > -1)
   this.UpdateErrorText();
  if(this.errorDisplayMode == "i")
   this.UpdateErrorImage();
 },
 UpdateErrorImage: function() {
  var image = this.GetErrorImage();
  if(ASPx.IsExistsElement(image)) {
   if(this.accessibilityCompliant) {
    ASPx.Attr.SetAttribute(image, "aria-label", this.errorText);
    var innerImg = ASPx.GetNodeByTagName(image, "IMG", 0);
    if(ASPx.IsExists(innerImg))
     innerImg.alt = this.errorText;
   }
   image.alt = this.errorText;
   image.title = this.errorText;
  } else {
   this.UpdateErrorText();
  }
 },
 UpdateErrorText: function() {
  var errorTextCell = this.GetErrorTextCell();
  if(ASPx.IsExistsElement(errorTextCell))
   errorTextCell.innerHTML = this.HtmlEncode(this.errorText);
 },
 ValidateWithPatterns: function() {
  if(this.validationPatterns.length > 0) {
   var value = this.GetValue();
   for(var i = 0; i < this.validationPatterns.length; i++) {
    var validator = this.validationPatterns[i];
    if(!validator.EvaluateIsValid(value)) {
     this.SetIsValid(false, true );
     this.SetErrorText(validator.errorText, true );
     return;
    }
   }
  }
 },
 OnSpecialKeyDown: function(evt){
  this.RaiseKeyDown(evt);
  var handler = this.keyDownHandlers[evt.keyCode];
  if(handler)
   return this[handler](evt);
  return false;
 },
 OnSpecialKeyPress: function(evt){
  this.RaiseKeyPress(evt);
  var handler = this.keyPressHandlers[evt.keyCode];
  if(handler)
   return this[handler](evt);
  if(ASPx.Browser.NetscapeFamily || ASPx.Browser.Opera){
   if(evt.keyCode == ASPx.Key.Enter)
    return this.enterProcessed;
  }
  return false;
 },
 OnSpecialKeyUp: function(evt){
  this.RaiseKeyUp(evt);
  var handler = this.keyUpHandlers[evt.keyCode];
  if(handler)
   return this[handler](evt);
  return false;
 },
 OnKeyDown: function(evt) {
  if(!this.specialKeyboardHandlingUsed)
   this.RaiseKeyDown(evt);
 },
 OnKeyPress: function(evt) {
  if(!this.specialKeyboardHandlingUsed)
   this.RaiseKeyPress(evt);
 },
 OnKeyUp: function(evt) {
  if(!this.specialKeyboardHandlingUsed)
   this.RaiseKeyUp(evt);
 },
 RaiseKeyDown: function(evt){
  if(!this.KeyDown.IsEmpty()){
   var args = new ASPxClientEditKeyEventArgs(evt);
   this.KeyDown.FireEvent(this, args);
  }
 },
 RaiseKeyPress: function(evt){
  if(!this.KeyPress.IsEmpty()){
   var args = new ASPxClientEditKeyEventArgs(evt);
   this.KeyPress.FireEvent(this, args);
  }
 },
 RaiseKeyUp: function(evt){
  if(!this.KeyUp.IsEmpty()){
   var args = new ASPxClientEditKeyEventArgs(evt);
   this.KeyUp.FireEvent(this, args);
  }
 },
 RaiseFocus: function(){
  if(!this.GotFocus.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.GotFocus.FireEvent(this, args);
  }
 },
 RaiseLostFocus: function(){
  if(!this.LostFocus.IsEmpty()){
   var args = new ASPxClientEventArgs();
   this.LostFocus.FireEvent(this, args);
  }
 },
 RaiseValidation: function() {
  if(this.customValidationEnabled && !this.Validation.IsEmpty()) {
   var currentValue = this.GetValue();
   var args = new ASPxClientEditValidationEventArgs(currentValue, this.errorText, this.GetIsValid());
   this.Validation.FireEvent(this, args);
   this.SetErrorText(args.errorText, true );
   this.SetIsValid(args.isValid, true );
   if(args.value != currentValue)
    this.SetValue(args.value);
  }
 },
 RaiseValueChanged: function(){
  var processOnServer = this.isPostBackAllowed();
  if(!this.ValueChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.ValueChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 isPostBackAllowed: function() {
  return this.autoPostBack;
 },
 AddDecorationStyle: function(key, className, cssText) {
  if(!this.styleDecoration)
   this.RequireStyleDecoration();
  this.styleDecoration.AddStyle(key, className, cssText);
 },
 RequireStyleDecoration: function() {
  this.styleDecoration = this.CreateStyleDecoration();
  this.PopulateStyleDecorationPostfixes();
 },
 CreateStyleDecoration: function() {
  return new ASPx.EditorStyleDecoration(this);
 },
 PopulateStyleDecorationPostfixes: function() {
  this.styleDecoration.AddPostfix("");
 },
 LockStyleDecorationUpdate: function() {
  if(this.styleDecoration)
   this.styleDecoration.LockUpdate();
 },
 UnlockStyleDecorationUpdate: function() {
  if(this.styleDecoration)
   this.styleDecoration.UnlockUpdate();
 },
 Focus: function(){
  this.SetFocus();
 },
 GetIsValid: function() {
  var hasRequiredInputElement = !this.RequireInputElementToValidate() || ASPx.IsExistsElement(this.GetInputElement());
  if(!hasRequiredInputElement || this.IsErrorFrameDisplayed() && !ASPx.IsExistsElement(this.GetElementRequiredForErrorFrame()))
   return true;
  return this.isValid;
 },
 RequireInputElementToValidate: function() {
  return true;
 },
 IsErrorFrameDisplayed: function() {
  return this.display !== ErrorFrameDisplay.None;
 },
 GetErrorText: function(){
  return this.errorText;
 },
 SetIsValid: function(isValid, validating){
  if(this.customValidationEnabled && this.isValid != isValid) {
   this.isValid = isValid;
   this.UpdateErrorFrameAndFocus(false );
   this.UpdateClientValidationState();
   if(!validating)
    this.UpdateValidationSummaries(ValidationType.PersonalViaScript);
  }
 },
 SetErrorText: function(errorText, validating){
  if(this.customValidationEnabled && this.errorText != errorText) {
   this.errorText = errorText;
   this.UpdateErrorFrameAndFocus(false );
   this.UpdateClientValidationState();
   if(!validating)
    this.UpdateValidationSummaries(ValidationType.PersonalViaScript);
  }
 },
 Validate: function(){
  this.ParseValue();
  this.OnValidation(ValidationType.PersonalViaScript);
 },
 GetModifyEvent: function() {
  return this.ValueChanged;
 },
 EnsureRequiredNativeAttributesExists: function() { }
});
ASPx.Ident.scripts.ASPxClientEdit = true;
ASPx.focusedEditorName = "";
ASPx.GetFocusedEditor = function() {
 var focusedEditor = ASPx.GetControlCollection().Get(ASPx.focusedEditorName);
 if(focusedEditor && !focusedEditor.focused){
  ASPx.SetFocusedEditor(null);
  focusedEditor = null;
 }
 return focusedEditor;
};
ASPx.SetFocusedEditor = function(editor) {
 ASPx.focusedEditorName = editor ? editor.name : "";
};
ASPx.FindAssociatedLabelElements = function(editor) {
 var assocciatedLabels = [];
 var inputElement = editor.GetInputElement();
 if(!ASPx.IsExists(inputElement) || !inputElement.id)
  return assocciatedLabels;
 var labels = ASPx.GetNodesByTagName(document, "LABEL");
 for(var i = 0; i < labels.length; i++) {
  if(!!labels[i].htmlFor && labels[i].htmlFor === inputElement.id)
   assocciatedLabels.push(labels[i]);
 }
 return assocciatedLabels;
};
var DisableAccessibilityExplanatoryTextManager = ASPx.CreateClass(null, {
 constructor: function(editor) {
  this.editor = editor;
 },
 GetAdditionalTextRowId: function() {
  return this.editor.name + EditElementSuffix.AccessibilityAdditionalTextRow;
 },
 GetErrorTextElement: function () {
  return !!this.editor.GetErrorTextCell() ? this.editor.GetErrorTextCell() : this.editor.GetErrorImage();
 },
 GetTextElement: function() { return null; },
 SetCaptionAssociating: function() { },
 UpdateText: function() { },
 UpdateValidationState: function(validationType) { },
 ToggleErrorAlert: function() { },
 SetOrRemoveText: function(accessibilityElements, textElement, setText, isLabel, isFirst) { }
});
var EditAccessibilityExplanatoryTextManager = ASPx.CreateClass(DisableAccessibilityExplanatoryTextManager, {
 constructor: function(editor) {
  this.constructor.prototype.constructor.call(this, editor);
  this.invisibleRowCssClassName = "dxAIR";
 },
 GetTextElement: function() {
  var mainElement = this.editor.GetMainElement();
  if(!mainElement) return null;
  var explanatoryText = "";
  var explanatoryTextElement = null;
  if(!!this.editor.nullText)
   explanatoryText = this.editor.nullText;
  else if(!!this.editor.helpTextObj)
   explanatoryTextElement = this.editor.helpTextObj.helpTextElement;
  else if(!!mainElement.title)
   explanatoryText = mainElement.title;
  if(explanatoryText && mainElement.tagName == "TABLE") {
   var assistantElement = this.editor.GetAccessibilityFirstActiveElement();
   if(assistantElement)
    ASPx.Attr.Aria.AppendLabel(assistantElement, explanatoryText, true);
  }
  return explanatoryTextElement;
 },
 SetCaptionAssociating: function() {
  var captionCell = this.editor.GetCaptionCell();
  if(!captionCell || captionCell.childNodes[0].tagName == "LABEL") return;
  var labelElement = captionCell.childNodes[0];
  ASPx.EditAccessibilityExplanatoryTextManager.SetLabelAssociating(this.editor, this.editor.GetAccessibilityFirstActiveElement(), labelElement);
 },
 UpdateText: function() {
  var additionalTextElement = this.GetTextElement();
  if(ASPx.IsExists(additionalTextElement)) {
   var pronounceElement = this.editor.GetAccessibilityFirstActiveElement();
   var hasAnyLabel = !!ASPx.Attr.GetAttribute(pronounceElement, "aria-label") ||
    !!ASPx.Attr.GetAttribute(pronounceElement, "aria-labelledby") ||
    ASPx.FindAssociatedLabelElements(this.editor).length > 0;
   this.SetOrRemoveText([pronounceElement], additionalTextElement, true, !hasAnyLabel, false);
  }
 },
 UpdateValidationState: function(validationType) {
  if(validationType == ValidationType.PersonalOnValueChanged && this.editor.accessibilityHelper) return;
  var accessibilityElements = this.editor.GetAccessibilityActiveElements();
  var errorTextElement = this.GetErrorTextElement();
  this.SetOrRemoveText(accessibilityElements, errorTextElement, !this.editor.isValid, false, true);
  if(accessibilityElements.length > 0 && !!errorTextElement) {
   for(var i = 0; i < accessibilityElements.length; i++) {
    if(!ASPx.IsExists(accessibilityElements[i])) continue;
    ASPx.Attr.SetOrRemoveAttribute(accessibilityElements[i], "aria-invalid", !this.editor.isValid);
   }
  }
 },
 ToggleErrorAlert: function() {
  var errorTextElement = this.GetErrorTextElement();
  ASPx.SetElementDisplay(errorTextElement, false);
  ASPx.Attr.SetAttribute(errorTextElement, 'role', 'alert');
  ASPx.SetElementDisplay(errorTextElement, true);
  setTimeout(function() { ASPx.Attr.RemoveAttribute(errorTextElement, 'role'); }, 500);
 },
 SetOrRemoveText: function(accessibilityElements, textElement, setText, isLabel, isFirst) {
  var idsRefAttribute = isLabel ? ASPx.Attr.Aria.labelled : ASPx.Attr.Aria.described;
  if(!textElement) return;
  var textId = !!textElement.id ? textElement.id : textElement.parentNode.id;
  for(var i = 0; i < accessibilityElements.length; i++) {
   if(!accessibilityElements[i]) continue;
   var descRefString = ASPx.Attr.GetAttribute(accessibilityElements[i], idsRefAttribute);
   var descRefIds = !!descRefString ? descRefString.split(" ") : [ ];
   var descIndex = descRefIds.indexOf(textId);
   if(setText && descIndex == -1) {
    if(isFirst)
     descRefIds.unshift(textId);
    else
     descRefIds.push(textId);
   }
   else if(!setText && descIndex > -1)
    descRefIds.splice(descIndex, 1);
   ASPx.Attr.SetOrRemoveAttribute(accessibilityElements[i], idsRefAttribute, descRefIds.join(" "));
  }
 }
});
ASPx.DisableAccessibilityExplanatoryTextManager = DisableAccessibilityExplanatoryTextManager;
ASPx.EditAccessibilityExplanatoryTextManager = EditAccessibilityExplanatoryTextManager;
ASPx.EditAccessibilityExplanatoryTextManager.SetLabelAssociating = function(editor, activeElement, labelElement) {
 var clickHandler = function(evt) {
  if(editor && editor.OnAssociatedLabelClick)
   editor.OnAssociatedLabelClick(evt);
  else
   activeElement.click();
 };
 ASPx.Evt.AttachEventToElement(labelElement, "click", clickHandler);
 if(!!editor) {
  var hasAriaLabel = !!ASPx.Attr.GetAttribute(activeElement, "aria-label");
  editor.ariaExplanatoryTextManager.SetOrRemoveText([activeElement], labelElement, true, !hasAriaLabel, true);
 }
};
ASPxClientEdit.ClearEditorsInContainer = function(container, validationGroup, clearInvisibleEditors) {
 invalidEditorToBeFocused = null;
 ASPx.ProcessEditorsInContainer(container, ASPx.ClearProcessingProc, ASPx.ClearChoiceCondition, validationGroup, clearInvisibleEditors, true );
 ASPxClientEdit.ClearExternalControlsInContainer(container, validationGroup, clearInvisibleEditors, true );
};
ASPxClientEdit.ClearEditorsInContainerById = function(containerId, validationGroup, clearInvisibleEditors) {
 var container = document.getElementById(containerId);
 this.ClearEditorsInContainer(container, validationGroup, clearInvisibleEditors);
};
ASPxClientEdit.ClearGroup = function(validationGroup, clearInvisibleEditors) {
 return this.ClearEditorsInContainer(null, validationGroup, clearInvisibleEditors);
};
ASPxClientEdit.ValidateEditorsInContainer = function(container, validationGroup, validateInvisibleEditors) {
 var summaryCollection;
 if(ASPx.Ident.scripts.ASPxClientValidationSummary) {
  summaryCollection = ASPx.GetClientValidationSummaryCollection();
  summaryCollection.AllowNewErrorsAccepting(validationGroup);
 }
 var validationResult = ASPx.ProcessEditorsInContainer(container, ASPx.ValidateProcessingProc, _aspxValidateChoiceCondition, validationGroup, validateInvisibleEditors,
  false );
 validationResult.isValid = ASPxClientEdit.ValidateExternalControlsInContainer(container, validationGroup, validateInvisibleEditors,
  false ) && validationResult.isValid;
 if(typeof(validateInvisibleEditors) == "undefined")
  validateInvisibleEditors = false;
 if(typeof(validationGroup) == "undefined")
  validationGroup = null;
 validationResult.isValid = ASPx.GetControlCollection().RaiseValidationCompleted(container, validationGroup,
 validateInvisibleEditors, validationResult.isValid, validationResult.firstInvalid, validationResult.firstVisibleInvalid);
 if(summaryCollection)
  summaryCollection.ForbidNewErrorsAccepting(validationGroup);
 if(!validationResult.isValid && !!validationResult.firstVisibleInvalid && validationResult.firstVisibleInvalid.accessibilityCompliant && !validationResult.firstVisibleInvalid.setFocusOnError) {
  var accessInvalidControl = validationResult.firstVisibleInvalid;
  if(!summaryCollection && !accessInvalidControl.focused) {
   var beforeDelayActiveElement = ASPx.GetActiveElement();
   setTimeout(function() {
    var currentActiveElement = ASPx.GetActiveElement();
    if(accessInvalidControl.focused || (currentActiveElement != beforeDelayActiveElement && ASPx.Attr.IsExistsAttribute(currentActiveElement, 'role')))
     return;
    accessInvalidControl.ariaExplanatoryTextManager.ToggleErrorAlert();
   }, 500);
  }
 }
 return validationResult.isValid;
};
ASPxClientEdit.ValidateEditorsInContainerById = function(containerId, validationGroup, validateInvisibleEditors) {
 var container = document.getElementById(containerId);
 return this.ValidateEditorsInContainer(container, validationGroup, validateInvisibleEditors);
};
ASPxClientEdit.ValidateGroup = function(validationGroup, validateInvisibleEditors) {
 return this.ValidateEditorsInContainer(null, validationGroup, validateInvisibleEditors);
};
ASPxClientEdit.AreEditorsValid = function(containerOrContainerId, validationGroup, checkInvisibleEditors) {
 var container = typeof(containerOrContainerId) == "string" ? document.getElementById(containerOrContainerId) : containerOrContainerId;
 var checkResult = ASPx.ProcessEditorsInContainer(container, ASPx.EditorsValidProcessingProc, _aspxEditorsValidChoiceCondition, validationGroup,
  checkInvisibleEditors, false );
 checkResult.isValid = ASPxClientEdit.AreExternalControlsValidInContainer(containerOrContainerId, validationGroup,
  checkInvisibleEditors, false ) && checkResult.isValid;
 return checkResult.isValid;
};
ASPxClientEdit.AreExternalControlsValidInContainer = function(containerId, validationGroup, validateInvisibleEditors, processDisabledEditors) {
 if(ASPx.Ident.scripts.ASPxClientHtmlEditor)
  return ASPxClientHtmlEditor.AreEditorsValidInContainer(containerId, validationGroup, validateInvisibleEditors, processDisabledEditors);
 return true;
};
ASPxClientEdit.ClearExternalControlsInContainer = function(containerId, validationGroup, validateInvisibleEditors, processDisabledEditors) {
 if(ASPx.Ident.scripts.ASPxClientHtmlEditor)
  return ASPxClientHtmlEditor.ClearEditorsInContainer(containerId, validationGroup, validateInvisibleEditors, processDisabledEditors);
 return true;
};
ASPxClientEdit.ValidateExternalControlsInContainer = function(containerId, validationGroup, validateInvisibleEditors, processDisabledEditors) {
 if(ASPx.Ident.scripts.ASPxClientHtmlEditor)
  return ASPxClientHtmlEditor.ValidateEditorsInContainer(containerId, validationGroup, validateInvisibleEditors, processDisabledEditors);
 return true;
};
ASPxClientEdit.AttachEditorModificationListener = function(handler, predicate) {
 var processAction = function(event) { event.AddHandler(handler); };
 ASPxClientEdit.ProcessEditorModificationListener(handler, processAction, predicate);
};
ASPxClientEdit.DetachEditorModificationListener = function(handler, predicate) {
 var processAction = function(event) { event.RemoveHandler(handler); };
 ASPxClientEdit.ProcessEditorModificationListener(handler, processAction, predicate);
};
ASPxClientEdit.ProcessEditorModificationListener = function(handler, action, predicate) {
 ASPx.GetControlCollection().ForEachControl(function(control) {
  if(control.GetModifyEvent && predicate(control)) {
   if(control.isNative)
    control.EnsureRequiredNativeAttributesExists();
   action(control.GetModifyEvent());
  }
 });
};
var ASPxClientEditKeyEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(htmlEvent) {
  this.constructor.prototype.constructor.call(this);
  this.htmlEvent = htmlEvent;
 }
});
var ASPxClientEditValidationEventArgs = ASPx.CreateClass(ASPxClientEventArgs, {
 constructor: function(value, errorText, isValid) {
  this.constructor.prototype.constructor.call(this);
  this.errorText = errorText;
  this.isValid = isValid;
  this.value = value;
 }
});
ASPx.ProcessEditorsInContainer = function(container, processingProc, choiceCondition, validationGroup, processInvisibleEditors, processDisabledEditors) {
 var allProcessedSuccessfull = true;
 var firstInvalid = null;
 var firstVisibleInvalid = null;
 var invalidEditorToBeFocused = null;
 ASPx.GetControlCollection().ForEachControl(function(control) {
  var canValidate = ASPx.CanValidateControl(control, container, processingProc, choiceCondition, validationGroup, processInvisibleEditors, processDisabledEditors);
  if(!canValidate) return;
  var isSuccess = processingProc(control);
  if(!isSuccess) {
   allProcessedSuccessfull = false;
   if(firstInvalid == null)
    firstInvalid = control;
   var isVisible = control.IsVisible();
   if(isVisible && firstVisibleInvalid == null)
    firstVisibleInvalid = control;
   if(control.setFocusOnError && invalidEditorToBeFocused == null && isVisible)
    invalidEditorToBeFocused = control;
  }
 }, this);
 if(invalidEditorToBeFocused != null)
  invalidEditorToBeFocused.SetFocus();
 return new ASPxValidationResult(allProcessedSuccessfull, firstInvalid, firstVisibleInvalid);
};
ASPx.CanValidateControl = function(control, container, processingProc, choiceCondition, validationGroup, processInvisibleEditors, processDisabledEditors) {
 var needToProcessRatingControl = window.ASPxClientRatingControl && (control instanceof ASPxClientRatingControl) && processingProc === ASPx.ClearProcessingProc;
 var mainElement = control.GetMainElement();
 if(!ASPx.Ident.IsASPxClientEdit(control) && !needToProcessRatingControl)
  return false;
 if(ASPx.Ident.isDialogInvisibleControl(control) || ASPx.Ident.isBatchEditUnusedEditor(control))
  return false;
 if(!processDisabledEditors && !control.GetEnabled())
  return false;
 if(!mainElement || (container && !ASPx.GetIsParent(container, mainElement)))
  return false;
 if(!processInvisibleEditors && !control.IsVisible())
  return false;
 if(choiceCondition && !choiceCondition(control, validationGroup))
  return false;
 return true;
};
var ASPxValidationResult = ASPx.CreateClass(null, {
 constructor: function(isValid, firstInvalid, firstVisibleInvalid) {
  this.isValid = isValid;
  this.firstInvalid = firstInvalid;
  this.firstVisibleInvalid = firstVisibleInvalid;
 }
});
ASPx.ClearChoiceCondition = function(edit, validationGroup) {
 return !ASPx.IsExists(validationGroup) || (edit.validationGroup == validationGroup);
};
function _aspxValidateChoiceCondition(edit, validationGroup) {
 return ASPx.ClearChoiceCondition(edit, validationGroup) && edit.customValidationEnabled;
}
function _aspxEditorsValidChoiceCondition(edit, validationGroup) {
 return _aspxValidateChoiceCondition(edit, validationGroup);
}
function wrapLostFocusHandler(handler) {
 if(ASPx.Browser.Edge) {
  return function(name) {
   var edit = ASPx.GetControlCollection().Get(name);
   if(edit && !ASPx.IsElementVisible(edit.GetMainElement()))
    setTimeout(handler, 0, name);
   else
    handler(name);
  };
 }
 return handler;
}
ASPx.EGotFocus = function(name) {
 var edit = ASPx.GetControlCollection().Get(name);
 if(!edit) return;
 if(!edit.isInitialized){
  var inputElement = edit.GetFocusableInputElement();
  if(inputElement && inputElement === document.activeElement) {
   if(ASPx.Browser.Firefox)
    window.setTimeout(function() { document.activeElement.blur(); }, 0);
   else
    document.activeElement.blur();
  }
  return;
 }
 if(ASPx.Browser.VirtualKeyboardSupported && !edit.ownerListBox)
  ASPx.VirtualKeyboardUI.onCallingVirtualKeyboard(edit, false);
 else
  edit.OnFocus();
};
ASPx.ELostFocusCore = function(name) {
 var edit = ASPx.GetControlCollection().Get(name);
 if(ASPx.Browser.VirtualKeyboardSupported && (!edit || !edit.ownerListBox)) {
  var supressLostFocus = ASPx.VirtualKeyboardUI.isInputNativeBluring();
  if(supressLostFocus)
   return;
  ASPx.VirtualKeyboardUI.resetFocusedEditor();
 }
 if(edit != null)
  edit.OnLostFocus();
};
ASPx.ELostFocus = wrapLostFocusHandler(ASPx.ELostFocusCore);
ASPx.ESGotFocus = function(name) {
 var edit = ASPx.GetControlCollection().Get(name);
 if(!edit) return;
   if(ASPx.Browser.VirtualKeyboardSupported && !edit.ownerListBox) {
  ASPx.VirtualKeyboardUI.onCallingVirtualKeyboard(edit, true);
 } else {
  edit.OnSpecialFocus();
 }
};
ASPx.ESLostFocusCore = function(name) {
 var edit = ASPx.GetControlCollection().Get(name);
 if(ASPx.Browser.VirtualKeyboardSupported && (!edit || !edit.ownerListBox)) {
  var supressLostFocus = ASPx.VirtualKeyboardUI.isInputNativeBluring();
  if(supressLostFocus)
   return;
  ASPx.VirtualKeyboardUI.resetFocusedEditor();
 }
 if(!edit) return;
 if(edit.UseDelayedSpecialFocus())
  edit.specialFocusTimer = window.setTimeout(function() { edit.OnSpecialLostFocus(); }, 30);
 else
  edit.OnSpecialLostFocus();
};
ASPx.ESLostFocus = wrapLostFocusHandler(ASPx.ESLostFocusCore);
ASPx.EValueChanged = function(name) {
 var edit = ASPx.GetControlCollection().Get(name);
 if(edit != null)
  edit.OnValueChanged();
};
ASPx.VirtualKeyboardUI = (function() {
 var focusedEditor = null;
 var inputNativeFocusLocked = false;
 function elementBelongsToEditor(element) {
  if(!element) return false;
  var isBelongsToEditor = false;
  ASPx.GetControlCollection().ForEachControl(function(control) {
   if(ASPx.Ident.IsASPxClientEdit(control) && control.IsEditorElement(element)) {
    isBelongsToEditor = true;
    return true;
   }
  }, this);
  return isBelongsToEditor;
 }
 function elementBelongsToFocusedEditor(element) {
  return focusedEditor && focusedEditor.IsEditorElement(element);
 }
 return {
  onTouchStart: function (evt) {
   if (!ASPx.Browser.VirtualKeyboardSupported || this.isGooglePlaceAutocompleteElementTap(evt)) return;
   inputNativeFocusLocked = false;
   if(focusedEditor)
    focusedEditor.onVirtualKeyboardUITouchStart(evt);
   if(ASPx.TouchUIHelper.pointerEnabled) {
    if(evt.pointerType !== ASPx.TouchUIHelper.pointerType.Touch ||
       ASPx.Browser.AndroidMobilePlatform)
     return;
    this.processFocusEditorControl(evt);
   } else
    ASPx.TouchUIHelper.handleFastTapIfRequired(evt,  function(){ this.processFocusEditorControl(evt); }.aspxBind(this), false);
  },
  processFocusEditorControl: function(evt) {
   var evtSource = ASPx.Evt.GetEventSource(evt);
   var timeEditHasAppliedFocus = focusedEditor && (ASPx.Ident.IsASPxClientTimeEdit && ASPx.Ident.IsASPxClientTimeEdit(focusedEditor));
   var focusedTimeEditBelongsToDateEdit = timeEditHasAppliedFocus && focusedEditor.OwnerDateEdit && focusedEditor.OwnerDateEdit.GetShowTimeSection();
   if(focusedTimeEditBelongsToDateEdit) {
    focusedEditor.OwnerDateEdit.ForceRefocusTimeSectionTimeEdit(evtSource);
    return;
   }
   var elementWithNativeFocus = ASPx.GetActiveElement();
   var someEditorInputIsFocused = elementBelongsToEditor(elementWithNativeFocus);
   var touchKeyboardIsVisible = someEditorInputIsFocused;
   var tapOutsideEditorAndInputs = !elementBelongsToEditor(evtSource) && !ASPx.Ident.IsFocusableElementRegardlessTabIndex(evtSource);
   var blurToHideTouchKeyboard = touchKeyboardIsVisible && tapOutsideEditorAndInputs;
   if(blurToHideTouchKeyboard) {
    elementWithNativeFocus.blur();
    return;
   }
   var tapOutsideFocusedEditor = focusedEditor && !elementBelongsToFocusedEditor(evtSource);
   if(tapOutsideFocusedEditor) {
    var focusedEditorWithBluredInput = !elementBelongsToFocusedEditor(elementWithNativeFocus);
    if(focusedEditorWithBluredInput)
     this.lostAppliedFocusOfEditor();
   }
  },
  smartFocusEditor: function(edit) {
   if(!edit.focused) {
    this.setInputNativeFocusLocked(true);
    this.setFocusEditorCore(edit);
   } else {
    edit.ForceRefocusEditor();
   }
  },
  setFocusEditorCore: function(edit) {
   if(ASPx.Browser.MacOSMobilePlatform) {
    var timeoutDuration = ASPx.Browser.Chrome ? 250 : 30;
    window.setTimeout(function(){ edit.SetFocus(); }, timeoutDuration);
   } else {
    edit.SetFocus();
   }
  },
  onCallingVirtualKeyboard: function(edit, isSpecial) {
   this.setAppliedFocusOfEditor(edit, isSpecial);
   if(edit.specialKeyboardHandlingUsed == isSpecial && inputNativeFocusLocked)
    edit.BlurInputElement();
  },
  isInputNativeBluring: function() {
   return focusedEditor && inputNativeFocusLocked;
  },
  setInputNativeFocusLocked: function(locked) {
   inputNativeFocusLocked = locked;
  },
  getInputNativeFocusLocked: function() {
   return inputNativeFocusLocked;
  },
  setAppliedFocusOfEditor: function(edit, isSpecial) {
   if(focusedEditor === edit) {
    if(edit.specialKeyboardHandlingUsed == isSpecial) {
     focusedEditor.UnlockFocusEvents();
     if(focusedEditor.EnsureClearButtonVisibility)
      focusedEditor.EnsureClearButtonVisibility();
    }
    return;
   }
   if(edit.specialKeyboardHandlingUsed == isSpecial) {
    this.lostAppliedFocusOfEditor();
    focusedEditor = edit;
    ASPx.SetFocusedEditor(edit);
   }
   if(isSpecial)
    edit.OnSpecialFocus();
   else
    edit.OnFocus();
  },
  lostAppliedFocusOfEditor: function() {
   if(!focusedEditor) return;
   var curEditorName = focusedEditor.name;
   var skbdHandlingUsed = focusedEditor.specialKeyboardHandlingUsed;
   var focusedEditorInputElementExists = focusedEditor.GetInputElement();
   focusedEditor = null;
   if(!focusedEditorInputElementExists)
    return;
   ASPx.ELostFocusCore(curEditorName);
   if(skbdHandlingUsed)
    ASPx.ESLostFocusCore(curEditorName);
  },
  getFocusedEditor: function() {
   return focusedEditor;
  },
  resetFocusedEditor: function() {
   focusedEditor = null;
  },
  focusableInputElementIsActive: function(edit) {
   var inputElement = edit.GetFocusableInputElement();
   return !!inputElement ? ASPx.GetActiveElement() === inputElement : false;
  },
  isGooglePlaceAutocompleteElementTap: function(evt) {
   var googlePlaceAutocompleteContainer = ASPx.GetNodeByClassName(document.body, "pac-container", 0);
   if(!googlePlaceAutocompleteContainer)
    return false;
   return ASPx.GetParentByClassName(ASPx.Evt.GetEventSource(evt), "pac-container") != null;
  }
 };
})();
if(ASPx.Browser.VirtualKeyboardSupported) {
 var touchEventName = ASPx.TouchUIHelper.pointerEnabled ? ASPx.TouchUIHelper.pointerDownEventName : 'touchstart';
 ASPx.Evt.AttachEventToDocument(touchEventName, function(evt){ ASPx.VirtualKeyboardUI.onTouchStart(evt); });
}
ASPx.Evt.AttachEventToDocument("mousedown", function(evt) {
 var editor = ASPx.GetFocusedEditor();
 if(!editor)
  return;
 var evtSource = ASPx.Evt.GetEventSource(evt);
 if(editor.IsClearButtonElement(evtSource))
  return;
 if(editor.OwnerDateEdit && editor.OwnerDateEdit.GetShowTimeSection()) {
  editor.OwnerDateEdit.ForceRefocusTimeSectionTimeEdit(evtSource);
  return;
 }
 if(editor.ownerListBox && editor.ownerListBox.IsEditorElement(evtSource) && !editor.IsEditorElement(evtSource)) {
  editor.ownerListBox.ForceRefocusEditor(evt);
  ASPx.SetFocusedEditor(editor.ownerListBox);
  return;
 }
 if(editor.IsEditorElement(evtSource) && !editor.IsElementBelongToInputElement(evtSource))
  editor.ForceRefocusEditor(evt);
});
ASPx.Evt.AttachEventToDocument(ASPx.Evt.GetMouseWheelEventName(), function(evt) {
 var editor = ASPx.GetFocusedEditor();
 if(editor != null && ASPx.IsExistsElement(editor.GetMainElement()) && editor.focused && editor.receiveGlobalMouseWheel)
  editor.OnMouseWheel(evt);
});
ASPx.KBSIKeyDown = function(name, evt){
 var control = ASPx.GetControlCollection().Get(name);
 if(control != null){
  var isProcessed = control.OnSpecialKeyDown(evt);
  if(isProcessed)
   return ASPx.Evt.PreventEventAndBubble(evt);
 }
};
ASPx.KBSIKeyPress = function(name, evt){
 var control = ASPx.GetControlCollection().Get(name);
 if(control != null){
  var isProcessed = control.OnSpecialKeyPress(evt);
  if(isProcessed)
   return ASPx.Evt.PreventEventAndBubble(evt);
 }
};
ASPx.KBSIKeyUp = function(name, evt){
 var control = ASPx.GetControlCollection().Get(name);
 if(control != null){
  var isProcessed = control.OnSpecialKeyUp(evt);
  if(isProcessed)
   return ASPx.Evt.PreventEventAndBubble(evt);
 }
};
ASPx.ClearProcessingProc = function(edit) {
 return edit.Clear();
};
ASPx.ValidateProcessingProc = function(edit) {
 edit.OnValidation(ValidationType.MassValidation);
 return edit.GetIsValid();
};
ASPx.EditorsValidProcessingProc = function(edit) {
 return edit.GetIsValid();
};
var CheckEditElementHelper = ASPx.CreateClass(ASPx.CheckableElementHelper, {
 AttachToMainElement: function(internalCheckBox) {
  ASPx.CheckableElementHelper.prototype.AttachToMainElement.call(this, internalCheckBox);
  this.AttachToLabelElement(this.GetLabelElement(internalCheckBox.container), internalCheckBox);
 },
 AttachToLabelElement: function(labelElement, internalCheckBox) {
  var _this = this;
  if(labelElement) {
   ASPx.Evt.AttachEventToElement(labelElement, "click",
    function (evt) {
     _this.InvokeClick(internalCheckBox, evt);
    }
   );
   ASPx.Evt.AttachEventToElement(labelElement, "mousedown",
    function (evt) {
     internalCheckBox.Refocus();
    }
   );
  }
 },
 GetLabelElement: function(container) {
  var labelElement = ASPx.GetNodeByTagName(container, "LABEL", 0);
  if(!labelElement) {
   var labelCell = ASPx.GetNodeByClassName(container, "dxichTextCellSys", 0);
   labelElement = ASPx.GetNodeByTagName(labelCell, "SPAN", 0);
  }
  return labelElement;
 }
});
CheckEditElementHelper.Instance = new CheckEditElementHelper();
var CalendarSharedParameters = ASPx.CreateClass(null, {
 updateCalendarCallbackCommand: "UPDATE",
 constructor: function() {
  this.minDate = null;
  this.maxDate = null;
  this.disabledDates = [];
  this.calendarCustomDraw = false;
  this.hasCustomDisabledDatesViaCallback = false;
  this.dateRangeMode = false;
  this.currentDateEdit = null;
  this.DaysSelectingOnMouseOver = new ASPxClientEvent();
  this.VisibleDaysMouseOut = new ASPxClientEvent();
  this.CalendarSelectionChangedInternal = new ASPxClientEvent();
 },
 Assign: function(source) {
  this.minDate = source.minDate ? source.minDate : null;
  this.maxDate = source.maxDate ? source.maxDate : null;
  this.calendarCustomDraw = source.calendarCustomDraw ? source.calendarCustomDraw : false;
  this.hasCustomDisabledDatesViaCallback = source.hasCustomDisabledDatesViaCallback ? source.hasCustomDisabledDatesViaCallback : false;
  this.disabledDates = source.disabledDates ? source.disabledDates : [];
  this.currentDateEdit = source.currentDateEdit ? source.currentDateEdit : null;
 },
 GetUpdateCallbackParameters: function() {
  var callbackArgs = this.GetCallbackArgs();
  callbackArgs = this.FormatCallbackArg(this.updateCalendarCallbackCommand, callbackArgs);
  return callbackArgs;
 },
 GetCallbackArgs: function() {
  var args = {};
  if(this.minDate)
   args.clientMinDate = ASPx.DateUtils.GetInvariantDateString(this.minDate);
  if(this.maxDate)
   args.clientMaxDate = ASPx.DateUtils.GetInvariantDateString(this.maxDate);
  if(args.clientMinDate || args.clientMaxDate) {
   var jsonArgs = JSON.stringify(args);
   return ASPx.Str.EncodeHtml(jsonArgs);
  }
  return null;
 },
 FormatCallbackArg: function(prefix, arg) {
  if(!arg) return prefix;
  return [prefix, '|', arg.length, ';', arg, ';'].join('');
 }
});
ASPx.CalendarSharedParameters = CalendarSharedParameters;
ASPx.ValidationType = ValidationType;
ASPx.ErrorFrameDisplay = ErrorFrameDisplay;
ASPx.EditElementSuffix = EditElementSuffix;
ASPx.ValidationPattern = ValidationPattern;
ASPx.RequiredFieldValidationPattern = RequiredFieldValidationPattern;
ASPx.RegularExpressionValidationPattern = RegularExpressionValidationPattern;
ASPx.CheckEditElementHelper = CheckEditElementHelper;
ASPx.IsEditorFocusable = _aspxIsEditorFocusable;
window.ASPxClientEditBase = ASPxClientEditBase;
window.ASPxClientEdit = ASPxClientEdit;
window.ASPxClientEditKeyEventArgs = ASPxClientEditKeyEventArgs;
window.ASPxClientEditValidationEventArgs = ASPxClientEditValidationEventArgs;
})();

(function() {
ASPx.TEInputSuffix = "_I";
ASPx.PasteCheckInterval = 50;
ASPx.CheckUserInputInterval = 10;
ASPx.TEHelpTextElementSuffix = "_HTE";
ASPx.TempHiddenInputSuffix = "_THI";
var passwordInputClonedSuffix = "_CLND";
var CHROME_AUTOFILL_SELECTOR = ":-webkit-autofill";
var BrowserHelper = {
 SAFARI_SYSTEM_CLASS_NAME: "dxeSafariSys",
 MOBILE_SAFARI_SYSTEM_CLASS_NAME: "dxeIPadSys",
 GetBrowserSpecificSystemClassName: function() {
  if(ASPx.Browser.Safari)
   return ASPx.Browser.MacOSMobilePlatform ? this.MOBILE_SAFARI_SYSTEM_CLASS_NAME : this.SAFARI_SYSTEM_CLASS_NAME;
  return "";
 }
};
var focusedNullTextClassName = "dxeFNTextSys";
var NullTextDisplayMode = {
 Unfocused: "Unfocused",
 UnfocusedAndFocused: "UnfocusedAndFocused"
};
ASPx.NullTextDisplayMode = NullTextDisplayMode;
var ASPxClientTextEdit = ASPx.CreateClass(ASPxClientEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientTextEdit = true;
  this.nullText = "";
  this.nullTextDisplayMode = NullTextDisplayMode.Unfocused;
  this.nullTextOnFocusCssText = "";
  this.focusedNullTextTimerID = -1;
  this.escCount = 0;
  this.raiseValueChangedOnEnter = true;
  this.autoResizeWithContainer = false;
  this.lastChangedValue = null;
  this.autoCompleteAttribute = null;
  this.isTextSelectionOnClickEnabled = false;
  this.trySelectInputTextOnClick = true;
  this.passwordNullTextIntervalID = -1;
  this.nullTextInputElement = null;
  this.helpText = "";
  this.helpTextObj = null;
  this.helpTextStyle = [];
  this.externalTableStyle = [];
  this.helpTextPosition = ASPx.Position.Right;
  this.helpTextMargins = null;
  this.helpTextHAlign = ASPxClientTextEditHelpTextHAlign.Left;
  this.helpTextVAlign = ASPxClientTextEditHelpTextVAlign.Top;
  this.enableHelpTextPopupAnimation = true;
  this.helpTextDisplayMode = ASPxClientTextEditHelpTextDisplayMode.Inline;
  this.maskInfo = null;
  this.maskValueBeforeUserInput = "";
  this.maskPasteTimerID = -1;
  this.maskPasteLock = false;
  this.maskPasteCounter = 0;
  this.maskTextBeforePaste = "";
  this.maskHintHtml = "";
  this.maskHintTimerID = -1;
  this.errorCellPosition = ASPx.Position.Right;
  this.inlineInitializeInputValue = null;
  this.initializeInputValue = null;
  this.displayFormat = null;
  this.TextChanged = new ASPxClientEvent();
  this.UserInput = new ASPxClientEvent();
  this.userInputEventTimerID = -1;
 },
 AddDefaultReadOnlyStateControllerItem: function(cssClass, mainElementId) {
  ASPx.AddReadOnlyItems(mainElementId, [[[cssClass], [''], ['', 'I']]]);
 },
 AddDefaultDisabledStateControllerItem: function(cssClass, mainElementId) {
  ASPx.AddDisabledItems(mainElementId, [[[cssClass], [''], ['', 'I']]]);
 },
 SetData: function(data){
  ASPxClientEdit.prototype.SetData.call(this, data);
  if(data.maskInfo) {
   var maskProperties = data.maskInfo.properties;
   var useInvariantCultureDecimalSymbol = maskProperties && maskProperties.useInvariantCultureDecimalSymbol || false;
   this.maskInfo = ASPx.MaskInfo.Create(data.maskInfo.maskText, data.maskInfo.dateTimeOnly, data.maskInfo.allowEscapingInEnums, useInvariantCultureDecimalSymbol);
   this.SetProperties(data.maskInfo.properties, this.maskInfo);
  }
 },
 InlineInitialize: function() {
  this.SaveInputValue(true);
  ASPxClientEdit.prototype.InlineInitialize.call(this);
  if(this.maskInfo != null)
   this.InitMask();
  this.ApplyBrowserSpecificClassName();
  this.helpTextInitialize();
  if(ASPx.Browser.IE && ASPx.Browser.Version >= 10 && this.nullText != "")
   this.addIEXButtonEventHandler();
 },
 Initialize: function(){
  this.SaveInputValue(false);
  this.SaveChangedValue();
  ASPxClientEdit.prototype.Initialize.call(this);
  this.CorrectInputMaxLength();
  this.SubscribeToIeDropEvent();
  if(ASPx.Browser.WebKitFamily)
   this.CorrectMainElementWhiteSpaceStyle();
  this.InitializeTextDecoration();
  this.InitializeAutocompleteAttribute();
  if(this.IsValueRestoredByBrowser())
   this.SynchronizeRestoredValue();
 },
 InitializeEvents: function() {
  ASPxClientEdit.prototype.InitializeEvents.call(this);
  ASPx.Evt.AttachEventToElement(this.GetInputElement(), "keydown", this.OnKeyDown.aspxBind(this));
  ASPx.Evt.AttachEventToElement(this.GetInputElement(), "keyup", this.OnKeyUp.aspxBind(this));
  ASPx.Evt.AttachEventToElement(this.GetInputElement(), "keypress", this.OnKeyPress.aspxBind(this));
  if(this.isTextSelectionOnClickEnabled) {
   ASPx.Evt.AttachEventToElement(this.GetInputElement(), ASPx.TouchUIHelper.touchMouseDownEventName, this.OnMouseDown.aspxBind(this));
   ASPx.Evt.AttachEventToElement(this.GetInputElement(), "click", this.OnClick.aspxBind(this));
  }
  this.Unload.AddHandler(this.OnUnload.aspxBind(this));
 },
 InitializeTextDecoration: function() {
  var input = this.GetInputElement();
  if(input.type === "password" && !this.IsInputPasswordFilledAutomaticallyByChrome())
   this.ToggleTextDecoration();
 },
 IsInputPasswordFilledAutomaticallyByChrome: function() {
  if(!ASPx.Browser.Chrome)
   return false;
  var input = this.GetInputElement();
  return ASPx.ElementMatchesSelector(input, CHROME_AUTOFILL_SELECTOR);
 },
 OnMouseDown: function() {
  this.trySelectInputTextOnClick = ASPx.GetActiveElement() !== this.GetInputElement() && !this.IsFocusEventsLocked();
 },
 OnClick: function() {
  if(this.trySelectInputTextOnClick) {
   var input = this.GetInputElement();
   setTimeout(function() {
    var inputSelection = ASPx.Selection.GetInfo(input);
    if (inputSelection.startPos === inputSelection.endPos)
     ASPx.Selection.Set(input);
   }, 0);
  }
 },
 InitializeAutocompleteAttribute: function() {
  var input = this.GetInputElement();
  if(this.IsVCardAttributeRequired())
   ASPx.Attr.SetAttribute(input, this.autoCompleteAttribute.name, this.autoCompleteAttribute.value);
  else if(this.IsAutocompleteOffRequiredOnInitialize())
   ASPx.Attr.SetAttribute(input, "autocomplete", "off");
 },
 SaveInputValue: function(isInlineInitialize) {
  var input = this.GetInputElement();
  if(!input)
   return;
  var inputValue = input.value;
  if(inputValue === null)
   inputValue = "";
  if(isInlineInitialize)
   this.inlineInitializeInputValue = inputValue;
  else
   this.initializeInputValue = inputValue;
 },
 IsValueRestoredByBrowser: function() {
  if(this.displayFormat || this.isNative || this.inlineInitializeInputValue === null || this.initializeInputValue === null)
   return false;
  if(ASPx.Browser.Chrome)
   return this.IsValueRestoredByChrome();
  else if(ASPx.Browser.Firefox)
   return this.IsValueRestoredByFirefox();
  else if(ASPx.Browser.IE)
   return this.IsValueRestoredByIE();
  else
   return this.IsValueRestoredByBrowserCore();
 },
 IsValueRestoredByBrowserCore: function() {
  return this.IsValueChangedBeforeInitialize() || this.IsClientValueNotExists() || this.IsValueChangedOnMaskInitialize();
 },
 IsValueRestoredByChrome: function() {
  return this.IsValueRestoredByBrowserCore();
 },
 IsValueRestoredByFirefox: function() {
  return this.IsValueRestoredByBrowserCore();
 },
 IsValueRestoredByIE: function() {
  return this.IsValueRestoredByBrowserCore();
 },
 IsValueChangedBeforeInitialize: function() {
  return this.inlineInitializeInputValue !== this.initializeInputValue;
 },
 IsClientValueNotExists: function() {
  return this.inlineInitializeInputValue !== "" &&
      this.inlineInitializeInputValue !== this.nullText &&
      this.inlineInitializeInputValue !== this.GetValue() &&
      this.inlineInitializeInputValue !== this.GetText();
 },
 IsValueChangedOnMaskInitialize: function() {
  return this.maskInfo && this.inlineInitializeInputValue !== this.GetInputElement().value;
 },
 SynchronizeRestoredValue: function() {
  this.SetText(this.initializeInputValue);
 },
 AdjustControl: function() {
  ASPxClientEdit.prototype.AdjustControl.call(this);
  if(ASPx.Browser.IE && ASPx.Browser.Version > 8 && !this.isNative)
   this.correctInputElementHeight();
  this.ensureAdjustFocusedNullTextElement();
 },
 correctInputElementHeight: function() {
  var mainElement = this.GetMainElement();
  if(mainElement) {
   var mainElementHeight = mainElement.style.height;
   var mainElementHeightSpecified = mainElementHeight && mainElementHeight.indexOf('px') !== -1;
   if(mainElementHeightSpecified) {
    var inputElement = this.GetInputElement();
    var inputElementHeight = this.getInputElementHeight();
    inputElement.style.height = inputElementHeight + "px";
    if(!ASPx.Ident.IsASPxClientMemo(this))
     inputElement.style.lineHeight = inputElementHeight + "px";
   }
  }
 },
 getInputElementHeight: function() {
  var mainElement = this.GetMainElement(),
   inputElement = this.GetInputElement();
  var inputElementHeight = ASPx.PxToInt(mainElement.style.height) - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(mainElement);
  var inputElementContainer = inputElement.parentNode,
   inputContainerStyle = ASPx.GetCurrentStyle(inputElementContainer);
  inputElementHeight -= ASPx.GetTopBottomBordersAndPaddingsSummaryValue(inputElementContainer, inputContainerStyle)
   + ASPx.GetTopBottomMargins(inputElementContainer, inputContainerStyle);
  var mainElementCellspacing = ASPx.GetCellSpacing(mainElement);
  if(mainElementCellspacing)
   inputElementHeight -= mainElementCellspacing * 2;
  var inputStyle = ASPx.GetCurrentStyle(inputElement);
  inputElementHeight -= ASPx.GetTopBottomBordersAndPaddingsSummaryValue(inputElement, inputStyle)
   + ASPx.GetTopBottomMargins(inputElement, inputStyle);
  return inputElementHeight;
 },
 getInputCell: function() {
  var inputElement = this.GetInputElement();
  if(inputElement)
   return inputElement.parentNode;
 },
 addIEXButtonEventHandler: function() {
  var inputElement = this.GetInputElement();
  if(ASPx.IsExists(inputElement)) {
   this.isDeleteOrBackspaceKeyClick = false;
   ASPx.Evt.AttachEventToElement(inputElement, "input", function (evt) {
    if(this.isDeleteOrBackspaceKeyClick) {
     this.isDeleteOrBackspaceKeyClick = false;
     return;
    }
    if(inputElement.value === '') {
     this.SyncRawValue();
    }
   }.aspxBind(this));
   ASPx.Evt.AttachEventToElement(inputElement, "keydown", function (evt) {
    this.isDeleteOrBackspaceKeyClick = (evt.keyCode == ASPx.Key.Delete || evt.keyCode == ASPx.Key.Backspace);
   }.aspxBind(this));
  }
 },
 ensureOutOfRangeWarningManager: function (minValue, maxValue, defaultMinValue, defaultMaxValue, valueFormatter) {
  if (!this.outOfRangeWarningManager)
   this.outOfRangeWarningManager = new ASPxOutOfRangeWarningManager(this, minValue, maxValue, defaultMinValue, defaultMaxValue,
    this.showOutOfRangeWarningElementAtBottom() ? ASPx.Position.Bottom : ASPx.Position.Right, valueFormatter);
 },
 showOutOfRangeWarningElementAtBottom: function() {
  return this.hasRightPopupHelpText();
 },
 GetOutOfRangeWarningElementPrevSibling: function() {
  return this.GetMainElement();
 },
 helpTextInitialize: function () {
  if(this.helpText) {
   this.helpTextObj = new ASPxClientTextEditHelpText(this, this.helpTextStyle, this.helpText, this.helpTextPosition,
    this.helpTextHAlign, this.helpTextVAlign, this.helpTextMargins, this.enableHelpTextPopupAnimation, this.helpTextDisplayMode);
  }
 },
 hasPopupHelpText: function() {
  return this.helpText && this.helpTextDisplayMode === ASPxClientTextEditHelpTextDisplayMode.Popup;
 },
 hasRightPopupHelpText: function() {
  return this.hasPopupHelpText() && this.helpTextPosition === ASPx.Position.Right;
 },
 showHelpText: function () {
  if(this.helpTextObj)
   this.helpTextObj.show();
 },
 hideHelpText: function () {
  if(this.helpTextObj)
   this.helpTextObj.hide();
 },
 ApplyBrowserSpecificClassName: function() {
  var mainElement = this.GetMainElement();
  if(ASPx.IsExistsElement(mainElement)) {
   var className = BrowserHelper.GetBrowserSpecificSystemClassName();
   if(className)
    mainElement.className += " " + className;
  }
 },
  CorrectMainElementWhiteSpaceStyle: function() {
  var inputElement = this.GetInputElement();
  if(inputElement && inputElement.parentNode) {
   if(this.IsElementHasWhiteSpaceStyle(inputElement.parentNode))
    inputElement.parentNode.style.whiteSpace = "normal";
  }
 },
 IsElementHasWhiteSpaceStyle: function(element) {
  var currentStyle = ASPx.GetCurrentStyle(element);
  return currentStyle.whiteSpace == "nowrap" || currentStyle.whiteSpace == "pre";
 },
 FindInputElement: function(){
  return this.isNative ? this.GetMainElement() : ASPx.GetElementById(this.name + ASPx.TEInputSuffix);
 },
 DecodeRawInputValue: function(value) {
  return value;
 },
 GetRawValue: function(value){
  return ASPx.IsExists(this.stateObject) ? this.stateObject.rawValue : null;
 },
 SetRawValue: function(value){
  if(ASPx.IsExists(value))
   value = value.toString();
  this.UpdateStateObjectWithObject({ rawValue: value });
 },
 SyncRawValue: function() {
  if(this.maskInfo != null)
   this.SetRawValue(this.maskInfo.GetValue(true));
  else
   this.SetRawValue(this.GetInputElement().value);
 },
 HasTextDecorators: function() {
  return this.nullText != "" || this.displayFormat != null;
 },
 CanApplyTextDecorators: function(){
  return !this.focused;
 },
 CreateStyleDecoration: function () {
  return new ASPx.TextEditorStyleDecoration(this);
 },
 CanApplyNullTextDecoration: function() {
  var value = this.GetValue();
  return this.IsNull(value);
 },
 GetDecoratedText: function(value) {
  var result = value;
  if(this.IsNull(value) && this.nullText != "" && this.CanApplyNullTextDecoration())
   result = this.nullText;
  else if(this.displayFormat != null)
   result = this.GetDisplayFormatText(value);
  else if(this.maskInfo != null)
   result = this.maskInfo.GetText();
  else if(value == null)
   result = "";
  return result;
 },
 GetDisplayFormatText: function(value) {
  return ASPx.Formatter.Format(this.displayFormat, value);
 },
 ToggleTextDecoration: function() {
  if(this.HasTextDecorators()) {
   if(this.focused) {
    var input = this.GetInputElement();
    var oldValue = input.value;
    var sel = ASPx.Selection.GetExtInfo(input);
    this.ToggleTextDecorationCore();
    this.ensureActivateFocusedNullTextMechanism();
    if(oldValue != input.value || !ASPx.Selection.AreEqual(sel, ASPx.Selection.GetExtInfo(input))) {
     if(sel.startPos == 0 && sel.endPos == oldValue.length)
      sel.endPos = input.value.length;
     else
      sel.endPos = sel.startPos;
     if(!this.accessibilityCompliant || ASPx.GetActiveElement() == input)
      this.SetSelectionOnToggleTextDecoration(input, sel);
    }
   } else {
    this.ToggleTextDecorationCore();
    this.ensureDeactivateFocusedNullTextMechanism();
   }
  }
 },
 SetSelectionOnToggleTextDecoration: function(input, sel) {
  ASPx.Selection.Set(input, sel.startPos, sel.endPos);
 },
 ToggleTextDecorationCore: function() {
  if(this.maskInfo != null) {
   this.ApplyMaskInfo(false);
  } else {
   var input = this.GetInputElement();
   var rawValue = this.GetRawValue();
   var value = this.CanApplyTextDecorators() ? this.GetDecoratedText(rawValue) : rawValue;
   if(input.value != value) {
    if(input.type == "password")
     this.TogglePasswordInputTextDecoration(value);
    else
     input.value = value;
   }
  }
 },
 GetPasswordNullTextInputElement: function() {
  if(!this.isPasswordNullTextInputElementExists())
   this.nullTextInputElement = this.createPasswordNullTextInputElement();
  return this.nullTextInputElement;
 },
 createPasswordNullTextInputElement: function() {
  var inputElement = this.GetInputElement(),
   nullTextInputElement = document.createElement("INPUT");
  nullTextInputElement.className = inputElement.className;
  nullTextInputElement.style.cssText = inputElement.style.cssText;
  nullTextInputElement.id = inputElement.id + passwordInputClonedSuffix;
  nullTextInputElement.type = "text";
  if(ASPx.IsExists(inputElement.tabIndex))
   nullTextInputElement.tabIndex = inputElement.tabIndex;
  nullTextInputElement.disabled = inputElement.disabled;
  var onFocusEventHandler = function() {
   var inputElement = this.GetInputElement(),
    nullTextInputElement = this.GetPasswordNullTextInputElement();
   if(inputElement) {
    this.LockFocusEvents();
    ASPx.SetElementDisplay(inputElement, true);
    inputElement.focus();
    ASPx.SetElementDisplay(nullTextInputElement, false);
    this.ensureAdjustFocusedNullTextElement();
    this.ReplaceAssociatedIdInLabels(nullTextInputElement.id, inputElement.id);
   }
  }.aspxBind(this);
  ASPx.Evt.AttachEventToElement(nullTextInputElement, "focus", onFocusEventHandler);
  return nullTextInputElement;
 },
 isPasswordNullTextInputElementExists: function() {
  return ASPx.IsExistsElement(this.nullTextInputElement);
 },
 TogglePasswordNullTextTimeoutChecker: function() {
  if(this.passwordNullTextIntervalID < 0) {
   var timeoutChecker = function() {
    var inputElement = this.GetInputElement();
    if(ASPx.GetControlCollection().GetByName(this.name) !== this || inputElement == null) {
     window.clearTimeout(this.passwordNullTextIntervalID);
     this.passwordNullTextIntervalID = -1;
     return;
    } else {
     if(!this.focused) {
      var passwordNullTextInputElement = this.GetPasswordNullTextInputElement();
      if(passwordNullTextInputElement.value != this.nullText && inputElement.value == "") {
       passwordNullTextInputElement.value = this.nullText;
       this.SetValue(null);
      }
      if(inputElement.value != "") {
       if(inputElement.style.display == "none") {
        this.SetValue(inputElement.value);
        this.UnhidePasswordInput();
       }
      } else {
       if(inputElement.style.display != "none") {
        this.SetValue(null);
        this.HidePasswordInput();
       }
      }
     }
    }
   }.aspxBind(this);
   timeoutChecker();
   this.passwordNullTextIntervalID = window.setInterval(timeoutChecker, 100);
  }
 },
 TogglePasswordInputTextDecoration: function(value) {
  var inputElement = this.GetInputElement();
  var nullTextInputElement = this.GetPasswordNullTextInputElement();
  nullTextInputElement.value = value;
  var parentNode = inputElement.parentNode;
  if(ASPx.Data.ArrayIndexOf(parentNode.childNodes, nullTextInputElement) < 0) {
   ASPx.Attr.ChangeStyleAttribute(nullTextInputElement, "display", "none");
   parentNode.appendChild(nullTextInputElement);
  }
  this.HidePasswordInput();
  this.TogglePasswordNullTextTimeoutChecker();
 },
 HidePasswordInput: function() {
  ASPx.Attr.ChangeStyleAttribute(this.GetInputElement(), "display", "none");
  ASPx.Attr.ChangeStyleAttribute(this.GetPasswordNullTextInputElement(), "display", "");
  this.ReplaceAssociatedIdInLabels(this.GetInputElement().id, this.GetPasswordNullTextInputElement().id);
 },
 UnhidePasswordInput: function() {
  ASPx.Attr.ChangeStyleAttribute(this.GetInputElement(), "display", "");
  ASPx.Attr.ChangeStyleAttribute(this.GetPasswordNullTextInputElement(), "display", "none");
  this.ReplaceAssociatedIdInLabels(this.GetPasswordNullTextInputElement().id, this.GetInputElement().id);
 },
 ReplaceAssociatedIdInLabels: function(oldId, newId) {
  var labels = document.getElementsByTagName("LABEL");
  for(var i = 0; i < labels.length; i++) {
   if(labels[i].attributes["for"] && labels[i].attributes["for"].value == oldId)
    labels[i].attributes["for"].value = newId;
  }
 },
 GetFormattedText: function() {
  var value = this.GetValue();
  if(this.IsNull(value) && this.nullText != "")
   return this.GetText();
  return this.GetDecoratedText(value);
 },
 IsNull: function(value) {
  return value == null || value === "";
 },
 PopulateStyleDecorationPostfixes: function() {
  ASPxClientEdit.prototype.PopulateStyleDecorationPostfixes.call(this);
  this.styleDecoration.AddPostfix(ASPx.TEInputSuffix);
 },
 GetValue: function() {
  var value = null;
  if(this.maskInfo != null)
   value = this.maskInfo.GetValue();
  else if(this.HasTextDecorators())
   value = this.GetRawValue();
  else {
   var input = this.GetInputElement();
   value = input ? input.value : null;
  }
  return (value == "" && this.convertEmptyStringToNull) ? null : value;
 },
 SetValue: function(value) {
  if(value == null || value === undefined)
   value = "";
  if(this.maskInfo != null) {
   this.maskInfo.SetValue(value.toString());
   this.ApplyMaskInfo(false);
   this.SavePrevMaskValue();
  }
  else if(this.HasTextDecorators()) {
   this.SetRawValue(value);
   this.GetInputElement().value = this.CanApplyTextDecorators() && this.GetInputElement().type != "password" ? this.GetDecoratedText(value) : value;
  }
  else
   this.GetInputElement().value = value;
  this.UpdateStyleDecorations();
  this.SaveChangedValue();
 },
 SetVisible: function(visible) {
  ASPxClientEdit.prototype.SetVisible.call(this, visible);
  if(this.helpTextDisplayMode === ASPxClientTextEditHelpTextDisplayMode.Inline) {
   if(visible)
    this.showHelpText();
   else
    this.hideHelpText();
  }
 },
 UnstretchInputElement: function(){
  var inputElement = this.GetInputElement();
  var mainElement = this.GetMainElement();
  var mainElementCurStyle = ASPx.GetCurrentStyle(mainElement);
  if(ASPx.IsExistsElement(mainElement) && ASPx.IsExistsElement(inputElement) && ASPx.IsExists(mainElementCurStyle) &&
   inputElement.style.width == "100%" &&
   (mainElementCurStyle.width == "" || mainElementCurStyle.width == "auto"))
   inputElement.style.width = "";
 },
 RestoreActiveElement: function(activeElement) {
  if(activeElement && activeElement.setActive && activeElement.tagName != "IFRAME")
   activeElement.setActive();
 },
 RaiseValueChangedEvent: function() {
  var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
  processOnServer = this.RaiseTextChanged(processOnServer);
  return processOnServer;
 },
 InitMask: function() {
  var rawValue = this.GetRawValue();
  this.SetValue(rawValue.length ? this.DecodeRawInputValue(rawValue) : this.maskInfo.GetValue());
  this.validationPatterns.unshift(new MaskValidationPattern(this.maskInfo.errorText, this.maskInfo));
 },
 SetMaskPasteTimer: function() {
  this.ClearMaskPasteTimer();
  this.maskPasteTimerID = ASPx.Timer.SetControlBoundInterval(this.MaskPasteTimerProc, this, ASPx.PasteCheckInterval);
 },
 ClearMaskPasteTimer: function() {
  this.maskPasteTimerID = ASPx.Timer.ClearInterval(this.maskPasteTimerID);
 },
 SavePrevMaskValue: function() {
  this.maskValueBeforeUserInput = this.maskInfo.GetValue();
 },
 FillMaskInfo: function() {
  var input = this.GetInputElement();
  if(!input) return;
  var sel = ASPx.Selection.GetInfo(input);
  this.maskInfo.SetCaret(sel.startPos, sel.endPos - sel.startPos);
 },
 ApplyMaskInfo: function(applyCaret) {
  this.SyncRawValue();
  var input = this.GetInputElement();
  var text = this.GetMaskDisplayText();
  this.maskTextBeforePaste = text;
  if(input.value != text)
   input.value = text;
  if(applyCaret)
   ASPx.Selection.Set(input, this.maskInfo.caretPos, this.maskInfo.caretPos + this.maskInfo.selectionLength);
 },
 GetMaskDisplayText: function() {
  if(!this.focused && this.HasTextDecorators())
   return this.GetDecoratedText(this.maskInfo.GetValue());
  return this.maskInfo.GetText();
 },
 ShouldCancelMaskKeyProcessing: function(htmlEvent, keyDownInfo) {
  return ASPx.Evt.IsEventPrevented(htmlEvent);
 },
 HandleMaskKeyDown: function(evt) {
  var keyInfo = ASPx.MaskManager.CreateKeyInfoByEvent(evt);
  ASPx.MaskManager.keyCancelled = this.ShouldCancelMaskKeyProcessing(evt, keyInfo);
  if(ASPx.MaskManager.keyCancelled) {
   ASPx.Evt.PreventEvent(evt);
   return;
  }
  this.maskPasteLock = true;
  this.FillMaskInfo();
  var canHandle = ASPx.MaskManager.CanHandleControlKey(keyInfo);
  ASPx.MaskManager.savedKeyDownKeyInfo = keyInfo;
  if(canHandle) {
   ASPx.MaskManager.OnKeyDown(this.maskInfo, keyInfo);
   this.ApplyMaskInfo(true);
   ASPx.Evt.PreventEvent(evt);
  }
  ASPx.MaskManager.keyDownHandled = canHandle;
  this.maskPasteLock = false;
  this.UpdateMaskHintHtml();
 },
 HandleMaskKeyPress: function(evt) {
  var keyInfo = ASPx.MaskManager.CreateKeyInfoByEvent(evt);
  ASPx.MaskManager.keyCancelled = ASPx.MaskManager.keyCancelled || this.ShouldCancelMaskKeyProcessing(evt, ASPx.MaskManager.savedKeyDownKeyInfo);
  if(ASPx.MaskManager.keyCancelled) {
   ASPx.Evt.PreventEvent(evt);
   return;
  }
  this.maskPasteLock = true;
  var printable = ASPx.MaskManager.savedKeyDownKeyInfo != null && ASPx.MaskManager.IsPrintableKeyCode(ASPx.MaskManager.savedKeyDownKeyInfo);
  if(printable) {
   ASPx.MaskManager.OnKeyPress(this.maskInfo, keyInfo);
   this.ApplyMaskInfo(true);
  }
  if(printable || ASPx.MaskManager.keyDownHandled)
   ASPx.Evt.PreventEvent(evt);
  this.maskPasteLock = false;
  this.UpdateMaskHintHtml();
 },
 MaskPasteTimerProc: function() {
  if(this.maskPasteLock || !this.maskInfo) return;
  this.maskPasteCounter++;
  var inputElement = this.inputElement;
  if(!inputElement || this.maskPasteCounter > 40) {
   this.maskPasteCounter = 0;
   inputElement = this.GetInputElement();
   if(!ASPx.IsExistsElement(inputElement)) {
    this.ClearMaskPasteTimer();
    return;
   }
  }
  if(this.maskTextBeforePaste !== inputElement.value)
   this.ProcessInputValueChangedOnTimer();
  if(!this.focused)
   this.ClearMaskPasteTimer();
 },
 ProcessInputValueChangedOnTimer: function() {
  var inputElement = this.inputElement;
  var selectionInfo = ASPx.Selection.GetInfo(inputElement);
  var startCaretPosition = selectionInfo.startPos;
  var endCaretPosition = selectionInfo.endPos;
  var oldText = this.maskTextBeforePaste;
  var newText = inputElement.value;
  var isAndroidBackSpacePressed = this.isAndroidBackSpacePressed(oldText, newText, startCaretPosition, endCaretPosition);
  var isLastTypedCharacter = newText.indexOf(oldText) == 0 && newText.length > oldText.length;
  if(isAndroidBackSpacePressed || isLastTypedCharacter) {
   this.SetText(newText);
   this.SetCaretPosition(endCaretPosition);
  } else {
   this.maskInfo.ProcessPaste(newText, endCaretPosition);
   this.ApplyMaskInfo(true);
  }
 },
 isAndroidBackSpacePressed: function(oldText, newText, startCaretPosition, endCaretPosition) {
  if(!ASPx.Browser.AndroidMobilePlatform || startCaretPosition !== endCaretPosition || newText.length >= oldText.length)
   return false;
  var startSubstring = newText.substring(0, startCaretPosition);
  var endSubstring = newText.substring(startCaretPosition);
  var isStartSubstringMatches = oldText.indexOf(startSubstring) == 0;
  var isEndSubstringMatches = endSubstring == "" || oldText.lastIndexOf(endSubstring) == oldText.length - endSubstring.length;
  return isStartSubstringMatches && isEndSubstringMatches;
 },
 BeginShowMaskHint: function() {
  if(!this.GetReadOnly() && this.maskHintTimerID == -1)
   this.maskHintTimerID = window.setInterval(ASPx.MaskHintTimerProc, 500);
 },
 EndShowMaskHint: function() {
  window.clearInterval(this.maskHintTimerID);
  this.maskHintTimerID = -1;
 },
 MaskHintTimerProc: function() {
  if(this.maskInfo) {
   this.FillMaskInfo();
   this.UpdateMaskHintHtml();
  } else {
   this.EndShowMaskHint();
  }
 },
 UpdateMaskHintHtml: function() {
  var hint =  this.GetMaskHintElement();
  if(!ASPx.IsExistsElement(hint))
   return;
  var html = ASPx.MaskManager.GetHintHtml(this.maskInfo);
  if(html == this.maskHintHtml)
   return;
  if(html != "") {
   var mainElement = this.GetMainElement();
   if(ASPx.IsExistsElement(mainElement)) {
    hint.innerHTML = html;
    hint.style.position = "absolute";
    hint.style.left = ASPx.PrepareClientPosForElement(ASPx.GetAbsoluteX(mainElement), mainElement, true) + "px";
    hint.style.top = (ASPx.PrepareClientPosForElement(ASPx.GetAbsoluteY(mainElement), mainElement, false) + mainElement.offsetHeight + 2) + "px";
    hint.style.display = "block";
   }
  } else {
   hint.style.display = "none";
  }
  this.maskHintHtml = html;
 },
 HideMaskHint: function() {
  var hint =  this.GetMaskHintElement();
  if(ASPx.IsExistsElement(hint))
   hint.style.display = "none";
  this.maskHintHtml = "";
 },
 GetMaskHintElement: function() {
  return ASPx.GetElementById(this.name + "_MaskHint");
 },
 OnFocus: function() {
  if (this.maskInfo != null && !ASPx.GetControlCollection().InCallback()) {
   this.TrySetCursorToStartPosition();
   this.SetMaskPasteTimer();
  }
  if(this.IsAutocompleteDropDownListRequiredOnFocus())
   ASPx.Attr.RemoveAttribute(this.GetInputElement(), "autocomplete");
  ASPxClientEdit.prototype.OnFocus.call(this);
 },
 OnLostFocus: function() {
  if(this.IsAutocompleteOffRequiredOnLostFocus())
   ASPx.Attr.SetAttribute(this.GetInputElement(), "autocomplete", "off");
  ASPxClientEdit.prototype.OnLostFocus.call(this);
 },
 OnMouseWheel: function(evt){
  if(this.GetReadOnly() || this.maskInfo == null || !this.maskInfo.allowMouseWheel)
   return;
  this.FillMaskInfo();
  ASPx.MaskManager.OnMouseWheel(this.maskInfo, ASPx.Evt.GetWheelDelta(evt) < 0 ? -1 : 1);
  this.ApplyMaskInfo(true);
  ASPx.Evt.PreventEvent(evt);
  this.UpdateMaskHintHtml();
 },
 OnBrowserWindowResize: function(e) {
  if(!this.autoResizeWithContainer)
   this.AdjustControl();
 },
 IsValueChanged: function() {
  return this.GetValue() != this.lastChangedValue;
 },
 OnKeyDown: function(evt) {
  if(this.NeedPreventBrowserUndoBehaviour(evt))
   return ASPx.Evt.PreventEvent(evt);
  if(this.RequireHandleMaxlenManually()) {
   this.onKeyDownInputValue = this.GetInputElement().value;
   var selectionInfo = ASPx.Selection.GetExtInfo(this.GetInputElement());
   this.onKeyDownCursorPos = selectionInfo.startPos;
  }
  if(ASPx.Browser.IE && ASPx.Evt.GetKeyCode(evt) == ASPx.Key.Esc) {
   if(++this.escCount > 1) {
    ASPx.Evt.PreventEvent(evt);
    return;
   }
  } else
   this.escCount = 0;
  ASPxClientEdit.prototype.OnKeyDown.call(this, evt);
  if(!this.IsRaiseStandardOnChange(evt)) {
   if(!this.GetReadOnly() && this.maskInfo != null)
    this.HandleMaskKeyDown(evt);
  }
 },
 IsCtrlZ: function(evt) {
  return evt.ctrlKey && !evt.altKey && !evt.shiftKey && (ASPx.Evt.GetKeyCode(evt) == 122 || ASPx.Evt.GetKeyCode(evt) == 90);
 },
 NeedPreventBrowserUndoBehaviour: function(evt) {
  var inputElement = this.GetInputElement();
  return this.IsCtrlZ(evt) && !!inputElement && !inputElement.value;
 },
 OnKeyPress: function(evt) {
  ASPxClientEdit.prototype.OnKeyPress.call(this, evt);
  if(!this.GetReadOnly() && this.maskInfo != null && !this.IsRaiseStandardOnChange(evt))
   this.HandleMaskKeyPress(evt);
  if(this.NeedOnKeyEventEnd(evt, true))
   this.OnKeyEventEnd(evt);
 },
 OnKeyUp: function(evt) {
  if(ASPx.Browser.Firefox && !this.focused && ASPx.Evt.GetKeyCode(evt) === ASPx.Key.Tab)
   return;
  if(this.NeedOnKeyEventEnd(evt, false)) {
   var proccessNextCommingPress = ASPx.Evt.GetKeyCode(evt) === ASPx.Key.Alt;
   this.OnKeyEventEnd(evt, proccessNextCommingPress);
  }
  if(this.RequireHandleMaxlenManually()) {
   var inputValueLength = this.GetInputElement().value.length;
   var maxLength = this.GetInputMaxLength();
   if(inputValueLength > maxLength && inputValueLength > this.onKeyDownInputValue.length) {
    this.GetInputElement().value = this.onKeyDownInputValue;
    this.SetCaretPosition(this.onKeyDownCursorPos);
   }
  }
  ASPxClientEdit.prototype.OnKeyUp.call(this, evt);
 },
 RequireHandleMaxlenManually: function() {
  return ASPx.Browser.AndroidMobilePlatform && ASPx.Browser.SamsungAndroidDevice && ASPx.Browser.PlaformMajorVersion < 6 && this.GetInputMaxLength() !== -1;
 },
 GetInputMaxLength: function() {
  var input = this.GetInputElement();
  if(ASPx.Attr.IsExistsAttribute(input, "maxlength"))
   return input.maxLength;
  return -1;
 },
 NeedOnKeyEventEnd: function(evt, isKeyPress) {
  var handleKeyPress = this.maskInfo != null && evt.keyCode == ASPx.Key.Enter;
  return handleKeyPress == isKeyPress;
 },
 OnKeyEventEnd: function(evt, withDelay){
  if(!this.GetReadOnly()) {
   if(this.IsRaiseStandardOnChange(evt))
    this.RaiseStandardOnChange();
   this.SyncRawValueIfHasTextDecorators(withDelay);
  }
 },
 SyncRawValueIfHasTextDecorators: function(withDelay) {
  if(this.HasTextDecorators()) {
   if(withDelay) {
    window.setTimeout(function() {
     this.SyncRawValue();
    }.aspxBind(this), 0);
   } else
    this.SyncRawValue();
  }
 },
 IsRaiseStandardOnChange: function(evt){
  return !this.specialKeyboardHandlingUsed && this.raiseValueChangedOnEnter && evt.keyCode == ASPx.Key.Enter;
 },
 GetFocusSelectAction: function() {
  if (this.maskInfo)
   return this.maskInfo.IsEmpty() ? null : "start";
  return "all";
 },
 CorrectFocusWhenDisabled: function() {
  if(!this.GetEnabled()) {
   var inputElement = this.GetInputElement();
   if(inputElement)
    inputElement.blur();
   return true;
  }
  return false;
 },
 EnsureShowPopupHelpText: function() {
  if(this.helpTextDisplayMode === ASPxClientTextEditHelpTextDisplayMode.Popup)
   this.showHelpText();
 },
 EnsureHidePopupHelpText: function() {
  if(this.helpTextDisplayMode === ASPxClientTextEditHelpTextDisplayMode.Popup)
   this.hideHelpText();
 },
 OnFocusCore: function() {
  if(this.CorrectFocusWhenDisabled())
   return;
  var wasLocked = this.IsFocusEventsLocked();
  ASPxClientEdit.prototype.OnFocusCore.call(this);
  this.CorrectInputMaxLength(true);
  if(this.maskInfo != null) {
   this.SavePrevMaskValue();
   this.BeginShowMaskHint();
  }
  if(!wasLocked) {
   this.ToggleTextDecoration();
   this.startUserInputEventTimerIfRequired();
  }
  if(this.isPasswordNullTextInputElementExists())
   setTimeout(function() { this.EnsureShowPopupHelpText(); }.aspxBind(this), 0);
  else
   this.EnsureShowPopupHelpText();
 },
 startUserInputEventTimerIfRequired: function () {
  if(this.shouldStartUserInputTimer() && this.userInputEventTimerID === -1) {
   this.prevInputValue = this.GetInputElement().value;
   this.userInputEventTimerID = ASPx.Timer.SetControlBoundInterval(this.processUserInputEventTimer, this, ASPx.CheckUserInputInterval);
  }
 },
 shouldStartUserInputTimer: function() {
  return !this.UserInput.IsEmpty();
 },
 restartCurrentUserInputTimer: function() {
  if(this.userInputEventTimerID !== -1) {
   this.processUserInputEventTimer(true);
   this.clearUserInputEventTimerIfRequired();
   this.startUserInputEventTimerIfRequired();
  }
 },
 clearUserInputEventTimerIfRequired: function () {
  if (this.userInputEventTimerID !== -1)
   this.userInputEventTimerID = ASPx.Timer.ClearInterval(this.userInputEventTimerID);
 },
 processUserInputEventTimer: function(onRestart) {
  var currentInputValue = this.GetInputElement().value;
  if(currentInputValue !== this.prevInputValue) {
   this.onInputChangedOnUserInputTimer(onRestart);
   this.prevInputValue = currentInputValue;
  }
 },
 onInputChangedOnUserInputTimer: function(onRestart) {
  if(this.raiseUserInputTimeout > -1)
   clearTimeout(this.raiseUserInputTimeout);
  this.raiseUserInputTimeout = setTimeout(function() {
   this.RaiseUserInput();
   this.raiseUserInputTimeout = -1;
  }.bind(this), 0);
 },
 ensureFocusedNullTextElement: function () {
  if(!this.focusedNullTextElement)
   this.createFocusedNullTextElement();
 },
 getFocusedNullTextElementClassName: function() {
  return focusedNullTextClassName;
 },
 getFocusedNullTextElementTagName: function() {
  return "INPUT";
 },
 getCopyFromInputElementStyles: function() {
  return [ "paddingLeft", "paddingTop", "paddingRight", "paddingBottom", "borderCollapse", "borderLeftWidth", "borderTopWidth", "borderRightWidth", "borderBottomWidth" ];
 },
 copyStylesFromInputElementToFocusedNullTextElement: function() {
  var input = this.GetInputElement();
  var inputStyle = ASPx.GetCurrentStyle(input);
  var stylesToCopy = this.getCopyFromInputElementStyles();
  for(var i = 0; i < stylesToCopy.length; i++)
   this.focusedNullTextElement.style[stylesToCopy[i]] = inputStyle[stylesToCopy[i]];
 },
 createFocusedNullTextElement: function() {
  this.focusedNullTextElement = document.createElement(this.getFocusedNullTextElementTagName());
  this.focusedNullTextElement.value = this.nullText;
  this.focusedNullTextElement.className = this.getFocusedNullTextElementClassName();
  this.focusedNullTextElement.tabIndex = -1;
  ASPx.SetElementDisplay(this.focusedNullTextElement, false);
  if(this.accessibilityCompliant) {
   ASPx.Attr.SetAttribute(this.focusedNullTextElement, "aria-label", this.nullText);
   ASPx.Attr.SetAttribute(this.focusedNullTextElement, "aria-hidden", true);
  }
  this.copyStylesFromInputElementToFocusedNullTextElement();
  if (this.nullTextOnFocusCssText) {
   var styleSheet = ASPx.GetCurrentStyleSheet();
   this.focusedNullTextElement.className += " " + ASPx.CreateImportantStyleRule(styleSheet, this.nullTextOnFocusCssText);
  }
  var inputElement = this.GetInputElement();
  inputElement.parentNode.insertBefore(this.focusedNullTextElement, inputElement.nextSibling);
 },
 ensureActivateFocusedNullTextMechanism: function() {
  if (this.nullTextDisplayMode === NullTextDisplayMode.UnfocusedAndFocused) {
   if(this.IsNull(this.GetValue()))
    this.changeFocusedNullTextElementVisibility(true);
   this.setFocusedNullTextTimer();
  }
 },
 ensureDeactivateFocusedNullTextMechanism: function () {
  if (this.nullTextDisplayMode === NullTextDisplayMode.UnfocusedAndFocused) {
   this.clearFocusedNullTextTimer();
   this.changeFocusedNullTextElementVisibility(false);
  }
 },
 setFocusedNullTextTimer: function () {
  if(this.focusedNullTextTimerID === -1)
   this.focusedNullTextTimerID = ASPx.Timer.SetControlBoundInterval(this.onFocusedNullTextVisibilityCheck, this, ASPx.PasteCheckInterval);
 },
 clearFocusedNullTextTimer: function () {
  this.focusedNullTextTimerID = ASPx.Timer.ClearInterval(this.focusedNullTextTimerID);
 },
 onFocusedNullTextVisibilityCheck: function (evt) {
  if(!this.needShowFocusedNullText() && this.isFocusedNullTextElementDisplayed())
   this.changeFocusedNullTextElementVisibility(false);
  else if(this.needShowFocusedNullText() && !this.isFocusedNullTextElementDisplayed())
   this.changeFocusedNullTextElementVisibility(true);
 },
 isFocusedNullTextElementDisplayed: function() {
  return this.focusedNullTextElement && ASPx.GetElementDisplay(this.focusedNullTextElement);
 },
 needShowFocusedNullText: function() {
  if(this.focusedNullTextTimerID === -1)
   return this.IsNull(this.GetValue());
  var result = this.GetInputElement().value === "";
  if(this.CanApplyNullTextDecoration)
   result = result && this.CanApplyNullTextDecoration();
  return result;
 },
 changeFocusedNullTextElementVisibility: function (visible) {
  this.ensureFocusedNullTextElement();
  ASPx.SetElementDisplay(this.focusedNullTextElement, visible);
  if(visible)
   this.adjustFocusedNullTextElement();
 },
 getInputElementAbsoluteX: function(input) {
  var result = ASPx.GetAbsoluteX(input);
  if(ASPx.Browser.Opera || ASPx.Browser.AndroidMobilePlatform)
   result++;
  return result;
 },
 getInputElementAbsoluteY: function (input) {
  var result = ASPx.GetAbsoluteY(input);
  if(ASPx.Browser.Opera || ASPx.Browser.AndroidMobilePlatform)
   result++;
  return result;
 },
 adjustFocusedNullTextElement: function() {
  var input = this.GetInputElement();
  this.focusedNullTextElement.style.width = input.offsetWidth + "px";
  this.focusedNullTextElement.style.height = input.offsetHeight + "px";
  var inputXPos = this.getInputElementAbsoluteX(input);
  var inputYPos = this.getInputElementAbsoluteY(input);
  ASPx.SetAbsoluteX(this.focusedNullTextElement, inputXPos);
  ASPx.SetAbsoluteY(this.focusedNullTextElement, inputYPos);
  var shiftByX = inputXPos - ASPx.GetAbsoluteX(this.focusedNullTextElement);
  var shiftByY = inputYPos - ASPx.GetAbsoluteY(this.focusedNullTextElement);
  if (shiftByX !== 0)
   this.focusedNullTextElement.style.left = ASPx.PxToFloat(this.focusedNullTextElement.style.left) + shiftByX + "px";
  if (shiftByY !== 0)
   this.focusedNullTextElement.style.top = ASPx.PxToFloat(this.focusedNullTextElement.style.top) + shiftByY + "px";
 },
 ensureAdjustFocusedNullTextElement: function () {
  if(this.isFocusedNullTextElementDisplayed())
   this.adjustFocusedNullTextElement(this.focusedNullTextElement);
 },
 TrySetCursorToStartPosition: function() {
  var input = this.GetInputElement();
  var sel = ASPx.Selection.GetInfo(input);
  if (sel.startPos === sel.endPos && this.IsMaskInfoEmpty()) {
   var pos = this.maskInfo.GetFirstNonLiteralPosition();
   var setCaret = ASPx.Selection.SetCaretPosition.bind(this, input, pos);
   setTimeout(function() {
    if (document.activeElement === input) {
     setCaret();
     setTimeout(setCaret, 50);
    }
   }, 0);
  }
 },
 IsMaskInfoEmpty: function() {
  return this.maskInfo.IsEmpty();
 },
 OnLostFocusCore: function() {
  var wasLocked = this.IsFocusEventsLocked();
  ASPxClientEdit.prototype.OnLostFocusCore.call(this);
  this.CorrectInputMaxLength();
  if(this.maskInfo != null) {
   this.EndShowMaskHint();
   this.HideMaskHint();
   if(this.maskInfo.ApplyFixes(null))
    this.ApplyMaskInfo(false);
   this.RaiseStandardOnChange();
  }
  if(!wasLocked) {
   this.clearUserInputEventTimerIfRequired();
   this.ToggleTextDecoration();
  }
  this.escCount = 0;
  this.EnsureHidePopupHelpText();
 },
 InputMaxLengthCorrectionRequired: function () {
  return ASPx.Browser.IE && ASPx.Browser.Version >= 10 && (!this.isNative || this.nullText != "");
 },
 CorrectInputMaxLength: function (onFocus) {
  if(this.InputMaxLengthCorrectionRequired()) {
   var input = this.GetInputElement();
   if(!ASPx.IsExists(this.inputMaxLength))
    this.inputMaxLength = input.maxLength;
   input.maxLength = onFocus ? this.inputMaxLength : -1;
  }
 },
 SubscribeToIeDropEvent: function() {
  if(this.InputMaxLengthCorrectionRequired()) {
   var input = this.GetInputElement();
   ASPx.Evt.AttachEventToElement(input, "drop", function(e) { this.CorrectInputMaxLength(true); }.aspxBind(this));
  }
 },
 SetFocus: function() {
  if(this.isPasswordNullTextInputElementExists()) {
   this.GetPasswordNullTextInputElement().focus();
  } else {
     ASPxClientEdit.prototype.SetFocus.call(this);
  }
 },
 OnValueChanged: function() {
  if(this.maskInfo != null) {
   if(this.maskInfo.GetValue() == this.maskValueBeforeUserInput && !this.IsValueChangeForced())
    return;
   this.SavePrevMaskValue();
  }
  if(this.HasTextDecorators())
   this.SyncRawValue();
  if(!this.IsValueChanged() && !this.IsValueChangeForced())
   return;
  this.SaveChangedValue();
  ASPxClientEdit.prototype.OnValueChanged.call(this);
 },
 IsValueChangeForced: function() {
  return false;
 },
 OnTextChanged: function() {
 },
 ForceTextChanged: function() {
  this.OnTextChanged();
 },
 SaveChangedValue: function() {
  this.lastChangedValue = this.GetValue();
 },
 RaiseStandardOnChange: function(){
  var element = this.GetInputElement();
  if(element && element.onchange) {
   element.onchange({ target: this.GetInputElement() });
  }
  else if(this.ValueChanged) {
   this.ValueChanged.FireEvent(this);
  }
 },
 RaiseTextChanged: function(processOnServer){
  if(!this.TextChanged.IsEmpty()){
   var args = new ASPxClientProcessingModeEventArgs(processOnServer);
   this.TextChanged.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 RaiseUserInput: function () {
  if(!this.UserInput.IsEmpty()) {
   var args = new ASPxClientEventArgs();
   this.UserInput.FireEvent(this, args);
  }
 },
 GetText: function(){
  if(this.maskInfo != null) {
   return this.maskInfo.GetText();
  } else {
   var value = this.GetValue();
   return value != null ? value : "";
  }
 },
 SetText: function (value){
  if(this.maskInfo != null) {
   this.maskInfo.SetText(value);
   this.ApplyMaskInfo(false);
   this.SavePrevMaskValue();
  } else {
   this.SetValue(value);
  }
 },
 SelectAll: function() {
  this.SetSelection(0, -1, false);
 },
 SetCaretPosition: function(pos) {
  var inputElement = this.GetInputElement();
  ASPx.Selection.SetCaretPosition(inputElement, pos);
 },
 GetCaretPosition: function() {
  var inputElement = this.GetInputElement();
  return ASPx.Selection.GetCaretPosition(inputElement);
 },
 SetSelection: function(startPos, endPos, scrollToSelection) {
  var inputElement = this.GetInputElement();
  ASPx.Selection.Set(inputElement, startPos, endPos, scrollToSelection, true);
 },
 ChangeEnabledAttributes: function(enabled){
  var inputElement = this.GetInputElement();
  if(inputElement){
   this.ChangeInputEnabledAttributes(inputElement, ASPx.Attr.ChangeAttributesMethod(enabled), enabled);
   if(this.specialKeyboardHandlingUsed)
    this.ChangeSpecialInputEnabledAttributes(inputElement, ASPx.Attr.ChangeEventsMethod(enabled), true);
   this.ChangeInputEnabled(inputElement, enabled, this.GetReadOnly());
   if(this.isPasswordNullTextInputElementExists())
    this.GetPasswordNullTextInputElement().disabled = inputElement.disabled;
  }
 },
 SetReadOnlyInternal: function(readOnly) {
  ASPxClientEdit.prototype.SetReadOnlyInternal.call(this, readOnly);
  this.ChangeInputReadOnly(readOnly);
 },
 ChangeReadOnlyStateItems: function(readOnly) {
  ASPxClientEdit.prototype.ChangeReadOnlyStateItems.call(this, readOnly);
  ASPx.GetStateController().SetElementReadOnly(this.GetInputElement(), readOnly);
 },
 ChangeInputReadOnly: function(readOnly) {
  var inputElement = this.GetInputElement();
  if(inputElement)
   inputElement.readOnly = readOnly || !this.GetEnabled() && this.UseReadOnlyForDisabled();
 },
 ChangeEnabledStateItems: function(enabled){
  if(!this.isNative) {
   var sc = ASPx.GetStateController();
   sc.SetElementEnabled(this.GetMainElement(), enabled);
   sc.SetElementEnabled(this.GetInputElement(), enabled);
  }
 },
 ChangeInputEnabled: function(element, enabled, readOnly) {
  if(this.UseReadOnlyForDisabled())
   element.readOnly = !enabled || readOnly;
  else
   element.disabled = !enabled;
 },
 ChangeInputEnabledAttributes: function(element, method, enabled) {
  var ieTabIndexFix = enabled && ASPx.Browser.IE && element.setAttribute && ASPx.Attr.IsExistsAttribute(element, "savedtabIndex");
  method(element, "tabIndex");
  if(!enabled) element.tabIndex = -1;
  if(ieTabIndexFix) {
   window.setTimeout(function() {
    if(element && element.parentNode)
     element.parentNode.replaceChild(element, element);
   }, 0);
  }
  method(element, "onclick");
  if(!this.NeedFocusCorrectionWhenDisabled())
   method(element, "onfocus");
  method(element, "onblur");
  method(element, "onkeydown");
  method(element, "onkeypress");
  method(element, "onkeyup");
 },
 UseReadOnlyForDisabled: function() {
  return (ASPx.Browser.IE && ASPx.Browser.Version < 10) && !this.isNative;
 },
 NeedFocusCorrectionWhenDisabled: function(){
  return (ASPx.Browser.IE && ASPx.Browser.Version < 10) && !this.isNative;
 },
 OnPostFinalization: function(args) {
  this.TryRestoreDisabledOnPost(args);
  this.TryClearInputTextDecorationOnPost(args);
 },
 TryRestoreDisabledOnPost: function(args) {
  if(this.GetEnabled() || !this.UseReadOnlyForDisabled() || args.isDXCallback)
   return;
  var inputElement = this.GetInputElement();
  if(inputElement) {
   var inputDisabled = inputElement.disabled;
   inputElement.disabled = true;
   window.setTimeout(function() {
    inputElement.disabled = inputDisabled;
   }, 0);
  }
 },
 GetTempHiddenInputID: function() {
  return this.name + ASPx.TempHiddenInputSuffix;
 },
 TryClearInputTextDecorationOnPost: function(args) {
  if(ASPx.Platform === "NETCORE")
   return;
  if(this.HasTextDecorators() && !ASPx.IsExists(this.GetValue())) {
   var inputElement = this.GetInputElement();
   if(inputElement) {
    var name = ASPx.Attr.GetAttribute(inputElement, "name");
    if(name)
     this.TryClearInputTextDecorationOnPostCore(inputElement, name);
   }
  }
 },
 TryClearInputTextDecorationOnPostCore: function(inputElement, name) {
  var hiddenInput = ASPx.CreateHiddenField(name, this.GetTempHiddenInputID(), inputElement.parentNode);
  ASPx.Attr.SetAttribute(inputElement, "data-name", name);
  ASPx.Attr.RemoveAttribute(inputElement, "name");
  setTimeout(function() {
   ASPx.Attr.SetAttribute(inputElement, "name", name);
   ASPx.Attr.RemoveAttribute(inputElement, "data-name");
   ASPx.RemoveElement(hiddenInput);
  }, 0);
 },
 OnUnload: function() {
  var input = this.GetInputElement();
  if(!input)
   return;
  if(this.IsAutocompleteOffNotRequiredOnUnload())
   ASPx.Attr.RemoveAttribute(input, "autocomplete");
  if(this.focusedNullTextElement)
   ASPx.RemoveElement(this.focusedNullTextElement);
 },
 IsVCardAttributeRequired: function() {
  return this.autoCompleteAttribute && this.autoCompleteAttribute.name !== "autocomplete";
 },
 IsAutocompleteDropDownListRequiredOnFocus: function() {
  return !this.autoCompleteAttribute || this.IsVCardAttributeRequired();
 },
 IsAutocompleteOffRequiredOnInitialize: function() {
  return !this.isNative && (this.autoCompleteAttribute && this.autoCompleteAttribute.name === "autocomplete" || ASPx.Browser.WebKitFamily);
 },
 IsAutocompleteOffRequiredOnLostFocus: function() {
  return !this.autoCompleteAttribute && this.IsNullTextVisible() && !this.IsVCardAttributeRequired();
 },
 IsAutocompleteOffNotRequiredOnUnload: function() {
  return !this.IsNullTextVisible() || this.IsVCardAttributeRequired() || (this.maskInfo != null && this.GetValue() == null);
 },
 IsNullTextVisible: function() {
  return this.nullText && !this.GetValue() && !this.GetText();
 },
 GetModifyEvent: function() {
  return this.UserInput;
 },
 EnsureRequiredNativeAttributesExists: function() {
  var input = this.GetInputElement();
  if(!input.onfocus)
   ASPx.Evt.AttachEventToElement(input, "focus", function() { ASPx.EGotFocus(this.name); }.aspxBind(this));
  if(!input.onblur)
   ASPx.Evt.AttachEventToElement(input, "blur", function() { ASPx.ELostFocus(this.name); }.aspxBind(this));
 }
});
MaskValidationPattern = ASPx.CreateClass(ASPx.ValidationPattern, {
 constructor: function(errorText, maskInfo) {
  this.constructor.prototype.constructor.call(this, errorText);
  this.maskInfo = maskInfo;
 },
 EvaluateIsValid: function(value) {
  return this.maskInfo.IsValid();
 }
});
ASPx.Ident.IsASPxClientTextEdit = function(obj) {
 return !!obj.isASPxClientTextEdit;
};
var ASPxClientTextBoxBase = ASPx.CreateClass(ASPxClientTextEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.sizingConfig.allowSetHeight = false;
  this.sizingConfig.adjustControl = true;
 }
});
var ASPxClientTextBox = ASPx.CreateClass(ASPxClientTextBoxBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientTextBox = true;
  this.isCaptchaTextBox = false;
 },
 NeedProcessUnload: function() {
  return ASPxClientTextBoxBase.prototype.NeedProcessUnload.call(this) && !this.isCaptchaTextBox;
 },
 IsValueRestoredByBrowser: function() {
  if(this.isCaptchaTextBox)
   return this.initializeInputValue !== "" && this.initializeInputValue !== this.nullText;
  return  ASPxClientTextBoxBase.prototype.IsValueRestoredByBrowser.call(this);
 },
 SynchronizeRestoredValue: function() {
  if(this.isCaptchaTextBox)
   this.SetText(null);
  else
   ASPxClientTextBoxBase.prototype.SynchronizeRestoredValue.call(this);
 },
});
ASPxClientTextBox.Cast = ASPxClientControl.Cast;
ASPx.Ident.IsASPxClientTextBox = function(obj) {
 return !!obj.isASPxClientTextBox;
};
var ASPxClientMemo = ASPx.CreateClass(ASPxClientTextEdit, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.isASPxClientMemo = true;
  this.raiseValueChangedOnEnter = false;
  this.maxLength = 0;
  this.pasteTimerID = -1;
  this.pasteTimerActivatorCount = 0;
 },
 Initialize: function() {
  ASPxClientTextEdit.prototype.Initialize.call(this);
  this.SaveChangedValue();
  this.maxLengthRestricted = this.maxLength > 0;
 },
 CutString: function() {
  var text = this.GetText();
  if(text.length > this.maxLength) {
   text = text.substring(0, this.maxLength);
   this.SetText(text);
  }
 },
 EventKeyCodeChangesTheInput: function(evt) {
  if(ASPx.IsPasteShortcut(evt))
   return true;
  else if(evt.ctrlKey)
   return false;
  var keyCode = ASPx.Evt.GetKeyCode(evt);
  var isSystemKey = ASPx.Key.Windows <= keyCode && keyCode <= ASPx.Key.ContextMenu;
  var isFKey = ASPx.Key.F1 <= keyCode && keyCode <= 127;
  return ASPx.Key.Delete < keyCode && !isSystemKey && !isFKey || keyCode == ASPx.Key.Enter || keyCode == ASPx.Key.Space;
 },
 OnTextChangingCheck: function() {
  if(this.maxLengthRestricted)
   this.CutString();
 },
 StartTextChangingTimer: function() {
  if(this.maxLengthRestricted) {
   if(this.pasteTimerActivatorCount == 0)
    this.SetTextChangingTimer();
   this.pasteTimerActivatorCount ++;
  }
 },
 EndTextChangingTimer: function() {
  if(this.maxLengthRestricted) {
   this.pasteTimerActivatorCount --;
   if(this.pasteTimerActivatorCount == 0)
    this.ClearTextChangingTimer();
  }
 },
 CollapseEditor: function() {
  if(!this.IsAdjustmentRequired()) return;
  var mainElement = this.GetMainElement();
  var inputElement = this.GetInputElement();
  if(!ASPx.IsExistsElement(mainElement) || !ASPx.IsExistsElement(inputElement))
   return;
  ASPxClientTextEdit.prototype.CollapseEditor.call(this);
  var mainElementCurStyle = ASPx.GetCurrentStyle(mainElement);
  if(this.heightCorrectionRequired && mainElement && inputElement) {
   if(mainElement.style.height == "100%" || mainElementCurStyle.height == "100%") {
    mainElement.style.height = "0";
    mainElement.wasCollapsed = true;
   }
   inputElement.style.height = "0";
  }
 },
 SetWidth: function(width) {
  ASPxClientTextEdit.prototype.SetWidth.call(this, width);
  if(ASPx.Browser.IE)
   this.AdjustControl();
 },
 SetHeight: function(height) {
  var textarea = this.GetInputElement();
  textarea.style.height = "1px";
  ASPxClientTextEdit.prototype.SetHeight.call(this, height);
  textarea.style.height = ASPx.GetClearClientHeight(this.GetMainElement()) - ASPx.GetTopBottomBordersAndPaddingsSummaryValue(textarea) + "px";
 },
 ClearErrorFrameElementsStyles: function() {
  var textarea = this.GetInputElement();
  if(!textarea)
   return;
  var scrollBarPosition = textarea.scrollTop;
  ASPxClientTextEdit.prototype.ClearErrorFrameElementsStyles.call(this);
  if(ASPx.Browser.Firefox)
   textarea.scrollTop = scrollBarPosition;
 },
 OnMouseOver: function() {
  this.StartTextChangingTimer();
 },
 OnMouseOut: function() {
  this.EndTextChangingTimer();
 },
 OnFocus: function() {
  this.StartTextChangingTimer();
  ASPxClientTextEdit.prototype.OnFocus.call(this);
 },
 OnLostFocus: function() {
  this.EndTextChangingTimer();
  ASPxClientTextEdit.prototype.OnLostFocus.call(this);
 },
 OnKeyDown: function(evt) {
  if(this.NeedPreventBrowserUndoBehaviour(evt))
   return ASPx.Evt.PreventEvent(evt);
  if(this.maxLengthRestricted){
   var selection = ASPx.Selection.GetInfo(this.GetInputElement());
   var noCharToReplace = selection.startPos == selection.endPos;
   if(this.GetText().length >= this.maxLength && noCharToReplace && this.EventKeyCodeChangesTheInput(evt)) {
    return ASPx.Evt.PreventEvent(evt);
   }
  }
  ASPxClientEdit.prototype.OnKeyDown.call(this, evt);
 },
 SetTextChangingTimer: function() {
  this.pasteTimerID = ASPx.Timer.SetControlBoundInterval(this.OnTextChangingCheck, this, ASPx.PasteCheckInterval);
 },
 ClearTextChangingTimer: function() {
  this.pasteTimerID = ASPx.Timer.ClearInterval(this.pasteTimerID);
 },
 getFocusedNullTextElementTagName: function() {
  return "TEXTAREA";
 },
 getCopyFromInputElementStyles: function() {
  var result = ASPxClientTextEdit.prototype.getCopyFromInputElementStyles.call(this);
  result.push("resize");
  return result;
 }
});
ASPxClientMemo.Cast = ASPxClientControl.Cast;
ASPx.Ident.IsASPxClientMemo = function(obj) { return obj && !!obj.isASPxClientMemo; };
var CLEAR_BUTTON_INDEX = -100;
var HIDE_CONTENT_CSS_CLASS_NAME = "dxHideContent";
var setContentVisibility = function(clearButtonElement, value) {
 var action = value ? ASPx.RemoveClassNameFromElement : ASPx.AddClassNameToElement;
 action(clearButtonElement, HIDE_CONTENT_CSS_CLASS_NAME);
};
var CLEAR_BUTTON_DISPLAY_MODE = {
 AUTO: 'Auto',
 ALWAYS: 'Always',
 NEVER: 'Never',
 ON_HOVER: 'OnHover'
};
var AccessibilityFocusedButtonClassName = "dxAFB";
var ASPxClientButtonEditBase = ASPx.CreateClass(ASPxClientTextBoxBase, {
 constructor: function(name) {
  this.constructor.prototype.constructor.call(this, name);
  this.allowUserInput = true;
  this.isValueChanging = false;
  this.allowMouseWheel = true;
  this.isMouseOver = false;
  this.buttonCount = 0;
  this.emptyValueMaskDisplayText = "";
  this.clearButtonDisplayMode = CLEAR_BUTTON_DISPLAY_MODE.AUTO;
  this.forceShowClearButtonAlways = false;
  this.recoverClearButtonVisibility = false;
  this.ButtonClick = new ASPxClientEvent();
 },
 Initialize: function() {
  ASPxClientTextBoxBase.prototype.Initialize.call(this);
  this.EnsureEmptyValueMaskDisplayText();
  if(this.HasClearButton())
   this.InitializeClearButton();
  this.InitAccessibilityCompliant();
 },
 InlineInitialize: function() {
  ASPxClientTextBoxBase.prototype.InlineInitialize.call(this);
  if(this.clearButtonDisplayMode === CLEAR_BUTTON_DISPLAY_MODE.AUTO) {
   this.clearButtonDisplayMode = this.IsClearButtonVisibleAuto() || this.forceShowClearButtonAlways ?
    CLEAR_BUTTON_DISPLAY_MODE.ALWAYS : CLEAR_BUTTON_DISPLAY_MODE.NEVER;
  }
  this.EnsureClearButtonVisibility();
 },
 InitializeClearButton: function() {
  if(this.clearButtonDisplayMode === CLEAR_BUTTON_DISPLAY_MODE.ON_HOVER) {
   ASPx.Evt.AttachMouseEnterToElement(this.GetHoverElementToShowClearButton(), this.OnMouseOver.aspxBind(this), this.OnMouseOut.aspxBind(this));
  }
 },
 GetHoverElementToShowClearButton: function() {
  return this.GetMainElement();
 },
 IsClearButtonVisibleAuto: function() {
  return ASPx.Browser.MobileUI;
 },
 SetEnabled: function(enabled) {
  ASPxClientTextBoxBase.prototype.SetEnabled.call(this, enabled);
  this.EnsureClearButtonVisibility();
 },
 EnsureEmptyValueMaskDisplayText: function() {
  if(this.maskInfo && this.HasClearButton()) {
   var savedText = this.maskInfo.GetText();
   this.maskInfo.SetText("");
   this.emptyValueMaskDisplayText = this.maskInfo.GetText();
   this.maskInfo.SetText(savedText);
  }
 },
 GetButton: function(number) {
  return this.GetChildElement("B" + number);
 },
 GetCustomButtonCollection: function() {
  var buttonElements = [];
  for(var i = 0; i < this.buttonCount; i++) {
   var button =  this.GetButton(i);
   if(!!button)
    buttonElements.push(button);
  }
  return buttonElements;
 },
 GetButtonCollection: function() {
  var buttonElements = [];
  var clearButton = this.GetClearButton();
  if(!!clearButton)
   buttonElements.push(clearButton);
  return buttonElements.concat(this.GetCustomButtonCollection());
 },
 GetAccessibilityAnchor: function(buttonElement) {
  var firstChild = buttonElement.firstElementChild;
  var isExistsAnchorElement = ASPx.Attr.GetAttribute(firstChild, "role") === "button";
  return isExistsAnchorElement ? firstChild : null;
 },
 GetButtonByAccessibilityAnchor: function(anchorElement) {
  return anchorElement.parentNode;
 },
 SetAccessibilityAnchorEnabled: function(buttonElement, enabled) {
  var anchorElement = this.GetAccessibilityAnchor(buttonElement);
  if(ASPx.IsExists(anchorElement))
   ASPx.Attr.SetOrRemoveAttribute(anchorElement, "tabindex", enabled ? "0" : "");
 },
 InitAccessibilityCompliant: function() {
  if(!this.accessibilityCompliant) return;
  var buttonElements = this.GetButtonCollection();
  var labelElements = ASPx.FindAssociatedLabelElements(this);
  for(var i = 0; i < buttonElements.length; i++)
   this.InitAccessibilityAnchor(this.GetAccessibilityAnchor(buttonElements[i]), labelElements);
 },
 InitAccessibilityAnchor: function(anchorElement, labelElements) {
  if(!ASPx.IsExists(anchorElement))
   return;
  for(var i = 0; i < labelElements.length; i++)
   this.ariaExplanatoryTextManager.SetOrRemoveText([anchorElement], labelElements[i], true, false, false);
  this.InitAccessibilityAnchorEvents(anchorElement);
 },
 InitAccessibilityAnchorEvents: function(anchorElement) {
  ASPx.Evt.AttachEventToElement(anchorElement, "keydown", function(evt) { this.OnButtonKeysHandling(evt); }.aspxBind(this));
  ASPx.Evt.AttachEventToElement(anchorElement, "keyup", function(evt) { this.OnButtonKeysHandling(evt); }.aspxBind(this));
  ASPx.Evt.AttachEventToElement(anchorElement, "focus", function(evt) { this.OnButtonGotFocus(evt); }.aspxBind(this));
  ASPx.Evt.AttachEventToElement(anchorElement, "blur", function(evt) { this.OnButtonLostFocus(evt); }.aspxBind(this));
 },
 EmulateButtonMouseEvent: function(sourceElement) {
  var buttonElement = this.GetButtonByAccessibilityAnchor(sourceElement);
  var mouseEvent = buttonElement.onclick || buttonElement.onmousedown || buttonElement.ontouchstart || buttonElement.onpointerdown;
  var emulateMouseEvtArgs = { button: 0, which: 1, srcElement: buttonElement, target: buttonElement };
  if(!!mouseEvent) {
   ASPx.Attr.SetAttribute(sourceElement, "aria-pressed", true);
   setTimeout(function() {
    mouseEvent(emulateMouseEvtArgs);
    ASPx.Attr.RemoveAttribute(sourceElement, "aria-pressed");
   }, 300);
  }
 },
 OnButtonKeysHandling: function(evt) {
  var isKeyUp = evt.type == "keyup";
  var keyCode = ASPx.Evt.GetKeyCode(evt);
  var sourceElement = ASPx.Evt.GetEventSource(evt);
  if((keyCode == ASPx.Key.Space && isKeyUp) || (keyCode == ASPx.Key.Enter && !isKeyUp))
   this.EmulateButtonMouseEvent(sourceElement);
  if(keyCode != ASPx.Key.Tab)
   ASPx.Evt.PreventEventAndBubble(evt);
  return false;
 },
 OnButtonGotFocus: function(evt) {
  var editor = ASPx.GetControlCollection().Get(this.name);
  var sourceElement = ASPx.Evt.GetEventSource(evt);
  if(!!editor && !editor.CorrectAccessibilityButtonFocus(sourceElement)) {
   var buttonElement = editor.GetButtonByAccessibilityAnchor(sourceElement);
   ASPx.AddClassNameToElement(buttonElement, this.GetAccessibilityFocusedButtonClassName());
   ASPx.EGotFocus(editor.name);
   if(editor.specialKeyboardHandlingUsed)
    ASPx.ESGotFocus(editor.name);
  }
 },
 OnButtonLostFocus: function(evt) {
  var editor = ASPx.GetControlCollection().Get(this.name);
  var sourceElement = ASPx.Evt.GetEventSource(evt);
  if(!!editor) {
   var buttonElement = editor.GetButtonByAccessibilityAnchor(sourceElement);
   ASPx.RemoveClassNameFromElement(buttonElement, this.GetAccessibilityFocusedButtonClassName());
  }
  setTimeout(function() {
   if(!!editor && !editor.IsEditorElement(ASPx.GetActiveElement())) {
    ASPx.ELostFocus(editor.name);
    if(editor.specialKeyboardHandlingUsed)
     ASPx.ESLostFocus(editor.name);
   }
  }.aspxBind(this), 0);
 },
 ForceRefocusEditor: function(evt, isNativeFocus) {
  if(this.accessibilityCompliant) {
   var srcElement = ASPx.Evt.GetEventSource(evt);
   var customButtons = this.GetCustomButtonCollection();
   for(var i = 0; i < customButtons.length; i++)
    if(customButtons[i] == srcElement || ASPx.GetIsParent(customButtons[i], srcElement))
     return;
  }
  ASPxClientEdit.prototype.ForceRefocusEditor.call(this, evt, isNativeFocus);
  if(this.GetInputElement().type == "password") {
   window.setTimeout(function() { this.GetInputElement().focus(); }.bind(this), 0);
  }
 },
 CorrectAccessibilityButtonFocus: function(sourceElement) {
  if(ASPx.Attr.IsExistsAttribute(sourceElement, "tabindex"))
   return false;
  setTimeout(function() {
   var buttonElements = this.GetButtonCollection();
   for(var i = 0; i < buttonElements.length; i++)
    if(ASPx.GetIsParent(buttonElements[i], sourceElement))
     this.GetAccessibilityAnchor(buttonElements[i]).focus();
  }.aspxBind(this), 0);
  return true;
 },
 OnKeyDown: function(evt) {
  if(this.NeedEnsureClearButtonVisibilityOnKeyDown()) {
   var hasClearButtonOnHover = this.HasClearButton() && this.clearButtonDisplayMode === CLEAR_BUTTON_DISPLAY_MODE.ON_HOVER;
   this.recoverClearButtonVisibility = hasClearButtonOnHover && ASPx.Evt.GetKeyCode(evt) == ASPx.Key.Tab && !evt.shiftKey;
  }
  ASPxClientTextBoxBase.prototype.OnKeyDown.call(this, evt);
 },
 NeedEnsureClearButtonVisibilityOnKeyDown: function() {
  return this.accessibilityCompliant;
 },
 GetAccessibilityFocusedButtonClassName: function() {
  return AccessibilityFocusedButtonClassName;
 },
 SetButtonVisible: function(number, value) {
  var button = this.GetButton(number);
  if(!button)
   return;
  var isAlwaysShownClearButton = number === CLEAR_BUTTON_INDEX && this.clearButtonDisplayMode === CLEAR_BUTTON_DISPLAY_MODE.ALWAYS;
  var visibilityModifier = isAlwaysShownClearButton ? setContentVisibility : ASPx.SetElementDisplay;
  if(isAlwaysShownClearButton && this.accessibilityCompliant && this.enabled)
   this.SetAccessibilityAnchorEnabled(button, value);
  visibilityModifier(button, value);
 },
 GetButtonVisible: function(number) {
  var button = this.GetButton(number);
  if(number === CLEAR_BUTTON_INDEX && this.clearButtonDisplayMode === CLEAR_BUTTON_DISPLAY_MODE.ALWAYS)
   return button && !ASPx.ElementHasCssClass(button, this.GetHideContentCssClassName());
  return button && ASPx.IsElementVisible(button);
 },
 GetHideContentCssClassName: function() {
  return HIDE_CONTENT_CSS_CLASS_NAME;
 },
 ProcessInternalButtonClick: function(buttonIndex) {
  return false;
 },
 OnButtonClick: function(number) {
  var processOnServer = this.RaiseButtonClick(number);
  if(!this.ProcessInternalButtonClick(number) && processOnServer)
   this.SendPostBack('BC:' + number);
 },
 GetLastSuccesfullValue: function() {
  return this.lastChangedValue;
 },
 OnClear: function() {
  this.startUserInputEventTimerIfRequired();
  this.ClearEditorValueAndForceOnChange();
  this.ForceRefocusEditor(null, true);
  window.setTimeout(this.EnsureClearButtonVisibility.aspxBind(this), 0);
 },
 ClearEditorValueAndForceOnChange: function() {
  if(this.GetReadOnly() || !this.GetButtonVisible(CLEAR_BUTTON_INDEX))
   return;
  var raiseOnChange = this.ClearEditorValueByClearButton();
  if(raiseOnChange)
   this.ForceStandardOnChange();
 },
 ClearEditorValueByClearButton: function() {
  var prevValue = this.GetLastSuccesfullValue();
  this.ClearEditorValueByClearButtonCore();
  return prevValue !== this.GetValue();
 },
 ClearEditorValueByClearButtonCore: function() {
  this.Clear();
  this.GetInputElement().value = '';
 },
 ForceStandardOnChange: function() {
  this.forceValueChanged = true;
  this.RaiseStandardOnChange();
  this.forceValueChanged = false;
 },
 IsValueChangeForced: function() {
  return this.forceValueChanged || ASPxClientTextBoxBase.prototype.IsValueChangeForced.call(this);
 },
 IsValueChanging: function() { return this.isValueChanging; },
 StartValueChanging: function() { this.isValueChanging = true; },
 EndValueChanging: function() { this.isValueChanging = false; },
 IsClearButtonElement: function(element) {
  return ASPx.GetIsParent(this.GetClearButton(), element);
 },
 OnFocusCore: function() {
  ASPxClientTextBoxBase.prototype.OnFocusCore.call(this);
  this.EnsureClearButtonVisibility();
 },
 OnLostFocusCore: function() {
  ASPxClientTextBoxBase.prototype.OnLostFocusCore.call(this);
  this.EnsureClearButtonVisibility();
  this.recoverClearButtonVisibility = false;
 },
 GetClearButton: function() {
  return this.GetButton(CLEAR_BUTTON_INDEX);
 },
 HasClearButton: function() {
  return !!this.GetClearButton();
 },
 RequireShowClearButton: function() {
  return !this.IsClearButtonDisabled() && !this.IsClearButtonNotRequired() && this.RequireShowClearButtonInternal();
 },
 IsClearButtonDisabled: function() {
  return !this.clientEnabled || !this.HasClearButton() || this.clearButtonDisplayMode === CLEAR_BUTTON_DISPLAY_MODE.NEVER;
 },
 IsClearButtonNotRequired: function() {
  return !this.IsFocused() && !this.isMouseOver && this.clearButtonDisplayMode !== CLEAR_BUTTON_DISPLAY_MODE.ALWAYS && !this.recoverClearButtonVisibility;
 },
 RequireShowClearButtonInternal: function () {
  return this.IsFocused() && this.RequireShowClearButtonCore() || !this.IsNullState();
 },
 RequireShowClearButtonCore: function() {
  var inputText = this.GetInputElement().value;
  return inputText !== this.GetEmptyValueDisplayText();
 },
 IsFocused: function() {
  return this === ASPx.GetFocusedEditor();
 },
 IsNullState: function() {
  var value = this.GetValue();
  return this.IsNull(value) || value === this.GetEmptyValueDisplayText();
 },
 GetEmptyValueDisplayText: function() {
  return this.maskInfo ? this.emptyValueMaskDisplayText : "";
 },
 EnsureClearButtonVisibility: function() {
  this.SetButtonVisible(CLEAR_BUTTON_INDEX, this.RequireShowClearButton());
 },
 OnMouseOver: function() {
  this.isMouseOver = true;
  this.EnsureClearButtonVisibility();
 },
 OnMouseOut: function() {
  this.isMouseOver = false;
  this.EnsureClearButtonVisibility();
 },
 OnKeyPress: function(evt) {
  if(this.allowUserInput)
   ASPxClientTextBoxBase.prototype.OnKeyPress.call(this, evt);
 },
 OnKeyEventEnd: function(evt, withDelay) {
  ASPxClientTextBoxBase.prototype.OnKeyEventEnd.call(this, evt, withDelay);
  this.EnsureClearButtonVisibility();
 },
 RaiseButtonClick: function(number){
  var processOnServer = this.autoPostBack || this.IsServerEventAssigned("ButtonClick");
  if(!this.ButtonClick.IsEmpty()){
   var args = new ASPxClientButtonEditClickEventArgs(processOnServer, number);
   this.ButtonClick.FireEvent(this, args);
   processOnServer = args.processOnServer;
  }
  return processOnServer;
 },
 ChangeEnabledAttributes: function(enabled){
  ASPxClientTextEdit.prototype.ChangeEnabledAttributes.call(this, enabled);
  for(var i = 0; i < this.buttonCount; i++){
   var element = this.GetButton(i);
   if(element)
    this.ChangeButtonEnabledAttributes(element, this.GetChangeButtonEnabledAttributesMethod(enabled));
  }
  if(this.accessibilityCompliant)
   this.ChangeAccessibilityButtonEnabledAttributes(enabled);
 },
 ChangeEnabledStateItems: function(enabled){
  ASPxClientTextEdit.prototype.ChangeEnabledStateItems.call(this, enabled);
  for(var i = 0; i < this.buttonCount; i++){
   var element = this.GetButton(i);
   if(element)
    ASPx.GetStateController().SetElementEnabled(element, enabled);
  }
 },
 GetChangeButtonEnabledAttributesMethod: function(enabled) {
  return ASPx.Attr.ChangeAttributesMethod(enabled);
 },
 ChangeButtonEnabledAttributes: function(element, method){
  method(element, "onclick");
  method(element, "ondblclick");
  if(ASPx.Browser.Edge)
   method(element, "onmousedown");
  method(element, "on" + ASPx.TouchUIHelper.touchMouseDownEventName);
  method(element, "on" + ASPx.TouchUIHelper.touchMouseUpEventName);
 },
 ChangeInputEnabled: function(element, enabled, readOnly) {
  ASPxClientTextEdit.prototype.ChangeInputEnabled.call(this, element, enabled, readOnly || !this.allowUserInput);
 },
 ChangeAccessibilityButtonEnabledAttributes: function(enabled) {
  var buttonElements = this.GetButtonCollection();
  for(var i = 0; i < buttonElements.length; i++)
   this.SetAccessibilityAnchorEnabled(buttonElements[i], enabled);
 },
 SetValue: function(value) {
  ASPxClientTextEdit.prototype.SetValue.call(this, value);
  if(!this.IsFocused())
   this.EnsureClearButtonVisibility();
 },
 OnAssociatedLabelClick: function(focusableElement) {
  var isValidElement = focusableElement && ASPx.IsActionElement(focusableElement) && ASPx.GetIsParent(this.GetMainElement(), focusableElement) && ASPx.IsElementVisible(focusableElement);
  if(isValidElement)
   focusableElement.focus();
  else
   this.SetFocus();
 },
 onClearButtonClick: function() {
  var requireFocus = !ASPx.Browser.VirtualKeyboardSupported || ASPx.Browser.MSTouchUI;
  if(this.ownerListBox)
   this.ownerListBox.ForceLockFocusEvents();
  if(requireFocus && !this.IsFocused())
   this.GetInputElement().focus();
  if(this.IsFocused() || !requireFocus) {
   if(this.ownerListBox)
    this.ownerListBox.UnlockFocusEvents();
   this.OnClear();
  }
  else
   window.setTimeout(this.onClearButtonClick.bind(this), 100);
 }
});
var ASPxClientButtonEdit = ASPx.CreateClass(ASPxClientButtonEditBase, {
});
ASPxClientButtonEdit.Cast = ASPxClientControl.Cast;
var ASPxClientButtonEditClickEventArgs = ASPx.CreateClass(ASPxClientProcessingModeEventArgs, {
 constructor: function(processOnServer, buttonIndex){
  this.constructor.prototype.constructor.call(this, processOnServer);
  this.buttonIndex = buttonIndex;
 }
});
var ASPxClientTextEditHelpTextHAlign = {
 Left: "Left",
 Right: "Right",
 Center: "Center"
};
var ASPxClientTextEditHelpTextVAlign = {
 Top: "Top",
 Bottom: "Bottom",
 Middle: "Middle"
};
var ASPxClientTextEditHelpTextDisplayMode = {
 Inline: "Inline",
 Popup: "Popup"
};
var ASPxClientTextEditHelpTextConsts = {
 VERTICAL_ORIENTATION_CLASS_NAME: "dxeVHelpTextSys",
 HORIZONTAL_ORIENTATION_CLASS_NAME: "dxeHHelpTextSys"
};
var ASPxClientTextEditHelpText = ASPx.CreateClass(null, {
 constructor: function (editor, helpTextStyle, helpText, position, hAlign, vAlign, margins, animationEnabled, helpTextDisplayMode) {
  this.hAlign = hAlign;
  this.vAlign = vAlign;
  this.animationEnabled = animationEnabled;
  this.displayMode = helpTextDisplayMode;
  this.editor = editor;
  this.editorMainElement = editor.GetMainElement();
  this.margins = margins ? { Top: margins[0], Right: margins[1], Bottom: margins[2], Left: margins[3] } : null;
  this.defaultMargins = { Top: 10, Right: 10, Bottom: 10, Left: 10 };
  this.position = position;
  this.helpTextElement = this.createHelpTextElement();
  this.setHelpTextZIndex(true);
  this.prepareHelpTextElement(helpTextStyle, helpText);
 },
 getRows: function (table) {
  return ASPx.GetChildNodesByTagName(table, "TR");
 },
 getCells: function (row) {
  return ASPx.GetChildNodesByTagName(row, "TD");
 },
 getCellByIndex: function(row, cellIndex) {
  return this.getCells(row)[cellIndex];
 },
 getCellIndex: function(row, cell) {
  var cells = this.getCells(row);
  for(var i = 0; i < cells.length; i++) {
   if(cells[i] === cell)
    return i;
  }
 },
 isHorizontal: function(position) {
  return position === ASPx.Position.Left || position === ASPx.Position.Right;
 },
 isVertical: function (position) {
  return position === ASPx.Position.Top || position === ASPx.Position.Bottom;
 },
 createEmptyCell: function(assignClassName) {
  var cell = document.createElement("TD");
  if(assignClassName)
   cell.className = "dxeFakeEmptyCell";
  return cell;
 },
 addHelpTextCellToExternalTableWithTwoCells: function (captionCell, errorCell, helpTextCell, errorTableBody, tableRows) {
  var captionPosition = this.editor.captionPosition;
  var errorCellPosition = this.editor.errorCellPosition;
  var helpTextRow = this.isVertical(this.position) ? document.createElement("TR") : null;
  if(captionPosition === ASPx.Position.Left && this.position === ASPx.Position.Left && this.isHorizontal(errorCellPosition))
   captionCell.parentNode.insertBefore(helpTextCell, captionCell.nextSibling);
  if(captionPosition === ASPx.Position.Right && this.position === ASPx.Position.Right && this.isHorizontal(errorCellPosition))
   captionCell.parentNode.insertBefore(helpTextCell, captionCell);
  if(captionPosition === ASPx.Position.Left && this.position === ASPx.Position.Right && this.isHorizontal(errorCellPosition))
   tableRows[0].appendChild(helpTextCell);
  if(captionPosition === ASPx.Position.Right && this.position === ASPx.Position.Left && this.isHorizontal(errorCellPosition))
   tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
  if(captionPosition === ASPx.Position.Top && this.position === ASPx.Position.Bottom && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.appendChild(helpTextRow);
  }
  if(captionPosition === ASPx.Position.Bottom && this.position === ASPx.Position.Top && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
  }
  if(captionPosition === ASPx.Position.Top && this.position === ASPx.Position.Top && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.insertBefore(helpTextRow, captionCell.parentNode.nextSibling);
  }
  if(captionPosition === ASPx.Position.Bottom && this.position === ASPx.Position.Bottom && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.insertBefore(helpTextRow, captionCell.parentNode);
  }
  if(captionPosition === ASPx.Position.Right && this.position === ASPx.Position.Top && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   helpTextRow.appendChild(this.createEmptyCell());
   errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
  }
  if(this.position === ASPx.Position.Bottom) {
   if(captionPosition === ASPx.Position.Right && errorCellPosition === ASPx.Position.Top || captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Right) {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell());
    errorTableBody.appendChild(helpTextRow);
   }
  }
  if(captionPosition === ASPx.Position.Left && this.position === ASPx.Position.Top && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(this.createEmptyCell());
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
  }
  if(captionPosition === ASPx.Position.Left && this.position === ASPx.Position.Bottom && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(this.createEmptyCell());
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.appendChild(helpTextRow);
  }
  if(this.position === ASPx.Position.Right) {
   if(captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Left || captionPosition === ASPx.Position.Left && errorCellPosition === ASPx.Position.Top
    || captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Right) {
    tableRows[1].appendChild(helpTextCell);
    tableRows[0].appendChild(this.createEmptyCell());
   }
   if(captionPosition === ASPx.Position.Left && errorCellPosition === ASPx.Position.Bottom || captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Left) {
    tableRows[0].appendChild(helpTextCell);
    tableRows[1].appendChild(this.createEmptyCell());
   }
  }
  if(this.position === ASPx.Position.Left) {
   if(captionPosition === ASPx.Position.Right && errorCellPosition === ASPx.Position.Top || captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Right
    || captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Left) {
    tableRows[1].insertBefore(helpTextCell, tableRows[1].childNodes[0]);
    tableRows[0].insertBefore(this.createEmptyCell(), tableRows[0].childNodes[0]);
   }
   if(captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Top || captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Bottom) {
    tableRows[1].insertBefore(helpTextCell, tableRows[1].childNodes[0]);
    tableRows[0].insertBefore(this.createEmptyCell(errorCellPosition === ASPx.Position.Top), tableRows[0].childNodes[0]);
    tableRows[2].insertBefore(this.createEmptyCell(errorCellPosition !== ASPx.Position.Top), tableRows[2].childNodes[0]);
   }
   if(captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Top) {
    tableRows[2].insertBefore(helpTextCell, tableRows[2].childNodes[0]);
    tableRows[0].insertBefore(this.createEmptyCell(false), tableRows[0].childNodes[0]);
    tableRows[1].insertBefore(this.createEmptyCell(true), tableRows[1].childNodes[0]);
   }
   if(captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Bottom) {
    tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
    tableRows[1].insertBefore(this.createEmptyCell(true), tableRows[1].childNodes[0]);
    tableRows[2].insertBefore(this.createEmptyCell(false), tableRows[2].childNodes[0]);
   }
   if(captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Left || captionPosition === ASPx.Position.Right && errorCellPosition === ASPx.Position.Bottom
    || captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Right) {
    tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
    tableRows[1].insertBefore(this.createEmptyCell(), tableRows[1].childNodes[0]);
   }
   if(captionPosition === ASPx.Position.Left && this.isVertical(errorCellPosition)) {
    captionCell.parentNode.insertBefore(helpTextCell, captionCell.nextSibling);
    var emptyCellParentRow = errorCellPosition === ASPx.Position.Top ? tableRows[0] : tableRows[1];
    var helpTextCellIndex = this.getCellIndex(helpTextCell.parentNode, helpTextCell);
    emptyCellParentRow.insertBefore(this.createEmptyCell(), this.getCellByIndex(emptyCellParentRow, helpTextCellIndex));
   }
  }
  if(this.position === ASPx.Position.Right) {
   if(captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Top || captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Bottom) {
    tableRows[1].appendChild(helpTextCell);
    tableRows[0].appendChild(this.createEmptyCell(errorCellPosition === ASPx.Position.Top));
    tableRows[2].appendChild(this.createEmptyCell(errorCellPosition !== ASPx.Position.Top));
   }
   if(captionPosition === ASPx.Position.Top && errorCellPosition === ASPx.Position.Top) {
    tableRows[2].appendChild(helpTextCell);
    tableRows[0].appendChild(this.createEmptyCell(false));
    tableRows[1].appendChild(this.createEmptyCell(true));
   }
   if(captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Bottom) {
    tableRows[0].appendChild(helpTextCell);
    tableRows[1].appendChild(this.createEmptyCell(true));
    tableRows[2].appendChild(this.createEmptyCell(false));
   }
   if(captionPosition === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Right) {
    tableRows[0].appendChild(helpTextCell);
    tableRows[1].appendChild(this.createEmptyCell());
   }
   if(captionPosition === ASPx.Position.Right && this.isVertical(errorCellPosition)) {
    captionCell.parentNode.insertBefore(helpTextCell, captionCell);
    var emptyCellParentRow = errorCellPosition === ASPx.Position.Top ? tableRows[0] : tableRows[1];
    var helpTextCellIndex = this.getCellIndex(helpTextCell.parentNode, helpTextCell);
    emptyCellParentRow.insertBefore(this.createEmptyCell(), this.getCellByIndex(emptyCellParentRow, helpTextCellIndex));
   }
  }
  if(captionPosition === ASPx.Position.Top && this.position === ASPx.Position.Top && this.isHorizontal(errorCellPosition)) {
   if(errorCellPosition === ASPx.Position.Left) {
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(helpTextCell);
   }
   else {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell());
   }
   errorTableBody.insertBefore(helpTextRow, captionCell.parentNode.nextSibling);
  }
  if(captionPosition === ASPx.Position.Bottom && this.position === ASPx.Position.Top && this.isHorizontal(errorCellPosition)) {
   if(errorCellPosition === ASPx.Position.Left) {
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(helpTextCell);
   }
   else {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell());
   }
   errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
  }
  if(captionPosition === ASPx.Position.Bottom && this.position === ASPx.Position.Bottom && this.isHorizontal(errorCellPosition)) {
   if(errorCellPosition === ASPx.Position.Left) {
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(helpTextCell);
   }
   else {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell());
   }
   errorTableBody.insertBefore(helpTextRow, captionCell.parentNode);
  }
  if(captionPosition === ASPx.Position.Top && this.position === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Left) {
   helpTextRow.appendChild(this.createEmptyCell(true));
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.appendChild(helpTextRow);
  }
  if(captionPosition === ASPx.Position.Right && this.position === ASPx.Position.Bottom && errorCellPosition === ASPx.Position.Bottom) {
   helpTextRow.appendChild(helpTextCell);
   helpTextRow.appendChild(this.createEmptyCell());
   errorTableBody.appendChild(helpTextRow);
  }
  if(this.position === ASPx.Position.Bottom) {
   if(captionPosition === ASPx.Position.Left && errorCellPosition === ASPx.Position.Right || captionPosition === ASPx.Position.Right && errorCellPosition === ASPx.Position.Left) {
    helpTextRow.appendChild(this.createEmptyCell(errorCellPosition !== ASPx.Position.Right));
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell(errorCellPosition === ASPx.Position.Right));
    errorTableBody.appendChild(helpTextRow);
   }
   if(captionPosition === ASPx.Position.Left && errorCellPosition === ASPx.Position.Left) {
    helpTextRow.appendChild(this.createEmptyCell(false));
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(helpTextCell);
    errorTableBody.appendChild(helpTextRow);
   }
   if(captionPosition === ASPx.Position.Right && errorCellPosition === ASPx.Position.Right) {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(this.createEmptyCell(false));
    errorTableBody.appendChild(helpTextRow);
   }
  }
  if(this.position === ASPx.Position.Top) {
   if(captionPosition === ASPx.Position.Left && errorCellPosition === ASPx.Position.Right || captionPosition === ASPx.Position.Right && errorCellPosition === ASPx.Position.Left) {
    helpTextRow.appendChild(this.createEmptyCell(errorCellPosition !== ASPx.Position.Right));
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell(errorCellPosition === ASPx.Position.Right));
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   }
   if(captionPosition === ASPx.Position.Left && errorCellPosition === ASPx.Position.Left) {
    helpTextRow.appendChild(this.createEmptyCell(false));
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(helpTextCell);
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   }
   if(captionPosition === ASPx.Position.Right && errorCellPosition === ASPx.Position.Right) {
    helpTextRow.appendChild(helpTextCell);
    helpTextRow.appendChild(this.createEmptyCell(true));
    helpTextRow.appendChild(this.createEmptyCell(false));
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   }
  }
 },
 addHelpTextCellToExternalTableWithErrorCell: function (errorCell, helpTextCell, errorTableBody, tableRows) {
  var errorCellPosition = this.editor.errorCellPosition;
  var helpTextRow = document.createElement("TR");
  if(this.position === ASPx.Position.Left && this.isHorizontal(errorCellPosition))
   tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
  if(this.position === ASPx.Position.Right && this.isHorizontal(errorCellPosition))
   tableRows[0].appendChild(helpTextCell);
  if(this.position === ASPx.Position.Top && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
  }
  if(this.position === ASPx.Position.Bottom && this.isVertical(errorCellPosition)) {
   helpTextRow.appendChild(helpTextCell);
   errorTableBody.appendChild(helpTextRow);
  }
  if(errorCellPosition === ASPx.Position.Left && this.isVertical(this.position)) {
   helpTextRow.appendChild(this.createEmptyCell(true));
   helpTextRow.appendChild(helpTextCell);
   if(this.position === ASPx.Position.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   else
    errorTableBody.appendChild(helpTextRow);
  }
  if(errorCellPosition === ASPx.Position.Right && this.isVertical(this.position)) {
   helpTextRow.appendChild(helpTextCell);
   helpTextRow.appendChild(this.createEmptyCell(true));
   if(this.position === ASPx.Position.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   else
    errorTableBody.appendChild(helpTextRow);
  }
  if(this.position === ASPx.Position.Left && this.isVertical(errorCellPosition)) {
   var helpTextParentRowIndex = errorCellPosition === ASPx.Position.Top ? 1 : 0;
   var emptyCellRowIndex = helpTextParentRowIndex === 0 ? 1 : 0;
   tableRows[helpTextParentRowIndex].insertBefore(helpTextCell, tableRows[helpTextParentRowIndex].childNodes[0]);
   tableRows[emptyCellRowIndex].insertBefore(this.createEmptyCell(true), tableRows[emptyCellRowIndex].childNodes[0]);
  }
  if(this.position === ASPx.Position.Right && this.isVertical(errorCellPosition)) {
   var helpTextParentRowIndex = errorCellPosition === ASPx.Position.Top ? 1 : 0;
   var emptyCellRowIndex = helpTextParentRowIndex === 0 ? 1 : 0;
   tableRows[helpTextParentRowIndex].appendChild(helpTextCell);
   tableRows[emptyCellRowIndex].appendChild(this.createEmptyCell(true));
  }
 },
 addHelpTextCellToExternalTableWithCaption: function (captionCell, helpTextCell, errorTableBody, tableRows) {
  var captionPosition = this.editor.captionPosition;
  var helpTextRow = document.createElement("TR");
  if(captionPosition === ASPx.Position.Left && this.isVertical(this.position)) {
   helpTextRow.appendChild(this.createEmptyCell());
   helpTextRow.appendChild(helpTextCell);
   if(this.position === ASPx.Position.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   else
    errorTableBody.appendChild(helpTextRow);
  }
  if(this.position === ASPx.Position.Left && this.isVertical(captionPosition)) {
   var helpTextParentRowIndex = captionPosition === ASPx.Position.Top ? 1 : 0;
   var emptyCellParentRowIndex = helpTextParentRowIndex === 0 ? 1 : 0;
   tableRows[helpTextParentRowIndex].insertBefore(helpTextCell, tableRows[helpTextParentRowIndex].childNodes[0]);
   tableRows[emptyCellParentRowIndex].insertBefore(this.createEmptyCell(), tableRows[emptyCellParentRowIndex].childNodes[0]);
  }
  if(this.position === ASPx.Position.Right && this.isVertical(captionPosition)) {
   var helpTextParentRowIndex = captionPosition === ASPx.Position.Top ? 1 : 0;
   var emptyCellParentRowIndex = helpTextParentRowIndex === 0 ? 1 : 0;
   tableRows[helpTextParentRowIndex].appendChild(helpTextCell);
   tableRows[emptyCellParentRowIndex].appendChild(this.createEmptyCell());
  }
  if(captionPosition === ASPx.Position.Right && this.isVertical(this.position)) {
   helpTextRow.appendChild(helpTextCell);
   helpTextRow.appendChild(this.createEmptyCell());
   if(this.position === ASPx.Position.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   else
    errorTableBody.appendChild(helpTextRow);
  }
  if(this.isVertical(captionPosition) && this.isVertical(this.position)) {
   helpTextRow.appendChild(helpTextCell);
   if(captionPosition === ASPx.Position.Top && this.position === ASPx.Position.Top)
    errorTableBody.insertBefore(helpTextRow, captionCell.parentNode.nextSibling);
   if(captionPosition === ASPx.Position.Top && this.position === ASPx.Position.Bottom)
    errorTableBody.appendChild(helpTextRow);
   if(captionPosition === ASPx.Position.Bottom && this.position === ASPx.Position.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   if(captionPosition === ASPx.Position.Bottom && this.position === ASPx.Position.Bottom)
    errorTableBody.insertBefore(helpTextRow, captionCell.parentNode);
  }
  if(captionPosition === ASPx.Position.Left && this.position === ASPx.Position.Left)
   captionCell.parentNode.insertBefore(helpTextCell, captionCell.nextSibling);
  if(captionPosition === ASPx.Position.Right && this.position === ASPx.Position.Right)
   captionCell.parentNode.insertBefore(helpTextCell, captionCell);
  if(captionPosition === ASPx.Position.Left && this.position === ASPx.Position.Right)
   tableRows[0].appendChild(helpTextCell);
  if(captionPosition === ASPx.Position.Right && this.position === ASPx.Position.Left)
   tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
 },
 addHelpTextCellToExternalTableWithEditorOnly: function (helpTextCell, errorTableBody, tableRows) {
  if(this.isHorizontal(this.position)) {
   if(this.position === ASPx.Position.Left)
    tableRows[0].insertBefore(helpTextCell, tableRows[0].childNodes[0]);
   else
    tableRows[0].appendChild(helpTextCell);
  }
  else {
   var helpTextRow = document.createElement("TR");
   helpTextRow.appendChild(helpTextCell);
   if(this.position === ASPx.Position.Top)
    errorTableBody.insertBefore(helpTextRow, errorTableBody.childNodes[0]);
   else
    errorTableBody.appendChild(helpTextRow);
  }
 },
 addHelpTextCellToExternalTable: function (errorTable, helpTextCell) {
  var errorTableBody = ASPx.GetNodeByTagName(errorTable, "TBODY", 0);
  var tableRows = this.getRows(errorTableBody);
  var captionCell = this.editor.GetCaptionCell();
  var errorCell = this.editor.GetErrorCell();
  if(captionCell) {
   if(errorCell)
    this.addHelpTextCellToExternalTableWithTwoCells(captionCell, errorCell, helpTextCell, errorTableBody, tableRows);
   else
    this.addHelpTextCellToExternalTableWithCaption(captionCell, helpTextCell, errorTableBody, tableRows);
  }
  else if(errorCell)
   this.addHelpTextCellToExternalTableWithErrorCell(errorCell, helpTextCell, errorTableBody, tableRows);
  else
   this.addHelpTextCellToExternalTableWithEditorOnly(helpTextCell, errorTableBody, tableRows);
 },
 createExternalTable: function () {
  var externalTable = document.createElement("TABLE");
  externalTable.id = this.editor.name + ASPx.EditElementSuffix.ExternalTable;
  externalTable.cellPadding = 0;
  externalTable.cellSpacing = 0;
  this.applyExternalTableStyle(externalTable);
  var editorWidth = this.editorMainElement.style.width;
  if(ASPx.IsPercentageSize(editorWidth)) {
   externalTable.style.width = editorWidth;
   this.editorMainElement.style.width = "100%";
   this.editor.width = "100%";
  }
  var externalTableBody = document.createElement("TBODY");
  var externalTableRow = document.createElement("TR");
  var externalTableCell = document.createElement("TD");
  externalTable.appendChild(externalTableBody);
  externalTableBody.appendChild(externalTableRow);
  externalTableRow.appendChild(externalTableCell);
  this.editorMainElement.parentNode.appendChild(externalTable);
  ASPx.ChangeElementContainer(this.editorMainElement, externalTableCell, true);
  if(this.editor.accessibilityCompliant)
   ASPx.Attr.SetAttribute(externalTable, "role", "presentation");
  return externalTable;
 },
 applyExternalTableStyle: function (externalTable) {
  var externalTableStyle = this.editor.externalTableStyle;
  if(externalTableStyle.length > 0) {
   this.applyStyleToElement(externalTable, externalTableStyle);
  }
 },
 applyStyleToElement: function(element, style) {
  element.className = style[0];
  if(style[1]) {
   var styleSheet = ASPx.GetCurrentStyleSheet();
   element.className += " " + ASPx.CreateImportantStyleRule(styleSheet, style[1]);
  }
 },
 createInlineHelpTextElement: function () {
  var helpTextElement = document.createElement("TD");
  var externalTable = this.editor.GetExternalTable();
  if(!externalTable)
   externalTable = this.createExternalTable();
  this.addHelpTextCellToExternalTable(externalTable, helpTextElement);
  return helpTextElement;
 },
 createPopupHelpTextElement: function () {
  var helpTextElement = document.createElement("DIV");
  ASPx.InsertElementAfter(helpTextElement, this.editor.GetMainElement());
  ASPx.AnimationHelper.setOpacity(helpTextElement, 0);
  ASPx.SetElementDisplay(helpTextElement, false);
  return helpTextElement;
 },
 createHelpTextElement: function () {
  return this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Popup ?
   this.createPopupHelpTextElement() : this.createInlineHelpTextElement();
 },
 prepareHelpTextElement: function (helpTextStyle, helpText) {
  this.helpTextElement.id = this.getHelpTextElementId();
  this.applyStyleToElement(this.helpTextElement, helpTextStyle);
  ASPx.SetInnerHtml(this.helpTextElement, "<SPAN>" + helpText + "</SPAN>");
  if(this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Popup)
   this.updatePopupHelpTextPosition();
  else {
   var isVerticalOrientation = this.position === ASPx.Position.Top || this.position === ASPx.Position.Bottom;
   var orientationClassName = isVerticalOrientation ? ASPxClientTextEditHelpTextConsts.VERTICAL_ORIENTATION_CLASS_NAME :
    ASPxClientTextEditHelpTextConsts.HORIZONTAL_ORIENTATION_CLASS_NAME;
   this.helpTextElement.className += " " + orientationClassName;
   this.setInlineHelpTextElementAlign();
   ASPx.SetElementDisplay(this.helpTextElement, this.editor.clientVisible);
  }
 },
 getHelpTextElementId: function() {
  return this.editor.name + ASPx.TEHelpTextElementSuffix;
 },
 setInlineHelpTextElementAlign: function() {
  var hAlignValue = "", vAlignValue = "";
  switch(this.hAlign) {
   case ASPxClientTextEditHelpTextHAlign.Left: hAlignValue = "left"; break;
   case ASPxClientTextEditHelpTextHAlign.Right: hAlignValue = "right"; break;
   case ASPxClientTextEditHelpTextHAlign.Center: hAlignValue = "center"; break;
  }
  switch(this.vAlign) {
   case ASPxClientTextEditHelpTextVAlign.Top: vAlignValue = "top"; break;
   case ASPxClientTextEditHelpTextVAlign.Bottom: vAlignValue = "bottom"; break;
   case ASPxClientTextEditHelpTextVAlign.Middle: vAlignValue = "middle"; break;
  }
  this.helpTextElement.style.textAlign = hAlignValue;
  this.helpTextElement.style.verticalAlign = vAlignValue;
 },
 getHelpTextMargins: function() {
  if(this.margins)
   return this.margins;
  var result = this.defaultMargins;
  if(this.position === ASPx.Position.Top || this.position === ASPx.Position.Bottom)
   result.Left = result.Right = 0;
  else
   result.Top = result.Bottom = 0;
  return result;
 },
 updatePopupHelpTextPosition: function (editorMainElement) {
  var editorWidth = this.editorMainElement.offsetWidth;
  var editorHeight = this.editorMainElement.offsetHeight;
  var helpTextWidth = this.helpTextElement.offsetWidth;
  var helpTextHeight = this.helpTextElement.offsetHeight;
  var editorX = ASPx.GetAbsoluteX(this.editorMainElement);
  var editorY = ASPx.GetAbsoluteY(this.editorMainElement);
  var helpTextX = 0, helpTextY = 0;
  var margins = this.getHelpTextMargins();
  if(this.position === ASPx.Position.Top || this.position === ASPx.Position.Bottom) {
   if(this.position === ASPx.Position.Top)
    helpTextY = editorY - margins.Bottom - helpTextHeight;
   else if(this.position === ASPx.Position.Bottom)
    helpTextY = editorY + editorHeight + margins.Top;
   if(this.hAlign === ASPxClientTextEditHelpTextHAlign.Left)
    helpTextX = editorX + margins.Left;
   else if(this.hAlign === ASPxClientTextEditHelpTextHAlign.Right)
    helpTextX = editorX + editorWidth - helpTextWidth - margins.Right;
   else if(this.hAlign === ASPxClientTextEditHelpTextHAlign.Center) {
    var editorCenterX = editorX + editorWidth / 2;
    var helpTextWidthWithMargins = helpTextWidth + margins.Left + margins.Right;
    helpTextX = editorCenterX - helpTextWidthWithMargins / 2 + margins.Left;
   }
  } else {
   if(this.position === ASPx.Position.Left)
    helpTextX = editorX - margins.Right - helpTextWidth;
   else if(this.position === ASPx.Position.Right)
    helpTextX = editorX + editorWidth + margins.Left;
   if(this.vAlign === ASPxClientTextEditHelpTextVAlign.Top)
    helpTextY = editorY + margins.Top;
   else if(this.vAlign === ASPxClientTextEditHelpTextVAlign.Bottom)
    helpTextY = editorY + editorHeight - helpTextHeight - margins.Bottom;
   else if(this.vAlign === ASPxClientTextEditHelpTextVAlign.Middle) {
    var editorCenterY = editorY + editorHeight / 2;
    var helpTextHeightWithMargins = helpTextHeight + margins.Top + margins.Bottom;
    helpTextY = editorCenterY - helpTextHeightWithMargins / 2 + margins.Top;
   }
  }
  helpTextX = helpTextX < 0 ? 0 : helpTextX;
  helpTextY = helpTextY < 0 ? 0 : helpTextY;
  ASPx.SetAbsoluteX(this.helpTextElement, helpTextX);
  ASPx.SetAbsoluteY(this.helpTextElement, helpTextY);
 },
 setHelpTextZIndex: function (hide) {
  var newZIndex = 41998 * (hide ? -1 : 1);
  if(this.helpTextElement.style.zIndex != newZIndex)
   this.helpTextElement.style.zIndex = newZIndex;
 },
 hide: function () {
  if(this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Inline) {
   ASPx.SetElementDisplay(this.helpTextElement, false);
  }
  else
   this.hidePopupHelpText();
 },
 hidePopupHelpText: function() {
  var onHidePopupHelpTextComplete = function () {
   this.setHelpTextZIndex(true);
   ASPx.SetElementDisplay(this.helpTextElement, false);
  }.aspxBind(this);
  if(this.animationEnabled)
   ASPx.AnimationHelper.fadeOut(this.helpTextElement, onHidePopupHelpTextComplete);
  else {
   ASPx.AnimationHelper.setOpacity(this.helpTextElement, 0);
   onHidePopupHelpTextComplete();
  }
 },
 show: function () {
  if(this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Inline) {
   ASPx.SetElementDisplay(this.helpTextElement, true);
  }
  else
   this.showPopupHelpText();
 },
 showPopupHelpText: function () {
  ASPx.SetElementDisplay(this.helpTextElement, true);
  this.updatePopupHelpTextPosition();
  if(this.animationEnabled)
   ASPx.AnimationHelper.fadeIn(this.helpTextElement);
  else
   ASPx.AnimationHelper.setOpacity(this.helpTextElement, 1);
  this.setHelpTextZIndex(false);
 }
});
var ASPxOutOfRangeWarningManager = ASPx.CreateClass(null, {
 constructor: function (editor, minValue, maxValue, defaultMinValue, defaultMaxValue, outOfRangeWarningElementPosition, valueFormatter) {
  this.editor = editor;
  this.outOfRangeWarningElementPosition = outOfRangeWarningElementPosition;
  this.minValue = minValue;
  this.maxValue = maxValue;
  this.defaultMinValue = defaultMinValue;
  this.defaultMaxValue = defaultMaxValue;
  this.minMaxValueFormatter = valueFormatter;
  this.animationDuration = 150;
  this.CreateOutOfRangeWarningElement();
 },
 SetMinValue: function (minValue) {
  this.minValue = minValue;
  this.UpdateOutOfRangeWarningElementText();
 },
 SetMaxValue: function (maxValue) {
  this.maxValue = maxValue;
  this.UpdateOutOfRangeWarningElementText();
 },
 CreateOutOfRangeWarningElement: function () {
  this.outOfRangeWarningElement = document.createElement("DIV");
  this.outOfRangeWarningElement.id = this.editor.name + "OutOfRWarn";
  ASPx.InsertElementAfter(this.outOfRangeWarningElement, this.editor.GetOutOfRangeWarningElementPrevSibling());
  ASPx.AnimationHelper.setOpacity(this.outOfRangeWarningElement, 0);
  this.outOfRangeWarningElement.className = this.editor.outOfRangeWarningClassName;
  this.UpdateOutOfRangeWarningElementText();
 },
 IsValueInRange: function (value) {
  return (!this.IsMinValueExists() || value >= this.minValue)
   && (!this.IsMaxValueExists() || value <= this.maxValue);
 },
 IsMinValueExists: function() {
  return ASPx.IsExists(this.minValue) && !isNaN(this.minValue) && this.minValue !== this.defaultMinValue;
 },
 IsMaxValueExists: function () {
  return ASPx.IsExists(this.maxValue) && !isNaN(this.maxValue) && this.maxValue !== this.defaultMaxValue;
 },
 GetFormattedTextByValue: function(value) {
  if (this.minMaxValueFormatter)
   return this.minMaxValueFormatter.Format(value);
  return value;
 },
 GetWarningText: function() {
  var textTemplate = arguments[0];
  var valueTexts = [];
  for (var i = 1; i < arguments.length; i++) {
   var valueText = this.GetFormattedTextByValue(arguments[i]);
   valueTexts.push(valueText);
  }
  return ASPx.Formatter.Format(textTemplate, valueTexts);
 },
 UpdateOutOfRangeWarningElementText: function () {
  var text = "";
  if (this.IsMinValueExists() && this.IsMaxValueExists())
   text = this.GetWarningText(this.editor.outOfRangeWarningMessages[0], this.minValue, this.maxValue);
  if (this.IsMinValueExists() && !this.IsMaxValueExists())
   text = this.GetWarningText(this.editor.outOfRangeWarningMessages[1], this.minValue);
  if (!this.IsMinValueExists() && this.IsMaxValueExists())
   text = this.GetWarningText(this.editor.outOfRangeWarningMessages[2], this.maxValue);
  ASPx.SetInnerHtml(this.outOfRangeWarningElement, "<LABEL>" + text + "</LABEL>");
 },
 UpdateOutOfRangeWarningElementVisibility: function (currentValue) {
  var isValidValue = currentValue == null || this.IsValueInRange(currentValue);
  if (!isValidValue && !this.outOfRangeWarningElementShown)
   this.ShowOutOfRangeWarningElement();
  if (isValidValue && this.outOfRangeWarningElementShown)
   this.HideOutOfRangeWarningElement();
 },
 GetOutOfRangeWarningElementCoordinates: function() {
  var editorMainElement = this.editor.GetMainElement();
  var editorWidth = editorMainElement.offsetWidth;
  var editorHeight = editorMainElement.offsetHeight;
  var editorX = ASPx.GetAbsoluteX(editorMainElement);
  var editorY = ASPx.GetAbsoluteY(editorMainElement);
  var outOfRangeWarningElementX = this.outOfRangeWarningElementPosition === ASPx.Position.Right ? editorX + editorWidth : editorX;
  var outOfRangeWarningElementY = this.outOfRangeWarningElementPosition === ASPx.Position.Right ? editorY : editorY + editorHeight;
  outOfRangeWarningElementX = outOfRangeWarningElementX < 0 ? 0 : outOfRangeWarningElementX;
  outOfRangeWarningElementY = outOfRangeWarningElementY < 0 ? 0 : outOfRangeWarningElementY;
  return {
   x: outOfRangeWarningElementX,
   y: outOfRangeWarningElementY
  };
 },
 ShowOutOfRangeWarningElement: function () {
  this.outOfRangeWarningElement.style.display = "inline";
  var outOfRangeWarningElementCoordinates = this.GetOutOfRangeWarningElementCoordinates();
  ASPx.SetAbsoluteX(this.outOfRangeWarningElement, outOfRangeWarningElementCoordinates.x);
  ASPx.SetAbsoluteY(this.outOfRangeWarningElement, outOfRangeWarningElementCoordinates.y);
  ASPx.AnimationHelper.fadeIn(this.outOfRangeWarningElement, null, this.animationDuration);
  this.ScrollToWarningElementIfRequired(outOfRangeWarningElementCoordinates);
  this.outOfRangeWarningElementShown = true;
 },
 HideOutOfRangeWarningElement: function () {
  ASPx.AnimationHelper.fadeOut(this.outOfRangeWarningElement, function () {
   ASPx.SetElementDisplay(this.outOfRangeWarningElement, false);
  }.aspxBind(this), this.animationDuration);
  this.outOfRangeWarningElementShown = false;
 },
 ScrollToWarningElementIfRequired: function (outOfRangeWarningElementCoordinates) {
  if(this.outOfRangeWarningElementPosition === ASPx.Position.Right) {
   var warnElementRightPos = outOfRangeWarningElementCoordinates.x
    + ASPx.PxToInt(ASPx.GetCurrentStyle(this.outOfRangeWarningElement).marginLeft)
    + this.outOfRangeWarningElement.offsetWidth;
   if(warnElementRightPos > ASPx.GetDocumentClientWidth() + ASPx.GetDocumentScrollLeft())
    ASPx.SetDocumentScrollLeft(warnElementRightPos - ASPx.GetDocumentClientWidth());
  }
  if(this.outOfRangeWarningElementPosition === ASPx.Position.Bottom) {
   var warnElementBottomPos = outOfRangeWarningElementCoordinates.y
    + ASPx.PxToInt(ASPx.GetCurrentStyle(this.outOfRangeWarningElement).marginTop)
    + this.outOfRangeWarningElement.offsetHeight;
   if(warnElementBottomPos > ASPx.GetDocumentClientHeight() + ASPx.GetDocumentScrollTop())
    ASPx.SetDocumentScrollTop(warnElementBottomPos - ASPx.GetDocumentClientHeight());
  }
 }
});
ASPx.MMMouseOut = function(name, evt) {
 var edit = ASPx.GetControlCollection().Get(name);
 if(edit != null) edit.OnMouseOut(evt);
};
ASPx.MMMouseOver = function(name, evt) {
 var edit = ASPx.GetControlCollection().Get(name);
 if(edit != null) edit.OnMouseOver(evt);
};
ASPx.MaskHintTimerProc = function() {
 var focusedEditor = ASPx.GetFocusedEditor();
 if(focusedEditor != null && ASPx.IsFunction(focusedEditor.MaskHintTimerProc))
  focusedEditor.MaskHintTimerProc();
};
ASPx.ETextChanged = function(name) {
 var edit = ASPx.GetControlCollection().Get(name);
 if(edit != null) edit.OnTextChanged();
};
ASPx.BEClick = function(name,number){
 var edit = ASPx.GetControlCollection().Get(name);
 if(edit != null) edit.OnButtonClick(number);
};
ASPx.BEClear = function(name, evt) {
 var edit = ASPx.GetControlCollection().Get(name);
 if(edit && (evt.button === 0 || ASPx.Browser.TouchUI))
  edit.onClearButtonClick();
};
ASPx.SetFocusToTextEditWithDelay = function(name) {
 window.setTimeout(function() {
  var edit = ASPx.GetControlCollection().Get(name);
  if(!edit)
   return;
  if(ASPx.Browser.IE)
   edit.SetCaretPosition(0);
  else
   edit.SetFocus();
 }, 500);
};
window.ASPxClientTextEdit = ASPxClientTextEdit;
window.ASPxClientTextBoxBase = ASPxClientTextBoxBase;
window.ASPxClientTextBox = ASPxClientTextBox;
window.ASPxClientMemo = ASPxClientMemo;
window.ASPxClientButtonEditBase = ASPxClientButtonEditBase;
window.ASPxClientButtonEdit = ASPxClientButtonEdit;
window.ASPxClientButtonEditClickEventArgs = ASPxClientButtonEditClickEventArgs;
})();

(function(dx) {
 var BootstrapClientTextBox = ASPx.CreateClass(ASPxClientTextBox, {
  constructor: function(name) {
   this.constructor.prototype.constructor.call(this, name);
   this.feedbackRenderHelper = new ASPx.BootstrapEditFeedbackRenderHelper(this);
  },
  InlineInitialize: function() {
   this.RequireStyleDecoration();
   ASPxClientTextBox.prototype.InlineInitialize.call(this);
   this.feedbackRenderHelper.updateInputRightPadding();
   if(ASPx.Browser.TouchUI && !this.GetIsValid())
    this.UpdateErrorText();
  },
  InitializeEvents: function() {
   ASPxClientTextBox.prototype.InitializeEvents.call(this);
   var inputElement = this.GetInputElement();
   if(inputElement) {
    ASPx.Evt.AttachEventToElement(inputElement, "focus", function() { ASPx.EGotFocus(this.name); }.bind(this));
    ASPx.Evt.AttachEventToElement(inputElement, "blur", function() { ASPx.ELostFocus(this.name); }.bind(this));
    ASPx.Evt.AttachEventToElement(inputElement, "change", function() { ASPx.EValueChanged(this.name); }.bind(this));
   }
   if(ASPx.Browser.MacOSMobilePlatform) {
    var errorImage = this.GetErrorImage();
    if(errorImage)
     ASPx.Evt.AttachEventToElement(errorImage, "touchstart", function() { });
   }
  },
  RaiseStandardOnChange: function() {
   var element = this.GetInputElement();
   if(element)
    ASPx.Evt.DispatchEvent(element, "change", true, false);
   else
    ASPxClientTextBox.prototype.RaiseStandardOnChange.call(this);
  },
  ChangeEnabledStateItems: function(enabled) { },
  GetControlCell: function() {
   return this.GetInputContainerElement();
  },
  EnsureControlCellStylesLoaded: function() { },
  ClearControlCellStyles: function() { },
  RestoreControlCellStyles: function() { },
  GetElementRequiredForErrorFrame: function() {
   return this.GetInputContainerElement();
  },
  GetErrorImage: function() {
   return this.feedbackRenderHelper.getErrorImage();
  },
  UpdateErrorText: function() {
   this.feedbackRenderHelper.updateErrorText();
  },
  ChangeErrorCellVisibility: function(visible, useVisibilityAttribute) {
   this.feedbackRenderHelper.setErrorControlVisible(visible);
  },
  PopulateStyleDecorationPostfixes: function() {
   this.styleDecoration.AddPostfix("");
   this.styleDecoration.AddPostfix("div > .form-control");
  },
  CreateStyleDecoration: function() {
   return new ASPx.BootstrapEditorStyleDecoration(this);
  },
  GetInputContainerElement: function() {
   var inputElement = this.GetInputElement();
   return inputElement ? inputElement.parentNode : null;
  },
  GetCaptionCell: function() {
   return ASPx.CacheHelper.GetCachedElement(this, "captionElement",
    function() {
     var mainElement = this.GetMainElement();
     return mainElement && mainElement.querySelector(".dxbs-edit-caption");
    }
   );
  },
  getCaptionTextNode: function() {
   return ASPx.GetNormalizedTextNode(this.GetCaptionCell());
  },
  getCaptionRelatedCellCount: function() {
   return undefined;
  },
  helpTextInitialize: function() {
   if(this.helpText)
    this.helpTextObj = new ASPx.BootstrapTextEditHelpText(this, this.helpText, this.enableHelpTextPopupAnimation, this.hasPopupHelpText());
  },
  GetHelpTextElementPrevSibling: function() {
   return this.feedbackRenderHelper.getErrorTextElement() || this.GetInputContainerElement();
  },
  getFocusedNullTextElementClassName: function() {
   return "dxbs-null-text text-muted" + (this.cssClasses.nt ? " " + this.cssClasses.nt : "");
  }
 });
 dx.BootstrapClientTextBox = BootstrapClientTextBox;
 var BootstrapClientMemo = ASPx.CreateClass(ASPxClientMemo, {
  constructor: function(name) {
   this.constructor.prototype.constructor.call(this, name);
   this.feedbackRenderHelper = new ASPx.BootstrapEditFeedbackRenderHelper(this);
  },
  InlineInitialize: function() {
   this.RequireStyleDecoration();
   ASPxClientMemo.prototype.InlineInitialize.call(this);
   this.feedbackRenderHelper.updateInputRightPadding();
   if(ASPx.Browser.TouchUI && !this.GetIsValid())
    this.UpdateErrorText();
  },
  InitializeEvents: function() {
   ASPxClientMemo.prototype.InitializeEvents.call(this);
   var inputElement = this.GetInputElement();
   if(inputElement) {
    if(this.maxLengthRestricted) {
     ASPx.Evt.AttachEventToElement(inputElement, "mouseout", function(evt) { ASPx.MMMouseOut(this.name, evt); }.bind(this));
     ASPx.Evt.AttachEventToElement(inputElement, "mouseover", function(evt) { ASPx.MMMouseOver(this.name, evt); }.bind(this));
    }
    ASPx.Evt.AttachEventToElement(inputElement, "focus", function() { ASPx.EGotFocus(this.name); }.bind(this));
    ASPx.Evt.AttachEventToElement(inputElement, "blur", function() { ASPx.ELostFocus(this.name); }.bind(this));
    ASPx.Evt.AttachEventToElement(inputElement, "change", function () { ASPx.EValueChanged(this.name); }.bind(this));
   }
   if(ASPx.Browser.MacOSMobilePlatform) {
    var errorImage = this.GetErrorImage();
    if(errorImage)
     ASPx.Evt.AttachEventToElement(errorImage, "touchstart", function() { });
   }
  },
  RaiseStandardOnChange: function() {
   var element = this.GetInputElement();
   if(element)
    ASPx.Evt.DispatchEvent(element, "change", true, false);
   else
    ASPxClientMemo.prototype.RaiseStandardOnChange.call(this);
  },
  ChangeEnabledStateItems: function (enabled) { },
  IsAdjustmentRequired: function() {
   return false;
  },
  AdjustControl: function() { },
  GetControlCell: function() {
   return this.GetInputContainerElement();
  },
  EnsureControlCellStylesLoaded: function() { },
  ClearControlCellStyles: function() { },
  RestoreControlCellStyles: function() { },
  GetElementRequiredForErrorFrame: function() {
   return this.GetInputContainerElement();
  },
  GetErrorImage: function() {
   return this.feedbackRenderHelper.getErrorImage();
  },
  UpdateErrorText: function() {
   this.feedbackRenderHelper.updateErrorText();
  },
  ChangeErrorCellVisibility: function(visible, useVisibilityAttribute) {
   this.feedbackRenderHelper.setErrorControlVisible(visible);
  },
  PopulateStyleDecorationPostfixes: function() {
   this.styleDecoration.AddPostfix("");
   this.styleDecoration.AddPostfix("div > .form-control");
  },
  CreateStyleDecoration: function() {
   return new ASPx.BootstrapEditorStyleDecoration(this);
  },
  GetInputContainerElement: function() {
   var inputElement = this.GetInputElement();
   return inputElement ? inputElement.parentNode : null;
  },
  GetCaptionCell: function() {
   return ASPx.CacheHelper.GetCachedElement(this, "captionElement",
    function() {
     var mainElement = this.GetMainElement();
     return mainElement && mainElement.querySelector(".dxbs-edit-caption");
    }
   );
  },
  getCaptionTextNode: function() {
   return ASPx.GetNormalizedTextNode(this.GetCaptionCell());
  },
  getCaptionRelatedCellCount: function() {
   return undefined;
  },
  helpTextInitialize: function() {
   if(this.helpText)
    this.helpTextObj = new ASPx.BootstrapTextEditHelpText(this, this.helpText, this.enableHelpTextPopupAnimation, this.hasPopupHelpText());
  },
  GetHelpTextElementPrevSibling: function() {
   return this.feedbackRenderHelper.getErrorTextElement() || this.GetInputContainerElement();
  },
  getFocusedNullTextElementClassName: function() {
   return "dxbs-null-text text-muted" + (this.cssClasses.nt ? " " + this.cssClasses.nt : "");
  }
 });
 dx.BootstrapClientMemo = BootstrapClientMemo;
 var BootstrapClientButtonEdit = ASPx.CreateClass(ASPxClientButtonEdit, {
  constructor: function(name) {
   this.constructor.prototype.constructor.call(this, name);
   this.feedbackRenderHelper = new ASPx.BootstrapEditFeedbackRenderHelper(this);
  },
  InlineInitialize: function() {
   this.RequireStyleDecoration();
   ASPxClientButtonEdit.prototype.InlineInitialize.call(this);
   this.feedbackRenderHelper.updateInputRightPadding();
   if(ASPx.Browser.TouchUI && !this.GetIsValid())
    this.UpdateErrorText();
  },
  InitializeEvents: function() {
   ASPxClientButtonEdit.prototype.InitializeEvents.call(this);
   var inputElement = this.GetInputElement();
   if(inputElement) {
    ASPx.Evt.AttachEventToElement(inputElement, "focus", function() { ASPx.EGotFocus(this.name); }.bind(this));
    ASPx.Evt.AttachEventToElement(inputElement, "blur", function() { ASPx.ELostFocus(this.name); }.bind(this));
    ASPx.Evt.AttachEventToElement(inputElement, "change", function() { ASPx.EValueChanged(this.name); }.bind(this));
   }
   var buttonElements = this.GetCustomButtonCollection();
   for(var i = 0; i < buttonElements.length; i++)
    this.InitializeButtonEvents(buttonElements[i], i);
   var clearButton = this.GetClearButton();
   if(clearButton) {
    ASPx.Evt.AttachEventToElement(clearButton, "mousedown", function(evt) { ASPx.BEClear(this.name, evt); }.bind(this));
    if(this.IsAccessibleButton(clearButton))
     this.InitAccessibilityAnchorEvents(clearButton);
   }
   if(ASPx.Browser.MacOSMobilePlatform) {
    var errorImage = this.GetErrorImage();
    if(errorImage)
     ASPx.Evt.AttachEventToElement(errorImage, "touchstart", function() { });
   }
  },
  InitializeButtonEvents: function(element, number){
   ASPx.Evt.AttachEventToElement(element, "click", function() {
    this.OnButtonClick(number);
   }.bind(this));
   if(this.IsAccessibleButton(element))
    this.InitAccessibilityAnchorEvents(element);
  },
  SetButtonVisible: function(number, value) {
   if(number == -100) {
    this.feedbackRenderHelper.setClearButtonVisible(value);
    return;
   }
   var inputGroupButton = ASPxClientButtonEdit.prototype.GetButton.call(this, number);
   if(inputGroupButton)
    ASPx.SetElementDisplay(inputGroupButton, value);
   ASPxClientButtonEdit.prototype.SetButtonVisible.call(this, number, value);
  },
  ChangeEnabledAttributes: function(enabled) {
   ASPxClientButtonEdit.prototype.ChangeEnabledAttributes.call(this, enabled);
   var clearButton = this.GetClearButton();
   if(clearButton)
    this.ChangeButtonEnabledAttributes(clearButton, this.GetChangeButtonEnabledAttributesMethod(enabled));
  },
  GetChangeButtonEnabledAttributesMethod: function(enabled) {
   return enabled ? ASPx.RemoveClassNameFromElement : ASPx.AddClassNameToElement;
  },
  ChangeButtonEnabledAttributes: function(element, method) {
   var buttonContainer = this.GetButtonContainerElement(element);
   if(buttonContainer && ASPx.ElementContainsCssClass(buttonContainer, "disabled"))
    return;
   method(element, "disabled");
  },
  NeedEnsureClearButtonVisibilityOnKeyDown: function() {
   return this.IsAccessibleButton(this.GetClearButton());
  },
  GetAccessibilityFocusedButtonClassName: function() {
   return "";
  },
  IsAccessibleButton: function(button) {
   return !!button && (button.tagName.toUpperCase() == "BUTTON" || ASPx.Attr.GetAttribute(button, "role") == "button");
  },
  GetButtonByAccessibilityAnchor: function(anchorElement) {
   return anchorElement;
  },
  GetAccessibilityAnchor: function(buttonElement) {
   return buttonElement;
  },
  SetAccessibilityAnchorEnabled: function(buttonElement, enabled) {
   if(buttonElement.tagName.toUpperCase() == "BUTTON")
    return;
   ASPxClientButtonEdit.prototype.SetAccessibilityAnchorEnabled.call(this, buttonElement, enabled);
  },
  EmulateButtonMouseEvent: function(sourceElement) {
   ASPx.Evt.EmulateMouseClick(sourceElement);
  },
  RaiseStandardOnChange: function() {
   var element = this.GetInputElement();
   if(element)
    ASPx.Evt.DispatchEvent(element, "change", true, false);
   else
    ASPxClientButtonEdit.prototype.RaiseStandardOnChange.call(this);
  },
  ChangeEnabledStateItems: function(enabled) { },
  GetControlCell: function() {
   return this.GetInputContainerElement();
  },
  EnsureControlCellStylesLoaded: function() { },
  ClearControlCellStyles: function() { },
  RestoreControlCellStyles: function() { },
  GetElementRequiredForErrorFrame: function() {
   return this.GetInputContainerElement();
  },
  GetErrorImage: function() {
   return this.feedbackRenderHelper.getErrorImage();
  },
  UpdateErrorText: function() {
   this.feedbackRenderHelper.updateErrorText();
  },
  ChangeErrorCellVisibility: function(visible, useVisibilityAttribute) {
   this.feedbackRenderHelper.setErrorControlVisible(visible);
  },
  PopulateStyleDecorationPostfixes: function() {
   var inputContainerSelector = this.GetInputContainerSelector();
   this.styleDecoration.AddPostfix("");
   this.styleDecoration.AddPostfix(inputContainerSelector);
   this.styleDecoration.AddPostfix(inputContainerSelector + " .form-control");
  },
  GetInputContainerSelector: function() {
   var selector = "";
   if(!!this.GetInputGroupElement())
    selector = ".input-group";
   else {
    var invalidSelectors = ASPx.Data.GetDistinctArray(["." + ASPx.BootstrapCssSelectors.InputGroupAppendButton,
     "." + ASPx.BootstrapCssSelectors.InputGroupPrependButton]);
    selector = "div";
    for(var i = 0; i < invalidSelectors.length; i++)
     selector += ":not(" + invalidSelectors[i] + ")";
   }
   return selector;
  },
  CreateStyleDecoration: function() {
   return new ASPx.BootstrapEditorStyleDecoration(this);
  },
  GetHideContentCssClassName: function() {
   return ASPx.BootstrapCssSelectors.Hidden;
  },
  GetHoverElementToShowClearButton: function() {
   return this.GetInputGroupElement() || this.GetInputContainerElement();
  },
  GetInputGroupElement: function() {
   var mainElement = this.GetMainElement();
   return mainElement && mainElement.querySelector(".input-group");
  },
  GetInputContainerElement: function() {
   var inputElement = this.GetInputElement();
   return inputElement ? inputElement.parentNode : null;
  },
  GetButtonContainerElement: function(buttonElement) {
   return ASPx.GetParent(buttonElement, function(element) {
    return ASPx.ElementContainsCssClass(element, ASPx.BootstrapCssSelectors.InputGroupAppendButton) ||
     ASPx.ElementContainsCssClass(element, ASPx.BootstrapCssSelectors.InputGroupPrependButton);
   });
  },
  GetCaptionCell: function() {
   return ASPx.CacheHelper.GetCachedElement(this, "captionElement",
    function() {
     var mainElement = this.GetMainElement();
     return mainElement && mainElement.querySelector(".dxbs-edit-caption");
    }
   );
  },
  getCaptionTextNode: function () {
   return ASPx.GetNormalizedTextNode(this.GetCaptionCell());
  },
  getCaptionRelatedCellCount: function () {
   return undefined;
  },
  GetClearButton: function() {
   return this.feedbackRenderHelper.getClearButton();
  },
  GetButton: function (number) {
   var inputGroupButton = ASPxClientButtonEdit.prototype.GetButton.call(this, number);
   return number == -100 ? this.GetClearButton() :
    inputGroupButton && (inputGroupButton.querySelector(".dxbs-edit-btn") || inputGroupButton.querySelector(".btn") || inputGroupButton);
  },
  helpTextInitialize: function() {
   if(this.helpText)
    this.helpTextObj = new ASPx.BootstrapTextEditHelpText(this, this.helpText, this.enableHelpTextPopupAnimation, this.hasPopupHelpText());
  },
  GetHelpTextElementPrevSibling: function() {
   var errorTextElement = this.feedbackRenderHelper.getErrorTextElement();
   return errorTextElement || this.GetInputGroupElement() || this.GetInputContainerElement();
  },
  getFocusedNullTextElementClassName: function() {
   return "dxbs-null-text text-muted" + (this.cssClasses.nt ? " " + this.cssClasses.nt : "");
  }
 });
 dx.BootstrapClientButtonEdit = BootstrapClientButtonEdit;
})(dx || (dx = {}));
},1);
